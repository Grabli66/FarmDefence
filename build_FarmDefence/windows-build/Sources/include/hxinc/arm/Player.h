// Generated by Haxe 4.0.0-preview.4+6e012c1
#ifndef INCLUDED_arm_Player
#define INCLUDED_arm_Player

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_iron_Trait
#include <hxinc/iron/Trait.h>
#endif
HX_DECLARE_CLASS1(arm,Player)
HX_DECLARE_CLASS1(iron,Trait)
HX_DECLARE_CLASS2(iron,math,Vec3)
HX_DECLARE_CLASS2(iron,object,Animation)
HX_DECLARE_CLASS2(iron,object,BoneAnimation)
HX_DECLARE_CLASS2(iron,object,Object)

namespace arm{


class HXCPP_CLASS_ATTRIBUTES Player_obj : public  ::iron::Trait_obj
{
	public:
		typedef  ::iron::Trait_obj super;
		typedef Player_obj OBJ_;
		Player_obj();

	public:
		enum { _hx_ClassId = 0x13d1dc9d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="arm.Player")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"arm.Player"); }
		static hx::ObjectPtr< Player_obj > __new();
		static hx::ObjectPtr< Player_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Player_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Player",81,5f,4d,6c); }

		 ::iron::math::Vec3 direction;
		Float speed;
		 ::iron::object::BoneAnimation animation;
		 ::iron::object::Object armature;
		 ::iron::object::BoneAnimation findAnimation( ::iron::object::Object o);
		::Dynamic findAnimation_dyn();

		void init();
		::Dynamic init_dyn();

};

} // end namespace arm

#endif /* INCLUDED_arm_Player */ 
