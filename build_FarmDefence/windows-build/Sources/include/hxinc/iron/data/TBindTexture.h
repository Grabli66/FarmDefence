// Generated by Haxe 4.0.0-preview.4+6e012c1
#ifndef INCLUDED_iron_data_TBindTexture
#define INCLUDED_iron_data_TBindTexture

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_f07502ecfab5f793_173_new)
HX_DECLARE_CLASS2(iron,data,TBindTexture)

namespace iron{
namespace data{


class HXCPP_CLASS_ATTRIBUTES TBindTexture_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TBindTexture_obj OBJ_;
		TBindTexture_obj();

	public:
		enum { _hx_ClassId = 0x0d905780 };

		void __construct(::String name,::String file,::String format, ::Dynamic generate_mipmaps,::Array< ::String > mipmaps,::String u_addressing,::String v_addressing,::String min_filter,::String mag_filter,::String mipmap_filter,::String source);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.data.TBindTexture")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.data.TBindTexture"); }

		hx::ObjectPtr< TBindTexture_obj > __new(::String name,::String file,::String format, ::Dynamic generate_mipmaps,::Array< ::String > mipmaps,::String u_addressing,::String v_addressing,::String min_filter,::String mag_filter,::String mipmap_filter,::String source) {
			hx::ObjectPtr< TBindTexture_obj > __this = new TBindTexture_obj();
			__this->__construct(name,file,format,generate_mipmaps,mipmaps,u_addressing,v_addressing,min_filter,mag_filter,mipmap_filter,source);
			return __this;
		}

		static hx::ObjectPtr< TBindTexture_obj > __alloc(hx::Ctx *_hx_ctx,::String name,::String file,::String format, ::Dynamic generate_mipmaps,::Array< ::String > mipmaps,::String u_addressing,::String v_addressing,::String min_filter,::String mag_filter,::String mipmap_filter,::String source) {
			TBindTexture_obj *__this = (TBindTexture_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TBindTexture_obj), true, "iron.data.TBindTexture"));
			*(void **)__this = TBindTexture_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_f07502ecfab5f793_173_new)
HXDLIN( 173)		( ( ::iron::data::TBindTexture)(__this) )->name = name;
HXDLIN( 173)		( ( ::iron::data::TBindTexture)(__this) )->file = file;
HXDLIN( 173)		( ( ::iron::data::TBindTexture)(__this) )->format = format;
HXDLIN( 173)		( ( ::iron::data::TBindTexture)(__this) )->generate_mipmaps = generate_mipmaps;
HXDLIN( 173)		( ( ::iron::data::TBindTexture)(__this) )->mipmaps = mipmaps;
HXDLIN( 173)		( ( ::iron::data::TBindTexture)(__this) )->u_addressing = u_addressing;
HXDLIN( 173)		( ( ::iron::data::TBindTexture)(__this) )->v_addressing = v_addressing;
HXDLIN( 173)		( ( ::iron::data::TBindTexture)(__this) )->min_filter = min_filter;
HXDLIN( 173)		( ( ::iron::data::TBindTexture)(__this) )->mag_filter = mag_filter;
HXDLIN( 173)		( ( ::iron::data::TBindTexture)(__this) )->mipmap_filter = mipmap_filter;
HXDLIN( 173)		( ( ::iron::data::TBindTexture)(__this) )->source = source;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TBindTexture_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TBindTexture",aa,6c,54,12); }

		::String name;
		::String file;
		::String format;
		 ::Dynamic generate_mipmaps;
		::Array< ::String > mipmaps;
		::String u_addressing;
		::String v_addressing;
		::String min_filter;
		::String mag_filter;
		::String mipmap_filter;
		::String source;
};

} // end namespace iron
} // end namespace data

#endif /* INCLUDED_iron_data_TBindTexture */ 
