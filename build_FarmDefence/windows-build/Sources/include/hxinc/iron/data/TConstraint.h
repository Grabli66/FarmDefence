// Generated by Haxe 4.0.0-preview.4+6e012c1
#ifndef INCLUDED_iron_data_TConstraint
#define INCLUDED_iron_data_TConstraint

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_bcd8764ed2c7fa25_492_new)
HX_DECLARE_CLASS2(iron,data,TConstraint)

namespace iron{
namespace data{


class HXCPP_CLASS_ATTRIBUTES TConstraint_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TConstraint_obj OBJ_;
		TConstraint_obj();

	public:
		enum { _hx_ClassId = 0x0b7e6b9f };

		void __construct(::String name,::String type,::String bone,::String target, ::Dynamic use_x, ::Dynamic use_y, ::Dynamic use_z, ::Dynamic invert_x, ::Dynamic invert_y, ::Dynamic invert_z, ::Dynamic use_offset, ::Dynamic influence);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.data.TConstraint")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.data.TConstraint"); }

		hx::ObjectPtr< TConstraint_obj > __new(::String name,::String type,::String bone,::String target, ::Dynamic use_x, ::Dynamic use_y, ::Dynamic use_z, ::Dynamic invert_x, ::Dynamic invert_y, ::Dynamic invert_z, ::Dynamic use_offset, ::Dynamic influence) {
			hx::ObjectPtr< TConstraint_obj > __this = new TConstraint_obj();
			__this->__construct(name,type,bone,target,use_x,use_y,use_z,invert_x,invert_y,invert_z,use_offset,influence);
			return __this;
		}

		static hx::ObjectPtr< TConstraint_obj > __alloc(hx::Ctx *_hx_ctx,::String name,::String type,::String bone,::String target, ::Dynamic use_x, ::Dynamic use_y, ::Dynamic use_z, ::Dynamic invert_x, ::Dynamic invert_y, ::Dynamic invert_z, ::Dynamic use_offset, ::Dynamic influence) {
			TConstraint_obj *__this = (TConstraint_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TConstraint_obj), true, "iron.data.TConstraint"));
			*(void **)__this = TConstraint_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_bcd8764ed2c7fa25_492_new)
HXDLIN( 492)		( ( ::iron::data::TConstraint)(__this) )->name = name;
HXDLIN( 492)		( ( ::iron::data::TConstraint)(__this) )->type = type;
HXDLIN( 492)		( ( ::iron::data::TConstraint)(__this) )->bone = bone;
HXDLIN( 492)		( ( ::iron::data::TConstraint)(__this) )->target = target;
HXDLIN( 492)		( ( ::iron::data::TConstraint)(__this) )->use_x = use_x;
HXDLIN( 492)		( ( ::iron::data::TConstraint)(__this) )->use_y = use_y;
HXDLIN( 492)		( ( ::iron::data::TConstraint)(__this) )->use_z = use_z;
HXDLIN( 492)		( ( ::iron::data::TConstraint)(__this) )->invert_x = invert_x;
HXDLIN( 492)		( ( ::iron::data::TConstraint)(__this) )->invert_y = invert_y;
HXDLIN( 492)		( ( ::iron::data::TConstraint)(__this) )->invert_z = invert_z;
HXDLIN( 492)		( ( ::iron::data::TConstraint)(__this) )->use_offset = use_offset;
HXDLIN( 492)		( ( ::iron::data::TConstraint)(__this) )->influence = influence;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TConstraint_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TConstraint",d1,35,78,9a); }

		::String name;
		::String type;
		::String bone;
		::String target;
		 ::Dynamic use_x;
		 ::Dynamic use_y;
		 ::Dynamic use_z;
		 ::Dynamic invert_x;
		 ::Dynamic invert_y;
		 ::Dynamic invert_z;
		 ::Dynamic use_offset;
		 ::Dynamic influence;
};

} // end namespace iron
} // end namespace data

#endif /* INCLUDED_iron_data_TConstraint */ 
