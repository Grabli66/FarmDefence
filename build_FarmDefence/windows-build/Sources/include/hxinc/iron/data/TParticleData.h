// Generated by Haxe 4.0.0-preview.4+6e012c1
#ifndef INCLUDED_iron_data_TParticleData
#define INCLUDED_iron_data_TParticleData

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(iron,data,TParticleData)
HX_DECLARE_CLASS2(kha,arrays,Float32ArrayPrivate)

namespace iron{
namespace data{


class HXCPP_CLASS_ATTRIBUTES TParticleData_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TParticleData_obj OBJ_;
		TParticleData_obj();

	public:
		enum { _hx_ClassId = 0x60be666e };

		void __construct(::String name,int type,bool loop,bool render_emitter,int count,float frame_start,float frame_end,float lifetime,float lifetime_random,int emit_from, ::kha::arrays::Float32ArrayPrivate object_align_factor,float factor_random,int physics_type,float particle_size,float size_random,float mass,::String dupli_object,float weight_gravity);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.data.TParticleData")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.data.TParticleData"); }
		static hx::ObjectPtr< TParticleData_obj > __new(::String name,int type,bool loop,bool render_emitter,int count,float frame_start,float frame_end,float lifetime,float lifetime_random,int emit_from, ::kha::arrays::Float32ArrayPrivate object_align_factor,float factor_random,int physics_type,float particle_size,float size_random,float mass,::String dupli_object,float weight_gravity);
		static hx::ObjectPtr< TParticleData_obj > __alloc(hx::Ctx *_hx_ctx,::String name,int type,bool loop,bool render_emitter,int count,float frame_start,float frame_end,float lifetime,float lifetime_random,int emit_from, ::kha::arrays::Float32ArrayPrivate object_align_factor,float factor_random,int physics_type,float particle_size,float size_random,float mass,::String dupli_object,float weight_gravity);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TParticleData_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TParticleData",04,d6,8c,87); }

		::String name;
		int type;
		bool loop;
		bool render_emitter;
		int count;
		float frame_start;
		float frame_end;
		float lifetime;
		float lifetime_random;
		int emit_from;
		 ::kha::arrays::Float32ArrayPrivate object_align_factor;
		float factor_random;
		int physics_type;
		float particle_size;
		float size_random;
		float mass;
		::String dupli_object;
		float weight_gravity;
};

} // end namespace iron
} // end namespace data

#endif /* INCLUDED_iron_data_TParticleData */ 
