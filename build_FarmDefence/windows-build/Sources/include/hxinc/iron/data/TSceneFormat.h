// Generated by Haxe 4.0.0-preview.4+6e012c1
#ifndef INCLUDED_iron_data_TSceneFormat
#define INCLUDED_iron_data_TSceneFormat

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(iron,data,TCameraData)
HX_DECLARE_CLASS2(iron,data,TGroup)
HX_DECLARE_CLASS2(iron,data,TLightData)
HX_DECLARE_CLASS2(iron,data,TMaterialData)
HX_DECLARE_CLASS2(iron,data,TMeshData)
HX_DECLARE_CLASS2(iron,data,TObj)
HX_DECLARE_CLASS2(iron,data,TParticleData)
HX_DECLARE_CLASS2(iron,data,TSceneFormat)
HX_DECLARE_CLASS2(iron,data,TShaderData)
HX_DECLARE_CLASS2(iron,data,TSpeakerData)
HX_DECLARE_CLASS2(iron,data,TTilesheetData)
HX_DECLARE_CLASS2(iron,data,TTrait)
HX_DECLARE_CLASS2(iron,data,TWorldData)
HX_DECLARE_CLASS2(kha,arrays,Float32ArrayPrivate)

namespace iron{
namespace data{


class HXCPP_CLASS_ATTRIBUTES TSceneFormat_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TSceneFormat_obj OBJ_;
		TSceneFormat_obj();

	public:
		enum { _hx_ClassId = 0x19fb5885 };

		void __construct(::String name,::Array< ::Dynamic> mesh_datas,::Array< ::Dynamic> light_datas,::Array< ::Dynamic> camera_datas,::String camera_ref,::Array< ::Dynamic> material_datas,::Array< ::Dynamic> particle_datas,::Array< ::Dynamic> shader_datas,::Array< ::Dynamic> speaker_datas,::Array< ::Dynamic> world_datas,::String world_ref,::Array< ::Dynamic> tilesheet_datas,::Array< ::Dynamic> objects,::Array< ::Dynamic> groups, ::kha::arrays::Float32ArrayPrivate gravity,::Array< ::Dynamic> traits,::Array< ::String > embedded_datas, ::Dynamic frame_time, ::kha::arrays::Float32ArrayPrivate irradiance);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.data.TSceneFormat")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.data.TSceneFormat"); }
		static hx::ObjectPtr< TSceneFormat_obj > __new(::String name,::Array< ::Dynamic> mesh_datas,::Array< ::Dynamic> light_datas,::Array< ::Dynamic> camera_datas,::String camera_ref,::Array< ::Dynamic> material_datas,::Array< ::Dynamic> particle_datas,::Array< ::Dynamic> shader_datas,::Array< ::Dynamic> speaker_datas,::Array< ::Dynamic> world_datas,::String world_ref,::Array< ::Dynamic> tilesheet_datas,::Array< ::Dynamic> objects,::Array< ::Dynamic> groups, ::kha::arrays::Float32ArrayPrivate gravity,::Array< ::Dynamic> traits,::Array< ::String > embedded_datas, ::Dynamic frame_time, ::kha::arrays::Float32ArrayPrivate irradiance);
		static hx::ObjectPtr< TSceneFormat_obj > __alloc(hx::Ctx *_hx_ctx,::String name,::Array< ::Dynamic> mesh_datas,::Array< ::Dynamic> light_datas,::Array< ::Dynamic> camera_datas,::String camera_ref,::Array< ::Dynamic> material_datas,::Array< ::Dynamic> particle_datas,::Array< ::Dynamic> shader_datas,::Array< ::Dynamic> speaker_datas,::Array< ::Dynamic> world_datas,::String world_ref,::Array< ::Dynamic> tilesheet_datas,::Array< ::Dynamic> objects,::Array< ::Dynamic> groups, ::kha::arrays::Float32ArrayPrivate gravity,::Array< ::Dynamic> traits,::Array< ::String > embedded_datas, ::Dynamic frame_time, ::kha::arrays::Float32ArrayPrivate irradiance);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TSceneFormat_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TSceneFormat",af,6d,bf,1e); }

		::String name;
		::Array< ::Dynamic> mesh_datas;
		::Array< ::Dynamic> light_datas;
		::Array< ::Dynamic> camera_datas;
		::String camera_ref;
		::Array< ::Dynamic> material_datas;
		::Array< ::Dynamic> particle_datas;
		::Array< ::Dynamic> shader_datas;
		::Array< ::Dynamic> speaker_datas;
		::Array< ::Dynamic> world_datas;
		::String world_ref;
		::Array< ::Dynamic> tilesheet_datas;
		::Array< ::Dynamic> objects;
		::Array< ::Dynamic> groups;
		 ::kha::arrays::Float32ArrayPrivate gravity;
		::Array< ::Dynamic> traits;
		::Array< ::String > embedded_datas;
		 ::Dynamic frame_time;
		 ::kha::arrays::Float32ArrayPrivate irradiance;
};

} // end namespace iron
} // end namespace data

#endif /* INCLUDED_iron_data_TSceneFormat */ 
