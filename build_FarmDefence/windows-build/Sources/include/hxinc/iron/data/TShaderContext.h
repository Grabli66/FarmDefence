// Generated by Haxe 4.0.0-preview.4+6e012c1
#ifndef INCLUDED_iron_data_TShaderContext
#define INCLUDED_iron_data_TShaderContext

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(iron,data,TShaderConstant)
HX_DECLARE_CLASS2(iron,data,TShaderContext)
HX_DECLARE_CLASS2(iron,data,TTextureUnit)
HX_DECLARE_CLASS2(iron,data,TVertexData)

namespace iron{
namespace data{


class HXCPP_CLASS_ATTRIBUTES TShaderContext_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TShaderContext_obj OBJ_;
		TShaderContext_obj();

	public:
		enum { _hx_ClassId = 0x1b0ec210 };

		void __construct(::String name,bool depth_write,::String compare_mode,::String cull_mode,::Array< ::Dynamic> vertex_structure,::String vertex_shader,::String fragment_shader,::String geometry_shader,::String tesscontrol_shader,::String tesseval_shader,::Array< ::Dynamic> constants,::Array< ::Dynamic> texture_units,::String blend_source,::String blend_destination,::String blend_operation,::String alpha_blend_source,::String alpha_blend_destination,::String alpha_blend_operation,::String stencil_mode,::String stencil_pass,::String stencil_fail, ::Dynamic stencil_reference_value, ::Dynamic stencil_read_mask, ::Dynamic stencil_write_mask, ::Dynamic color_write_red, ::Dynamic color_write_green, ::Dynamic color_write_blue, ::Dynamic color_write_alpha, ::Dynamic conservative_raster, ::Dynamic shader_from_source);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.data.TShaderContext")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.data.TShaderContext"); }
		static hx::ObjectPtr< TShaderContext_obj > __new(::String name,bool depth_write,::String compare_mode,::String cull_mode,::Array< ::Dynamic> vertex_structure,::String vertex_shader,::String fragment_shader,::String geometry_shader,::String tesscontrol_shader,::String tesseval_shader,::Array< ::Dynamic> constants,::Array< ::Dynamic> texture_units,::String blend_source,::String blend_destination,::String blend_operation,::String alpha_blend_source,::String alpha_blend_destination,::String alpha_blend_operation,::String stencil_mode,::String stencil_pass,::String stencil_fail, ::Dynamic stencil_reference_value, ::Dynamic stencil_read_mask, ::Dynamic stencil_write_mask, ::Dynamic color_write_red, ::Dynamic color_write_green, ::Dynamic color_write_blue, ::Dynamic color_write_alpha, ::Dynamic conservative_raster, ::Dynamic shader_from_source);
		static hx::ObjectPtr< TShaderContext_obj > __alloc(hx::Ctx *_hx_ctx,::String name,bool depth_write,::String compare_mode,::String cull_mode,::Array< ::Dynamic> vertex_structure,::String vertex_shader,::String fragment_shader,::String geometry_shader,::String tesscontrol_shader,::String tesseval_shader,::Array< ::Dynamic> constants,::Array< ::Dynamic> texture_units,::String blend_source,::String blend_destination,::String blend_operation,::String alpha_blend_source,::String alpha_blend_destination,::String alpha_blend_operation,::String stencil_mode,::String stencil_pass,::String stencil_fail, ::Dynamic stencil_reference_value, ::Dynamic stencil_read_mask, ::Dynamic stencil_write_mask, ::Dynamic color_write_red, ::Dynamic color_write_green, ::Dynamic color_write_blue, ::Dynamic color_write_alpha, ::Dynamic conservative_raster, ::Dynamic shader_from_source);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TShaderContext_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TShaderContext",56,08,e8,bd); }

		::String name;
		bool depth_write;
		::String compare_mode;
		::String cull_mode;
		::Array< ::Dynamic> vertex_structure;
		::String vertex_shader;
		::String fragment_shader;
		::String geometry_shader;
		::String tesscontrol_shader;
		::String tesseval_shader;
		::Array< ::Dynamic> constants;
		::Array< ::Dynamic> texture_units;
		::String blend_source;
		::String blend_destination;
		::String blend_operation;
		::String alpha_blend_source;
		::String alpha_blend_destination;
		::String alpha_blend_operation;
		::String stencil_mode;
		::String stencil_pass;
		::String stencil_fail;
		 ::Dynamic stencil_reference_value;
		 ::Dynamic stencil_read_mask;
		 ::Dynamic stencil_write_mask;
		 ::Dynamic color_write_red;
		 ::Dynamic color_write_green;
		 ::Dynamic color_write_blue;
		 ::Dynamic color_write_alpha;
		 ::Dynamic conservative_raster;
		 ::Dynamic shader_from_source;
};

} // end namespace iron
} // end namespace data

#endif /* INCLUDED_iron_data_TShaderContext */ 
