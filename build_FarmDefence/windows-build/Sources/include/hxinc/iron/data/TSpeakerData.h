// Generated by Haxe 4.0.0-preview.4+6e012c1
#ifndef INCLUDED_iron_data_TSpeakerData
#define INCLUDED_iron_data_TSpeakerData

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_fbde65f84ded5571_272_new)
HX_DECLARE_CLASS2(iron,data,TSpeakerData)

namespace iron{
namespace data{


class HXCPP_CLASS_ATTRIBUTES TSpeakerData_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TSpeakerData_obj OBJ_;
		TSpeakerData_obj();

	public:
		enum { _hx_ClassId = 0x69b47147 };

		void __construct(::String name,::String sound,bool muted,bool loop,bool stream,float volume,float pitch,float attenuation,bool play_on_start);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.data.TSpeakerData")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.data.TSpeakerData"); }

		hx::ObjectPtr< TSpeakerData_obj > __new(::String name,::String sound,bool muted,bool loop,bool stream,float volume,float pitch,float attenuation,bool play_on_start) {
			hx::ObjectPtr< TSpeakerData_obj > __this = new TSpeakerData_obj();
			__this->__construct(name,sound,muted,loop,stream,volume,pitch,attenuation,play_on_start);
			return __this;
		}

		static hx::ObjectPtr< TSpeakerData_obj > __alloc(hx::Ctx *_hx_ctx,::String name,::String sound,bool muted,bool loop,bool stream,float volume,float pitch,float attenuation,bool play_on_start) {
			TSpeakerData_obj *__this = (TSpeakerData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TSpeakerData_obj), true, "iron.data.TSpeakerData"));
			*(void **)__this = TSpeakerData_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_fbde65f84ded5571_272_new)
HXDLIN( 272)		( ( ::iron::data::TSpeakerData)(__this) )->name = name;
HXDLIN( 272)		( ( ::iron::data::TSpeakerData)(__this) )->sound = sound;
HXDLIN( 272)		( ( ::iron::data::TSpeakerData)(__this) )->muted = muted;
HXDLIN( 272)		( ( ::iron::data::TSpeakerData)(__this) )->loop = loop;
HXDLIN( 272)		( ( ::iron::data::TSpeakerData)(__this) )->stream = stream;
HXDLIN( 272)		( ( ::iron::data::TSpeakerData)(__this) )->volume = volume;
HXDLIN( 272)		( ( ::iron::data::TSpeakerData)(__this) )->pitch = pitch;
HXDLIN( 272)		( ( ::iron::data::TSpeakerData)(__this) )->attenuation = attenuation;
HXDLIN( 272)		( ( ::iron::data::TSpeakerData)(__this) )->play_on_start = play_on_start;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TSpeakerData_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TSpeakerData",d5,92,4b,f5); }

		::String name;
		::String sound;
		bool muted;
		bool loop;
		bool stream;
		float volume;
		float pitch;
		float attenuation;
		bool play_on_start;
};

} // end namespace iron
} // end namespace data

#endif /* INCLUDED_iron_data_TSpeakerData */ 
