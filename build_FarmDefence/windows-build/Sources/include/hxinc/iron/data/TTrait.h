// Generated by Haxe 4.0.0-preview.4+6e012c1
#ifndef INCLUDED_iron_data_TTrait
#define INCLUDED_iron_data_TTrait

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_57308ccad6603211_511_new)
HX_DECLARE_CLASS2(iron,data,TTrait)

namespace iron{
namespace data{


class HXCPP_CLASS_ATTRIBUTES TTrait_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TTrait_obj OBJ_;
		TTrait_obj();

	public:
		enum { _hx_ClassId = 0x5948efcc };

		void __construct(::String type,::String class_name,::Array< ::String > parameters,::Array< ::String > props);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.data.TTrait")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.data.TTrait"); }

		hx::ObjectPtr< TTrait_obj > __new(::String type,::String class_name,::Array< ::String > parameters,::Array< ::String > props) {
			hx::ObjectPtr< TTrait_obj > __this = new TTrait_obj();
			__this->__construct(type,class_name,parameters,props);
			return __this;
		}

		static hx::ObjectPtr< TTrait_obj > __alloc(hx::Ctx *_hx_ctx,::String type,::String class_name,::Array< ::String > parameters,::Array< ::String > props) {
			TTrait_obj *__this = (TTrait_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TTrait_obj), true, "iron.data.TTrait"));
			*(void **)__this = TTrait_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_57308ccad6603211_511_new)
HXDLIN( 511)		( ( ::iron::data::TTrait)(__this) )->type = type;
HXDLIN( 511)		( ( ::iron::data::TTrait)(__this) )->class_name = class_name;
HXDLIN( 511)		( ( ::iron::data::TTrait)(__this) )->parameters = parameters;
HXDLIN( 511)		( ( ::iron::data::TTrait)(__this) )->props = props;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TTrait_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TTrait",da,52,47,3f); }

		::String type;
		::String class_name;
		::Array< ::String > parameters;
		::Array< ::String > props;
};

} // end namespace iron
} // end namespace data

#endif /* INCLUDED_iron_data_TTrait */ 
