// Generated by Haxe 4.0.0-preview.4+6e012c1
#ifndef INCLUDED_iron_math_Quat
#define INCLUDED_iron_math_Quat

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(iron,math,Mat4)
HX_DECLARE_CLASS2(iron,math,Quat)
HX_DECLARE_CLASS2(iron,math,Vec4)

namespace iron{
namespace math{


class HXCPP_CLASS_ATTRIBUTES Quat_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Quat_obj OBJ_;
		Quat_obj();

	public:
		enum { _hx_ClassId = 0x1441ffeb };

		void __construct(hx::Null< float >  __o_x,hx::Null< float >  __o_y,hx::Null< float >  __o_z,hx::Null< float >  __o_w);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="iron.math.Quat")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"iron.math.Quat"); }
		static hx::ObjectPtr< Quat_obj > __new(hx::Null< float >  __o_x,hx::Null< float >  __o_y,hx::Null< float >  __o_z,hx::Null< float >  __o_w);
		static hx::ObjectPtr< Quat_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< float >  __o_x,hx::Null< float >  __o_y,hx::Null< float >  __o_z,hx::Null< float >  __o_w);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Quat_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Quat",f7,64,e3,35); }

		static void __boot();
		static  ::iron::math::Vec4 helpVec0;
		static  ::iron::math::Vec4 helpVec1;
		static  ::iron::math::Vec4 helpVec2;
		static  ::iron::math::Mat4 helpMat;
		static  ::iron::math::Vec4 xAxis;
		static  ::iron::math::Vec4 yAxis;
		float x;
		float y;
		float z;
		float w;
		 ::iron::math::Quat set(float x,float y,float z,float w);
		::Dynamic set_dyn();

		 ::iron::math::Quat fromAxisAngle( ::iron::math::Vec4 axis,float angle);
		::Dynamic fromAxisAngle_dyn();

		float toAxisAngle( ::iron::math::Vec4 axis);
		::Dynamic toAxisAngle_dyn();

		 ::iron::math::Quat fromMat( ::iron::math::Mat4 m);
		::Dynamic fromMat_dyn();

		 ::iron::math::Quat fromRotationMat( ::iron::math::Mat4 m);
		::Dynamic fromRotationMat_dyn();

		 ::iron::math::Quat mult( ::iron::math::Quat q);
		::Dynamic mult_dyn();

		 ::iron::math::Quat multquats( ::iron::math::Quat q1, ::iron::math::Quat q2);
		::Dynamic multquats_dyn();

		 ::iron::math::Quat normalize();
		::Dynamic normalize_dyn();

		 ::iron::math::Quat setFrom( ::iron::math::Quat q);
		::Dynamic setFrom_dyn();

		 ::iron::math::Vec4 getEuler();
		::Dynamic getEuler_dyn();

		 ::iron::math::Quat fromEuler(float x,float y,float z);
		::Dynamic fromEuler_dyn();

		 ::iron::math::Quat lerp( ::iron::math::Quat from, ::iron::math::Quat to,float s);
		::Dynamic lerp_dyn();

		float dot( ::iron::math::Quat q);
		::Dynamic dot_dyn();

		 ::iron::math::Quat fromTo( ::iron::math::Vec4 v1, ::iron::math::Vec4 v2);
		::Dynamic fromTo_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace iron
} // end namespace math

#endif /* INCLUDED_iron_math_Quat */ 
