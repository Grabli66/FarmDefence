// Generated by Haxe 4.0.0-preview.4+6e012c1
#ifndef INCLUDED_iron_math_Vec3
#define INCLUDED_iron_math_Vec3

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(iron,math,Mat4)
HX_DECLARE_CLASS2(iron,math,Vec3)

namespace iron{
namespace math{


class HXCPP_CLASS_ATTRIBUTES Vec3_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Vec3_obj OBJ_;
		Vec3_obj();

	public:
		enum { _hx_ClassId = 0x1783ee73 };

		void __construct(hx::Null< float >  __o_x,hx::Null< float >  __o_y,hx::Null< float >  __o_z);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="iron.math.Vec3")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"iron.math.Vec3"); }
		static hx::ObjectPtr< Vec3_obj > __new(hx::Null< float >  __o_x,hx::Null< float >  __o_y,hx::Null< float >  __o_z);
		static hx::ObjectPtr< Vec3_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< float >  __o_x,hx::Null< float >  __o_y,hx::Null< float >  __o_z);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Vec3_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Vec3",7f,53,25,39); }

		static float distance( ::iron::math::Vec3 v1, ::iron::math::Vec3 v2);
		static ::Dynamic distance_dyn();

		static float distancef(float v1x,float v1y,float v1z,float v2x,float v2y,float v2z);
		static ::Dynamic distancef_dyn();

		static  ::iron::math::Vec3 xAxis();
		static ::Dynamic xAxis_dyn();

		static  ::iron::math::Vec3 yAxis();
		static ::Dynamic yAxis_dyn();

		static  ::iron::math::Vec3 zAxis();
		static ::Dynamic zAxis_dyn();

		float x;
		float y;
		float z;
		 ::iron::math::Vec3 cross( ::iron::math::Vec3 v);
		::Dynamic cross_dyn();

		 ::iron::math::Vec3 crossvecs( ::iron::math::Vec3 a, ::iron::math::Vec3 b);
		::Dynamic crossvecs_dyn();

		 ::iron::math::Vec3 set(float x,float y,float z);
		::Dynamic set_dyn();

		 ::iron::math::Vec3 add( ::iron::math::Vec3 v);
		::Dynamic add_dyn();

		 ::iron::math::Vec3 addf(float x,float y,float z);
		::Dynamic addf_dyn();

		 ::iron::math::Vec3 addvecs( ::iron::math::Vec3 a, ::iron::math::Vec3 b);
		::Dynamic addvecs_dyn();

		 ::iron::math::Vec3 subvecs( ::iron::math::Vec3 a, ::iron::math::Vec3 b);
		::Dynamic subvecs_dyn();

		 ::iron::math::Vec3 normalize();
		::Dynamic normalize_dyn();

		 ::iron::math::Vec3 mult(float f);
		::Dynamic mult_dyn();

		float dot( ::iron::math::Vec3 v);
		::Dynamic dot_dyn();

		 ::iron::math::Vec3 setFrom( ::iron::math::Vec3 v);
		::Dynamic setFrom_dyn();

		 ::iron::math::Vec3 clone();
		::Dynamic clone_dyn();

		 ::iron::math::Vec3 lerp( ::iron::math::Vec3 from, ::iron::math::Vec3 to,float s);
		::Dynamic lerp_dyn();

		 ::iron::math::Vec3 applyproj( ::iron::math::Mat4 m);
		::Dynamic applyproj_dyn();

		 ::iron::math::Vec3 applymat( ::iron::math::Mat4 m);
		::Dynamic applymat_dyn();

		bool equals( ::iron::math::Vec3 v);
		::Dynamic equals_dyn();

		float length();
		::Dynamic length_dyn();

		 ::iron::math::Vec3 sub( ::iron::math::Vec3 v);
		::Dynamic sub_dyn();

		float distanceTo( ::iron::math::Vec3 p);
		::Dynamic distanceTo_dyn();

		 ::iron::math::Vec3 clamp(float min,float max);
		::Dynamic clamp_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace iron
} // end namespace math

#endif /* INCLUDED_iron_math_Vec3 */ 
