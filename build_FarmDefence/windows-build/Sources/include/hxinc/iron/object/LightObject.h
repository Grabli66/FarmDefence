// Generated by Haxe 4.0.0-preview.4+6e012c1
#ifndef INCLUDED_iron_object_LightObject
#define INCLUDED_iron_object_LightObject

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_iron_object_Object
#include <hxinc/iron/object/Object.h>
#endif
HX_DECLARE_CLASS2(iron,data,Data)
HX_DECLARE_CLASS2(iron,data,LightData)
HX_DECLARE_CLASS2(iron,math,Mat4)
HX_DECLARE_CLASS2(iron,math,Vec4)
HX_DECLARE_CLASS2(iron,object,CameraObject)
HX_DECLARE_CLASS2(iron,object,FrustumPlane)
HX_DECLARE_CLASS2(iron,object,LightObject)
HX_DECLARE_CLASS2(iron,object,Object)

namespace iron{
namespace object{


class HXCPP_CLASS_ATTRIBUTES LightObject_obj : public  ::iron::object::Object_obj
{
	public:
		typedef  ::iron::object::Object_obj super;
		typedef LightObject_obj OBJ_;
		LightObject_obj();

	public:
		enum { _hx_ClassId = 0x2aaced4a };

		void __construct( ::iron::data::LightData data);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.object.LightObject")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.object.LightObject"); }
		static hx::ObjectPtr< LightObject_obj > __new( ::iron::data::LightData data);
		static hx::ObjectPtr< LightObject_obj > __alloc(hx::Ctx *_hx_ctx, ::iron::data::LightData data);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~LightObject_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("LightObject",15,60,c0,5d); }

		static void __boot();
		static int cascadeCount;
		static Float cascadeSplitFactor;
		static Float cascadeBounds;
		static ::Array< ::Dynamic> corners;
		static void setCorners();
		static ::Dynamic setCorners_dyn();

		static  ::iron::math::Mat4 m;
		static Float mix(Float a,Float b,Float f);
		static ::Dynamic mix_dyn();

		static  ::iron::math::Vec4 p1;
		static  ::iron::math::Vec4 p2;
		static  ::iron::math::Vec4 p3;
		 ::iron::math::Mat4 camSlicedP;
		 ::iron::data::LightData data;
		 ::iron::math::Mat4 V;
		 ::iron::math::Mat4 P;
		 ::iron::math::Mat4 VP;
		::Array< ::Dynamic> frustumPlanes;
		void remove();

		void buildMatrices( ::iron::object::CameraObject camera);
		::Dynamic buildMatrices_dyn();

		void setCascade( ::iron::object::CameraObject camera,int cascade);
		::Dynamic setCascade_dyn();

		void updateViewFrustum( ::iron::object::CameraObject camera);
		::Dynamic updateViewFrustum_dyn();

		void setCubeFace(int face, ::iron::object::CameraObject camera);
		::Dynamic setCubeFace_dyn();

		 ::iron::math::Vec4 right();
		::Dynamic right_dyn();

		 ::iron::math::Vec4 up();
		::Dynamic up_dyn();

		 ::iron::math::Vec4 look();
		::Dynamic look_dyn();

		virtual ::String toString();

};

} // end namespace iron
} // end namespace object

#endif /* INCLUDED_iron_object_LightObject */ 
