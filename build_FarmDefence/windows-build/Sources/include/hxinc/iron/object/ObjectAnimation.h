// Generated by Haxe 4.0.0-preview.4+6e012c1
#ifndef INCLUDED_iron_object_ObjectAnimation
#define INCLUDED_iron_object_ObjectAnimation

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_iron_object_Animation
#include <hxinc/iron/object/Animation.h>
#endif
HX_DECLARE_CLASS2(iron,data,TAnimation)
HX_DECLARE_CLASS2(iron,data,TObj)
HX_DECLARE_CLASS2(iron,data,TSceneFormat)
HX_DECLARE_CLASS2(iron,data,TTrack)
HX_DECLARE_CLASS2(iron,object,Animation)
HX_DECLARE_CLASS2(iron,object,Object)
HX_DECLARE_CLASS2(iron,object,ObjectAnimation)
HX_DECLARE_CLASS2(iron,object,Transform)
HX_DECLARE_CLASS2(kha,arrays,Uint32ArrayPrivate)

namespace iron{
namespace object{


class HXCPP_CLASS_ATTRIBUTES ObjectAnimation_obj : public  ::iron::object::Animation_obj
{
	public:
		typedef  ::iron::object::Animation_obj super;
		typedef ObjectAnimation_obj OBJ_;
		ObjectAnimation_obj();

	public:
		enum { _hx_ClassId = 0x0e495cf6 };

		void __construct( ::iron::object::Object object,::Array< ::Dynamic> oactions);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.object.ObjectAnimation")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.object.ObjectAnimation"); }
		static hx::ObjectPtr< ObjectAnimation_obj > __new( ::iron::object::Object object,::Array< ::Dynamic> oactions);
		static hx::ObjectPtr< ObjectAnimation_obj > __alloc(hx::Ctx *_hx_ctx, ::iron::object::Object object,::Array< ::Dynamic> oactions);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ObjectAnimation_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ObjectAnimation",25,08,04,37); }

		 ::iron::object::Object object;
		::Array< ::Dynamic> oactions;
		 ::iron::data::TObj oaction;
		 ::iron::data::TObj getAction(::String action);
		::Dynamic getAction_dyn();

		void play(::String action, ::Dynamic onComplete,hx::Null< Float >  blendTime,hx::Null< Float >  speed,hx::Null< bool >  loop);

		void update(float delta);

		void updateObjectAnim();
		::Dynamic updateObjectAnim_dyn();

		float interpolateLinear(float t,float t1,float t2,float v1,float v2);
		::Dynamic interpolateLinear_dyn();

		float s0;
		int bezierFrameIndex;
		float interpolateBezier(float t,float t1,float t2,float v1,float v2,float c1,float c2,float p1,float p2);
		::Dynamic interpolateBezier_dyn();

		bool isTrackEnd( ::iron::data::TTrack track);

		bool checkFrameIndexT( ::kha::arrays::Uint32ArrayPrivate frameValues,float t);
		::Dynamic checkFrameIndexT_dyn();

		void updateAnimNonSampled( ::iron::data::TAnimation anim, ::iron::object::Transform transform);
		::Dynamic updateAnimNonSampled_dyn();

		int totalFrames();

};

} // end namespace iron
} // end namespace object

#endif /* INCLUDED_iron_object_ObjectAnimation */ 
