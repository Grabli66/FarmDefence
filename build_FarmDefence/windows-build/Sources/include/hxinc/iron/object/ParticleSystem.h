// Generated by Haxe 4.0.0-preview.4+6e012c1
#ifndef INCLUDED_iron_object_ParticleSystem
#define INCLUDED_iron_object_ParticleSystem

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(iron,data,Data)
HX_DECLARE_CLASS2(iron,data,ParticleData)
HX_DECLARE_CLASS2(iron,data,TParticleData)
HX_DECLARE_CLASS2(iron,data,TParticleReference)
HX_DECLARE_CLASS2(iron,math,Mat4)
HX_DECLARE_CLASS2(iron,object,MeshObject)
HX_DECLARE_CLASS2(iron,object,Object)
HX_DECLARE_CLASS2(iron,object,Particle)
HX_DECLARE_CLASS2(iron,object,ParticleSystem)

namespace iron{
namespace object{


class HXCPP_CLASS_ATTRIBUTES ParticleSystem_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ParticleSystem_obj OBJ_;
		ParticleSystem_obj();

	public:
		enum { _hx_ClassId = 0x2815a97c };

		void __construct(::String sceneName, ::iron::data::TParticleReference pref);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="iron.object.ParticleSystem")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"iron.object.ParticleSystem"); }
		static hx::ObjectPtr< ParticleSystem_obj > __new(::String sceneName, ::iron::data::TParticleReference pref);
		static hx::ObjectPtr< ParticleSystem_obj > __alloc(hx::Ctx *_hx_ctx,::String sceneName, ::iron::data::TParticleReference pref);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ParticleSystem_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ParticleSystem",f5,d5,be,12); }

		 ::iron::data::ParticleData data;
		Float speed;
		::Array< ::Dynamic> particles;
		bool ready;
		int frameRate;
		Float lifetime;
		Float animtime;
		Float time;
		Float spawnRate;
		Float seed;
		 ::iron::data::TParticleData r;
		Float gx;
		Float gy;
		Float gz;
		Float alignx;
		Float aligny;
		Float alignz;
		Float dimx;
		Float dimy;
		int tilesx;
		int tilesy;
		int tilesFramerate;
		int count;
		int lap;
		Float lapTime;
		 ::iron::math::Mat4 m;
		void update( ::iron::object::MeshObject object, ::iron::object::MeshObject owner);
		::Dynamic update_dyn();

		 ::iron::math::Mat4 getData();
		::Dynamic getData_dyn();

		void updateGpu( ::iron::object::MeshObject object, ::iron::object::MeshObject owner);
		::Dynamic updateGpu_dyn();

		void setupGeomGpu( ::iron::object::MeshObject object, ::iron::object::MeshObject owner);
		::Dynamic setupGeomGpu_dyn();

		Float fhash(int n);
		::Dynamic fhash_dyn();

		void remove();
		::Dynamic remove_dyn();

};

} // end namespace iron
} // end namespace object

#endif /* INCLUDED_iron_object_ParticleSystem */ 
