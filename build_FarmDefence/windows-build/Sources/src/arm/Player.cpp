// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_arm_Player
#include <hxinc/arm/Player.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <hxinc/iron/Trait.h>
#endif
#ifndef INCLUDED_iron_math_Quat
#include <hxinc/iron/math/Quat.h>
#endif
#ifndef INCLUDED_iron_math_Vec3
#include <hxinc/iron/math/Vec3.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <hxinc/iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_object_Animation
#include <hxinc/iron/object/Animation.h>
#endif
#ifndef INCLUDED_iron_object_BoneAnimation
#include <hxinc/iron/object/BoneAnimation.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <hxinc/iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <hxinc/iron/object/Transform.h>
#endif
#ifndef INCLUDED_iron_system_Input
#include <hxinc/iron/system/Input.h>
#endif
#ifndef INCLUDED_iron_system_Keyboard
#include <hxinc/iron/system/Keyboard.h>
#endif
#ifndef INCLUDED_iron_system_VirtualInput
#include <hxinc/iron/system/VirtualInput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ee8f15b311e3b2f3_37_new,"arm.Player","new",0x8732c1c5,"arm.Player.new","arm/Player.hx",37,0x840dd52a)
HX_DEFINE_STACK_FRAME(_hx_pos_ee8f15b311e3b2f3_8_new,"arm.Player","new",0x8732c1c5,"arm.Player.new","arm/Player.hx",8,0x840dd52a)
HX_LOCAL_STACK_FRAME(_hx_pos_ee8f15b311e3b2f3_14_findAnimation,"arm.Player","findAnimation",0x6efd3130,"arm.Player.findAnimation","arm/Player.hx",14,0x840dd52a)
HX_LOCAL_STACK_FRAME(_hx_pos_ee8f15b311e3b2f3_25_init,"arm.Player","init",0xc1ef820b,"arm.Player.init","arm/Player.hx",25,0x840dd52a)
namespace arm{

void Player_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::arm::Player,_gthis) HXARGC(0)
            		bool _hx_run(){
            			HX_STACKFRAME(&_hx_pos_ee8f15b311e3b2f3_37_new)
HXLINE(  38)			 ::iron::_hx_system::Keyboard kb = ::iron::_hx_system::Input_obj::getKeyboard();
HXLINE(  40)			int dirX = 0;
HXLINE(  41)			int dirY = 0;
HXLINE(  44)			if (kb->down(HX_("a",61,00,00,00))) {
HXLINE(  45)				dirX = -1;
HXLINE(  46)				dirY = -1;
            			}
HXLINE(  48)			if (kb->down(HX_("d",64,00,00,00))) {
HXLINE(  49)				dirX = 1;
HXLINE(  50)				dirY = 1;
            			}
HXLINE(  52)			if (kb->down(HX_("w",77,00,00,00))) {
HXLINE(  53)				dirX = -1;
HXLINE(  54)				dirY = 1;
            			}
HXLINE(  56)			if (kb->down(HX_("s",73,00,00,00))) {
HXLINE(  57)				dirX = 1;
HXLINE(  58)				dirY = -1;
            			}
HXLINE(  61)			bool _hx_tmp;
HXDLIN(  61)			if ((dirX == 0)) {
HXLINE(  61)				_hx_tmp = (dirY != 0);
            			}
            			else {
HXLINE(  61)				_hx_tmp = true;
            			}
HXDLIN(  61)			if (_hx_tmp) {
HXLINE(  62)				int angle = 0;
HXLINE(  63)				_gthis->animation->play(HX_("Walk",29,89,cb,39),null(),null(),null(),null());
HXLINE(  65)				bool _hx_tmp1;
HXDLIN(  65)				if ((dirX == -1)) {
HXLINE(  65)					_hx_tmp1 = (dirY == -1);
            				}
            				else {
HXLINE(  65)					_hx_tmp1 = false;
            				}
HXDLIN(  65)				if (_hx_tmp1) {
HXLINE(  66)					angle = -135;
            				}
HXLINE(  68)				bool _hx_tmp2;
HXDLIN(  68)				if ((dirX == 1)) {
HXLINE(  68)					_hx_tmp2 = (dirY == 1);
            				}
            				else {
HXLINE(  68)					_hx_tmp2 = false;
            				}
HXDLIN(  68)				if (_hx_tmp2) {
HXLINE(  69)					angle = 45;
            				}
HXLINE(  71)				bool _hx_tmp3;
HXDLIN(  71)				if ((dirX == -1)) {
HXLINE(  71)					_hx_tmp3 = (dirY == 1);
            				}
            				else {
HXLINE(  71)					_hx_tmp3 = false;
            				}
HXDLIN(  71)				if (_hx_tmp3) {
HXLINE(  72)					angle = 135;
            				}
HXLINE(  74)				bool _hx_tmp4;
HXDLIN(  74)				if ((dirX == 1)) {
HXLINE(  74)					_hx_tmp4 = (dirY == -1);
            				}
            				else {
HXLINE(  74)					_hx_tmp4 = false;
            				}
HXDLIN(  74)				if (_hx_tmp4) {
HXLINE(  75)					angle = -45;
            				}
HXLINE(  77)				{
HXLINE(  77)					 ::iron::math::Quat _this = _gthis->object->transform->rot;
HXDLIN(  77)					float axis_x = ( (float)(((Float)0.0)) );
HXDLIN(  77)					float axis_y = ( (float)(((Float)1.0)) );
HXDLIN(  77)					float axis_z = ( (float)(((Float)0.0)) );
HXDLIN(  77)					float axis_w = ( (float)(((Float)1.0)) );
HXDLIN(  77)					float angle1 = ( (float)(((angle * ::Math_obj::PI) / ( (Float)(180) ))) );
HXDLIN(  77)					float s = ( (float)(::Math_obj::sin((angle1 * ((Float)0.5)))) );
HXDLIN(  77)					_this->x = (axis_x * s);
HXDLIN(  77)					_this->y = (axis_y * s);
HXDLIN(  77)					_this->z = (axis_z * s);
HXDLIN(  77)					_this->w = ( (float)(::Math_obj::cos((angle1 * ((Float)0.5)))) );
HXDLIN(  77)					{
HXLINE(  77)						float v = (_this->x * _this->x);
HXDLIN(  77)						float v1 = (v + (_this->y * _this->y));
HXDLIN(  77)						float v2 = (v1 + (_this->z * _this->z));
HXDLIN(  77)						Float l = ::Math_obj::sqrt(( (Float)((v2 + (_this->w * _this->w))) ));
HXDLIN(  77)						if ((l == ((Float)0.0))) {
HXLINE(  77)							_this->x = ( (float)(0) );
HXDLIN(  77)							_this->y = ( (float)(0) );
HXDLIN(  77)							_this->z = ( (float)(0) );
HXDLIN(  77)							_this->w = ( (float)(0) );
            						}
            						else {
HXLINE( 128)							l = (((Float)1.0) / l);
HXLINE(  77)							 ::iron::math::Quat _this1 = _this;
HXDLIN(  77)							_this1->x = (_this1->x * l);
HXDLIN(  77)							 ::iron::math::Quat _this2 = _this;
HXDLIN(  77)							_this2->y = (_this2->y * l);
HXDLIN(  77)							 ::iron::math::Quat _this3 = _this;
HXDLIN(  77)							_this3->z = (_this3->z * l);
HXDLIN(  77)							 ::iron::math::Quat _this4 = _this;
HXDLIN(  77)							_this4->w = (_this4->w * l);
            						}
            					}
            				}
HXLINE(  78)				 ::iron::math::Vec4 _gthis1 = _gthis->armature->transform->loc;
HXDLIN(  78)				float _gthis11 = _gthis1->x;
HXDLIN(  78)				_gthis1->x = (_gthis11 + (dirX * _gthis->speed));
HXLINE(  79)				 ::iron::math::Vec4 _gthis2 = _gthis->armature->transform->loc;
HXDLIN(  79)				float _gthis21 = _gthis2->y;
HXDLIN(  79)				_gthis2->y = (_gthis21 + (dirY * _gthis->speed));
HXLINE(  80)				_gthis->armature->transform->dirty = true;
            			}
            			else {
HXLINE(  82)				_gthis->animation->play(HX_("Idle",34,d3,8c,30),null(),null(),null(),null());
            			}
HXLINE(  85)			return true;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_ee8f15b311e3b2f3_8_new)
HXLINE(  10)		this->speed = ((Float)0.035);
HXLINE(  32)		 ::arm::Player _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  33)		super::__construct();
HXLINE(  35)		this->notifyOnInit(this->init_dyn());
HXLINE(  37)		this->notifyOnUpdate( ::Dynamic(new _hx_Closure_0(_gthis)));
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x13d1dc9d) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x13d1dc9d;
	} else {
		return inClassId==(int)0x7b609ac2;
	}
}

 ::iron::object::BoneAnimation Player_obj::findAnimation( ::iron::object::Object o){
            	HX_STACKFRAME(&_hx_pos_ee8f15b311e3b2f3_14_findAnimation)
HXLINE(  15)		if (hx::IsNotNull( o->animation )) {
HXLINE(  16)			return ( ( ::iron::object::BoneAnimation)(o->animation) );
            		}
HXLINE(  17)		{
HXLINE(  17)			int _g = 0;
HXDLIN(  17)			::Array< ::Dynamic> _g1 = o->children;
HXDLIN(  17)			while((_g < _g1->length)){
HXLINE(  17)				 ::iron::object::Object c = _g1->__get(_g).StaticCast<  ::iron::object::Object >();
HXDLIN(  17)				_g = (_g + 1);
HXLINE(  18)				 ::iron::object::BoneAnimation co = this->findAnimation(c);
HXLINE(  19)				if (hx::IsNotNull( co )) {
HXLINE(  20)					return co;
            				}
            			}
            		}
HXLINE(  22)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,findAnimation,return )

void Player_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_ee8f15b311e3b2f3_25_init)
HXLINE(  26)		this->direction =  ::iron::math::Vec3_obj::__alloc( HX_CTX ,0,0,0);
HXLINE(  27)		this->armature = this->object->parent;
HXLINE(  28)		this->animation = this->findAnimation(this->armature);
HXLINE(  29)		this->animation->play(HX_("Idle",34,d3,8c,30),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,init,(void))


hx::ObjectPtr< Player_obj > Player_obj::__new() {
	hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Player_obj > Player_obj::__alloc(hx::Ctx *_hx_ctx) {
	Player_obj *__this = (Player_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "arm.Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Player_obj::Player_obj()
{
}

void Player_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Player);
	HX_MARK_MEMBER_NAME(direction,"direction");
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(animation,"animation");
	HX_MARK_MEMBER_NAME(armature,"armature");
	 ::iron::Trait_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Player_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(direction,"direction");
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(animation,"animation");
	HX_VISIT_MEMBER_NAME(armature,"armature");
	 ::iron::Trait_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Player_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"armature") ) { return hx::Val( armature ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"direction") ) { return hx::Val( direction ); }
		if (HX_FIELD_EQ(inName,"animation") ) { return hx::Val( animation ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"findAnimation") ) { return hx::Val( findAnimation_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Player_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"armature") ) { armature=inValue.Cast<  ::iron::object::Object >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"direction") ) { direction=inValue.Cast<  ::iron::math::Vec3 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animation") ) { animation=inValue.Cast<  ::iron::object::BoneAnimation >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("direction",3f,62,40,10));
	outFields->push(HX_("speed",87,97,69,81));
	outFields->push(HX_("animation",04,ef,34,4b));
	outFields->push(HX_("armature",79,a4,76,ec));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::math::Vec3*/ ,(int)offsetof(Player_obj,direction),HX_("direction",3f,62,40,10)},
	{hx::fsFloat,(int)offsetof(Player_obj,speed),HX_("speed",87,97,69,81)},
	{hx::fsObject /*::iron::object::BoneAnimation*/ ,(int)offsetof(Player_obj,animation),HX_("animation",04,ef,34,4b)},
	{hx::fsObject /*::iron::object::Object*/ ,(int)offsetof(Player_obj,armature),HX_("armature",79,a4,76,ec)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_("direction",3f,62,40,10),
	HX_("speed",87,97,69,81),
	HX_("animation",04,ef,34,4b),
	HX_("armature",79,a4,76,ec),
	HX_("findAnimation",8b,af,e6,2b),
	HX_("init",10,3b,bb,45),
	::String(null()) };

hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	Player_obj _hx_dummy;
	Player_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("arm.Player",53,7b,5b,0b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Player_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace arm
