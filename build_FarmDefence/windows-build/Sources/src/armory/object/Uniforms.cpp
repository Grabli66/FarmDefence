// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_armory_object_Uniforms
#include <hxinc/armory/object/Uniforms.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <hxinc/haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <hxinc/haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_iron_Scene
#include <hxinc/iron/Scene.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <hxinc/iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_data_MaterialData
#include <hxinc/iron/data/MaterialData.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <hxinc/iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <hxinc/iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_Uniforms
#include <hxinc/iron/object/Uniforms.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e0d408d4dac2cbeb_11_register,"armory.object.Uniforms","register",0x189d4037,"armory.object.Uniforms.register","armory/object/Uniforms.hx",11,0x7a469fc4)
HX_LOCAL_STACK_FRAME(_hx_pos_e0d408d4dac2cbeb_17_textureLink,"armory.object.Uniforms","textureLink",0xc01b5921,"armory.object.Uniforms.textureLink","armory/object/Uniforms.hx",17,0x7a469fc4)
HX_LOCAL_STACK_FRAME(_hx_pos_e0d408d4dac2cbeb_46_vec3Link,"armory.object.Uniforms","vec3Link",0x3286a0cd,"armory.object.Uniforms.vec3Link","armory/object/Uniforms.hx",46,0x7a469fc4)
HX_LOCAL_STACK_FRAME(_hx_pos_e0d408d4dac2cbeb_183_floatLink,"armory.object.Uniforms","floatLink",0xb0d50762,"armory.object.Uniforms.floatLink","armory/object/Uniforms.hx",183,0x7a469fc4)
namespace armory{
namespace object{

void Uniforms_obj::__construct() { }

Dynamic Uniforms_obj::__CreateEmpty() { return new Uniforms_obj; }

void *Uniforms_obj::_hx_vtable = 0;

Dynamic Uniforms_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Uniforms_obj > _hx_result = new Uniforms_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Uniforms_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5a898178;
}

void Uniforms_obj::_hx_register(){
            	HX_STACKFRAME(&_hx_pos_e0d408d4dac2cbeb_11_register)
HXLINE(  12)		::iron::object::Uniforms_obj::externalTextureLinks = ::Array_obj< ::Dynamic>::__new(1)->init(0,::armory::object::Uniforms_obj::textureLink_dyn());
HXLINE(  13)		::iron::object::Uniforms_obj::externalVec3Links = ::Array_obj< ::Dynamic>::__new(1)->init(0,::armory::object::Uniforms_obj::vec3Link_dyn());
HXLINE(  14)		::iron::object::Uniforms_obj::externalFloatLinks = ::Array_obj< ::Dynamic>::__new(1)->init(0,::armory::object::Uniforms_obj::floatLink_dyn());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Uniforms_obj,_hx_register,(void))

 ::kha::Image Uniforms_obj::textureLink( ::iron::object::Object object, ::iron::data::MaterialData mat,::String link){
            	HX_STACKFRAME(&_hx_pos_e0d408d4dac2cbeb_17_textureLink)
HXLINE(  18)		if ((link == HX_("_smaaSearch",21,ac,12,0a))) {
HXLINE(  19)			return ( ( ::kha::Image)(::iron::Scene_obj::active->embedded->get(HX_("smaa_search.png",08,c8,f3,5b))) );
            		}
            		else {
HXLINE(  21)			if ((link == HX_("_smaaArea",06,c8,ac,7b))) {
HXLINE(  22)				return ( ( ::kha::Image)(::iron::Scene_obj::active->embedded->get(HX_("smaa_area.png",6d,17,61,d7))) );
            			}
            			else {
HXLINE(  34)				if ((link == HX_("_lensTexture",7e,8b,d6,62))) {
HXLINE(  35)					return ( ( ::kha::Image)(::iron::Scene_obj::active->embedded->get(HX_("lenstexture.jpg",90,e9,9b,14))) );
            				}
            				else {
HXLINE(  37)					if ((link == HX_("_lutTexture",6f,03,57,b1))) {
HXLINE(  38)						return ( ( ::kha::Image)(::iron::Scene_obj::active->embedded->get(HX_("luttexture.jpg",e3,a7,34,b7))) );
            					}
            					else {
HXLINE(  40)						if ((link == HX_("_cloudsTexture",5e,3b,26,3b))) {
HXLINE(  41)							return ( ( ::kha::Image)(::iron::Scene_obj::active->embedded->get(HX_("cloudstexture.png",f8,32,7f,f1))) );
            						}
            					}
            				}
            			}
            		}
HXLINE(  43)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Uniforms_obj,textureLink,return )

 ::iron::math::Vec4 Uniforms_obj::vec3Link( ::iron::object::Object object, ::iron::data::MaterialData mat,::String link){
            	HX_STACKFRAME(&_hx_pos_e0d408d4dac2cbeb_46_vec3Link)
HXLINE(  47)		 ::iron::math::Vec4 v = null();
HXLINE( 174)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Uniforms_obj,vec3Link,return )

 ::Dynamic Uniforms_obj::floatLink( ::iron::object::Object object, ::iron::data::MaterialData mat,::String link){
            	HX_STACKFRAME(&_hx_pos_e0d408d4dac2cbeb_183_floatLink)
HXDLIN( 183)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Uniforms_obj,floatLink,return )


Uniforms_obj::Uniforms_obj()
{
}

bool Uniforms_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"register") ) { outValue = _hx_register_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"vec3Link") ) { outValue = vec3Link_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"floatLink") ) { outValue = floatLink_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"textureLink") ) { outValue = textureLink_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Uniforms_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Uniforms_obj_sStaticStorageInfo = 0;
#endif

hx::Class Uniforms_obj::__mClass;

static ::String Uniforms_obj_sStaticFields[] = {
	HX_("register",63,a6,9f,d0),
	HX_("textureLink",75,16,32,fe),
	HX_("vec3Link",f9,06,89,ea),
	HX_("floatLink",b6,07,ec,fa),
	::String(null())
};

void Uniforms_obj::__register()
{
	Uniforms_obj _hx_dummy;
	Uniforms_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("armory.object.Uniforms",1a,51,c1,56);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Uniforms_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Uniforms_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Uniforms_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Uniforms_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Uniforms_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace object
