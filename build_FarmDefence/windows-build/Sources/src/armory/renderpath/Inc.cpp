// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_armory_renderpath_Inc
#include <hxinc/armory/renderpath/Inc.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <hxinc/haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <hxinc/haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_iron_RenderPath
#include <hxinc/iron/RenderPath.h>
#endif
#ifndef INCLUDED_iron_RenderTarget
#include <hxinc/iron/RenderTarget.h>
#endif
#ifndef INCLUDED_iron_RenderTargetRaw
#include <hxinc/iron/RenderTargetRaw.h>
#endif
#ifndef INCLUDED_iron_Scene
#include <hxinc/iron/Scene.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <hxinc/iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_data_LightData
#include <hxinc/iron/data/LightData.h>
#endif
#ifndef INCLUDED_iron_data_TLightData
#include <hxinc/iron/data/TLightData.h>
#endif
#ifndef INCLUDED_iron_object_LightObject
#include <hxinc/iron/object/LightObject.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <hxinc/iron/object/Object.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_6a5f4c66a2d0e285_35_init,"armory.renderpath.Inc","init",0x809f063f,"armory.renderpath.Inc.init","armory/renderpath/Inc.hx",35,0x90d3121f)
HX_LOCAL_STACK_FRAME(_hx_pos_6a5f4c66a2d0e285_38_bindShadowMap,"armory.renderpath.Inc","bindShadowMap",0xe9c6c810,"armory.renderpath.Inc.bindShadowMap","armory/renderpath/Inc.hx",38,0x90d3121f)
HX_LOCAL_STACK_FRAME(_hx_pos_6a5f4c66a2d0e285_57_shadowMapName,"armory.renderpath.Inc","shadowMapName",0x307d19f8,"armory.renderpath.Inc.shadowMapName","armory/renderpath/Inc.hx",57,0x90d3121f)
HX_LOCAL_STACK_FRAME(_hx_pos_6a5f4c66a2d0e285_60_getShadowMap,"armory.renderpath.Inc","getShadowMap",0x826fd555,"armory.renderpath.Inc.getShadowMap","armory/renderpath/Inc.hx",60,0x90d3121f)
HX_LOCAL_STACK_FRAME(_hx_pos_6a5f4c66a2d0e285_94_applyConfig,"armory.renderpath.Inc","applyConfig",0xbc0b9f81,"armory.renderpath.Inc.applyConfig","armory/renderpath/Inc.hx",94,0x90d3121f)
HX_LOCAL_STACK_FRAME(_hx_pos_6a5f4c66a2d0e285_215_getShadowmapSize,"armory.renderpath.Inc","getShadowmapSize",0x9a6948d6,"armory.renderpath.Inc.getShadowmapSize","armory/renderpath/Inc.hx",215,0x90d3121f)
HX_LOCAL_STACK_FRAME(_hx_pos_6a5f4c66a2d0e285_241_getVoxelRes,"armory.renderpath.Inc","getVoxelRes",0xad2ee321,"armory.renderpath.Inc.getVoxelRes","armory/renderpath/Inc.hx",241,0x90d3121f)
HX_LOCAL_STACK_FRAME(_hx_pos_6a5f4c66a2d0e285_253_getVoxelResZ,"armory.renderpath.Inc","getVoxelResZ",0xdbd7da19,"armory.renderpath.Inc.getVoxelResZ","armory/renderpath/Inc.hx",253,0x90d3121f)
HX_LOCAL_STACK_FRAME(_hx_pos_6a5f4c66a2d0e285_265_getSuperSampling,"armory.renderpath.Inc","getSuperSampling",0x95fdd7bb,"armory.renderpath.Inc.getSuperSampling","armory/renderpath/Inc.hx",265,0x90d3121f)
HX_LOCAL_STACK_FRAME(_hx_pos_6a5f4c66a2d0e285_273_getHdrFormat,"armory.renderpath.Inc","getHdrFormat",0x4e48d086,"armory.renderpath.Inc.getHdrFormat","armory/renderpath/Inc.hx",273,0x90d3121f)
HX_LOCAL_STACK_FRAME(_hx_pos_6a5f4c66a2d0e285_281_getDisplayp,"armory.renderpath.Inc","getDisplayp",0x03cd1b55,"armory.renderpath.Inc.getDisplayp","armory/renderpath/Inc.hx",281,0x90d3121f)
HX_LOCAL_STACK_FRAME(_hx_pos_6a5f4c66a2d0e285_420_drawShadowMap,"armory.renderpath.Inc","drawShadowMap",0x7f3e10e9,"armory.renderpath.Inc.drawShadowMap","armory/renderpath/Inc.hx",420,0x90d3121f)
namespace armory{
namespace renderpath{

void Inc_obj::__construct() { }

Dynamic Inc_obj::__CreateEmpty() { return new Inc_obj; }

void *Inc_obj::_hx_vtable = 0;

Dynamic Inc_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Inc_obj > _hx_result = new Inc_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Inc_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7c22cf09;
}

 ::iron::RenderPath Inc_obj::path;

void Inc_obj::init( ::iron::RenderPath _path){
            	HX_STACKFRAME(&_hx_pos_6a5f4c66a2d0e285_35_init)
HXDLIN(  35)		::armory::renderpath::Inc_obj::path = _path;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Inc_obj,init,(void))

void Inc_obj::bindShadowMap(){
            	HX_STACKFRAME(&_hx_pos_6a5f4c66a2d0e285_38_bindShadowMap)
HXLINE(  39)		::String target = ::armory::renderpath::Inc_obj::shadowMapName();
HXLINE(  40)		if ((target == HX_("shadowMapCube",b1,0d,d0,fd))) {
HXLINE(  45)			::armory::renderpath::Inc_obj::path->bindTarget(HX_("shadowMapCube",b1,0d,d0,fd),HX_("shadowMapCube",b1,0d,d0,fd));
            		}
            		else {
HXLINE(  52)			::armory::renderpath::Inc_obj::path->bindTarget(HX_("shadowMap",9c,26,a0,f4),HX_("shadowMap",9c,26,a0,f4));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Inc_obj,bindShadowMap,(void))

::String Inc_obj::shadowMapName(){
            	HX_STACKFRAME(&_hx_pos_6a5f4c66a2d0e285_57_shadowMapName)
HXDLIN(  57)		 ::iron::object::LightObject _hx_tmp;
HXDLIN(  57)		if ((::iron::Scene_obj::active->lights->length > 0)) {
HXDLIN(  57)			_hx_tmp = ::iron::Scene_obj::active->lights->__get(::armory::renderpath::Inc_obj::path->currentLightIndex).StaticCast<  ::iron::object::LightObject >();
            		}
            		else {
HXDLIN(  57)			_hx_tmp = null();
            		}
HXDLIN(  57)		if (( (bool)(_hx_tmp->data->raw->shadowmap_cube) )) {
HXDLIN(  57)			return HX_("shadowMapCube",b1,0d,d0,fd);
            		}
            		else {
HXDLIN(  57)			return HX_("shadowMap",9c,26,a0,f4);
            		}
HXDLIN(  57)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Inc_obj,shadowMapName,return )

::String Inc_obj::getShadowMap(){
            	HX_GC_STACKFRAME(&_hx_pos_6a5f4c66a2d0e285_60_getShadowMap)
HXLINE(  61)		::String target = ::armory::renderpath::Inc_obj::shadowMapName();
HXLINE(  62)		 ::iron::RenderTarget rt = ( ( ::iron::RenderTarget)(::armory::renderpath::Inc_obj::path->renderTargets->get(target)) );
HXLINE(  64)		if (hx::IsNull( rt )) {
HXLINE(  65)			 ::iron::object::LightObject _hx_tmp;
HXDLIN(  65)			if ((::iron::Scene_obj::active->lights->length > 0)) {
HXLINE(  65)				_hx_tmp = ::iron::Scene_obj::active->lights->__get(::armory::renderpath::Inc_obj::path->currentLightIndex).StaticCast<  ::iron::object::LightObject >();
            			}
            			else {
HXLINE(  65)				_hx_tmp = null();
            			}
HXDLIN(  65)			if (( (bool)(_hx_tmp->data->raw->shadowmap_cube) )) {
HXLINE(  67)				 ::iron::object::LightObject size;
HXDLIN(  67)				if ((::iron::Scene_obj::active->lights->length > 0)) {
HXLINE(  67)					size = ::iron::Scene_obj::active->lights->__get(::armory::renderpath::Inc_obj::path->currentLightIndex).StaticCast<  ::iron::object::LightObject >();
            				}
            				else {
HXLINE(  67)					size = null();
            				}
HXDLIN(  67)				int size1 = ::Std_obj::_hx_int(( (Float)(size->data->raw->shadowmap_size) ));
HXLINE(  68)				 ::iron::RenderTargetRaw t =  ::iron::RenderTargetRaw_obj::__alloc( HX_CTX );
HXLINE(  69)				t->name = target;
HXLINE(  70)				t->width = size1;
HXLINE(  71)				t->height = size1;
HXLINE(  72)				t->format = HX_("DEPTH16",88,92,1e,ea);
HXLINE(  73)				t->is_cubemap = true;
HXLINE(  74)				rt = ::armory::renderpath::Inc_obj::path->createRenderTarget(t);
            			}
            			else {
HXLINE(  77)				 ::iron::object::LightObject sizew;
HXDLIN(  77)				if ((::iron::Scene_obj::active->lights->length > 0)) {
HXLINE(  77)					sizew = ::iron::Scene_obj::active->lights->__get(::armory::renderpath::Inc_obj::path->currentLightIndex).StaticCast<  ::iron::object::LightObject >();
            				}
            				else {
HXLINE(  77)					sizew = null();
            				}
HXDLIN(  77)				 ::Dynamic sizew1 = sizew->data->raw->shadowmap_size;
HXLINE(  78)				 ::Dynamic sizeh = sizew1;
HXLINE(  82)				 ::iron::RenderTargetRaw t1 =  ::iron::RenderTargetRaw_obj::__alloc( HX_CTX );
HXLINE(  83)				t1->name = target;
HXLINE(  84)				t1->width = ( (int)(sizew1) );
HXLINE(  85)				t1->height = ( (int)(sizeh) );
HXLINE(  86)				t1->format = HX_("DEPTH16",88,92,1e,ea);
HXLINE(  87)				rt = ::armory::renderpath::Inc_obj::path->createRenderTarget(t1);
            			}
            		}
HXLINE(  90)		return target;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Inc_obj,getShadowMap,return )

void Inc_obj::applyConfig(){
            	HX_STACKFRAME(&_hx_pos_6a5f4c66a2d0e285_94_applyConfig)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Inc_obj,applyConfig,(void))

int Inc_obj::getShadowmapSize(){
            	HX_STACKFRAME(&_hx_pos_6a5f4c66a2d0e285_215_getShadowmapSize)
HXDLIN( 215)		return 1024;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Inc_obj,getShadowmapSize,return )

int Inc_obj::getVoxelRes(){
            	HX_STACKFRAME(&_hx_pos_6a5f4c66a2d0e285_241_getVoxelRes)
HXDLIN( 241)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Inc_obj,getVoxelRes,return )

Float Inc_obj::getVoxelResZ(){
            	HX_STACKFRAME(&_hx_pos_6a5f4c66a2d0e285_253_getVoxelResZ)
HXDLIN( 253)		return ((Float)0.0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Inc_obj,getVoxelResZ,return )

Float Inc_obj::getSuperSampling(){
            	HX_STACKFRAME(&_hx_pos_6a5f4c66a2d0e285_265_getSuperSampling)
HXDLIN( 265)		return ( (Float)(1) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Inc_obj,getSuperSampling,return )

::String Inc_obj::getHdrFormat(){
            	HX_STACKFRAME(&_hx_pos_6a5f4c66a2d0e285_273_getHdrFormat)
HXDLIN( 273)		return HX_("RGBA32",53,5a,88,d6);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Inc_obj,getHdrFormat,return )

 ::Dynamic Inc_obj::getDisplayp(){
            	HX_STACKFRAME(&_hx_pos_6a5f4c66a2d0e285_281_getDisplayp)
HXDLIN( 281)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Inc_obj,getDisplayp,return )

void Inc_obj::drawShadowMap( ::iron::object::LightObject l){
            	HX_STACKFRAME(&_hx_pos_6a5f4c66a2d0e285_420_drawShadowMap)
HXLINE( 422)		int faces;
HXDLIN( 422)		 ::iron::object::LightObject faces1;
HXDLIN( 422)		if ((::iron::Scene_obj::active->lights->length > 0)) {
HXLINE( 422)			faces1 = ::iron::Scene_obj::active->lights->__get(::armory::renderpath::Inc_obj::path->currentLightIndex).StaticCast<  ::iron::object::LightObject >();
            		}
            		else {
HXLINE( 422)			faces1 = null();
            		}
HXDLIN( 422)		if (( (bool)(faces1->data->raw->shadowmap_cube) )) {
HXLINE( 422)			faces = 6;
            		}
            		else {
HXLINE( 422)			faces = 1;
            		}
HXLINE( 423)		{
HXLINE( 423)			int _g1 = 0;
HXDLIN( 423)			int _g = faces;
HXDLIN( 423)			while((_g1 < _g)){
HXLINE( 423)				_g1 = (_g1 + 1);
HXDLIN( 423)				int i = (_g1 - 1);
HXLINE( 424)				if ((faces > 1)) {
HXLINE( 424)					::armory::renderpath::Inc_obj::path->currentFace = i;
            				}
HXLINE( 425)				 ::iron::RenderPath _hx_tmp = ::armory::renderpath::Inc_obj::path;
HXDLIN( 425)				_hx_tmp->setTarget(::armory::renderpath::Inc_obj::getShadowMap(),null(),null());
HXLINE( 426)				::armory::renderpath::Inc_obj::path->clearTarget(null(),((Float)1.0));
HXLINE( 427)				::armory::renderpath::Inc_obj::path->drawMeshes(HX_("shadowmap",bc,6e,b8,f4));
            			}
            		}
HXLINE( 429)		::armory::renderpath::Inc_obj::path->currentFace = -1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Inc_obj,drawShadowMap,(void))


Inc_obj::Inc_obj()
{
}

bool Inc_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { outValue = ( path ); return true; }
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"applyConfig") ) { outValue = applyConfig_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getVoxelRes") ) { outValue = getVoxelRes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getDisplayp") ) { outValue = getDisplayp_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getShadowMap") ) { outValue = getShadowMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getVoxelResZ") ) { outValue = getVoxelResZ_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getHdrFormat") ) { outValue = getHdrFormat_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"bindShadowMap") ) { outValue = bindShadowMap_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"shadowMapName") ) { outValue = shadowMapName_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"drawShadowMap") ) { outValue = drawShadowMap_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getShadowmapSize") ) { outValue = getShadowmapSize_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getSuperSampling") ) { outValue = getSuperSampling_dyn(); return true; }
	}
	return false;
}

bool Inc_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { path=ioValue.Cast<  ::iron::RenderPath >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Inc_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Inc_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::iron::RenderPath*/ ,(void *) &Inc_obj::path,HX_("path",a5,e5,51,4a)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Inc_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Inc_obj::path,"path");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Inc_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Inc_obj::path,"path");
};

#endif

hx::Class Inc_obj::__mClass;

static ::String Inc_obj_sStaticFields[] = {
	HX_("path",a5,e5,51,4a),
	HX_("init",10,3b,bb,45),
	HX_("bindShadowMap",1f,f1,4f,be),
	HX_("shadowMapName",07,43,06,05),
	HX_("getShadowMap",26,c3,f6,03),
	HX_("applyConfig",d0,16,cd,03),
	HX_("getShadowmapSize",27,f3,29,a5),
	HX_("getVoxelRes",70,5a,f0,f4),
	HX_("getVoxelResZ",ea,c7,5e,5d),
	HX_("getSuperSampling",0c,82,be,a0),
	HX_("getHdrFormat",57,be,cf,cf),
	HX_("getDisplayp",a4,92,8e,4b),
	HX_("drawShadowMap",f8,39,c7,53),
	::String(null())
};

void Inc_obj::__register()
{
	Inc_obj _hx_dummy;
	Inc_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("armory.renderpath.Inc",9f,63,c2,89);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Inc_obj::__GetStatic;
	__mClass->mSetStaticField = &Inc_obj::__SetStatic;
	__mClass->mMarkFunc = Inc_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Inc_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Inc_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Inc_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Inc_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Inc_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace renderpath
