// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_armory_data_Config
#include <hxinc/armory/data/Config.h>
#endif
#ifndef INCLUDED_armory_object_Uniforms
#include <hxinc/armory/object/Uniforms.h>
#endif
#ifndef INCLUDED_armory_system_Starter
#include <hxinc/armory/system/Starter.h>
#endif
#ifndef INCLUDED_iron_App
#include <hxinc/iron/App.h>
#endif
#ifndef INCLUDED_iron_RenderPath
#include <hxinc/iron/RenderPath.h>
#endif
#ifndef INCLUDED_iron_Scene
#include <hxinc/iron/Scene.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <hxinc/iron/object/Object.h>
#endif
#ifndef INCLUDED_kha_Display
#include <hxinc/kha/Display.h>
#endif
#ifndef INCLUDED_kha_FramebufferOptions
#include <hxinc/kha/FramebufferOptions.h>
#endif
#ifndef INCLUDED_kha_System
#include <hxinc/kha/System.h>
#endif
#ifndef INCLUDED_kha_SystemOptions
#include <hxinc/kha/SystemOptions.h>
#endif
#ifndef INCLUDED_kha_Window
#include <hxinc/kha/Window.h>
#endif
#ifndef INCLUDED_kha_WindowOptions
#include <hxinc/kha/WindowOptions.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_cde942b0b2ef1260_45_main,"armory.system.Starter","main",0x83097763,"armory.system.Starter.main","armory/system/Starter.hx",45,0x9064f5da)
HX_LOCAL_STACK_FRAME(_hx_pos_cde942b0b2ef1260_44_main,"armory.system.Starter","main",0x83097763,"armory.system.Starter.main","armory/system/Starter.hx",44,0x9064f5da)
HX_LOCAL_STACK_FRAME(_hx_pos_cde942b0b2ef1260_36_main,"armory.system.Starter","main",0x83097763,"armory.system.Starter.main","armory/system/Starter.hx",36,0x9064f5da)
HX_LOCAL_STACK_FRAME(_hx_pos_cde942b0b2ef1260_13_main,"armory.system.Starter","main",0x83097763,"armory.system.Starter.main","armory/system/Starter.hx",13,0x9064f5da)
HX_LOCAL_STACK_FRAME(_hx_pos_cde942b0b2ef1260_12_main,"armory.system.Starter","main",0x83097763,"armory.system.Starter.main","armory/system/Starter.hx",12,0x9064f5da)
namespace armory{
namespace _hx_system{

void Starter_obj::__construct() { }

Dynamic Starter_obj::__CreateEmpty() { return new Starter_obj; }

void *Starter_obj::_hx_vtable = 0;

Dynamic Starter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Starter_obj > _hx_result = new Starter_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Starter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x19e31ca2;
}

int Starter_obj::tasks;

void Starter_obj::main(::String scene,int mode,bool resize,bool min,bool max,int w,int h,int msaa,bool vsync, ::Dynamic getRenderPath){
            		HX_BEGIN_LOCAL_FUNC_S10(hx::LocalFunc,_hx_Closure_3,int,h,bool,min, ::Dynamic,getRenderPath,bool,max,int,msaa,int,w,int,mode,::String,scene,bool,vsync,bool,resize) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2, ::Dynamic,getRenderPath,::String,scene) HXARGC(1)
            			void _hx_run( ::kha::Window window){
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::Dynamic,getRenderPath,::String,scene) HXARGC(0)
            				void _hx_run(){
            					HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,getRenderPath) HXARGC(1)
            					void _hx_run( ::iron::object::Object object){
            						HX_GC_STACKFRAME(&_hx_pos_cde942b0b2ef1260_45_main)
HXLINE(  45)						::iron::RenderPath_obj::setActive(( ( ::iron::RenderPath)(getRenderPath()) ));
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_GC_STACKFRAME(&_hx_pos_cde942b0b2ef1260_44_main)
HXLINE(  44)					::iron::Scene_obj::setActive(scene, ::Dynamic(new _hx_Closure_0(getRenderPath)));
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_GC_STACKFRAME(&_hx_pos_cde942b0b2ef1260_36_main)
HXLINE(  36)				::iron::App_obj::init( ::Dynamic(new _hx_Closure_1(getRenderPath,scene)));
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_cde942b0b2ef1260_13_main)
HXLINE(  14)			if ((::armory::_hx_system::Starter_obj::tasks > 0)) {
HXLINE(  14)				return;
            			}
HXLINE(  16)			if (hx::IsNull( ::armory::data::Config_obj::raw )) {
HXLINE(  16)				::armory::data::Config_obj::raw =  ::Dynamic(hx::Anon_obj::Create(0));
            			}
HXLINE(  17)			 ::Dynamic c = ::armory::data::Config_obj::raw;
HXLINE(  19)			if (hx::IsNull( c->__Field(HX_("window_mode",52,15,17,59),hx::paccDynamic) )) {
HXLINE(  19)				c->__SetField(HX_("window_mode",52,15,17,59),mode,hx::paccDynamic);
            			}
HXLINE(  20)			if (hx::IsNull( c->__Field(HX_("window_resizable",1c,93,99,06),hx::paccDynamic) )) {
HXLINE(  20)				c->__SetField(HX_("window_resizable",1c,93,99,06),resize,hx::paccDynamic);
            			}
HXLINE(  21)			if (hx::IsNull( c->__Field(HX_("window_minimizable",72,d2,2e,4d),hx::paccDynamic) )) {
HXLINE(  21)				c->__SetField(HX_("window_minimizable",72,d2,2e,4d),min,hx::paccDynamic);
            			}
HXLINE(  22)			if (hx::IsNull( c->__Field(HX_("window_maximizable",84,2d,49,88),hx::paccDynamic) )) {
HXLINE(  22)				c->__SetField(HX_("window_maximizable",84,2d,49,88),max,hx::paccDynamic);
            			}
HXLINE(  23)			if (hx::IsNull( c->__Field(HX_("window_w",28,c3,cd,7d),hx::paccDynamic) )) {
HXLINE(  23)				c->__SetField(HX_("window_w",28,c3,cd,7d),w,hx::paccDynamic);
            			}
HXLINE(  24)			if (hx::IsNull( c->__Field(HX_("window_h",19,c3,cd,7d),hx::paccDynamic) )) {
HXLINE(  24)				c->__SetField(HX_("window_h",19,c3,cd,7d),h,hx::paccDynamic);
            			}
HXLINE(  25)			if (hx::IsNull( c->__Field(HX_("window_msaa",b5,1b,1a,59),hx::paccDynamic) )) {
HXLINE(  25)				c->__SetField(HX_("window_msaa",b5,1b,1a,59),msaa,hx::paccDynamic);
            			}
HXLINE(  26)			if (hx::IsNull( c->__Field(HX_("window_vsync",02,9d,6b,cc),hx::paccDynamic) )) {
HXLINE(  26)				c->__SetField(HX_("window_vsync",02,9d,6b,cc),vsync,hx::paccDynamic);
            			}
HXLINE(  28)			::armory::object::Uniforms_obj::_hx_register();
HXLINE(  30)			int windowMode;
HXDLIN(  30)			if (hx::IsEq( c->__Field(HX_("window_mode",52,15,17,59),hx::paccDynamic),0 )) {
HXLINE(  30)				windowMode = 0;
            			}
            			else {
HXLINE(  30)				windowMode = 1;
            			}
HXLINE(  31)			int windowFeatures = 0;
HXLINE(  32)			if (( (bool)(c->__Field(HX_("window_resizable",1c,93,99,06),hx::paccDynamic)) )) {
HXLINE(  32)				windowFeatures = (windowFeatures | 1);
            			}
HXLINE(  33)			if (( (bool)(c->__Field(HX_("window_maximizable",84,2d,49,88),hx::paccDynamic)) )) {
HXLINE(  33)				windowFeatures = (windowFeatures | 4);
            			}
HXLINE(  34)			if (( (bool)(c->__Field(HX_("window_minimizable",72,d2,2e,4d),hx::paccDynamic)) )) {
HXLINE(  34)				windowFeatures = (windowFeatures | 2);
            			}
HXLINE(  35)			 ::Dynamic _g2 = c->__Field(HX_("window_w",28,c3,cd,7d),hx::paccDynamic);
HXDLIN(  35)			 ::Dynamic _g1 = c->__Field(HX_("window_h",19,c3,cd,7d),hx::paccDynamic);
HXDLIN(  35)			 ::kha::WindowOptions _g =  ::kha::WindowOptions_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),windowFeatures,windowMode);
HXDLIN(  35)			::kha::System_obj::start( ::kha::SystemOptions_obj::__alloc( HX_CTX ,HX_("TestAnim",a3,c7,55,1d),_g2,_g1,_g, ::kha::FramebufferOptions_obj::__alloc( HX_CTX ,null(),c->__Field(HX_("window_vsync",02,9d,6b,cc),hx::paccDynamic),null(),null(),null(),c->__Field(HX_("window_msaa",b5,1b,1a,59),hx::paccDynamic))), ::Dynamic(new _hx_Closure_2(getRenderPath,scene)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_cde942b0b2ef1260_12_main)
HXLINE(  13)		 ::Dynamic start =  ::Dynamic(new _hx_Closure_3(h,min,getRenderPath,max,msaa,w,mode,scene,vsync,resize));
HXLINE(  75)		::armory::_hx_system::Starter_obj::tasks = 1;
HXLINE(  79)		::armory::_hx_system::Starter_obj::tasks--;
HXDLIN(  79)		start();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(Starter_obj,main,(void))


Starter_obj::Starter_obj()
{
}

bool Starter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"tasks") ) { outValue = ( tasks ); return true; }
	}
	return false;
}

bool Starter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"tasks") ) { tasks=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Starter_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Starter_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Starter_obj::tasks,HX_("tasks",8e,9d,f0,0a)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Starter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Starter_obj::tasks,"tasks");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Starter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Starter_obj::tasks,"tasks");
};

#endif

hx::Class Starter_obj::__mClass;

static ::String Starter_obj_sStaticFields[] = {
	HX_("tasks",8e,9d,f0,0a),
	HX_("main",39,38,56,48),
	::String(null())
};

void Starter_obj::__register()
{
	Starter_obj _hx_dummy;
	Starter_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("armory.system.Starter",84,71,7d,17);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Starter_obj::__GetStatic;
	__mClass->mSetStaticField = &Starter_obj::__SetStatic;
	__mClass->mMarkFunc = Starter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Starter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Starter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Starter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Starter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Starter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace armory
} // end namespace system
