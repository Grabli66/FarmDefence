// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Reflect
#include <hxinc/Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <hxinc/haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <hxinc/haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_iron_CachedShaderContext
#include <hxinc/iron/CachedShaderContext.h>
#endif
#ifndef INCLUDED_iron_RenderPath
#include <hxinc/iron/RenderPath.h>
#endif
#ifndef INCLUDED_iron_RenderTarget
#include <hxinc/iron/RenderTarget.h>
#endif
#ifndef INCLUDED_iron_RenderTargetRaw
#include <hxinc/iron/RenderTargetRaw.h>
#endif
#ifndef INCLUDED_iron_Scene
#include <hxinc/iron/Scene.h>
#endif
#ifndef INCLUDED_iron_data_CameraData
#include <hxinc/iron/data/CameraData.h>
#endif
#ifndef INCLUDED_iron_data_ConstData
#include <hxinc/iron/data/ConstData.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <hxinc/iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_data_LightData
#include <hxinc/iron/data/LightData.h>
#endif
#ifndef INCLUDED_iron_data_MaterialData
#include <hxinc/iron/data/MaterialData.h>
#endif
#ifndef INCLUDED_iron_data_ShaderContext
#include <hxinc/iron/data/ShaderContext.h>
#endif
#ifndef INCLUDED_iron_data_ShaderData
#include <hxinc/iron/data/ShaderData.h>
#endif
#ifndef INCLUDED_iron_data_TCameraData
#include <hxinc/iron/data/TCameraData.h>
#endif
#ifndef INCLUDED_iron_data_TLightData
#include <hxinc/iron/data/TLightData.h>
#endif
#ifndef INCLUDED_iron_data_TShaderOverride
#include <hxinc/iron/data/TShaderOverride.h>
#endif
#ifndef INCLUDED_iron_data_TWorldData
#include <hxinc/iron/data/TWorldData.h>
#endif
#ifndef INCLUDED_iron_data_WorldData
#include <hxinc/iron/data/WorldData.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <hxinc/iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_object_CameraObject
#include <hxinc/iron/object/CameraObject.h>
#endif
#ifndef INCLUDED_iron_object_LightObject
#include <hxinc/iron/object/LightObject.h>
#endif
#ifndef INCLUDED_iron_object_MeshObject
#include <hxinc/iron/object/MeshObject.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <hxinc/iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <hxinc/iron/object/Transform.h>
#endif
#ifndef INCLUDED_iron_object_Uniforms
#include <hxinc/iron/object/Uniforms.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Scheduler
#include <hxinc/kha/Scheduler.h>
#endif
#ifndef INCLUDED_kha_Shaders
#include <hxinc/kha/Shaders.h>
#endif
#ifndef INCLUDED_kha_System
#include <hxinc/kha/System.h>
#endif
#ifndef INCLUDED_kha__Color_Color_Impl_
#include <hxinc/kha/_Color/Color_Impl_.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_compute_Shader
#include <hxinc/kha/compute/Shader.h>
#endif
#ifndef INCLUDED_kha_graphics4_CubeMap
#include <hxinc/kha/graphics4/CubeMap.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <hxinc/kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_IndexBuffer
#include <hxinc/kha/graphics4/IndexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <hxinc/kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <hxinc/kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureFormat
#include <hxinc/kha/graphics4/TextureFormat.h>
#endif
#ifndef INCLUDED_kha_graphics4_Usage
#include <hxinc/kha/graphics4/Usage.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexBuffer
#include <hxinc/kha/graphics4/VertexBuffer.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_14_new,"iron.RenderPath","new",0xae2cdb13,"iron.RenderPath.new","iron/RenderPath.hx",14,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_44_get_ready,"iron.RenderPath","get_ready",0x2b228fad,"iron.RenderPath.get_ready","iron/RenderPath.hx",44,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_54_lightCastShadow,"iron.RenderPath","lightCastShadow",0xd4247ba8,"iron.RenderPath.lightCastShadow","iron/RenderPath.hx",54,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_58_lightIsSun,"iron.RenderPath","lightIsSun",0xe85decb9,"iron.RenderPath.lightIsSun","iron/RenderPath.hx",58,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_80_getLight,"iron.RenderPath","getLight",0x77d7eccd,"iron.RenderPath.getLight","iron/RenderPath.hx",80,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_82_renderFrame,"iron.RenderPath","renderFrame",0x6df41aaa,"iron.RenderPath.renderFrame","iron/RenderPath.hx",82,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_118_setTarget,"iron.RenderPath","setTarget",0xe752fb86,"iron.RenderPath.setTarget","iron/RenderPath.hx",118,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_169_begin,"iron.RenderPath","begin",0x4e8d479c,"iron.RenderPath.begin","iron/RenderPath.hx",169,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_172_end,"iron.RenderPath","end",0xae260e8e,"iron.RenderPath.end","iron/RenderPath.hx",172,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_179_setCurrentViewport,"iron.RenderPath","setCurrentViewport",0xf6faceea,"iron.RenderPath.setCurrentViewport","iron/RenderPath.hx",179,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_182_setCurrentScissor,"iron.RenderPath","setCurrentScissor",0x80246218,"iron.RenderPath.setCurrentScissor","iron/RenderPath.hx",182,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_188_setFrameScissor,"iron.RenderPath","setFrameScissor",0x9dff8564,"iron.RenderPath.setFrameScissor","iron/RenderPath.hx",188,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_191_setViewport,"iron.RenderPath","setViewport",0x68c58bdb,"iron.RenderPath.setViewport","iron/RenderPath.hx",191,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_196_clearTarget,"iron.RenderPath","clearTarget",0xb6997671,"iron.RenderPath.clearTarget","iron/RenderPath.hx",196,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_207_clearImage,"iron.RenderPath","clearImage",0x3875603b,"iron.RenderPath.clearImage","iron/RenderPath.hx",207,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_212_generateMipmaps,"iron.RenderPath","generateMipmaps",0x2ae5be69,"iron.RenderPath.generateMipmaps","iron/RenderPath.hx",212,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_235_drawMeshes,"iron.RenderPath","drawMeshes",0xf077346c,"iron.RenderPath.drawMeshes","iron/RenderPath.hx",235,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_281_submitDraw,"iron.RenderPath","submitDraw",0xfcfb9de9,"iron.RenderPath.submitDraw","iron/RenderPath.hx",281,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_492_drawSkydome,"iron.RenderPath","drawSkydome",0x4945cf13,"iron.RenderPath.drawSkydome","iron/RenderPath.hx",492,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_511_drawLightVolume,"iron.RenderPath","drawLightVolume",0x6310e0df,"iron.RenderPath.drawLightVolume","iron/RenderPath.hx",511,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_542_bindTarget,"iron.RenderPath","bindTarget",0x5518ca9b,"iron.RenderPath.bindTarget","iron/RenderPath.hx",542,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_547_drawShader,"iron.RenderPath","drawShader",0x04e63bf6,"iron.RenderPath.drawShader","iron/RenderPath.hx",547,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_564_getComputeShader,"iron.RenderPath","getComputeShader",0xb4b198f3,"iron.RenderPath.getComputeShader","iron/RenderPath.hx",564,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_622_loadShader,"iron.RenderPath","loadShader",0x784def98,"iron.RenderPath.loadShader","iron/RenderPath.hx",622,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_607_loadShader,"iron.RenderPath","loadShader",0x784def98,"iron.RenderPath.loadShader","iron/RenderPath.hx",607,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_628_unload,"iron.RenderPath","unload",0x37c7082c,"iron.RenderPath.unload","iron/RenderPath.hx",628,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_631_resize,"iron.RenderPath","resize",0xdab5c121,"iron.RenderPath.resize","iron/RenderPath.hx",631,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_642_createRenderTarget,"iron.RenderPath","createRenderTarget",0xe6f02b10,"iron.RenderPath.createRenderTarget","iron/RenderPath.hx",642,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_650_createDepthBuffer,"iron.RenderPath","createDepthBuffer",0x7d065eba,"iron.RenderPath.createDepthBuffer","iron/RenderPath.hx",650,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_653_createTarget,"iron.RenderPath","createTarget",0x5509ba5a,"iron.RenderPath.createTarget","iron/RenderPath.hx",653,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_697_createImage,"iron.RenderPath","createImage",0x82a3cc72,"iron.RenderPath.createImage","iron/RenderPath.hx",697,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_737_createCubeMap,"iron.RenderPath","createCubeMap",0x17e1ad7e,"iron.RenderPath.createCubeMap","iron/RenderPath.hx",737,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_743_getTextureFormat,"iron.RenderPath","getTextureFormat",0xbdc10d69,"iron.RenderPath.getTextureFormat","iron/RenderPath.hx",743,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_758_getDepthStencilFormat,"iron.RenderPath","getDepthStencilFormat",0xbf0254f9,"iron.RenderPath.getDepthStencilFormat","iron/RenderPath.hx",758,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_75_setActive,"iron.RenderPath","setActive",0x76ac49fb,"iron.RenderPath.setActive","iron/RenderPath.hx",75,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_225_sortMeshesDistance,"iron.RenderPath","sortMeshesDistance",0x128e349b,"iron.RenderPath.sortMeshesDistance","iron/RenderPath.hx",225,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_217_sortMeshesDistance,"iron.RenderPath","sortMeshesDistance",0x128e349b,"iron.RenderPath.sortMeshesDistance","iron/RenderPath.hx",217,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_231_sortMeshesShader,"iron.RenderPath","sortMeshesShader",0x65ba1b0b,"iron.RenderPath.sortMeshesShader","iron/RenderPath.hx",231,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_230_sortMeshesShader,"iron.RenderPath","sortMeshesShader",0x65ba1b0b,"iron.RenderPath.sortMeshesShader","iron/RenderPath.hx",230,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_770_boot,"iron.RenderPath","boot",0xb12bd61f,"iron.RenderPath.boot","iron/RenderPath.hx",770,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e78f1c8bfab00_771_boot,"iron.RenderPath","boot",0xb12bd61f,"iron.RenderPath.boot","iron/RenderPath.hx",771,0x489fbb1c)
namespace iron{

void RenderPath_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_14_new)
HXLINE( 648)		this->depthBuffers = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  50)		this->depthToRenderTarget =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  49)		this->renderTargets =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  48)		this->commands = null();
HXLINE(  46)		this->cachedShaderContexts =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  45)		this->loading = 0;
HXLINE(  42)		this->paused = false;
HXLINE(  40)		this->drawOrder = 1;
HXLINE(  39)		this->lastFrameTime = ((Float)0.0);
HXLINE(  36)		this->viewportScaled = false;
HXLINE(  35)		this->scissorSet = false;
HXLINE(  32)		this->lastH = 0;
HXLINE(  31)		this->lastW = 0;
HXLINE(  27)		this->currentLightIndex = 0;
HXLINE(  24)		this->currentTarget = null();
HXLINE(  23)		this->frameTime = ((Float)0.0);
HXLINE(  22)		this->frameScissorH = 0;
HXLINE(  21)		this->frameScissorW = 0;
HXLINE(  20)		this->frameScissorY = 0;
HXLINE(  19)		this->frameScissorX = 0;
HXLINE(  18)		this->frameScissor = false;
            	}

Dynamic RenderPath_obj::__CreateEmpty() { return new RenderPath_obj; }

void *RenderPath_obj::_hx_vtable = 0;

Dynamic RenderPath_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RenderPath_obj > _hx_result = new RenderPath_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool RenderPath_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x627b1c43;
}

bool RenderPath_obj::get_ready(){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_44_get_ready)
HXDLIN(  44)		return (this->loading == 0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderPath_obj,get_ready,return )

 ::Dynamic RenderPath_obj::lightCastShadow(){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_54_lightCastShadow)
HXDLIN(  54)		 ::iron::object::LightObject _hx_tmp;
HXDLIN(  54)		if ((::iron::Scene_obj::active->lights->length > 0)) {
HXDLIN(  54)			_hx_tmp = ::iron::Scene_obj::active->lights->__get(this->currentLightIndex).StaticCast<  ::iron::object::LightObject >();
            		}
            		else {
HXDLIN(  54)			_hx_tmp = null();
            		}
HXDLIN(  54)		return _hx_tmp->data->raw->cast_shadow;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderPath_obj,lightCastShadow,return )

bool RenderPath_obj::lightIsSun(){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_58_lightIsSun)
HXDLIN(  58)		 ::iron::object::LightObject _hx_tmp;
HXDLIN(  58)		if ((::iron::Scene_obj::active->lights->length > 0)) {
HXDLIN(  58)			_hx_tmp = ::iron::Scene_obj::active->lights->__get(this->currentLightIndex).StaticCast<  ::iron::object::LightObject >();
            		}
            		else {
HXDLIN(  58)			_hx_tmp = null();
            		}
HXDLIN(  58)		return (_hx_tmp->data->raw->type == HX_("sun",8c,a9,57,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderPath_obj,lightIsSun,return )

 ::iron::object::LightObject RenderPath_obj::getLight(int index){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_80_getLight)
HXDLIN(  80)		if ((::iron::Scene_obj::active->lights->length > 0)) {
HXDLIN(  80)			return ::iron::Scene_obj::active->lights->__get(index).StaticCast<  ::iron::object::LightObject >();
            		}
            		else {
HXDLIN(  80)			return null();
            		}
HXDLIN(  80)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,getLight,return )

void RenderPath_obj::renderFrame(::Dynamic g){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_82_renderFrame)
HXLINE(  83)		bool _hx_tmp;
HXDLIN(  83)		bool _hx_tmp1;
HXDLIN(  83)		bool _hx_tmp2;
HXDLIN(  83)		if (!(!(this->get_ready()))) {
HXLINE(  83)			_hx_tmp2 = this->paused;
            		}
            		else {
HXLINE(  83)			_hx_tmp2 = true;
            		}
HXDLIN(  83)		if (!(_hx_tmp2)) {
HXLINE(  83)			_hx_tmp1 = (::kha::System_obj::windowWidth(null()) == 0);
            		}
            		else {
HXLINE(  83)			_hx_tmp1 = true;
            		}
HXDLIN(  83)		if (!(_hx_tmp1)) {
HXLINE(  83)			_hx_tmp = (::kha::System_obj::windowHeight(null()) == 0);
            		}
            		else {
HXLINE(  83)			_hx_tmp = true;
            		}
HXDLIN(  83)		if (_hx_tmp) {
HXLINE(  83)			return;
            		}
HXLINE(  86)		bool _hx_tmp3;
HXDLIN(  86)		if ((this->lastW > 0)) {
HXLINE(  86)			int _hx_tmp4 = this->lastW;
HXDLIN(  86)			if ((_hx_tmp4 == ::kha::System_obj::windowWidth(null()))) {
HXLINE(  86)				int _hx_tmp5 = this->lastH;
HXDLIN(  86)				_hx_tmp3 = (_hx_tmp5 != ::kha::System_obj::windowHeight(null()));
            			}
            			else {
HXLINE(  86)				_hx_tmp3 = true;
            			}
            		}
            		else {
HXLINE(  86)			_hx_tmp3 = false;
            		}
HXDLIN(  86)		if (_hx_tmp3) {
HXLINE(  86)			this->resize();
            		}
HXLINE(  87)		this->lastW = ::kha::System_obj::windowWidth(null());
HXLINE(  88)		this->lastH = ::kha::System_obj::windowHeight(null());
HXLINE(  91)		Float _hx_tmp6 = ::kha::Scheduler_obj::time();
HXDLIN(  91)		this->frameTime = (_hx_tmp6 - this->lastFrameTime);
HXLINE(  92)		this->lastFrameTime = ::kha::Scheduler_obj::time();
HXLINE( 103)		::Dynamic _hx_tmp7;
HXDLIN( 103)		bool _hx_tmp8;
HXDLIN( 103)		if (hx::IsNotNull( ::iron::Scene_obj::active->camera )) {
HXLINE( 103)			_hx_tmp8 = hx::IsNull( ::iron::Scene_obj::active->camera->data->renderTarget );
            		}
            		else {
HXLINE( 103)			_hx_tmp8 = true;
            		}
HXDLIN( 103)		if (_hx_tmp8) {
HXLINE( 103)			_hx_tmp7 = g;
            		}
            		else {
HXLINE( 103)			_hx_tmp7 = ::iron::Scene_obj::active->camera->data->renderTarget->get_g4();
            		}
HXDLIN( 103)		this->frameG = _hx_tmp7;
HXLINE( 104)		this->currentG = this->frameG;
HXLINE( 105)		this->currentW = ::kha::System_obj::windowWidth(null());
HXLINE( 106)		this->currentH = ::kha::System_obj::windowHeight(null());
HXLINE( 107)		this->currentD = 1;
HXLINE( 108)		this->currentCube = false;
HXLINE( 109)		this->currentFace = -1;
HXLINE( 110)		this->meshesSorted = false;
HXLINE( 112)		this->currentLightIndex = 0;
HXLINE( 113)		{
HXLINE( 113)			int _g = 0;
HXDLIN( 113)			::Array< ::Dynamic> _g1 = ::iron::Scene_obj::active->lights;
HXDLIN( 113)			while((_g < _g1->length)){
HXLINE( 113)				 ::iron::object::LightObject l = _g1->__get(_g).StaticCast<  ::iron::object::LightObject >();
HXDLIN( 113)				_g = (_g + 1);
HXDLIN( 113)				if (l->visible) {
HXLINE( 113)					l->buildMatrices(::iron::Scene_obj::active->camera);
            				}
            			}
            		}
HXLINE( 115)		this->commands();
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,renderFrame,(void))

void RenderPath_obj::setTarget(::String target,::Array< ::String > additional,hx::Null< Float >  __o_viewportScale){
Float viewportScale = __o_viewportScale.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_118_setTarget)
HXLINE( 119)		if ((target == HX_("",00,00,00,00))) {
HXLINE( 120)			this->currentG = this->frameG;
HXLINE( 121)			this->currentW = ::kha::System_obj::windowWidth(null());
HXLINE( 122)			this->currentH = ::kha::System_obj::windowHeight(null());
HXLINE( 123)			this->currentD = 1;
HXLINE( 124)			this->currentTarget = null();
HXLINE( 125)			this->currentCube = false;
HXLINE( 126)			this->currentFace = -1;
HXLINE( 127)			if (this->frameScissor) {
HXLINE( 127)				this->setFrameScissor();
            			}
HXLINE( 128)			{
HXLINE( 128)				::Dynamic g = this->currentG;
HXDLIN( 128)				int face = -1;
HXDLIN( 128)				if ((face >= 0)) {
HXLINE( 128)					::kha::graphics4::Graphics_obj::beginFace(g,(5 - face));
            				}
            				else {
HXLINE( 128)					::kha::graphics4::Graphics_obj::begin(g,null());
            				}
            			}
            		}
            		else {
HXLINE( 135)			 ::iron::RenderTarget rt = ( ( ::iron::RenderTarget)(this->renderTargets->get(target)) );
HXLINE( 136)			this->currentTarget = rt;
HXLINE( 137)			::Array< ::Dynamic> additionalImages = null();
HXLINE( 138)			if (hx::IsNotNull( additional )) {
HXLINE( 139)				additionalImages = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 140)				{
HXLINE( 140)					int _g = 0;
HXDLIN( 140)					while((_g < additional->length)){
HXLINE( 140)						::String s = additional->__get(_g);
HXDLIN( 140)						_g = (_g + 1);
HXLINE( 141)						 ::iron::RenderTarget t = ( ( ::iron::RenderTarget)(this->renderTargets->get(s)) );
HXLINE( 142)						additionalImages->push(t->image);
            					}
            				}
            			}
HXLINE( 145)			::Dynamic _hx_tmp;
HXDLIN( 145)			if (rt->isCubeMap) {
HXLINE( 145)				_hx_tmp = rt->cubeMap->get_g4();
            			}
            			else {
HXLINE( 145)				_hx_tmp = rt->image->get_g4();
            			}
HXDLIN( 145)			this->currentG = _hx_tmp;
HXLINE( 146)			int _hx_tmp1;
HXDLIN( 146)			if (rt->isCubeMap) {
HXLINE( 146)				_hx_tmp1 = rt->cubeMap->get_width();
            			}
            			else {
HXLINE( 146)				_hx_tmp1 = rt->image->get_width();
            			}
HXDLIN( 146)			this->currentW = _hx_tmp1;
HXLINE( 147)			int _hx_tmp2;
HXDLIN( 147)			if (rt->isCubeMap) {
HXLINE( 147)				_hx_tmp2 = rt->cubeMap->get_height();
            			}
            			else {
HXLINE( 147)				_hx_tmp2 = rt->image->get_height();
            			}
HXDLIN( 147)			this->currentH = _hx_tmp2;
HXLINE( 148)			if (rt->is3D) {
HXLINE( 148)				this->currentD = rt->image->get_depth();
            			}
HXLINE( 149)			this->currentCube = rt->isCubeMap;
HXLINE( 150)			{
HXLINE( 150)				::Dynamic g1 = this->currentG;
HXDLIN( 150)				int face1 = this->currentFace;
HXDLIN( 150)				if ((face1 >= 0)) {
HXLINE( 150)					::kha::graphics4::Graphics_obj::beginFace(g1,(5 - face1));
            				}
            				else {
HXLINE( 150)					::kha::graphics4::Graphics_obj::begin(g1,additionalImages);
            				}
            			}
            		}
HXLINE( 152)		if ((viewportScale != ((Float)1.0))) {
HXLINE( 153)			this->viewportScaled = true;
HXLINE( 154)			int viewW = ::Std_obj::_hx_int((this->currentW * viewportScale));
HXLINE( 155)			int viewH = ::Std_obj::_hx_int((this->currentH * viewportScale));
HXLINE( 156)			::kha::graphics4::Graphics_obj::viewport(this->currentG,0,viewH,viewW,viewH);
HXLINE( 157)			::kha::graphics4::Graphics_obj::scissor(this->currentG,0,viewH,viewW,viewH);
            		}
            		else {
HXLINE( 159)			if (this->viewportScaled) {
HXLINE( 160)				this->viewportScaled = false;
HXLINE( 161)				this->setCurrentViewport(this->currentW,this->currentH);
HXLINE( 162)				this->setCurrentScissor(this->currentW,this->currentH);
            			}
            		}
HXLINE( 164)		this->bindParams = null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(RenderPath_obj,setTarget,(void))

void RenderPath_obj::begin(::Dynamic g,::Array< ::Dynamic> additionalRenderTargets,hx::Null< int >  __o_face){
int face = __o_face.Default(-1);
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_169_begin)
HXDLIN( 169)		if ((face >= 0)) {
HXDLIN( 169)			::kha::graphics4::Graphics_obj::beginFace(g,(5 - face));
            		}
            		else {
HXDLIN( 169)			::kha::graphics4::Graphics_obj::begin(g,additionalRenderTargets);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(RenderPath_obj,begin,(void))

void RenderPath_obj::end(::Dynamic g){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_172_end)
HXLINE( 173)		::kha::graphics4::Graphics_obj::end(g);
HXLINE( 174)		if (this->scissorSet) {
HXLINE( 174)			::kha::graphics4::Graphics_obj::disableScissor(g);
HXDLIN( 174)			this->scissorSet = false;
            		}
HXLINE( 175)		this->bindParams = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,end,(void))

void RenderPath_obj::setCurrentViewport(int viewW,int viewH){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_179_setCurrentViewport)
HXDLIN( 179)		::Dynamic _hx_tmp = this->currentG;
HXDLIN( 179)		::kha::graphics4::Graphics_obj::viewport(_hx_tmp,0,(this->currentH - viewH),viewW,viewH);
            	}


HX_DEFINE_DYNAMIC_FUNC2(RenderPath_obj,setCurrentViewport,(void))

void RenderPath_obj::setCurrentScissor(int viewW,int viewH){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_182_setCurrentScissor)
HXLINE( 183)		::Dynamic _hx_tmp = this->currentG;
HXDLIN( 183)		::kha::graphics4::Graphics_obj::scissor(_hx_tmp,0,(this->currentH - viewH),viewW,viewH);
HXLINE( 184)		this->scissorSet = true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(RenderPath_obj,setCurrentScissor,(void))

void RenderPath_obj::setFrameScissor(){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_188_setFrameScissor)
HXDLIN( 188)		::Dynamic _hx_tmp = this->frameG;
HXDLIN( 188)		int _hx_tmp1 = this->frameScissorX;
HXDLIN( 188)		int _hx_tmp2 = this->currentH;
HXDLIN( 188)		::kha::graphics4::Graphics_obj::scissor(_hx_tmp,_hx_tmp1,(_hx_tmp2 - (this->frameScissorH - this->frameScissorY)),this->frameScissorW,this->frameScissorH);
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderPath_obj,setFrameScissor,(void))

void RenderPath_obj::setViewport(int viewW,int viewH){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_191_setViewport)
HXLINE( 192)		this->setCurrentViewport(viewW,viewH);
HXLINE( 193)		this->setCurrentScissor(viewW,viewH);
            	}


HX_DEFINE_DYNAMIC_FUNC2(RenderPath_obj,setViewport,(void))

void RenderPath_obj::clearTarget( ::Dynamic colorFlag, ::Dynamic depthFlag){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_196_clearTarget)
HXLINE( 197)		if (hx::IsEq( colorFlag,-1 )) {
HXLINE( 198)			if (hx::IsNotNull( ::iron::Scene_obj::active->world )) {
HXLINE( 198)				colorFlag = ::iron::Scene_obj::active->world->raw->background_color;
            			}
            			else {
HXLINE( 199)				if (hx::IsNotNull( ::iron::Scene_obj::active->camera )) {
HXLINE( 200)					 ::kha::arrays::Float32ArrayPrivate cc = ::iron::Scene_obj::active->camera->data->raw->clear_color;
HXLINE( 201)					if (hx::IsNotNull( cc )) {
HXLINE( 201)						float colorFlag1 = cc->self.get(0);
HXDLIN( 201)						float colorFlag2 = cc->self.get(1);
HXDLIN( 201)						colorFlag = ::kha::_Color::Color_Impl__obj::fromFloats(colorFlag1,colorFlag2,cc->self.get(2),null());
            					}
            				}
            			}
            		}
HXLINE( 204)		::kha::graphics4::Graphics_obj::clear(this->currentG,colorFlag,depthFlag,null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(RenderPath_obj,clearTarget,(void))

void RenderPath_obj::clearImage(::String target,int color){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_207_clearImage)
HXLINE( 208)		 ::iron::RenderTarget rt = ( ( ::iron::RenderTarget)(this->renderTargets->get(target)) );
HXLINE( 209)		 ::kha::Image rt1 = rt->image;
HXDLIN( 209)		int _hx_tmp = rt->image->get_width();
HXDLIN( 209)		int _hx_tmp1 = rt->image->get_height();
HXDLIN( 209)		rt1->clear(0,0,0,_hx_tmp,_hx_tmp1,rt->image->get_depth(),color);
            	}


HX_DEFINE_DYNAMIC_FUNC2(RenderPath_obj,clearImage,(void))

void RenderPath_obj::generateMipmaps(::String target){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_212_generateMipmaps)
HXLINE( 213)		 ::iron::RenderTarget rt = ( ( ::iron::RenderTarget)(this->renderTargets->get(target)) );
HXLINE( 214)		rt->image->generateMipmaps(1000);
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,generateMipmaps,(void))

void RenderPath_obj::drawMeshes(::String context){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_235_drawMeshes)
HXLINE( 236)		 ::iron::object::LightObject light;
HXDLIN( 236)		if ((::iron::Scene_obj::active->lights->length > 0)) {
HXLINE( 236)			light = ::iron::Scene_obj::active->lights->__get(this->currentLightIndex).StaticCast<  ::iron::object::LightObject >();
            		}
            		else {
HXLINE( 236)			light = null();
            		}
HXLINE( 237)		bool _hx_tmp;
HXDLIN( 237)		if (hx::IsNotNull( light )) {
HXLINE( 237)			_hx_tmp = !(light->visible);
            		}
            		else {
HXLINE( 237)			_hx_tmp = false;
            		}
HXDLIN( 237)		if (_hx_tmp) {
HXLINE( 239)			if ((this->currentLightIndex > 0)) {
HXLINE( 239)				return;
            			}
            		}
HXLINE( 242)		bool isShadows = (context == HX_("shadowmap",bc,6e,b8,f4));
HXLINE( 243)		if (isShadows) {
HXLINE( 245)			bool _hx_tmp1;
HXDLIN( 245)			if (hx::IsNotNull( light )) {
HXLINE( 245)				_hx_tmp1 = !(( (bool)(light->data->raw->cast_shadow) ));
            			}
            			else {
HXLINE( 245)				_hx_tmp1 = true;
            			}
HXDLIN( 245)			if (_hx_tmp1) {
HXLINE( 245)				return;
            			}
            		}
HXLINE( 249)		bool _hx_tmp2;
HXDLIN( 249)		if ((this->currentFace >= 0)) {
HXLINE( 249)			_hx_tmp2 = hx::IsNotNull( light );
            		}
            		else {
HXLINE( 249)			_hx_tmp2 = false;
            		}
HXDLIN( 249)		if (_hx_tmp2) {
HXLINE( 249)			light->setCubeFace((5 - this->currentFace),::iron::Scene_obj::active->camera);
            		}
HXLINE( 251)		::Dynamic g = this->currentG;
HXLINE( 252)		bool drawn = false;
HXLINE( 267)		if (!(drawn)) {
HXLINE( 267)			this->submitDraw(context);
            		}
HXLINE( 277)		{
HXLINE( 277)			::kha::graphics4::Graphics_obj::end(g);
HXDLIN( 277)			if (this->scissorSet) {
HXLINE( 277)				::kha::graphics4::Graphics_obj::disableScissor(g);
HXDLIN( 277)				this->scissorSet = false;
            			}
HXDLIN( 277)			this->bindParams = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,drawMeshes,(void))

void RenderPath_obj::submitDraw(::String context){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_281_submitDraw)
HXLINE( 282)		 ::iron::object::LightObject light;
HXDLIN( 282)		if ((::iron::Scene_obj::active->lights->length > 0)) {
HXLINE( 282)			light = ::iron::Scene_obj::active->lights->__get(this->currentLightIndex).StaticCast<  ::iron::object::LightObject >();
            		}
            		else {
HXLINE( 282)			light = null();
            		}
HXLINE( 283)		::Dynamic g = this->currentG;
HXLINE( 285)		::iron::object::MeshObject_obj::lastPipeline = null();
HXLINE( 287)		bool _hx_tmp;
HXDLIN( 287)		if (!(this->meshesSorted)) {
HXLINE( 287)			_hx_tmp = hx::IsNotNull( ::iron::Scene_obj::active->camera );
            		}
            		else {
HXLINE( 287)			_hx_tmp = false;
            		}
HXDLIN( 287)		if (_hx_tmp) {
HXLINE( 291)			if ((this->drawOrder == 1)) {
HXLINE( 291)				::iron::RenderPath_obj::sortMeshesShader(::iron::Scene_obj::active->meshes);
            			}
            			else {
HXLINE( 291)				::iron::RenderPath_obj::sortMeshesDistance(::iron::Scene_obj::active->meshes,::iron::Scene_obj::active->camera);
            			}
HXLINE( 293)			this->meshesSorted = true;
            		}
HXLINE( 299)		{
HXLINE( 299)			int _g = 0;
HXDLIN( 299)			::Array< ::Dynamic> _g1 = ::iron::Scene_obj::active->meshes;
HXDLIN( 299)			while((_g < _g1->length)){
HXLINE( 299)				 ::iron::object::MeshObject m = _g1->__get(_g).StaticCast<  ::iron::object::MeshObject >();
HXDLIN( 299)				_g = (_g + 1);
HXLINE( 300)				m->render(g,context,::iron::Scene_obj::active->camera,light,this->bindParams);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,submitDraw,(void))

void RenderPath_obj::drawSkydome(::String handle){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_492_drawSkydome)
HXLINE( 493)		if (hx::IsNull( ::iron::data::ConstData_obj::skydomeVB )) {
HXLINE( 493)			::iron::data::ConstData_obj::createSkydomeData();
            		}
HXLINE( 494)		 ::iron::CachedShaderContext cc = ( ( ::iron::CachedShaderContext)(this->cachedShaderContexts->get(handle)) );
HXLINE( 495)		if (hx::IsNull( cc->context )) {
HXLINE( 495)			return;
            		}
HXLINE( 496)		::Dynamic g = this->currentG;
HXLINE( 497)		::kha::graphics4::Graphics_obj::setPipeline(g,cc->context->pipeState);
HXLINE( 498)		 ::iron::object::LightObject light;
HXDLIN( 498)		if ((::iron::Scene_obj::active->lights->length > 0)) {
HXLINE( 498)			light = ::iron::Scene_obj::active->lights->__get(this->currentLightIndex).StaticCast<  ::iron::object::LightObject >();
            		}
            		else {
HXLINE( 498)			light = null();
            		}
HXLINE( 499)		::iron::object::Uniforms_obj::setContextConstants(g,cc->context,::iron::Scene_obj::active->camera,light,this->bindParams);
HXLINE( 500)		::iron::object::Uniforms_obj::setObjectConstants(g,cc->context,null(),::iron::Scene_obj::active->camera,light);
HXLINE( 504)		::kha::graphics4::Graphics_obj::setVertexBuffer(g,::iron::data::ConstData_obj::skydomeVB);
HXLINE( 506)		::kha::graphics4::Graphics_obj::setIndexBuffer(g,::iron::data::ConstData_obj::skydomeIB);
HXLINE( 507)		::kha::graphics4::Graphics_obj::drawIndexedVertices(g,null(),null());
HXLINE( 508)		{
HXLINE( 508)			::kha::graphics4::Graphics_obj::end(g);
HXDLIN( 508)			if (this->scissorSet) {
HXLINE( 508)				::kha::graphics4::Graphics_obj::disableScissor(g);
HXDLIN( 508)				this->scissorSet = false;
            			}
HXDLIN( 508)			this->bindParams = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,drawSkydome,(void))

void RenderPath_obj::drawLightVolume(::String handle){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_511_drawLightVolume)
HXLINE( 512)		 ::kha::graphics4::VertexBuffer vb = null();
HXLINE( 513)		 ::kha::graphics4::IndexBuffer ib = null();
HXLINE( 514)		 ::iron::object::LightObject light;
HXDLIN( 514)		if ((::iron::Scene_obj::active->lights->length > 0)) {
HXLINE( 514)			light = ::iron::Scene_obj::active->lights->__get(this->currentLightIndex).StaticCast<  ::iron::object::LightObject >();
            		}
            		else {
HXLINE( 514)			light = null();
            		}
HXLINE( 515)		::String type = light->data->raw->type;
HXLINE( 516)		bool _hx_tmp;
HXDLIN( 516)		if ((type != HX_("point",50,b4,8f,c6))) {
HXLINE( 516)			_hx_tmp = (type == HX_("area",8d,8b,74,40));
            		}
            		else {
HXLINE( 516)			_hx_tmp = true;
            		}
HXDLIN( 516)		if (_hx_tmp) {
HXLINE( 517)			if (hx::IsNull( ::iron::data::ConstData_obj::sphereVB )) {
HXLINE( 517)				::iron::data::ConstData_obj::createSphereData();
            			}
HXLINE( 518)			vb = ::iron::data::ConstData_obj::sphereVB;
HXLINE( 519)			ib = ::iron::data::ConstData_obj::sphereIB;
            		}
            		else {
HXLINE( 521)			if ((type == HX_("spot",02,e7,58,4c))) {
HXLINE( 525)				if (hx::IsNull( ::iron::data::ConstData_obj::sphereVB )) {
HXLINE( 525)					::iron::data::ConstData_obj::createSphereData();
            				}
HXLINE( 526)				vb = ::iron::data::ConstData_obj::sphereVB;
HXLINE( 527)				ib = ::iron::data::ConstData_obj::sphereIB;
            			}
            		}
HXLINE( 530)		 ::iron::CachedShaderContext cc = ( ( ::iron::CachedShaderContext)(this->cachedShaderContexts->get(handle)) );
HXLINE( 531)		::Dynamic g = this->currentG;
HXLINE( 532)		::kha::graphics4::Graphics_obj::setPipeline(g,cc->context->pipeState);
HXLINE( 533)		::iron::object::Uniforms_obj::setContextConstants(g,cc->context,::iron::Scene_obj::active->camera,light,this->bindParams);
HXLINE( 534)		::iron::object::Uniforms_obj::setObjectConstants(g,cc->context,null(),::iron::Scene_obj::active->camera,light);
HXLINE( 535)		::kha::graphics4::Graphics_obj::setVertexBuffer(g,vb);
HXLINE( 536)		::kha::graphics4::Graphics_obj::setIndexBuffer(g,ib);
HXLINE( 537)		::kha::graphics4::Graphics_obj::drawIndexedVertices(g,null(),null());
HXLINE( 538)		{
HXLINE( 538)			::kha::graphics4::Graphics_obj::end(g);
HXDLIN( 538)			if (this->scissorSet) {
HXLINE( 538)				::kha::graphics4::Graphics_obj::disableScissor(g);
HXDLIN( 538)				this->scissorSet = false;
            			}
HXDLIN( 538)			this->bindParams = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,drawLightVolume,(void))

void RenderPath_obj::bindTarget(::String target,::String uniform){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_542_bindTarget)
HXDLIN( 542)		if (hx::IsNotNull( this->bindParams )) {
HXDLIN( 542)			this->bindParams->push(target);
HXDLIN( 542)			this->bindParams->push(uniform);
            		}
            		else {
HXLINE( 543)			this->bindParams = ::Array_obj< ::String >::__new(2)->init(0,target)->init(1,uniform);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(RenderPath_obj,bindTarget,(void))

void RenderPath_obj::drawShader(::String handle){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_547_drawShader)
HXLINE( 549)		 ::iron::CachedShaderContext cc = ( ( ::iron::CachedShaderContext)(this->cachedShaderContexts->get(handle)) );
HXLINE( 550)		if (hx::IsNull( ::iron::data::ConstData_obj::screenAlignedVB )) {
HXLINE( 550)			::iron::data::ConstData_obj::createScreenAlignedData();
            		}
HXLINE( 551)		::Dynamic g = this->currentG;
HXLINE( 552)		::kha::graphics4::Graphics_obj::setPipeline(g,cc->context->pipeState);
HXLINE( 553)		 ::iron::object::LightObject light;
HXDLIN( 553)		if ((::iron::Scene_obj::active->lights->length > 0)) {
HXLINE( 553)			light = ::iron::Scene_obj::active->lights->__get(this->currentLightIndex).StaticCast<  ::iron::object::LightObject >();
            		}
            		else {
HXLINE( 553)			light = null();
            		}
HXLINE( 554)		::iron::object::Uniforms_obj::setContextConstants(g,cc->context,::iron::Scene_obj::active->camera,light,this->bindParams);
HXLINE( 555)		::iron::object::Uniforms_obj::setObjectConstants(g,cc->context,null(),::iron::Scene_obj::active->camera,light);
HXLINE( 556)		::kha::graphics4::Graphics_obj::setVertexBuffer(g,::iron::data::ConstData_obj::screenAlignedVB);
HXLINE( 557)		::kha::graphics4::Graphics_obj::setIndexBuffer(g,::iron::data::ConstData_obj::screenAlignedIB);
HXLINE( 558)		::kha::graphics4::Graphics_obj::drawIndexedVertices(g,null(),null());
HXLINE( 560)		{
HXLINE( 560)			::kha::graphics4::Graphics_obj::end(g);
HXDLIN( 560)			if (this->scissorSet) {
HXLINE( 560)				::kha::graphics4::Graphics_obj::disableScissor(g);
HXDLIN( 560)				this->scissorSet = false;
            			}
HXDLIN( 560)			this->bindParams = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,drawShader,(void))

 ::kha::compute::Shader RenderPath_obj::getComputeShader(::String handle){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_564_getComputeShader)
HXDLIN( 564)		return ( ( ::kha::compute::Shader)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),(handle + HX_("_comp",ee,d4,d5,f4)))) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,getComputeShader,return )

void RenderPath_obj::loadShader(::String handle){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0, ::iron::RenderPath,_gthis,::Array< ::String >,shaderPath, ::iron::CachedShaderContext,cc) HXARGC(1)
            		void _hx_run( ::iron::data::ShaderData res){
            			HX_GC_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_622_loadShader)
HXLINE( 623)			cc->context = res->getContext(shaderPath->__get(2));
HXLINE( 624)			_gthis->loading--;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_607_loadShader)
HXDLIN( 607)		 ::iron::RenderPath _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 608)		this->loading++;
HXLINE( 609)		 ::iron::CachedShaderContext cc = ( ( ::iron::CachedShaderContext)(this->cachedShaderContexts->get(handle)) );
HXLINE( 610)		if (hx::IsNotNull( cc )) {
HXLINE( 610)			this->loading--;
HXDLIN( 610)			return;
            		}
HXLINE( 612)		cc =  ::iron::CachedShaderContext_obj::__alloc( HX_CTX );
HXLINE( 613)		this->cachedShaderContexts->set(handle,cc);
HXLINE( 616)		::Array< ::String > shaderPath = handle.split(HX_("/",2f,00,00,00));
HXLINE( 622)		::iron::data::Data_obj::getShader(shaderPath->__get(0),shaderPath->__get(1), ::Dynamic(new _hx_Closure_0(_gthis,shaderPath,cc)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,loadShader,(void))

void RenderPath_obj::unload(){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_628_unload)
HXDLIN( 628)		 ::Dynamic rt = this->renderTargets->iterator();
HXDLIN( 628)		while(( (bool)(rt->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN( 628)			 ::iron::RenderTarget rt1 = ( ( ::iron::RenderTarget)(rt->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN( 628)			rt1->unload();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderPath_obj,unload,(void))

void RenderPath_obj::resize(){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_631_resize)
HXDLIN( 631)		 ::Dynamic rt = this->renderTargets->iterator();
HXDLIN( 631)		while(( (bool)(rt->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN( 631)			 ::iron::RenderTarget rt1 = ( ( ::iron::RenderTarget)(rt->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 632)			if ((rt1->raw->width == 0)) {
HXLINE( 633)				rt1->image->unload();
HXLINE( 634)				rt1->image = this->createImage(rt1->raw,rt1->depthStencil);
HXLINE( 635)				if ((rt1->depthStencilFrom != HX_("",00,00,00,00))) {
HXLINE( 636)					 ::kha::Image rt2 = rt1->image;
HXDLIN( 636)					rt2->setDepthStencilFrom(( ( ::iron::RenderTarget)(this->depthToRenderTarget->get(rt1->depthStencilFrom)) )->image);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderPath_obj,resize,(void))

 ::iron::RenderTarget RenderPath_obj::createRenderTarget( ::iron::RenderTargetRaw t){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_642_createRenderTarget)
HXLINE( 643)		 ::iron::RenderTarget rt = this->createTarget(t);
HXLINE( 644)		this->renderTargets->set(t->name,rt);
HXLINE( 645)		return rt;
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,createRenderTarget,return )

void RenderPath_obj::createDepthBuffer(::String name,::String format){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_650_createDepthBuffer)
HXDLIN( 650)		this->depthBuffers->push( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("format",37,8f,8e,fd),format)
            			->setFixed(1,HX_("name",4b,72,ff,48),name)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(RenderPath_obj,createDepthBuffer,(void))

 ::iron::RenderTarget RenderPath_obj::createTarget( ::iron::RenderTargetRaw t){
            	HX_GC_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_653_createTarget)
HXLINE( 654)		 ::iron::RenderTarget rt =  ::iron::RenderTarget_obj::__alloc( HX_CTX ,t);
HXLINE( 656)		if (hx::IsNotNull( t->depth_buffer )) {
HXLINE( 657)			rt->hasDepth = true;
HXLINE( 658)			 ::iron::RenderTarget depthTarget = ( ( ::iron::RenderTarget)(this->depthToRenderTarget->get(t->depth_buffer)) );
HXLINE( 661)			if (hx::IsNull( depthTarget )) {
HXLINE( 662)				int _g = 0;
HXDLIN( 662)				::Array< ::Dynamic> _g1 = this->depthBuffers;
HXDLIN( 662)				while((_g < _g1->length)){
HXLINE( 662)					 ::Dynamic db = _g1->__get(_g);
HXDLIN( 662)					_g = (_g + 1);
HXLINE( 663)					if (hx::IsEq( db->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic),t->depth_buffer )) {
HXLINE( 664)						this->depthToRenderTarget->set(( (::String)(db->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ),rt);
HXLINE( 665)						::String s = ( (::String)(db->__Field(HX_("format",37,8f,8e,fd),hx::paccDynamic)) );
HXDLIN( 665)						int _hx_tmp;
HXDLIN( 665)						bool _hx_tmp1;
HXDLIN( 665)						if (hx::IsNotNull( s )) {
HXLINE( 665)							_hx_tmp1 = (s == HX_("",00,00,00,00));
            						}
            						else {
HXLINE( 665)							_hx_tmp1 = true;
            						}
HXDLIN( 665)						if (_hx_tmp1) {
HXLINE( 665)							_hx_tmp = 1;
            						}
            						else {
HXLINE( 665)							::String _hx_switch_0 = s;
            							if (  (_hx_switch_0==HX_("DEPTH16",88,92,1e,ea)) ){
HXLINE( 665)								_hx_tmp = 5;
HXDLIN( 665)								goto _hx_goto_35;
            							}
            							if (  (_hx_switch_0==HX_("DEPTH24",65,93,1e,ea)) ){
HXLINE( 665)								_hx_tmp = 1;
HXDLIN( 665)								goto _hx_goto_35;
            							}
            							/* default */{
HXLINE( 665)								_hx_tmp = 1;
            							}
            							_hx_goto_35:;
            						}
HXDLIN( 665)						rt->depthStencil = _hx_tmp;
HXLINE( 666)						rt->image = this->createImage(t,rt->depthStencil);
HXLINE( 667)						goto _hx_goto_34;
            					}
            				}
            				_hx_goto_34:;
            			}
            			else {
HXLINE( 673)				rt->depthStencil = 0;
HXLINE( 674)				rt->depthStencilFrom = t->depth_buffer;
HXLINE( 675)				rt->image = this->createImage(t,rt->depthStencil);
HXLINE( 676)				rt->image->setDepthStencilFrom(depthTarget->image);
            			}
            		}
            		else {
HXLINE( 681)			rt->hasDepth = false;
HXLINE( 682)			bool _hx_tmp2;
HXDLIN( 682)			if (hx::IsNotNull( t->depth )) {
HXLINE( 682)				_hx_tmp2 = hx::IsGreater( t->depth,1 );
            			}
            			else {
HXLINE( 682)				_hx_tmp2 = false;
            			}
HXDLIN( 682)			if (_hx_tmp2) {
HXLINE( 682)				rt->is3D = true;
            			}
HXLINE( 683)			if (( (bool)(t->is_cubemap) )) {
HXLINE( 684)				rt->isCubeMap = true;
HXLINE( 685)				rt->depthStencil = 0;
HXLINE( 686)				rt->cubeMap = this->createCubeMap(t,rt->depthStencil);
            			}
            			else {
HXLINE( 689)				rt->depthStencil = 0;
HXLINE( 690)				rt->image = this->createImage(t,rt->depthStencil);
            			}
            		}
HXLINE( 694)		return rt;
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,createTarget,return )

 ::kha::Image RenderPath_obj::createImage( ::iron::RenderTargetRaw t,int depthStencil){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_697_createImage)
HXLINE( 698)		int width;
HXDLIN( 698)		if ((t->width == 0)) {
HXLINE( 698)			width = ::kha::System_obj::windowWidth(null());
            		}
            		else {
HXLINE( 698)			width = t->width;
            		}
HXLINE( 699)		int height;
HXDLIN( 699)		if ((t->height == 0)) {
HXLINE( 699)			height = ::kha::System_obj::windowHeight(null());
            		}
            		else {
HXLINE( 699)			height = t->height;
            		}
HXLINE( 700)		 ::Dynamic depth;
HXDLIN( 700)		if (hx::IsNotNull( t->depth )) {
HXLINE( 700)			depth = t->depth;
            		}
            		else {
HXLINE( 700)			depth = 0;
            		}
HXLINE( 701)		if (hx::IsNotNull( t->displayp )) {
HXLINE( 702)			if ((width > height)) {
HXLINE( 703)				width = ::Std_obj::_hx_int((width * (( (Float)(t->displayp) ) / ( (Float)(height) ))));
HXLINE( 704)				height = ( (int)(t->displayp) );
            			}
            			else {
HXLINE( 707)				height = ::Std_obj::_hx_int((height * (( (Float)(t->displayp) ) / ( (Float)(width) ))));
HXLINE( 708)				width = ( (int)(t->displayp) );
            			}
            		}
HXLINE( 711)		if (hx::IsNotNull( t->scale )) {
HXLINE( 712)			width = ::Std_obj::_hx_int((width * t->scale));
HXLINE( 713)			height = ::Std_obj::_hx_int((height * t->scale));
HXLINE( 714)			depth = ::Std_obj::_hx_int((depth * t->scale));
            		}
HXLINE( 716)		bool _hx_tmp;
HXDLIN( 716)		if (hx::IsNotNull( t->depth )) {
HXLINE( 716)			_hx_tmp = hx::IsGreater( t->depth,1 );
            		}
            		else {
HXLINE( 716)			_hx_tmp = false;
            		}
HXDLIN( 716)		if (_hx_tmp) {
HXLINE( 719)			 ::kha::graphics4::TextureFormat img;
HXDLIN( 719)			if (hx::IsNotNull( t->format )) {
HXLINE( 719)				 ::Dynamic img1;
HXDLIN( 719)				::String _hx_switch_0 = t->format;
            				if (  (_hx_switch_0==HX_("A16",66,7d,31,00)) ){
HXLINE( 719)					img1 = ::kha::graphics4::TextureFormat_obj::A16_dyn();
HXDLIN( 719)					goto _hx_goto_37;
            				}
            				if (  (_hx_switch_0==HX_("A32",20,7f,31,00)) ){
HXLINE( 719)					img1 = ::kha::graphics4::TextureFormat_obj::A32_dyn();
HXDLIN( 719)					goto _hx_goto_37;
            				}
            				if (  (_hx_switch_0==HX_("A8",d7,38,00,00)) ){
HXLINE( 719)					img1 = ::kha::graphics4::TextureFormat_obj::L8_dyn();
HXDLIN( 719)					goto _hx_goto_37;
            				}
            				if (  (_hx_switch_0==HX_("DEPTH16",88,92,1e,ea)) ){
HXLINE( 719)					img1 = ::kha::graphics4::TextureFormat_obj::DEPTH16_dyn();
HXDLIN( 719)					goto _hx_goto_37;
            				}
            				if (  (_hx_switch_0==HX_("R16",b7,63,3e,00)) ){
HXLINE( 719)					img1 = ::kha::graphics4::TextureFormat_obj::A16_dyn();
HXDLIN( 719)					goto _hx_goto_37;
            				}
            				if (  (_hx_switch_0==HX_("R32",71,65,3e,00)) ){
HXLINE( 719)					img1 = ::kha::graphics4::TextureFormat_obj::A32_dyn();
HXDLIN( 719)					goto _hx_goto_37;
            				}
            				if (  (_hx_switch_0==HX_("R8",a6,47,00,00)) ){
HXLINE( 719)					img1 = ::kha::graphics4::TextureFormat_obj::L8_dyn();
HXDLIN( 719)					goto _hx_goto_37;
            				}
            				if (  (_hx_switch_0==HX_("RGBA128",03,2a,c5,e0)) ){
HXLINE( 719)					img1 = ::kha::graphics4::TextureFormat_obj::RGBA128_dyn();
HXDLIN( 719)					goto _hx_goto_37;
            				}
            				if (  (_hx_switch_0==HX_("RGBA32",53,5a,88,d6)) ){
HXLINE( 719)					img1 = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
HXDLIN( 719)					goto _hx_goto_37;
            				}
            				if (  (_hx_switch_0==HX_("RGBA64",f2,5c,88,d6)) ){
HXLINE( 719)					img1 = ::kha::graphics4::TextureFormat_obj::RGBA64_dyn();
HXDLIN( 719)					goto _hx_goto_37;
            				}
            				/* default */{
HXLINE( 719)					img1 = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            				}
            				_hx_goto_37:;
HXDLIN( 719)				img = img1;
            			}
            			else {
HXLINE( 719)				img = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            			}
HXLINE( 718)			 ::kha::Image img2 = ::kha::Image_obj::create3D(width,height,( (int)(depth) ),img,null());
HXLINE( 720)			if (( (bool)(t->mipmaps) )) {
HXLINE( 720)				img2->generateMipmaps(1000);
            			}
HXLINE( 721)			return img2;
            		}
            		else {
HXLINE( 724)			bool _hx_tmp1;
HXDLIN( 724)			if (hx::IsNotNull( t->is_image )) {
HXLINE( 724)				_hx_tmp1 = ( (bool)(t->is_image) );
            			}
            			else {
HXLINE( 724)				_hx_tmp1 = false;
            			}
HXDLIN( 724)			if (_hx_tmp1) {
HXLINE( 726)				 ::kha::graphics4::TextureFormat _hx_tmp2;
HXDLIN( 726)				if (hx::IsNotNull( t->format )) {
HXLINE( 726)					 ::Dynamic _hx_tmp3;
HXDLIN( 726)					::String _hx_switch_1 = t->format;
            					if (  (_hx_switch_1==HX_("A16",66,7d,31,00)) ){
HXLINE( 726)						_hx_tmp3 = ::kha::graphics4::TextureFormat_obj::A16_dyn();
HXDLIN( 726)						goto _hx_goto_38;
            					}
            					if (  (_hx_switch_1==HX_("A32",20,7f,31,00)) ){
HXLINE( 726)						_hx_tmp3 = ::kha::graphics4::TextureFormat_obj::A32_dyn();
HXDLIN( 726)						goto _hx_goto_38;
            					}
            					if (  (_hx_switch_1==HX_("A8",d7,38,00,00)) ){
HXLINE( 726)						_hx_tmp3 = ::kha::graphics4::TextureFormat_obj::L8_dyn();
HXDLIN( 726)						goto _hx_goto_38;
            					}
            					if (  (_hx_switch_1==HX_("DEPTH16",88,92,1e,ea)) ){
HXLINE( 726)						_hx_tmp3 = ::kha::graphics4::TextureFormat_obj::DEPTH16_dyn();
HXDLIN( 726)						goto _hx_goto_38;
            					}
            					if (  (_hx_switch_1==HX_("R16",b7,63,3e,00)) ){
HXLINE( 726)						_hx_tmp3 = ::kha::graphics4::TextureFormat_obj::A16_dyn();
HXDLIN( 726)						goto _hx_goto_38;
            					}
            					if (  (_hx_switch_1==HX_("R32",71,65,3e,00)) ){
HXLINE( 726)						_hx_tmp3 = ::kha::graphics4::TextureFormat_obj::A32_dyn();
HXDLIN( 726)						goto _hx_goto_38;
            					}
            					if (  (_hx_switch_1==HX_("R8",a6,47,00,00)) ){
HXLINE( 726)						_hx_tmp3 = ::kha::graphics4::TextureFormat_obj::L8_dyn();
HXDLIN( 726)						goto _hx_goto_38;
            					}
            					if (  (_hx_switch_1==HX_("RGBA128",03,2a,c5,e0)) ){
HXLINE( 726)						_hx_tmp3 = ::kha::graphics4::TextureFormat_obj::RGBA128_dyn();
HXDLIN( 726)						goto _hx_goto_38;
            					}
            					if (  (_hx_switch_1==HX_("RGBA32",53,5a,88,d6)) ){
HXLINE( 726)						_hx_tmp3 = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
HXDLIN( 726)						goto _hx_goto_38;
            					}
            					if (  (_hx_switch_1==HX_("RGBA64",f2,5c,88,d6)) ){
HXLINE( 726)						_hx_tmp3 = ::kha::graphics4::TextureFormat_obj::RGBA64_dyn();
HXDLIN( 726)						goto _hx_goto_38;
            					}
            					/* default */{
HXLINE( 726)						_hx_tmp3 = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            					}
            					_hx_goto_38:;
HXDLIN( 726)					_hx_tmp2 = _hx_tmp3;
            				}
            				else {
HXLINE( 726)					_hx_tmp2 = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            				}
HXLINE( 725)				return ::kha::Image_obj::create(width,height,_hx_tmp2,null());
            			}
            			else {
HXLINE( 730)				 ::kha::graphics4::TextureFormat _hx_tmp4;
HXDLIN( 730)				if (hx::IsNotNull( t->format )) {
HXLINE( 730)					 ::Dynamic _hx_tmp5;
HXDLIN( 730)					::String _hx_switch_2 = t->format;
            					if (  (_hx_switch_2==HX_("A16",66,7d,31,00)) ){
HXLINE( 730)						_hx_tmp5 = ::kha::graphics4::TextureFormat_obj::A16_dyn();
HXDLIN( 730)						goto _hx_goto_39;
            					}
            					if (  (_hx_switch_2==HX_("A32",20,7f,31,00)) ){
HXLINE( 730)						_hx_tmp5 = ::kha::graphics4::TextureFormat_obj::A32_dyn();
HXDLIN( 730)						goto _hx_goto_39;
            					}
            					if (  (_hx_switch_2==HX_("A8",d7,38,00,00)) ){
HXLINE( 730)						_hx_tmp5 = ::kha::graphics4::TextureFormat_obj::L8_dyn();
HXDLIN( 730)						goto _hx_goto_39;
            					}
            					if (  (_hx_switch_2==HX_("DEPTH16",88,92,1e,ea)) ){
HXLINE( 730)						_hx_tmp5 = ::kha::graphics4::TextureFormat_obj::DEPTH16_dyn();
HXDLIN( 730)						goto _hx_goto_39;
            					}
            					if (  (_hx_switch_2==HX_("R16",b7,63,3e,00)) ){
HXLINE( 730)						_hx_tmp5 = ::kha::graphics4::TextureFormat_obj::A16_dyn();
HXDLIN( 730)						goto _hx_goto_39;
            					}
            					if (  (_hx_switch_2==HX_("R32",71,65,3e,00)) ){
HXLINE( 730)						_hx_tmp5 = ::kha::graphics4::TextureFormat_obj::A32_dyn();
HXDLIN( 730)						goto _hx_goto_39;
            					}
            					if (  (_hx_switch_2==HX_("R8",a6,47,00,00)) ){
HXLINE( 730)						_hx_tmp5 = ::kha::graphics4::TextureFormat_obj::L8_dyn();
HXDLIN( 730)						goto _hx_goto_39;
            					}
            					if (  (_hx_switch_2==HX_("RGBA128",03,2a,c5,e0)) ){
HXLINE( 730)						_hx_tmp5 = ::kha::graphics4::TextureFormat_obj::RGBA128_dyn();
HXDLIN( 730)						goto _hx_goto_39;
            					}
            					if (  (_hx_switch_2==HX_("RGBA32",53,5a,88,d6)) ){
HXLINE( 730)						_hx_tmp5 = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
HXDLIN( 730)						goto _hx_goto_39;
            					}
            					if (  (_hx_switch_2==HX_("RGBA64",f2,5c,88,d6)) ){
HXLINE( 730)						_hx_tmp5 = ::kha::graphics4::TextureFormat_obj::RGBA64_dyn();
HXDLIN( 730)						goto _hx_goto_39;
            					}
            					/* default */{
HXLINE( 730)						_hx_tmp5 = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            					}
            					_hx_goto_39:;
HXDLIN( 730)					_hx_tmp4 = _hx_tmp5;
            				}
            				else {
HXLINE( 730)					_hx_tmp4 = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            				}
HXLINE( 729)				return ::kha::Image_obj::createRenderTarget(width,height,_hx_tmp4,depthStencil,null(),null());
            			}
            		}
HXLINE( 716)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(RenderPath_obj,createImage,return )

 ::kha::graphics4::CubeMap RenderPath_obj::createCubeMap( ::iron::RenderTargetRaw t,int depthStencil){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_737_createCubeMap)
HXLINE( 738)		 ::kha::graphics4::TextureFormat _hx_tmp;
HXDLIN( 738)		if (hx::IsNotNull( t->format )) {
HXLINE( 738)			 ::Dynamic _hx_tmp1;
HXDLIN( 738)			::String _hx_switch_0 = t->format;
            			if (  (_hx_switch_0==HX_("A16",66,7d,31,00)) ){
HXLINE( 738)				_hx_tmp1 = ::kha::graphics4::TextureFormat_obj::A16_dyn();
HXDLIN( 738)				goto _hx_goto_41;
            			}
            			if (  (_hx_switch_0==HX_("A32",20,7f,31,00)) ){
HXLINE( 738)				_hx_tmp1 = ::kha::graphics4::TextureFormat_obj::A32_dyn();
HXDLIN( 738)				goto _hx_goto_41;
            			}
            			if (  (_hx_switch_0==HX_("A8",d7,38,00,00)) ){
HXLINE( 738)				_hx_tmp1 = ::kha::graphics4::TextureFormat_obj::L8_dyn();
HXDLIN( 738)				goto _hx_goto_41;
            			}
            			if (  (_hx_switch_0==HX_("DEPTH16",88,92,1e,ea)) ){
HXLINE( 738)				_hx_tmp1 = ::kha::graphics4::TextureFormat_obj::DEPTH16_dyn();
HXDLIN( 738)				goto _hx_goto_41;
            			}
            			if (  (_hx_switch_0==HX_("R16",b7,63,3e,00)) ){
HXLINE( 738)				_hx_tmp1 = ::kha::graphics4::TextureFormat_obj::A16_dyn();
HXDLIN( 738)				goto _hx_goto_41;
            			}
            			if (  (_hx_switch_0==HX_("R32",71,65,3e,00)) ){
HXLINE( 738)				_hx_tmp1 = ::kha::graphics4::TextureFormat_obj::A32_dyn();
HXDLIN( 738)				goto _hx_goto_41;
            			}
            			if (  (_hx_switch_0==HX_("R8",a6,47,00,00)) ){
HXLINE( 738)				_hx_tmp1 = ::kha::graphics4::TextureFormat_obj::L8_dyn();
HXDLIN( 738)				goto _hx_goto_41;
            			}
            			if (  (_hx_switch_0==HX_("RGBA128",03,2a,c5,e0)) ){
HXLINE( 738)				_hx_tmp1 = ::kha::graphics4::TextureFormat_obj::RGBA128_dyn();
HXDLIN( 738)				goto _hx_goto_41;
            			}
            			if (  (_hx_switch_0==HX_("RGBA32",53,5a,88,d6)) ){
HXLINE( 738)				_hx_tmp1 = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
HXDLIN( 738)				goto _hx_goto_41;
            			}
            			if (  (_hx_switch_0==HX_("RGBA64",f2,5c,88,d6)) ){
HXLINE( 738)				_hx_tmp1 = ::kha::graphics4::TextureFormat_obj::RGBA64_dyn();
HXDLIN( 738)				goto _hx_goto_41;
            			}
            			/* default */{
HXLINE( 738)				_hx_tmp1 = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            			}
            			_hx_goto_41:;
HXDLIN( 738)			_hx_tmp = _hx_tmp1;
            		}
            		else {
HXLINE( 738)			_hx_tmp = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            		}
HXLINE( 737)		return ::kha::graphics4::CubeMap_obj::createRenderTarget(t->width,_hx_tmp,depthStencil,null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(RenderPath_obj,createCubeMap,return )

 ::kha::graphics4::TextureFormat RenderPath_obj::getTextureFormat(::String s){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_743_getTextureFormat)
HXDLIN( 743)		::String _hx_switch_0 = s;
            		if (  (_hx_switch_0==HX_("A16",66,7d,31,00)) ){
HXLINE( 749)			return ::kha::graphics4::TextureFormat_obj::A16_dyn();
HXDLIN( 749)			goto _hx_goto_43;
            		}
            		if (  (_hx_switch_0==HX_("A32",20,7f,31,00)) ){
HXLINE( 748)			return ::kha::graphics4::TextureFormat_obj::A32_dyn();
HXDLIN( 748)			goto _hx_goto_43;
            		}
            		if (  (_hx_switch_0==HX_("A8",d7,38,00,00)) ){
HXLINE( 750)			return ::kha::graphics4::TextureFormat_obj::L8_dyn();
HXDLIN( 750)			goto _hx_goto_43;
            		}
            		if (  (_hx_switch_0==HX_("DEPTH16",88,92,1e,ea)) ){
HXLINE( 747)			return ::kha::graphics4::TextureFormat_obj::DEPTH16_dyn();
HXDLIN( 747)			goto _hx_goto_43;
            		}
            		if (  (_hx_switch_0==HX_("R16",b7,63,3e,00)) ){
HXLINE( 752)			return ::kha::graphics4::TextureFormat_obj::A16_dyn();
HXDLIN( 752)			goto _hx_goto_43;
            		}
            		if (  (_hx_switch_0==HX_("R32",71,65,3e,00)) ){
HXLINE( 751)			return ::kha::graphics4::TextureFormat_obj::A32_dyn();
HXDLIN( 751)			goto _hx_goto_43;
            		}
            		if (  (_hx_switch_0==HX_("R8",a6,47,00,00)) ){
HXLINE( 753)			return ::kha::graphics4::TextureFormat_obj::L8_dyn();
HXDLIN( 753)			goto _hx_goto_43;
            		}
            		if (  (_hx_switch_0==HX_("RGBA128",03,2a,c5,e0)) ){
HXLINE( 746)			return ::kha::graphics4::TextureFormat_obj::RGBA128_dyn();
HXDLIN( 746)			goto _hx_goto_43;
            		}
            		if (  (_hx_switch_0==HX_("RGBA32",53,5a,88,d6)) ){
HXLINE( 744)			return ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
HXDLIN( 744)			goto _hx_goto_43;
            		}
            		if (  (_hx_switch_0==HX_("RGBA64",f2,5c,88,d6)) ){
HXLINE( 745)			return ::kha::graphics4::TextureFormat_obj::RGBA64_dyn();
HXDLIN( 745)			goto _hx_goto_43;
            		}
            		/* default */{
HXLINE( 754)			return ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            		}
            		_hx_goto_43:;
HXLINE( 743)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,getTextureFormat,return )

int RenderPath_obj::getDepthStencilFormat(::String s){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_758_getDepthStencilFormat)
HXLINE( 762)		bool _hx_tmp;
HXDLIN( 762)		if (hx::IsNotNull( s )) {
HXLINE( 762)			_hx_tmp = (s == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 762)			_hx_tmp = true;
            		}
HXDLIN( 762)		if (_hx_tmp) {
HXLINE( 762)			return 1;
            		}
HXLINE( 763)		::String _hx_switch_0 = s;
            		if (  (_hx_switch_0==HX_("DEPTH16",88,92,1e,ea)) ){
HXLINE( 765)			return 5;
HXDLIN( 765)			goto _hx_goto_45;
            		}
            		if (  (_hx_switch_0==HX_("DEPTH24",65,93,1e,ea)) ){
HXLINE( 764)			return 1;
HXDLIN( 764)			goto _hx_goto_45;
            		}
            		/* default */{
HXLINE( 766)			return 1;
            		}
            		_hx_goto_45:;
HXLINE( 763)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,getDepthStencilFormat,return )

 ::iron::RenderPath RenderPath_obj::active;

void RenderPath_obj::setActive( ::iron::RenderPath renderPath){
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_75_setActive)
HXDLIN(  75)		::iron::RenderPath_obj::active = renderPath;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,setActive,(void))

void RenderPath_obj::sortMeshesDistance(::Array< ::Dynamic> meshes, ::iron::object::CameraObject camera){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run( ::iron::object::MeshObject a, ::iron::object::MeshObject b){
            			HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_225_sortMeshesDistance)
HXLINE( 225)			if ((a->cameraDistance >= b->cameraDistance)) {
HXLINE( 225)				return 1;
            			}
            			else {
HXLINE( 225)				return -1;
            			}
HXDLIN( 225)			return 0;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_217_sortMeshesDistance)
HXLINE( 218)		float camX = camera->transform->world->self->_30;
HXLINE( 219)		float camY = camera->transform->world->self->_31;
HXLINE( 220)		float camZ = camera->transform->world->self->_32;
HXLINE( 221)		{
HXLINE( 221)			int _g = 0;
HXDLIN( 221)			while((_g < meshes->length)){
HXLINE( 221)				 ::iron::object::MeshObject mesh = meshes->__get(_g).StaticCast<  ::iron::object::MeshObject >();
HXDLIN( 221)				_g = (_g + 1);
HXLINE( 222)				float vx = (camX - mesh->transform->world->self->_30);
HXDLIN( 222)				float vy = (camY - mesh->transform->world->self->_31);
HXDLIN( 222)				float vz = (camZ - mesh->transform->world->self->_32);
HXDLIN( 222)				mesh->cameraDistance = ( (Float)(( (float)(::Math_obj::sqrt(( (Float)((((vx * vx) + (vy * vy)) + (vz * vz))) ))) )) );
            			}
            		}
HXLINE( 224)		meshes->sort( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(RenderPath_obj,sortMeshesDistance,(void))

void RenderPath_obj::sortMeshesShader(::Array< ::Dynamic> meshes){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run( ::iron::object::MeshObject a, ::iron::object::MeshObject b){
            			HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_231_sortMeshesShader)
HXLINE( 231)			::String _hx_tmp = ( ( ::iron::data::MaterialData)(_hx_array_unsafe_get(a->materials,0)) )->name;
HXDLIN( 231)			if ((_hx_tmp >= ( ( ::iron::data::MaterialData)(_hx_array_unsafe_get(b->materials,0)) )->name)) {
HXLINE( 231)				return 1;
            			}
            			else {
HXLINE( 231)				return -1;
            			}
HXDLIN( 231)			return 0;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_230_sortMeshesShader)
HXDLIN( 230)		::iron::Scene_obj::active->meshes->sort( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RenderPath_obj,sortMeshesShader,(void))

::String RenderPath_obj::meshContext;

::String RenderPath_obj::shadowsContext;


hx::ObjectPtr< RenderPath_obj > RenderPath_obj::__new() {
	hx::ObjectPtr< RenderPath_obj > __this = new RenderPath_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< RenderPath_obj > RenderPath_obj::__alloc(hx::Ctx *_hx_ctx) {
	RenderPath_obj *__this = (RenderPath_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RenderPath_obj), true, "iron.RenderPath"));
	*(void **)__this = RenderPath_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

RenderPath_obj::RenderPath_obj()
{
}

void RenderPath_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RenderPath);
	HX_MARK_MEMBER_NAME(frameScissor,"frameScissor");
	HX_MARK_MEMBER_NAME(frameScissorX,"frameScissorX");
	HX_MARK_MEMBER_NAME(frameScissorY,"frameScissorY");
	HX_MARK_MEMBER_NAME(frameScissorW,"frameScissorW");
	HX_MARK_MEMBER_NAME(frameScissorH,"frameScissorH");
	HX_MARK_MEMBER_NAME(frameTime,"frameTime");
	HX_MARK_MEMBER_NAME(currentTarget,"currentTarget");
	HX_MARK_MEMBER_NAME(currentCube,"currentCube");
	HX_MARK_MEMBER_NAME(currentFace,"currentFace");
	HX_MARK_MEMBER_NAME(currentLightIndex,"currentLightIndex");
	HX_MARK_MEMBER_NAME(currentW,"currentW");
	HX_MARK_MEMBER_NAME(currentH,"currentH");
	HX_MARK_MEMBER_NAME(currentD,"currentD");
	HX_MARK_MEMBER_NAME(lastW,"lastW");
	HX_MARK_MEMBER_NAME(lastH,"lastH");
	HX_MARK_MEMBER_NAME(bindParams,"bindParams");
	HX_MARK_MEMBER_NAME(meshesSorted,"meshesSorted");
	HX_MARK_MEMBER_NAME(scissorSet,"scissorSet");
	HX_MARK_MEMBER_NAME(viewportScaled,"viewportScaled");
	HX_MARK_MEMBER_NAME(currentG,"currentG");
	HX_MARK_MEMBER_NAME(frameG,"frameG");
	HX_MARK_MEMBER_NAME(lastFrameTime,"lastFrameTime");
	HX_MARK_MEMBER_NAME(drawOrder,"drawOrder");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(ready,"ready");
	HX_MARK_MEMBER_NAME(loading,"loading");
	HX_MARK_MEMBER_NAME(cachedShaderContexts,"cachedShaderContexts");
	HX_MARK_MEMBER_NAME(commands,"commands");
	HX_MARK_MEMBER_NAME(renderTargets,"renderTargets");
	HX_MARK_MEMBER_NAME(depthToRenderTarget,"depthToRenderTarget");
	HX_MARK_MEMBER_NAME(depthBuffers,"depthBuffers");
	HX_MARK_END_CLASS();
}

void RenderPath_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(frameScissor,"frameScissor");
	HX_VISIT_MEMBER_NAME(frameScissorX,"frameScissorX");
	HX_VISIT_MEMBER_NAME(frameScissorY,"frameScissorY");
	HX_VISIT_MEMBER_NAME(frameScissorW,"frameScissorW");
	HX_VISIT_MEMBER_NAME(frameScissorH,"frameScissorH");
	HX_VISIT_MEMBER_NAME(frameTime,"frameTime");
	HX_VISIT_MEMBER_NAME(currentTarget,"currentTarget");
	HX_VISIT_MEMBER_NAME(currentCube,"currentCube");
	HX_VISIT_MEMBER_NAME(currentFace,"currentFace");
	HX_VISIT_MEMBER_NAME(currentLightIndex,"currentLightIndex");
	HX_VISIT_MEMBER_NAME(currentW,"currentW");
	HX_VISIT_MEMBER_NAME(currentH,"currentH");
	HX_VISIT_MEMBER_NAME(currentD,"currentD");
	HX_VISIT_MEMBER_NAME(lastW,"lastW");
	HX_VISIT_MEMBER_NAME(lastH,"lastH");
	HX_VISIT_MEMBER_NAME(bindParams,"bindParams");
	HX_VISIT_MEMBER_NAME(meshesSorted,"meshesSorted");
	HX_VISIT_MEMBER_NAME(scissorSet,"scissorSet");
	HX_VISIT_MEMBER_NAME(viewportScaled,"viewportScaled");
	HX_VISIT_MEMBER_NAME(currentG,"currentG");
	HX_VISIT_MEMBER_NAME(frameG,"frameG");
	HX_VISIT_MEMBER_NAME(lastFrameTime,"lastFrameTime");
	HX_VISIT_MEMBER_NAME(drawOrder,"drawOrder");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(ready,"ready");
	HX_VISIT_MEMBER_NAME(loading,"loading");
	HX_VISIT_MEMBER_NAME(cachedShaderContexts,"cachedShaderContexts");
	HX_VISIT_MEMBER_NAME(commands,"commands");
	HX_VISIT_MEMBER_NAME(renderTargets,"renderTargets");
	HX_VISIT_MEMBER_NAME(depthToRenderTarget,"depthToRenderTarget");
	HX_VISIT_MEMBER_NAME(depthBuffers,"depthBuffers");
}

hx::Val RenderPath_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"lastW") ) { return hx::Val( lastW ); }
		if (HX_FIELD_EQ(inName,"lastH") ) { return hx::Val( lastH ); }
		if (HX_FIELD_EQ(inName,"ready") ) { return hx::Val( inCallProp == hx::paccAlways ? get_ready() : ready ); }
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"frameG") ) { return hx::Val( frameG ); }
		if (HX_FIELD_EQ(inName,"paused") ) { return hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"unload") ) { return hx::Val( unload_dyn() ); }
		if (HX_FIELD_EQ(inName,"resize") ) { return hx::Val( resize_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"loading") ) { return hx::Val( loading ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"currentW") ) { return hx::Val( currentW ); }
		if (HX_FIELD_EQ(inName,"currentH") ) { return hx::Val( currentH ); }
		if (HX_FIELD_EQ(inName,"currentD") ) { return hx::Val( currentD ); }
		if (HX_FIELD_EQ(inName,"currentG") ) { return hx::Val( currentG ); }
		if (HX_FIELD_EQ(inName,"commands") ) { return hx::Val( commands ); }
		if (HX_FIELD_EQ(inName,"getLight") ) { return hx::Val( getLight_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameTime") ) { return hx::Val( frameTime ); }
		if (HX_FIELD_EQ(inName,"drawOrder") ) { return hx::Val( drawOrder ); }
		if (HX_FIELD_EQ(inName,"get_ready") ) { return hx::Val( get_ready_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTarget") ) { return hx::Val( setTarget_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bindParams") ) { return hx::Val( bindParams ); }
		if (HX_FIELD_EQ(inName,"scissorSet") ) { return hx::Val( scissorSet ); }
		if (HX_FIELD_EQ(inName,"lightIsSun") ) { return hx::Val( lightIsSun_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearImage") ) { return hx::Val( clearImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawMeshes") ) { return hx::Val( drawMeshes_dyn() ); }
		if (HX_FIELD_EQ(inName,"submitDraw") ) { return hx::Val( submitDraw_dyn() ); }
		if (HX_FIELD_EQ(inName,"bindTarget") ) { return hx::Val( bindTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawShader") ) { return hx::Val( drawShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadShader") ) { return hx::Val( loadShader_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentCube") ) { return hx::Val( currentCube ); }
		if (HX_FIELD_EQ(inName,"currentFace") ) { return hx::Val( currentFace ); }
		if (HX_FIELD_EQ(inName,"renderFrame") ) { return hx::Val( renderFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"setViewport") ) { return hx::Val( setViewport_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearTarget") ) { return hx::Val( clearTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawSkydome") ) { return hx::Val( drawSkydome_dyn() ); }
		if (HX_FIELD_EQ(inName,"createImage") ) { return hx::Val( createImage_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"frameScissor") ) { return hx::Val( frameScissor ); }
		if (HX_FIELD_EQ(inName,"meshesSorted") ) { return hx::Val( meshesSorted ); }
		if (HX_FIELD_EQ(inName,"depthBuffers") ) { return hx::Val( depthBuffers ); }
		if (HX_FIELD_EQ(inName,"createTarget") ) { return hx::Val( createTarget_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"frameScissorX") ) { return hx::Val( frameScissorX ); }
		if (HX_FIELD_EQ(inName,"frameScissorY") ) { return hx::Val( frameScissorY ); }
		if (HX_FIELD_EQ(inName,"frameScissorW") ) { return hx::Val( frameScissorW ); }
		if (HX_FIELD_EQ(inName,"frameScissorH") ) { return hx::Val( frameScissorH ); }
		if (HX_FIELD_EQ(inName,"currentTarget") ) { return hx::Val( currentTarget ); }
		if (HX_FIELD_EQ(inName,"lastFrameTime") ) { return hx::Val( lastFrameTime ); }
		if (HX_FIELD_EQ(inName,"renderTargets") ) { return hx::Val( renderTargets ); }
		if (HX_FIELD_EQ(inName,"createCubeMap") ) { return hx::Val( createCubeMap_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"viewportScaled") ) { return hx::Val( viewportScaled ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"lightCastShadow") ) { return hx::Val( lightCastShadow_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFrameScissor") ) { return hx::Val( setFrameScissor_dyn() ); }
		if (HX_FIELD_EQ(inName,"generateMipmaps") ) { return hx::Val( generateMipmaps_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawLightVolume") ) { return hx::Val( drawLightVolume_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getComputeShader") ) { return hx::Val( getComputeShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTextureFormat") ) { return hx::Val( getTextureFormat_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"currentLightIndex") ) { return hx::Val( currentLightIndex ); }
		if (HX_FIELD_EQ(inName,"setCurrentScissor") ) { return hx::Val( setCurrentScissor_dyn() ); }
		if (HX_FIELD_EQ(inName,"createDepthBuffer") ) { return hx::Val( createDepthBuffer_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"setCurrentViewport") ) { return hx::Val( setCurrentViewport_dyn() ); }
		if (HX_FIELD_EQ(inName,"createRenderTarget") ) { return hx::Val( createRenderTarget_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"depthToRenderTarget") ) { return hx::Val( depthToRenderTarget ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"cachedShaderContexts") ) { return hx::Val( cachedShaderContexts ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"getDepthStencilFormat") ) { return hx::Val( getDepthStencilFormat_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool RenderPath_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { outValue = ( active ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setActive") ) { outValue = setActive_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"sortMeshesShader") ) { outValue = sortMeshesShader_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"sortMeshesDistance") ) { outValue = sortMeshesDistance_dyn(); return true; }
	}
	return false;
}

hx::Val RenderPath_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"lastW") ) { lastW=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastH") ) { lastH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ready") ) { ready=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"frameG") ) { frameG=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"loading") ) { loading=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"currentW") ) { currentW=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentH") ) { currentH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentD") ) { currentD=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentG") ) { currentG=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"commands") ) { commands=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameTime") ) { frameTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"drawOrder") ) { drawOrder=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bindParams") ) { bindParams=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scissorSet") ) { scissorSet=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentCube") ) { currentCube=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentFace") ) { currentFace=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"frameScissor") ) { frameScissor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"meshesSorted") ) { meshesSorted=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"depthBuffers") ) { depthBuffers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"frameScissorX") ) { frameScissorX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frameScissorY") ) { frameScissorY=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frameScissorW") ) { frameScissorW=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frameScissorH") ) { frameScissorH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentTarget") ) { currentTarget=inValue.Cast<  ::iron::RenderTarget >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastFrameTime") ) { lastFrameTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"renderTargets") ) { renderTargets=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"viewportScaled") ) { viewportScaled=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"currentLightIndex") ) { currentLightIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"depthToRenderTarget") ) { depthToRenderTarget=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"cachedShaderContexts") ) { cachedShaderContexts=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool RenderPath_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { active=ioValue.Cast<  ::iron::RenderPath >(); return true; }
	}
	return false;
}

void RenderPath_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("frameScissor",6f,e7,71,a5));
	outFields->push(HX_("frameScissorX",09,9a,38,1e));
	outFields->push(HX_("frameScissorY",0a,9a,38,1e));
	outFields->push(HX_("frameScissorW",08,9a,38,1e));
	outFields->push(HX_("frameScissorH",f9,99,38,1e));
	outFields->push(HX_("frameTime",da,8a,7d,3a));
	outFields->push(HX_("currentTarget",6a,74,49,6a));
	outFields->push(HX_("currentCube",ce,15,5b,7a));
	outFields->push(HX_("currentFace",76,8d,47,7c));
	outFields->push(HX_("currentLightIndex",f5,33,50,16));
	outFields->push(HX_("currentW",fe,15,45,9b));
	outFields->push(HX_("currentH",ef,15,45,9b));
	outFields->push(HX_("currentD",eb,15,45,9b));
	outFields->push(HX_("lastW",41,01,bc,6f));
	outFields->push(HX_("lastH",32,01,bc,6f));
	outFields->push(HX_("bindParams",e3,d0,a4,15));
	outFields->push(HX_("meshesSorted",38,e5,9f,8d));
	outFields->push(HX_("scissorSet",e6,24,c3,48));
	outFields->push(HX_("viewportScaled",a0,fb,ed,87));
	outFields->push(HX_("currentG",ee,15,45,9b));
	outFields->push(HX_("frameG",7a,af,85,ac));
	outFields->push(HX_("lastFrameTime",a4,65,b6,38));
	outFields->push(HX_("drawOrder",ea,25,2c,fd));
	outFields->push(HX_("paused",ae,40,84,ef));
	outFields->push(HX_("ready",63,a0,ba,e6));
	outFields->push(HX_("loading",7c,ce,f2,08));
	outFields->push(HX_("cachedShaderContexts",6b,7f,6c,25));
	outFields->push(HX_("renderTargets",4c,67,55,84));
	outFields->push(HX_("depthToRenderTarget",c5,99,eb,2a));
	outFields->push(HX_("depthBuffers",b0,50,df,f7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo RenderPath_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(RenderPath_obj,frameScissor),HX_("frameScissor",6f,e7,71,a5)},
	{hx::fsInt,(int)offsetof(RenderPath_obj,frameScissorX),HX_("frameScissorX",09,9a,38,1e)},
	{hx::fsInt,(int)offsetof(RenderPath_obj,frameScissorY),HX_("frameScissorY",0a,9a,38,1e)},
	{hx::fsInt,(int)offsetof(RenderPath_obj,frameScissorW),HX_("frameScissorW",08,9a,38,1e)},
	{hx::fsInt,(int)offsetof(RenderPath_obj,frameScissorH),HX_("frameScissorH",f9,99,38,1e)},
	{hx::fsFloat,(int)offsetof(RenderPath_obj,frameTime),HX_("frameTime",da,8a,7d,3a)},
	{hx::fsObject /*::iron::RenderTarget*/ ,(int)offsetof(RenderPath_obj,currentTarget),HX_("currentTarget",6a,74,49,6a)},
	{hx::fsBool,(int)offsetof(RenderPath_obj,currentCube),HX_("currentCube",ce,15,5b,7a)},
	{hx::fsInt,(int)offsetof(RenderPath_obj,currentFace),HX_("currentFace",76,8d,47,7c)},
	{hx::fsInt,(int)offsetof(RenderPath_obj,currentLightIndex),HX_("currentLightIndex",f5,33,50,16)},
	{hx::fsInt,(int)offsetof(RenderPath_obj,currentW),HX_("currentW",fe,15,45,9b)},
	{hx::fsInt,(int)offsetof(RenderPath_obj,currentH),HX_("currentH",ef,15,45,9b)},
	{hx::fsInt,(int)offsetof(RenderPath_obj,currentD),HX_("currentD",eb,15,45,9b)},
	{hx::fsInt,(int)offsetof(RenderPath_obj,lastW),HX_("lastW",41,01,bc,6f)},
	{hx::fsInt,(int)offsetof(RenderPath_obj,lastH),HX_("lastH",32,01,bc,6f)},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(RenderPath_obj,bindParams),HX_("bindParams",e3,d0,a4,15)},
	{hx::fsBool,(int)offsetof(RenderPath_obj,meshesSorted),HX_("meshesSorted",38,e5,9f,8d)},
	{hx::fsBool,(int)offsetof(RenderPath_obj,scissorSet),HX_("scissorSet",e6,24,c3,48)},
	{hx::fsBool,(int)offsetof(RenderPath_obj,viewportScaled),HX_("viewportScaled",a0,fb,ed,87)},
	{hx::fsObject /*::kha::graphics4::Graphics*/ ,(int)offsetof(RenderPath_obj,currentG),HX_("currentG",ee,15,45,9b)},
	{hx::fsObject /*::kha::graphics4::Graphics*/ ,(int)offsetof(RenderPath_obj,frameG),HX_("frameG",7a,af,85,ac)},
	{hx::fsFloat,(int)offsetof(RenderPath_obj,lastFrameTime),HX_("lastFrameTime",a4,65,b6,38)},
	{hx::fsInt,(int)offsetof(RenderPath_obj,drawOrder),HX_("drawOrder",ea,25,2c,fd)},
	{hx::fsBool,(int)offsetof(RenderPath_obj,paused),HX_("paused",ae,40,84,ef)},
	{hx::fsBool,(int)offsetof(RenderPath_obj,ready),HX_("ready",63,a0,ba,e6)},
	{hx::fsInt,(int)offsetof(RenderPath_obj,loading),HX_("loading",7c,ce,f2,08)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(RenderPath_obj,cachedShaderContexts),HX_("cachedShaderContexts",6b,7f,6c,25)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(RenderPath_obj,commands),HX_("commands",c8,b0,55,be)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(RenderPath_obj,renderTargets),HX_("renderTargets",4c,67,55,84)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(RenderPath_obj,depthToRenderTarget),HX_("depthToRenderTarget",c5,99,eb,2a)},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(RenderPath_obj,depthBuffers),HX_("depthBuffers",b0,50,df,f7)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo RenderPath_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::iron::RenderPath*/ ,(void *) &RenderPath_obj::active,HX_("active",c6,41,46,16)},
	{hx::fsString,(void *) &RenderPath_obj::meshContext,HX_("meshContext",82,3b,ce,a1)},
	{hx::fsString,(void *) &RenderPath_obj::shadowsContext,HX_("shadowsContext",9c,a9,6d,11)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String RenderPath_obj_sMemberFields[] = {
	HX_("frameScissor",6f,e7,71,a5),
	HX_("frameScissorX",09,9a,38,1e),
	HX_("frameScissorY",0a,9a,38,1e),
	HX_("frameScissorW",08,9a,38,1e),
	HX_("frameScissorH",f9,99,38,1e),
	HX_("frameTime",da,8a,7d,3a),
	HX_("currentTarget",6a,74,49,6a),
	HX_("currentCube",ce,15,5b,7a),
	HX_("currentFace",76,8d,47,7c),
	HX_("currentLightIndex",f5,33,50,16),
	HX_("currentW",fe,15,45,9b),
	HX_("currentH",ef,15,45,9b),
	HX_("currentD",eb,15,45,9b),
	HX_("lastW",41,01,bc,6f),
	HX_("lastH",32,01,bc,6f),
	HX_("bindParams",e3,d0,a4,15),
	HX_("meshesSorted",38,e5,9f,8d),
	HX_("scissorSet",e6,24,c3,48),
	HX_("viewportScaled",a0,fb,ed,87),
	HX_("currentG",ee,15,45,9b),
	HX_("frameG",7a,af,85,ac),
	HX_("lastFrameTime",a4,65,b6,38),
	HX_("drawOrder",ea,25,2c,fd),
	HX_("paused",ae,40,84,ef),
	HX_("ready",63,a0,ba,e6),
	HX_("get_ready",ba,fc,63,2a),
	HX_("loading",7c,ce,f2,08),
	HX_("cachedShaderContexts",6b,7f,6c,25),
	HX_("commands",c8,b0,55,be),
	HX_("renderTargets",4c,67,55,84),
	HX_("depthToRenderTarget",c5,99,eb,2a),
	HX_("lightCastShadow",75,b0,4c,fa),
	HX_("lightIsSun",0c,eb,5b,42),
	HX_("getLight",60,a0,d3,d4),
	HX_("renderFrame",f7,a4,34,d2),
	HX_("setTarget",93,68,94,e6),
	HX_("begin",29,ea,55,b0),
	HX_("end",db,03,4d,00),
	HX_("setCurrentViewport",3d,d8,6b,00),
	HX_("setCurrentScissor",25,24,5d,a8),
	HX_("setFrameScissor",31,ba,27,c4),
	HX_("setViewport",28,16,06,cd),
	HX_("clearTarget",be,00,da,1a),
	HX_("clearImage",8e,5e,73,92),
	HX_("generateMipmaps",36,f3,0d,51),
	HX_("drawMeshes",bf,32,75,4a),
	HX_("submitDraw",3c,9c,f9,56),
	HX_("drawSkydome",60,59,86,ad),
	HX_("drawLightVolume",ac,15,39,89),
	HX_("bindTarget",ee,c8,16,af),
	HX_("drawShader",49,3a,e4,5e),
	HX_("getComputeShader",86,97,b7,f1),
	HX_("loadShader",eb,ed,4b,d2),
	HX_("unload",ff,a0,8c,65),
	HX_("resize",f4,59,7b,08),
	HX_("createRenderTarget",63,34,61,f0),
	HX_("depthBuffers",b0,50,df,f7),
	HX_("createDepthBuffer",c7,20,3f,a5),
	HX_("createTarget",6d,33,42,a9),
	HX_("createImage",bf,56,e4,e6),
	HX_("createCubeMap",0b,25,13,75),
	HX_("getTextureFormat",fc,0b,c7,fa),
	HX_("getDepthStencilFormat",86,a1,f9,9b),
	::String(null()) };

static void RenderPath_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RenderPath_obj::active,"active");
	HX_MARK_MEMBER_NAME(RenderPath_obj::meshContext,"meshContext");
	HX_MARK_MEMBER_NAME(RenderPath_obj::shadowsContext,"shadowsContext");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RenderPath_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RenderPath_obj::active,"active");
	HX_VISIT_MEMBER_NAME(RenderPath_obj::meshContext,"meshContext");
	HX_VISIT_MEMBER_NAME(RenderPath_obj::shadowsContext,"shadowsContext");
};

#endif

hx::Class RenderPath_obj::__mClass;

static ::String RenderPath_obj_sStaticFields[] = {
	HX_("active",c6,41,46,16),
	HX_("setActive",08,b7,ed,75),
	HX_("sortMeshesDistance",ee,3d,ff,1b),
	HX_("sortMeshesShader",9e,19,c0,a2),
	HX_("meshContext",82,3b,ce,a1),
	HX_("shadowsContext",9c,a9,6d,11),
	::String(null())
};

void RenderPath_obj::__register()
{
	RenderPath_obj _hx_dummy;
	RenderPath_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.RenderPath",a1,55,1f,51);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &RenderPath_obj::__GetStatic;
	__mClass->mSetStaticField = &RenderPath_obj::__SetStatic;
	__mClass->mMarkFunc = RenderPath_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(RenderPath_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RenderPath_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RenderPath_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RenderPath_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RenderPath_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RenderPath_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void RenderPath_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_770_boot)
HXDLIN( 770)		meshContext = HX_("mesh",ed,49,59,48);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c73e78f1c8bfab00_771_boot)
HXDLIN( 771)		shadowsContext = HX_("shadowmap",bc,6e,b8,f4);
            	}
}

} // end namespace iron
