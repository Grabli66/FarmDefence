// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_RenderTarget
#include <hxinc/iron/RenderTarget.h>
#endif
#ifndef INCLUDED_iron_RenderTargetRaw
#include <hxinc/iron/RenderTargetRaw.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_graphics4_CubeMap
#include <hxinc/kha/graphics4/CubeMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c15ff6642d61b4ea_798_new,"iron.RenderTarget","new",0xea3ea5bf,"iron.RenderTarget.new","iron/RenderPath.hx",798,0x489fbb1c)
HX_LOCAL_STACK_FRAME(_hx_pos_c15ff6642d61b4ea_808_unload,"iron.RenderTarget","unload",0x13203100,"iron.RenderTarget.unload","iron/RenderPath.hx",808,0x489fbb1c)
namespace iron{

void RenderTarget_obj::__construct( ::iron::RenderTargetRaw raw){
            	HX_STACKFRAME(&_hx_pos_c15ff6642d61b4ea_798_new)
HXLINE( 806)		this->isCubeMap = false;
HXLINE( 805)		this->is3D = false;
HXLINE( 804)		this->hasDepth = false;
HXLINE( 803)		this->cubeMap = null();
HXLINE( 802)		this->image = null();
HXLINE( 801)		this->depthStencilFrom = HX_("",00,00,00,00);
HXLINE( 807)		this->raw = raw;
            	}

Dynamic RenderTarget_obj::__CreateEmpty() { return new RenderTarget_obj; }

void *RenderTarget_obj::_hx_vtable = 0;

Dynamic RenderTarget_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RenderTarget_obj > _hx_result = new RenderTarget_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool RenderTarget_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7d6a3a4b;
}

void RenderTarget_obj::unload(){
            	HX_STACKFRAME(&_hx_pos_c15ff6642d61b4ea_808_unload)
HXLINE( 809)		if (hx::IsNotNull( this->image )) {
HXLINE( 809)			this->image->unload();
            		}
HXLINE( 810)		if (hx::IsNotNull( this->cubeMap )) {
HXLINE( 810)			this->cubeMap->unload();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderTarget_obj,unload,(void))


hx::ObjectPtr< RenderTarget_obj > RenderTarget_obj::__new( ::iron::RenderTargetRaw raw) {
	hx::ObjectPtr< RenderTarget_obj > __this = new RenderTarget_obj();
	__this->__construct(raw);
	return __this;
}

hx::ObjectPtr< RenderTarget_obj > RenderTarget_obj::__alloc(hx::Ctx *_hx_ctx, ::iron::RenderTargetRaw raw) {
	RenderTarget_obj *__this = (RenderTarget_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(RenderTarget_obj), true, "iron.RenderTarget"));
	*(void **)__this = RenderTarget_obj::_hx_vtable;
	__this->__construct(raw);
	return __this;
}

RenderTarget_obj::RenderTarget_obj()
{
}

void RenderTarget_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RenderTarget);
	HX_MARK_MEMBER_NAME(raw,"raw");
	HX_MARK_MEMBER_NAME(depthStencil,"depthStencil");
	HX_MARK_MEMBER_NAME(depthStencilFrom,"depthStencilFrom");
	HX_MARK_MEMBER_NAME(image,"image");
	HX_MARK_MEMBER_NAME(cubeMap,"cubeMap");
	HX_MARK_MEMBER_NAME(hasDepth,"hasDepth");
	HX_MARK_MEMBER_NAME(is3D,"is3D");
	HX_MARK_MEMBER_NAME(isCubeMap,"isCubeMap");
	HX_MARK_END_CLASS();
}

void RenderTarget_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(raw,"raw");
	HX_VISIT_MEMBER_NAME(depthStencil,"depthStencil");
	HX_VISIT_MEMBER_NAME(depthStencilFrom,"depthStencilFrom");
	HX_VISIT_MEMBER_NAME(image,"image");
	HX_VISIT_MEMBER_NAME(cubeMap,"cubeMap");
	HX_VISIT_MEMBER_NAME(hasDepth,"hasDepth");
	HX_VISIT_MEMBER_NAME(is3D,"is3D");
	HX_VISIT_MEMBER_NAME(isCubeMap,"isCubeMap");
}

hx::Val RenderTarget_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"raw") ) { return hx::Val( raw ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"is3D") ) { return hx::Val( is3D ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { return hx::Val( image ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"unload") ) { return hx::Val( unload_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"cubeMap") ) { return hx::Val( cubeMap ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"hasDepth") ) { return hx::Val( hasDepth ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isCubeMap") ) { return hx::Val( isCubeMap ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"depthStencil") ) { return hx::Val( depthStencil ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"depthStencilFrom") ) { return hx::Val( depthStencilFrom ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val RenderTarget_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"raw") ) { raw=inValue.Cast<  ::iron::RenderTargetRaw >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"is3D") ) { is3D=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { image=inValue.Cast<  ::kha::Image >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"cubeMap") ) { cubeMap=inValue.Cast<  ::kha::graphics4::CubeMap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"hasDepth") ) { hasDepth=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isCubeMap") ) { isCubeMap=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"depthStencil") ) { depthStencil=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"depthStencilFrom") ) { depthStencilFrom=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RenderTarget_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("raw",e8,d5,56,00));
	outFields->push(HX_("depthStencil",39,6b,52,c6));
	outFields->push(HX_("depthStencilFrom",43,cd,d6,37));
	outFields->push(HX_("image",5b,1f,69,bd));
	outFields->push(HX_("cubeMap",a7,4c,d0,8c));
	outFields->push(HX_("hasDepth",49,3b,82,63));
	outFields->push(HX_("is3D",1b,d7,be,45));
	outFields->push(HX_("isCubeMap",dd,c9,ce,90));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo RenderTarget_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::RenderTargetRaw*/ ,(int)offsetof(RenderTarget_obj,raw),HX_("raw",e8,d5,56,00)},
	{hx::fsInt,(int)offsetof(RenderTarget_obj,depthStencil),HX_("depthStencil",39,6b,52,c6)},
	{hx::fsString,(int)offsetof(RenderTarget_obj,depthStencilFrom),HX_("depthStencilFrom",43,cd,d6,37)},
	{hx::fsObject /*::kha::Image*/ ,(int)offsetof(RenderTarget_obj,image),HX_("image",5b,1f,69,bd)},
	{hx::fsObject /*::kha::graphics4::CubeMap*/ ,(int)offsetof(RenderTarget_obj,cubeMap),HX_("cubeMap",a7,4c,d0,8c)},
	{hx::fsBool,(int)offsetof(RenderTarget_obj,hasDepth),HX_("hasDepth",49,3b,82,63)},
	{hx::fsBool,(int)offsetof(RenderTarget_obj,is3D),HX_("is3D",1b,d7,be,45)},
	{hx::fsBool,(int)offsetof(RenderTarget_obj,isCubeMap),HX_("isCubeMap",dd,c9,ce,90)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *RenderTarget_obj_sStaticStorageInfo = 0;
#endif

static ::String RenderTarget_obj_sMemberFields[] = {
	HX_("raw",e8,d5,56,00),
	HX_("depthStencil",39,6b,52,c6),
	HX_("depthStencilFrom",43,cd,d6,37),
	HX_("image",5b,1f,69,bd),
	HX_("cubeMap",a7,4c,d0,8c),
	HX_("hasDepth",49,3b,82,63),
	HX_("is3D",1b,d7,be,45),
	HX_("isCubeMap",dd,c9,ce,90),
	HX_("unload",ff,a0,8c,65),
	::String(null()) };

hx::Class RenderTarget_obj::__mClass;

void RenderTarget_obj::__register()
{
	RenderTarget_obj _hx_dummy;
	RenderTarget_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.RenderTarget",4d,5a,f3,ef);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RenderTarget_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RenderTarget_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RenderTarget_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RenderTarget_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
