// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_RenderTargetRaw
#include <hxinc/iron/RenderTargetRaw.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f1afc54f6e3df991_783_new,"iron.RenderTargetRaw","new",0xf2a0ec0d,"iron.RenderTargetRaw.new","iron/RenderPath.hx",783,0x489fbb1c)
namespace iron{

void RenderTargetRaw_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_f1afc54f6e3df991_783_new)
HXLINE( 794)		this->is_cubemap = null();
HXLINE( 793)		this->is_image = null();
HXLINE( 792)		this->depth = null();
HXLINE( 791)		this->mipmaps = null();
HXLINE( 790)		this->depth_buffer = null();
HXLINE( 789)		this->displayp = null();
HXLINE( 788)		this->scale = null();
HXLINE( 787)		this->format = null();
            	}

Dynamic RenderTargetRaw_obj::__CreateEmpty() { return new RenderTargetRaw_obj; }

void *RenderTargetRaw_obj::_hx_vtable = 0;

Dynamic RenderTargetRaw_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RenderTargetRaw_obj > _hx_result = new RenderTargetRaw_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool RenderTargetRaw_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3ce0dcd5;
}


RenderTargetRaw_obj::RenderTargetRaw_obj()
{
}

void RenderTargetRaw_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RenderTargetRaw);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(format,"format");
	HX_MARK_MEMBER_NAME(scale,"scale");
	HX_MARK_MEMBER_NAME(displayp,"displayp");
	HX_MARK_MEMBER_NAME(depth_buffer,"depth_buffer");
	HX_MARK_MEMBER_NAME(mipmaps,"mipmaps");
	HX_MARK_MEMBER_NAME(depth,"depth");
	HX_MARK_MEMBER_NAME(is_image,"is_image");
	HX_MARK_MEMBER_NAME(is_cubemap,"is_cubemap");
	HX_MARK_END_CLASS();
}

void RenderTargetRaw_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(format,"format");
	HX_VISIT_MEMBER_NAME(scale,"scale");
	HX_VISIT_MEMBER_NAME(displayp,"displayp");
	HX_VISIT_MEMBER_NAME(depth_buffer,"depth_buffer");
	HX_VISIT_MEMBER_NAME(mipmaps,"mipmaps");
	HX_VISIT_MEMBER_NAME(depth,"depth");
	HX_VISIT_MEMBER_NAME(is_image,"is_image");
	HX_VISIT_MEMBER_NAME(is_cubemap,"is_cubemap");
}

hx::Val RenderTargetRaw_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"scale") ) { return hx::Val( scale ); }
		if (HX_FIELD_EQ(inName,"depth") ) { return hx::Val( depth ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"format") ) { return hx::Val( format ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mipmaps") ) { return hx::Val( mipmaps ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"displayp") ) { return hx::Val( displayp ); }
		if (HX_FIELD_EQ(inName,"is_image") ) { return hx::Val( is_image ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"is_cubemap") ) { return hx::Val( is_cubemap ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"depth_buffer") ) { return hx::Val( depth_buffer ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val RenderTargetRaw_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scale") ) { scale=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"depth") ) { depth=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"format") ) { format=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mipmaps") ) { mipmaps=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"displayp") ) { displayp=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"is_image") ) { is_image=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"is_cubemap") ) { is_cubemap=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"depth_buffer") ) { depth_buffer=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RenderTargetRaw_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("format",37,8f,8e,fd));
	outFields->push(HX_("scale",8a,ce,ce,78));
	outFields->push(HX_("displayp",ee,cf,9a,25));
	outFields->push(HX_("depth_buffer",fc,53,09,b8));
	outFields->push(HX_("mipmaps",eb,a9,53,75));
	outFields->push(HX_("depth",03,f1,29,d7));
	outFields->push(HX_("is_image",06,8e,25,dd));
	outFields->push(HX_("is_cubemap",32,44,9e,67));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo RenderTargetRaw_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(RenderTargetRaw_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsInt,(int)offsetof(RenderTargetRaw_obj,width),HX_("width",06,b6,62,ca)},
	{hx::fsInt,(int)offsetof(RenderTargetRaw_obj,height),HX_("height",e7,07,4c,02)},
	{hx::fsString,(int)offsetof(RenderTargetRaw_obj,format),HX_("format",37,8f,8e,fd)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(RenderTargetRaw_obj,scale),HX_("scale",8a,ce,ce,78)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(RenderTargetRaw_obj,displayp),HX_("displayp",ee,cf,9a,25)},
	{hx::fsString,(int)offsetof(RenderTargetRaw_obj,depth_buffer),HX_("depth_buffer",fc,53,09,b8)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(RenderTargetRaw_obj,mipmaps),HX_("mipmaps",eb,a9,53,75)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(RenderTargetRaw_obj,depth),HX_("depth",03,f1,29,d7)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(RenderTargetRaw_obj,is_image),HX_("is_image",06,8e,25,dd)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(RenderTargetRaw_obj,is_cubemap),HX_("is_cubemap",32,44,9e,67)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *RenderTargetRaw_obj_sStaticStorageInfo = 0;
#endif

static ::String RenderTargetRaw_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("format",37,8f,8e,fd),
	HX_("scale",8a,ce,ce,78),
	HX_("displayp",ee,cf,9a,25),
	HX_("depth_buffer",fc,53,09,b8),
	HX_("mipmaps",eb,a9,53,75),
	HX_("depth",03,f1,29,d7),
	HX_("is_image",06,8e,25,dd),
	HX_("is_cubemap",32,44,9e,67),
	::String(null()) };

hx::Class RenderTargetRaw_obj::__mClass;

void RenderTargetRaw_obj::__register()
{
	RenderTargetRaw_obj _hx_dummy;
	RenderTargetRaw_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.RenderTargetRaw",9b,e1,44,fa);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RenderTargetRaw_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RenderTargetRaw_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RenderTargetRaw_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RenderTargetRaw_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
