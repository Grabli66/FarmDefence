// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Reflect
#include <hxinc/Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <hxinc/StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <hxinc/Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <hxinc/haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <hxinc/haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <hxinc/haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_iron_RenderPath
#include <hxinc/iron/RenderPath.h>
#endif
#ifndef INCLUDED_iron_Scene
#include <hxinc/iron/Scene.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <hxinc/iron/Trait.h>
#endif
#ifndef INCLUDED_iron_data_Armature
#include <hxinc/iron/data/Armature.h>
#endif
#ifndef INCLUDED_iron_data_CameraData
#include <hxinc/iron/data/CameraData.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <hxinc/iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_data_Geometry
#include <hxinc/iron/data/Geometry.h>
#endif
#ifndef INCLUDED_iron_data_LightData
#include <hxinc/iron/data/LightData.h>
#endif
#ifndef INCLUDED_iron_data_MaterialData
#include <hxinc/iron/data/MaterialData.h>
#endif
#ifndef INCLUDED_iron_data_MeshData
#include <hxinc/iron/data/MeshData.h>
#endif
#ifndef INCLUDED_iron_data_TConstraint
#include <hxinc/iron/data/TConstraint.h>
#endif
#ifndef INCLUDED_iron_data_TGroup
#include <hxinc/iron/data/TGroup.h>
#endif
#ifndef INCLUDED_iron_data_TLod
#include <hxinc/iron/data/TLod.h>
#endif
#ifndef INCLUDED_iron_data_TObj
#include <hxinc/iron/data/TObj.h>
#endif
#ifndef INCLUDED_iron_data_TParticleReference
#include <hxinc/iron/data/TParticleReference.h>
#endif
#ifndef INCLUDED_iron_data_TSceneFormat
#include <hxinc/iron/data/TSceneFormat.h>
#endif
#ifndef INCLUDED_iron_data_TSpeakerData
#include <hxinc/iron/data/TSpeakerData.h>
#endif
#ifndef INCLUDED_iron_data_TTrait
#include <hxinc/iron/data/TTrait.h>
#endif
#ifndef INCLUDED_iron_data_TTransform
#include <hxinc/iron/data/TTransform.h>
#endif
#ifndef INCLUDED_iron_data_WorldData
#include <hxinc/iron/data/WorldData.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <hxinc/iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Quat
#include <hxinc/iron/math/Quat.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <hxinc/iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_object_Animation
#include <hxinc/iron/object/Animation.h>
#endif
#ifndef INCLUDED_iron_object_CameraObject
#include <hxinc/iron/object/CameraObject.h>
#endif
#ifndef INCLUDED_iron_object_Constraint
#include <hxinc/iron/object/Constraint.h>
#endif
#ifndef INCLUDED_iron_object_DecalObject
#include <hxinc/iron/object/DecalObject.h>
#endif
#ifndef INCLUDED_iron_object_LightObject
#include <hxinc/iron/object/LightObject.h>
#endif
#ifndef INCLUDED_iron_object_MeshObject
#include <hxinc/iron/object/MeshObject.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <hxinc/iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_SpeakerObject
#include <hxinc/iron/object/SpeakerObject.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <hxinc/iron/object/Transform.h>
#endif
#ifndef INCLUDED_iron_system_Time
#include <hxinc/iron/system/Time.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <hxinc/kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3ce623fd85856c5b_9_new,"iron.Scene","new",0x83f82d78,"iron.Scene.new","iron/Scene.hx",9,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_96_remove,"iron.Scene","remove",0xe8197e2c,"iron.Scene.remove","iron/Scene.hx",96,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_126_updateFrame,"iron.Scene","updateFrame",0x2d87167c,"iron.Scene.updateFrame","iron/Scene.hx",126,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_135_renderFrame,"iron.Scene","renderFrame",0x139fda0f,"iron.Scene.renderFrame","iron/Scene.hx",135,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_173_addObject,"iron.Scene","addObject",0xd62ef2d8,"iron.Scene.addObject","iron/Scene.hx",173,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_180_getChild,"iron.Scene","getChild",0x388be50e,"iron.Scene.getChild","iron/Scene.hx",180,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_184_getTrait,"iron.Scene","getTrait",0x08f1cf40,"iron.Scene.getTrait","iron/Scene.hx",184,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_187_getMesh,"iron.Scene","getMesh",0x5610c2bb,"iron.Scene.getMesh","iron/Scene.hx",187,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_192_getLight,"iron.Scene","getLight",0x67cecc48,"iron.Scene.getLight","iron/Scene.hx",192,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_197_getCamera,"iron.Scene","getCamera",0x3cae0ef3,"iron.Scene.getCamera","iron/Scene.hx",197,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_202_getSpeaker,"iron.Scene","getSpeaker",0xd67210f1,"iron.Scene.getSpeaker","iron/Scene.hx",202,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_207_getEmpty,"iron.Scene","getEmpty",0x62ac75ff,"iron.Scene.getEmpty","iron/Scene.hx",207,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_212_addMeshObject,"iron.Scene","addMeshObject",0x3de6e125,"iron.Scene.addMeshObject","iron/Scene.hx",212,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_218_addLightObject,"iron.Scene","addLightObject",0x5b05d97c,"iron.Scene.addLightObject","iron/Scene.hx",218,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_224_addCameraObject,"iron.Scene","addCameraObject",0x45c5501d,"iron.Scene.addCameraObject","iron/Scene.hx",224,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_230_addSpeakerObject,"iron.Scene","addSpeakerObject",0x93f50225,"iron.Scene.addSpeakerObject","iron/Scene.hx",230,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_279_addScene,"iron.Scene","addScene",0x852a2b53,"iron.Scene.addScene","iron/Scene.hx",279,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_288_addScene,"iron.Scene","addScene",0x852a2b53,"iron.Scene.addScene","iron/Scene.hx",288,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_254_addScene,"iron.Scene","addScene",0x852a2b53,"iron.Scene.addScene","iron/Scene.hx",254,0xb92191f9)
static const int _hx_array_data_e98e5186_35[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_300_addScene,"iron.Scene","addScene",0x852a2b53,"iron.Scene.addScene","iron/Scene.hx",300,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_252_addScene,"iron.Scene","addScene",0x852a2b53,"iron.Scene.addScene","iron/Scene.hx",252,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_247_addScene,"iron.Scene","addScene",0x852a2b53,"iron.Scene.addScene","iron/Scene.hx",247,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_307_getObjectsCount,"iron.Scene","getObjectsCount",0x8242c229,"iron.Scene.getObjectsCount","iron/Scene.hx",307,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_330_spawnObject,"iron.Scene","spawnObject",0xf1e2a472,"iron.Scene.spawnObject","iron/Scene.hx",330,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_325_spawnObject,"iron.Scene","spawnObject",0xf1e2a472,"iron.Scene.spawnObject","iron/Scene.hx",325,0xb92191f9)
static const int _hx_array_data_e98e5186_45[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_341_parseObject,"iron.Scene","parseObject",0xd1e7606a,"iron.Scene.parseObject","iron/Scene.hx",341,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_340_parseObject,"iron.Scene","parseObject",0xd1e7606a,"iron.Scene.parseObject","iron/Scene.hx",340,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_349_getObj,"iron.Scene","getObj",0x86b4aae9,"iron.Scene.getObj","iron/Scene.hx",349,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_352_traverseObjs,"iron.Scene","traverseObjs",0xae261356,"iron.Scene.traverseObjs","iron/Scene.hx",352,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_363_createObject,"iron.Scene","createObject",0x33f7fec3,"iron.Scene.createObject","iron/Scene.hx",363,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_367_createObject,"iron.Scene","createObject",0x33f7fec3,"iron.Scene.createObject","iron/Scene.hx",367,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_373_createObject,"iron.Scene","createObject",0x33f7fec3,"iron.Scene.createObject","iron/Scene.hx",373,0xb92191f9)
static const int _hx_array_data_e98e5186_57[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_391_createObject,"iron.Scene","createObject",0x33f7fec3,"iron.Scene.createObject","iron/Scene.hx",391,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_414_createObject,"iron.Scene","createObject",0x33f7fec3,"iron.Scene.createObject","iron/Scene.hx",414,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_463_createObject,"iron.Scene","createObject",0x33f7fec3,"iron.Scene.createObject","iron/Scene.hx",463,0xb92191f9)
static const int _hx_array_data_e98e5186_61[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_470_createObject,"iron.Scene","createObject",0x33f7fec3,"iron.Scene.createObject","iron/Scene.hx",470,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_481_getGroupObjectRefs,"iron.Scene","getGroupObjectRefs",0x26556030,"iron.Scene.getGroupObjectRefs","iron/Scene.hx",481,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_503_isLod,"iron.Scene","isLod",0xbc9851cf,"iron.Scene.isLod","iron/Scene.hx",503,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_507_returnMeshObject,"iron.Scene","returnMeshObject",0x664ba544,"iron.Scene.returnMeshObject","iron/Scene.hx",507,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_506_returnMeshObject,"iron.Scene","returnMeshObject",0x664ba544,"iron.Scene.returnMeshObject","iron/Scene.hx",506,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_532_returnObject,"iron.Scene","returnObject",0x45f97b77,"iron.Scene.returnObject","iron/Scene.hx",532,0xb92191f9)
static const int _hx_array_data_e98e5186_72[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_541_returnObject,"iron.Scene","returnObject",0x45f97b77,"iron.Scene.returnObject","iron/Scene.hx",541,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_553_returnObjectLoaded,"iron.Scene","returnObjectLoaded",0x3845aadc,"iron.Scene.returnObjectLoaded","iron/Scene.hx",553,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_655_loadEmbeddedData,"iron.Scene","loadEmbeddedData",0x082c0402,"iron.Scene.loadEmbeddedData","iron/Scene.hx",655,0xb92191f9)
static const int _hx_array_data_e98e5186_78[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_659_loadEmbeddedData,"iron.Scene","loadEmbeddedData",0x082c0402,"iron.Scene.loadEmbeddedData","iron/Scene.hx",659,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_669_notifyOnInit,"iron.Scene","notifyOnInit",0x526f8f60,"iron.Scene.notifyOnInit","iron/Scene.hx",669,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_674_removeInit,"iron.Scene","removeInit",0x6be66b5c,"iron.Scene.removeInit","iron/Scene.hx",674,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_678_notifyOnRemove,"iron.Scene","notifyOnRemove",0xe636a494,"iron.Scene.notifyOnRemove","iron/Scene.hx",678,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_682_toString,"iron.Scene","toString",0xcb69fc94,"iron.Scene.toString","iron/Scene.hx",682,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_78_create,"iron.Scene","create",0x5fa048e4,"iron.Scene.create","iron/Scene.hx",78,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_74_create,"iron.Scene","create",0x5fa048e4,"iron.Scene.create","iron/Scene.hx",74,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_69_create,"iron.Scene","create",0x5fa048e4,"iron.Scene.create","iron/Scene.hx",69,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_118_setActive,"iron.Scene","setActive",0x7eb8f620,"iron.Scene.setActive","iron/Scene.hx",118,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_117_setActive,"iron.Scene","setActive",0x7eb8f620,"iron.Scene.setActive","iron/Scene.hx",117,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_112_setActive,"iron.Scene","setActive",0x7eb8f620,"iron.Scene.setActive","iron/Scene.hx",112,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_576_generateTransform,"iron.Scene","generateTransform",0xb6aeb68f,"iron.Scene.generateTransform","iron/Scene.hx",576,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_584_createTraits,"iron.Scene","createTraits",0x643a40e9,"iron.Scene.createTraits","iron/Scene.hx",584,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_615_parseArg,"iron.Scene","parseArg",0x696733cb,"iron.Scene.parseArg","iron/Scene.hx",615,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_640_createConstraints,"iron.Scene","createConstraints",0xe59942f2,"iron.Scene.createConstraints","iron/Scene.hx",640,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_649_createTraitClassInstance,"iron.Scene","createTraitClassInstance",0x4336b543,"iron.Scene.createTraitClassInstance","iron/Scene.hx",649,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_11_boot,"iron.Scene","boot",0xed489c1a,"iron.Scene.boot","iron/Scene.hx",11,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_12_boot,"iron.Scene","boot",0xed489c1a,"iron.Scene.boot","iron/Scene.hx",12,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_13_boot,"iron.Scene","boot",0xed489c1a,"iron.Scene.boot","iron/Scene.hx",13,0xb92191f9)
HX_LOCAL_STACK_FRAME(_hx_pos_3ce623fd85856c5b_111_boot,"iron.Scene","boot",0xed489c1a,"iron.Scene.boot","iron/Scene.hx",111,0xb92191f9)
namespace iron{

void Scene_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_3ce623fd85856c5b_9_new)
HXLINE(  43)		this->traitRemoves = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  42)		this->traitInits = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  36)		this->groups = null();
HXLINE(  46)		this->uid = ::iron::Scene_obj::uidCounter++;
HXLINE(  53)		this->meshes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  54)		this->lights = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  55)		this->cameras = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  56)		this->speakers = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  57)		this->decals = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  58)		this->empties = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  59)		this->animations = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  60)		this->armatures = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  61)		this->embedded =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  62)		this->root =  ::iron::object::Object_obj::__alloc( HX_CTX );
HXLINE(  63)		this->root->name = HX_("Root",42,1a,88,36);
HXLINE(  64)		this->traitInits = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  65)		this->traitRemoves = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  66)		if (hx::IsNull( ::iron::Scene_obj::global )) {
HXLINE(  66)			::iron::Scene_obj::global =  ::iron::object::Object_obj::__alloc( HX_CTX );
            		}
            	}

Dynamic Scene_obj::__CreateEmpty() { return new Scene_obj; }

void *Scene_obj::_hx_vtable = 0;

Dynamic Scene_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Scene_obj > _hx_result = new Scene_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Scene_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2f4c0e24;
}

void Scene_obj::remove(){
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_96_remove)
HXLINE(  97)		{
HXLINE(  97)			int _g = 0;
HXDLIN(  97)			::Array< ::Dynamic> _g1 = this->traitRemoves;
HXDLIN(  97)			while((_g < _g1->length)){
HXLINE(  97)				 ::Dynamic f = _g1->__get(_g);
HXDLIN(  97)				_g = (_g + 1);
HXDLIN(  97)				f();
            			}
            		}
HXLINE( 101)		{
HXLINE( 101)			int _g2 = 0;
HXDLIN( 101)			::Array< ::Dynamic> _g11 = this->meshes;
HXDLIN( 101)			while((_g2 < _g11->length)){
HXLINE( 101)				 ::iron::object::MeshObject o = _g11->__get(_g2).StaticCast<  ::iron::object::MeshObject >();
HXDLIN( 101)				_g2 = (_g2 + 1);
HXDLIN( 101)				o->remove();
            			}
            		}
HXLINE( 102)		{
HXLINE( 102)			int _g3 = 0;
HXDLIN( 102)			::Array< ::Dynamic> _g12 = this->lights;
HXDLIN( 102)			while((_g3 < _g12->length)){
HXLINE( 102)				 ::iron::object::LightObject o1 = _g12->__get(_g3).StaticCast<  ::iron::object::LightObject >();
HXDLIN( 102)				_g3 = (_g3 + 1);
HXDLIN( 102)				o1->remove();
            			}
            		}
HXLINE( 103)		{
HXLINE( 103)			int _g4 = 0;
HXDLIN( 103)			::Array< ::Dynamic> _g13 = this->cameras;
HXDLIN( 103)			while((_g4 < _g13->length)){
HXLINE( 103)				 ::iron::object::CameraObject o2 = _g13->__get(_g4).StaticCast<  ::iron::object::CameraObject >();
HXDLIN( 103)				_g4 = (_g4 + 1);
HXDLIN( 103)				o2->remove();
            			}
            		}
HXLINE( 104)		{
HXLINE( 104)			int _g5 = 0;
HXDLIN( 104)			::Array< ::Dynamic> _g14 = this->speakers;
HXDLIN( 104)			while((_g5 < _g14->length)){
HXLINE( 104)				 ::iron::object::SpeakerObject o3 = _g14->__get(_g5).StaticCast<  ::iron::object::SpeakerObject >();
HXDLIN( 104)				_g5 = (_g5 + 1);
HXDLIN( 104)				o3->remove();
            			}
            		}
HXLINE( 105)		{
HXLINE( 105)			int _g6 = 0;
HXDLIN( 105)			::Array< ::Dynamic> _g15 = this->decals;
HXDLIN( 105)			while((_g6 < _g15->length)){
HXLINE( 105)				 ::iron::object::DecalObject o4 = _g15->__get(_g6).StaticCast<  ::iron::object::DecalObject >();
HXDLIN( 105)				_g6 = (_g6 + 1);
HXDLIN( 105)				o4->remove();
            			}
            		}
HXLINE( 106)		{
HXLINE( 106)			int _g7 = 0;
HXDLIN( 106)			::Array< ::Dynamic> _g16 = this->empties;
HXDLIN( 106)			while((_g7 < _g16->length)){
HXLINE( 106)				 ::iron::object::Object o5 = _g16->__get(_g7).StaticCast<  ::iron::object::Object >();
HXDLIN( 106)				_g7 = (_g7 + 1);
HXDLIN( 106)				o5->remove();
            			}
            		}
HXLINE( 107)		this->groups = null();
HXLINE( 108)		this->root->remove();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,remove,(void))

void Scene_obj::updateFrame(){
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_126_updateFrame)
HXLINE( 127)		if (!(this->ready)) {
HXLINE( 127)			return;
            		}
HXLINE( 131)		{
HXLINE( 131)			int _g = 0;
HXDLIN( 131)			::Array< ::Dynamic> _g1 = this->animations;
HXDLIN( 131)			while((_g < _g1->length)){
HXLINE( 131)				 ::iron::object::Animation anim = _g1->__get(_g).StaticCast<  ::iron::object::Animation >();
HXDLIN( 131)				_g = (_g + 1);
HXDLIN( 131)				anim->update(( (float)((((Float)0.016666666666666666) * ::iron::_hx_system::Time_obj::scale)) ));
            			}
            		}
HXLINE( 132)		{
HXLINE( 132)			int _g2 = 0;
HXDLIN( 132)			::Array< ::Dynamic> _g11 = this->empties;
HXDLIN( 132)			while((_g2 < _g11->length)){
HXLINE( 132)				 ::iron::object::Object e = _g11->__get(_g2).StaticCast<  ::iron::object::Object >();
HXDLIN( 132)				_g2 = (_g2 + 1);
HXDLIN( 132)				bool _hx_tmp;
HXDLIN( 132)				if (hx::IsNotNull( e )) {
HXLINE( 132)					_hx_tmp = hx::IsNotNull( e->parent );
            				}
            				else {
HXLINE( 132)					_hx_tmp = false;
            				}
HXDLIN( 132)				if (_hx_tmp) {
HXLINE( 132)					e->transform->update();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,updateFrame,(void))

void Scene_obj::renderFrame(::Dynamic g){
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_135_renderFrame)
HXLINE( 136)		bool _hx_tmp;
HXDLIN( 136)		if (!(!(this->ready))) {
HXLINE( 136)			_hx_tmp = hx::IsNull( ::iron::RenderPath_obj::active );
            		}
            		else {
HXLINE( 136)			_hx_tmp = true;
            		}
HXDLIN( 136)		if (_hx_tmp) {
HXLINE( 136)			return;
            		}
HXLINE( 137)		::iron::Scene_obj::framePassed = true;
HXLINE( 139)		 ::iron::object::CameraObject activeCamera = this->camera;
HXLINE( 141)		{
HXLINE( 141)			int _g = 0;
HXDLIN( 141)			::Array< ::Dynamic> _g1 = this->cameras;
HXDLIN( 141)			while((_g < _g1->length)){
HXLINE( 141)				 ::iron::object::CameraObject cam = _g1->__get(_g).StaticCast<  ::iron::object::CameraObject >();
HXDLIN( 141)				_g = (_g + 1);
HXLINE( 142)				if (hx::IsNotNull( cam->data->renderTarget )) {
HXLINE( 163)					this->camera = cam;
HXLINE( 164)					this->camera->renderFrame(g);
            				}
            			}
            		}
HXLINE( 168)		this->camera = activeCamera;
HXLINE( 169)		if (hx::IsNotNull( this->camera )) {
HXLINE( 169)			this->camera->renderFrame(g);
            		}
            		else {
HXLINE( 169)			::iron::RenderPath_obj::active->renderFrame(g);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,renderFrame,(void))

 ::iron::object::Object Scene_obj::addObject( ::iron::object::Object parent){
            	HX_GC_STACKFRAME(&_hx_pos_3ce623fd85856c5b_173_addObject)
HXLINE( 174)		 ::iron::object::Object object =  ::iron::object::Object_obj::__alloc( HX_CTX );
HXLINE( 175)		if (hx::IsNotNull( parent )) {
HXLINE( 175)			parent->addChild(object,null());
            		}
            		else {
HXLINE( 175)			this->root->addChild(object,null());
            		}
HXLINE( 176)		return object;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,addObject,return )

 ::iron::object::Object Scene_obj::getChild(::String name){
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_180_getChild)
HXDLIN( 180)		return this->root->getChild(name);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,getChild,return )

 ::Dynamic Scene_obj::getTrait(hx::Class c){
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_184_getTrait)
HXDLIN( 184)		if ((this->root->children->length > 0)) {
HXDLIN( 184)			return this->root->children->__get(0).StaticCast<  ::iron::object::Object >()->getTrait(c).StaticCast<  ::iron::Trait >();
            		}
            		else {
HXDLIN( 184)			return null();
            		}
HXDLIN( 184)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,getTrait,return )

 ::iron::object::MeshObject Scene_obj::getMesh(::String name){
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_187_getMesh)
HXLINE( 188)		{
HXLINE( 188)			int _g = 0;
HXDLIN( 188)			::Array< ::Dynamic> _g1 = this->meshes;
HXDLIN( 188)			while((_g < _g1->length)){
HXLINE( 188)				 ::iron::object::MeshObject m = _g1->__get(_g).StaticCast<  ::iron::object::MeshObject >();
HXDLIN( 188)				_g = (_g + 1);
HXDLIN( 188)				if ((m->name == name)) {
HXLINE( 188)					return m;
            				}
            			}
            		}
HXLINE( 189)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,getMesh,return )

 ::iron::object::LightObject Scene_obj::getLight(::String name){
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_192_getLight)
HXLINE( 193)		{
HXLINE( 193)			int _g = 0;
HXDLIN( 193)			::Array< ::Dynamic> _g1 = this->lights;
HXDLIN( 193)			while((_g < _g1->length)){
HXLINE( 193)				 ::iron::object::LightObject l = _g1->__get(_g).StaticCast<  ::iron::object::LightObject >();
HXDLIN( 193)				_g = (_g + 1);
HXDLIN( 193)				if ((l->name == name)) {
HXLINE( 193)					return l;
            				}
            			}
            		}
HXLINE( 194)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,getLight,return )

 ::iron::object::CameraObject Scene_obj::getCamera(::String name){
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_197_getCamera)
HXLINE( 198)		{
HXLINE( 198)			int _g = 0;
HXDLIN( 198)			::Array< ::Dynamic> _g1 = this->cameras;
HXDLIN( 198)			while((_g < _g1->length)){
HXLINE( 198)				 ::iron::object::CameraObject c = _g1->__get(_g).StaticCast<  ::iron::object::CameraObject >();
HXDLIN( 198)				_g = (_g + 1);
HXDLIN( 198)				if ((c->name == name)) {
HXLINE( 198)					return c;
            				}
            			}
            		}
HXLINE( 199)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,getCamera,return )

 ::iron::object::SpeakerObject Scene_obj::getSpeaker(::String name){
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_202_getSpeaker)
HXLINE( 203)		{
HXLINE( 203)			int _g = 0;
HXDLIN( 203)			::Array< ::Dynamic> _g1 = this->speakers;
HXDLIN( 203)			while((_g < _g1->length)){
HXLINE( 203)				 ::iron::object::SpeakerObject s = _g1->__get(_g).StaticCast<  ::iron::object::SpeakerObject >();
HXDLIN( 203)				_g = (_g + 1);
HXDLIN( 203)				if ((s->name == name)) {
HXLINE( 203)					return s;
            				}
            			}
            		}
HXLINE( 204)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,getSpeaker,return )

 ::iron::object::Object Scene_obj::getEmpty(::String name){
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_207_getEmpty)
HXLINE( 208)		{
HXLINE( 208)			int _g = 0;
HXDLIN( 208)			::Array< ::Dynamic> _g1 = this->empties;
HXDLIN( 208)			while((_g < _g1->length)){
HXLINE( 208)				 ::iron::object::Object e = _g1->__get(_g).StaticCast<  ::iron::object::Object >();
HXDLIN( 208)				_g = (_g + 1);
HXDLIN( 208)				if ((e->name == name)) {
HXLINE( 208)					return e;
            				}
            			}
            		}
HXLINE( 209)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,getEmpty,return )

 ::iron::object::MeshObject Scene_obj::addMeshObject( ::iron::data::MeshData data,::Array< ::Dynamic> materials, ::iron::object::Object parent){
            	HX_GC_STACKFRAME(&_hx_pos_3ce623fd85856c5b_212_addMeshObject)
HXLINE( 213)		 ::iron::object::MeshObject object =  ::iron::object::MeshObject_obj::__alloc( HX_CTX ,data,materials);
HXLINE( 214)		if (hx::IsNotNull( parent )) {
HXLINE( 214)			parent->addChild(object,null());
            		}
            		else {
HXLINE( 214)			this->root->addChild(object,null());
            		}
HXLINE( 215)		return object;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Scene_obj,addMeshObject,return )

 ::iron::object::LightObject Scene_obj::addLightObject( ::iron::data::LightData data, ::iron::object::Object parent){
            	HX_GC_STACKFRAME(&_hx_pos_3ce623fd85856c5b_218_addLightObject)
HXLINE( 219)		 ::iron::object::LightObject object =  ::iron::object::LightObject_obj::__alloc( HX_CTX ,data);
HXLINE( 220)		if (hx::IsNotNull( parent )) {
HXLINE( 220)			parent->addChild(object,null());
            		}
            		else {
HXLINE( 220)			this->root->addChild(object,null());
            		}
HXLINE( 221)		return object;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Scene_obj,addLightObject,return )

 ::iron::object::CameraObject Scene_obj::addCameraObject( ::iron::data::CameraData data, ::iron::object::Object parent){
            	HX_GC_STACKFRAME(&_hx_pos_3ce623fd85856c5b_224_addCameraObject)
HXLINE( 225)		 ::iron::object::CameraObject object =  ::iron::object::CameraObject_obj::__alloc( HX_CTX ,data);
HXLINE( 226)		if (hx::IsNotNull( parent )) {
HXLINE( 226)			parent->addChild(object,null());
            		}
            		else {
HXLINE( 226)			this->root->addChild(object,null());
            		}
HXLINE( 227)		return object;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Scene_obj,addCameraObject,return )

 ::iron::object::SpeakerObject Scene_obj::addSpeakerObject( ::iron::data::TSpeakerData data, ::iron::object::Object parent){
            	HX_GC_STACKFRAME(&_hx_pos_3ce623fd85856c5b_230_addSpeakerObject)
HXLINE( 231)		 ::iron::object::SpeakerObject object =  ::iron::object::SpeakerObject_obj::__alloc( HX_CTX ,data);
HXLINE( 232)		if (hx::IsNotNull( parent )) {
HXLINE( 232)			parent->addChild(object,null());
            		}
            		else {
HXLINE( 232)			this->root->addChild(object,null());
            		}
HXLINE( 233)		return object;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Scene_obj,addSpeakerObject,return )

void Scene_obj::addScene(::String sceneName, ::iron::object::Object parent, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_4, ::iron::Scene,_gthis, ::iron::object::Object,parent, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::iron::data::TSceneFormat format){
            			HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_3, ::iron::object::Object,parent, ::iron::Scene,_gthis, ::Dynamic,done, ::iron::data::TSceneFormat,format) HXARGC(0)
            			void _hx_run(){
            				HX_BEGIN_LOCAL_FUNC_S5(hx::LocalFunc,_hx_Closure_1,int,objectsCount, ::iron::Scene,_gthis,::Array< int >,objectsTraversed,::Array< ::Dynamic>,traverseObjects, ::iron::data::TSceneFormat,format) HXARGC(4)
            				void _hx_run( ::iron::object::Object parent1,::Array< ::Dynamic> objects, ::iron::data::TObj parentObject, ::Dynamic done1){
            					HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_279_addScene)
HXLINE( 280)					if (hx::IsNull( objects )) {
HXLINE( 280)						return;
            					}
HXLINE( 281)					{
HXLINE( 281)						int _g1 = 0;
HXDLIN( 281)						int _g = objects->length;
HXDLIN( 281)						while((_g1 < _g)){
            							HX_BEGIN_LOCAL_FUNC_S5(hx::LocalFunc,_hx_Closure_0,int,objectsCount,::Array< int >,objectsTraversed, ::Dynamic,done1,::Array< ::Dynamic>,traverseObjects, ::iron::data::TObj,o) HXARGC(1)
            							void _hx_run( ::iron::object::Object object){
            								HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_288_addScene)
HXLINE( 289)								if (hx::IsNotNull( object )) {
HXLINE( 289)									traverseObjects->__get(0)(object,o->children,o,done1);
            								}
HXLINE( 290)								if ((++objectsTraversed[0] == objectsCount)) {
HXLINE( 290)									done1();
            								}
            							}
            							HX_END_LOCAL_FUNC1((void))

HXLINE( 281)							_g1 = (_g1 + 1);
HXDLIN( 281)							int i = (_g1 - 1);
HXLINE( 282)							 ::iron::data::TObj o = objects->__get(i).StaticCast<  ::iron::data::TObj >();
HXLINE( 283)							bool _hx_tmp;
HXDLIN( 283)							if (hx::IsNotNull( o->spawn )) {
HXLINE( 283)								_hx_tmp = hx::IsEq( o->spawn,false );
            							}
            							else {
HXLINE( 283)								_hx_tmp = false;
            							}
HXDLIN( 283)							if (_hx_tmp) {
HXLINE( 284)								if ((++objectsTraversed[0] == objectsCount)) {
HXLINE( 284)									done1();
            								}
HXLINE( 285)								continue;
            							}
HXLINE( 288)							_gthis->createObject(o,format,parent1,parentObject, ::Dynamic(new _hx_Closure_0(objectsCount,objectsTraversed,done1,traverseObjects,o)));
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC4((void))

            				HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_254_addScene)
HXLINE( 276)				::Array< int > objectsTraversed = ::Array_obj< int >::fromData( _hx_array_data_e98e5186_35,1);
HXLINE( 278)				int objectsCount = _gthis->getObjectsCount(format->objects,null());
HXLINE( 279)				::Array< ::Dynamic> traverseObjects = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXDLIN( 279)				traverseObjects[0] =  ::Dynamic(new _hx_Closure_1(objectsCount,_gthis,objectsTraversed,traverseObjects,format));
HXLINE( 295)				bool _hx_tmp1;
HXDLIN( 295)				if (hx::IsNotNull( format->objects )) {
HXLINE( 295)					_hx_tmp1 = (format->objects->length == 0);
            				}
            				else {
HXLINE( 295)					_hx_tmp1 = true;
            				}
HXDLIN( 295)				if (_hx_tmp1) {
HXLINE( 296)					done(parent);
            				}
            				else {
            					HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2, ::iron::object::Object,parent, ::Dynamic,done) HXARGC(0)
            					void _hx_run(){
            						HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_300_addScene)
HXLINE( 300)						done(parent);
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE( 299)					traverseObjects->__get(0)(parent,format->objects,null(), ::Dynamic(new _hx_Closure_2(parent,done)));
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_252_addScene)
HXLINE( 253)			::iron::Scene_obj::createTraits(format->traits,parent);
HXLINE( 254)			_gthis->loadEmbeddedData(format->embedded_datas, ::Dynamic(new _hx_Closure_3(parent,_gthis,done,format)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_247_addScene)
HXDLIN( 247)		 ::iron::Scene _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 248)		if (hx::IsNull( parent )) {
HXLINE( 249)			parent = this->addObject(null());
HXLINE( 250)			parent->name = sceneName;
            		}
HXLINE( 252)		::iron::data::Data_obj::getSceneRaw(sceneName, ::Dynamic(new _hx_Closure_4(_gthis,parent,done)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Scene_obj,addScene,(void))

int Scene_obj::getObjectsCount(::Array< ::Dynamic> objects,hx::Null< bool >  __o_discardNoSpawn){
bool discardNoSpawn = __o_discardNoSpawn.Default(true);
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_307_getObjectsCount)
HXLINE( 308)		if (hx::IsNull( objects )) {
HXLINE( 308)			return 0;
            		}
HXLINE( 309)		int result = objects->length;
HXLINE( 310)		{
HXLINE( 310)			int _g = 0;
HXDLIN( 310)			while((_g < objects->length)){
HXLINE( 310)				 ::iron::data::TObj o = objects->__get(_g).StaticCast<  ::iron::data::TObj >();
HXDLIN( 310)				_g = (_g + 1);
HXLINE( 311)				bool _hx_tmp;
HXDLIN( 311)				bool _hx_tmp1;
HXDLIN( 311)				if (discardNoSpawn) {
HXLINE( 311)					_hx_tmp1 = hx::IsNotNull( o->spawn );
            				}
            				else {
HXLINE( 311)					_hx_tmp1 = false;
            				}
HXDLIN( 311)				if (_hx_tmp1) {
HXLINE( 311)					_hx_tmp = hx::IsEq( o->spawn,false );
            				}
            				else {
HXLINE( 311)					_hx_tmp = false;
            				}
HXDLIN( 311)				if (_hx_tmp) {
HXLINE( 311)					continue;
            				}
HXLINE( 312)				if (hx::IsNotNull( o->children )) {
HXLINE( 312)					result = (result + this->getObjectsCount(o->children,null()));
            				}
            			}
            		}
HXLINE( 314)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Scene_obj,getObjectsCount,return )

void Scene_obj::spawnObject(::String name, ::iron::object::Object parent, ::Dynamic done,hx::Null< bool >  __o_spawnChildren){
            		HX_BEGIN_LOCAL_FUNC_S5(hx::LocalFunc,_hx_Closure_1,int,objectsCount, ::iron::Scene,_gthis,::Array< int >,objectsTraversed,::Array< ::Dynamic>,spawnObjectTree,bool,spawnChildren) HXARGC(3)
            		void _hx_run( ::iron::data::TObj obj1, ::iron::object::Object parent1, ::Dynamic done1){
            			HX_BEGIN_LOCAL_FUNC_S6(hx::LocalFunc,_hx_Closure_0,int,objectsCount,::Array< int >,objectsTraversed, ::Dynamic,done1, ::iron::data::TObj,obj1,::Array< ::Dynamic>,spawnObjectTree,bool,spawnChildren) HXARGC(1)
            			void _hx_run( ::iron::object::Object object){
            				HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_330_spawnObject)
HXLINE( 331)				bool _hx_tmp;
HXDLIN( 331)				if (spawnChildren) {
HXLINE( 331)					_hx_tmp = hx::IsNotNull( obj1->children );
            				}
            				else {
HXLINE( 331)					_hx_tmp = false;
            				}
HXDLIN( 331)				if (_hx_tmp) {
HXLINE( 332)					int _g = 0;
HXDLIN( 332)					::Array< ::Dynamic> _g1 = obj1->children;
HXDLIN( 332)					while((_g < _g1->length)){
HXLINE( 332)						 ::iron::data::TObj child = _g1->__get(_g).StaticCast<  ::iron::data::TObj >();
HXDLIN( 332)						_g = (_g + 1);
HXDLIN( 332)						spawnObjectTree->__get(0)(child,object,done1);
            					}
            				}
HXLINE( 334)				bool _hx_tmp1;
HXDLIN( 334)				if ((++objectsTraversed[0] == objectsCount)) {
HXLINE( 334)					_hx_tmp1 = hx::IsNotNull( done1 );
            				}
            				else {
HXLINE( 334)					_hx_tmp1 = false;
            				}
HXDLIN( 334)				if (_hx_tmp1) {
HXLINE( 334)					done1(object);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_330_spawnObject)
HXLINE( 330)			_gthis->createObject(obj1,_gthis->raw,parent1,null(), ::Dynamic(new _hx_Closure_0(objectsCount,objectsTraversed,done1,obj1,spawnObjectTree,spawnChildren)));
            		}
            		HX_END_LOCAL_FUNC3((void))

bool spawnChildren = __o_spawnChildren.Default(true);
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_325_spawnObject)
HXDLIN( 325)		 ::iron::Scene _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 326)		::Array< int > objectsTraversed = ::Array_obj< int >::fromData( _hx_array_data_e98e5186_45,1);
HXLINE( 327)		 ::iron::data::TObj obj = this->getObj(this->raw,name);
HXLINE( 328)		int objectsCount;
HXDLIN( 328)		if (spawnChildren) {
HXLINE( 328)			objectsCount = this->getObjectsCount(::Array_obj< ::Dynamic>::__new(1)->init(0,obj),false);
            		}
            		else {
HXLINE( 328)			objectsCount = 1;
            		}
HXLINE( 329)		::Array< ::Dynamic> spawnObjectTree = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXDLIN( 329)		spawnObjectTree[0] =  ::Dynamic(new _hx_Closure_1(objectsCount,_gthis,objectsTraversed,spawnObjectTree,spawnChildren));
HXLINE( 337)		spawnObjectTree->__get(0)(obj,parent,done);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Scene_obj,spawnObject,(void))

void Scene_obj::parseObject(::String sceneName,::String objectName, ::iron::object::Object parent, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_0, ::iron::object::Object,parent, ::iron::Scene,_gthis,::String,objectName, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::iron::data::TSceneFormat format){
            			HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_341_parseObject)
HXLINE( 342)			 ::iron::data::TObj o = _gthis->getObj(format,objectName);
HXLINE( 343)			if (hx::IsNull( o )) {
HXLINE( 343)				done(null());
            			}
HXLINE( 344)			_gthis->createObject(o,format,parent,null(),done);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_340_parseObject)
HXDLIN( 340)		 ::iron::Scene _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 341)		::iron::data::Data_obj::getSceneRaw(sceneName, ::Dynamic(new _hx_Closure_0(parent,_gthis,objectName,done)));
            	}


HX_DEFINE_DYNAMIC_FUNC4(Scene_obj,parseObject,(void))

 ::iron::data::TObj Scene_obj::getObj( ::iron::data::TSceneFormat format,::String name){
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_349_getObj)
HXDLIN( 349)		return this->traverseObjs(format->objects,name);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Scene_obj,getObj,return )

 ::iron::data::TObj Scene_obj::traverseObjs(::Array< ::Dynamic> children,::String name){
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_352_traverseObjs)
HXLINE( 353)		{
HXLINE( 353)			int _g = 0;
HXDLIN( 353)			while((_g < children->length)){
HXLINE( 353)				 ::iron::data::TObj o = children->__get(_g).StaticCast<  ::iron::data::TObj >();
HXDLIN( 353)				_g = (_g + 1);
HXLINE( 354)				if ((o->name == name)) {
HXLINE( 354)					return o;
            				}
HXLINE( 355)				if (hx::IsNotNull( o->children )) {
HXLINE( 356)					 ::iron::data::TObj res = this->traverseObjs(o->children,name);
HXLINE( 357)					if (hx::IsNotNull( res )) {
HXLINE( 357)						return res;
            					}
            				}
            			}
            		}
HXLINE( 360)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Scene_obj,traverseObjs,return )

void Scene_obj::createObject( ::iron::data::TObj o, ::iron::data::TSceneFormat format, ::iron::object::Object parent, ::iron::data::TObj parentObject, ::Dynamic done){
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_363_createObject)
HXDLIN( 363)		 ::iron::Scene _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 365)		::String sceneName = format->name;
HXLINE( 366)		if ((o->type == HX_("camera_object",59,98,62,be))) {
            			HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_0, ::iron::object::Object,parent, ::iron::Scene,_gthis, ::Dynamic,done, ::iron::data::TObj,o) HXARGC(1)
            			void _hx_run( ::iron::data::CameraData b){
            				HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_367_createObject)
HXLINE( 368)				 ::iron::object::CameraObject object = _gthis->addCameraObject(b,parent);
HXLINE( 369)				_gthis->returnObject(object,o,done);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 367)			::iron::data::Data_obj::getCamera(sceneName,o->data_ref, ::Dynamic(new _hx_Closure_0(parent,_gthis,done,o)));
            		}
            		else {
HXLINE( 372)			if ((o->type == HX_("light_object",48,66,97,16))) {
            				HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_1, ::iron::object::Object,parent, ::iron::Scene,_gthis, ::Dynamic,done, ::iron::data::TObj,o) HXARGC(1)
            				void _hx_run( ::iron::data::LightData b1){
            					HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_373_createObject)
HXLINE( 374)					 ::iron::object::LightObject object1 = _gthis->addLightObject(b1,parent);
HXLINE( 375)					_gthis->returnObject(object1,o,done);
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 373)				::iron::data::Data_obj::getLight(sceneName,o->data_ref, ::Dynamic(new _hx_Closure_1(parent,_gthis,done,o)));
            			}
            			else {
HXLINE( 378)				if ((o->type == HX_("mesh_object",11,0e,bc,3e))) {
HXLINE( 379)					bool _hx_tmp;
HXDLIN( 379)					if (hx::IsNotNull( o->material_refs )) {
HXLINE( 379)						_hx_tmp = (o->material_refs->length == 0);
            					}
            					else {
HXLINE( 379)						_hx_tmp = true;
            					}
HXDLIN( 379)					if (_hx_tmp) {
HXLINE( 381)						 ::iron::object::Object object2 = this->addObject(parent);
HXLINE( 382)						this->returnObject(object2,o,done);
            					}
            					else {
HXLINE( 386)						::Array< ::Dynamic> this1 = ::Array_obj< ::Dynamic>::__new(o->material_refs->length);
HXDLIN( 386)						::Array< ::Dynamic> materials = this1;
HXLINE( 387)						::Array< int > materialsLoaded = ::Array_obj< int >::fromData( _hx_array_data_e98e5186_57,1);
HXLINE( 389)						{
HXLINE( 389)							int _g1 = 0;
HXDLIN( 389)							int _g = o->material_refs->length;
HXDLIN( 389)							while((_g1 < _g)){
            								HX_BEGIN_LOCAL_FUNC_S9(hx::LocalFunc,_hx_Closure_3, ::iron::Scene,_gthis, ::iron::object::Object,parent,::Array< int >,materialsLoaded,::Array< ::Dynamic>,materials, ::iron::data::TObj,parentObject,::String,sceneName, ::Dynamic,done, ::iron::data::TObj,o,int,i) HXARGC(1)
            								void _hx_run( ::iron::data::MaterialData mat){
            									HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_391_createObject)
HXLINE( 392)									materials->__unsafe_set(i,mat);
HXLINE( 393)									materialsLoaded[0]++;
HXLINE( 395)									if ((materialsLoaded->__get(0) == o->material_refs->length)) {
HXLINE( 398)										::Array< ::String > ref1 = o->data_ref.split(HX_("/",2f,00,00,00));
HXLINE( 399)										::String object_file = HX_("",00,00,00,00);
HXLINE( 400)										::String data_ref = HX_("",00,00,00,00);
HXLINE( 401)										if ((ref1->length == 2)) {
HXLINE( 402)											object_file = ref1->__get(0);
HXLINE( 403)											data_ref = ref1->__get(1);
            										}
            										else {
HXLINE( 406)											object_file = sceneName;
HXLINE( 407)											data_ref = o->data_ref;
            										}
HXLINE( 411)										bool _hx_tmp1;
HXDLIN( 411)										if (hx::IsNotNull( parentObject )) {
HXLINE( 411)											_hx_tmp1 = hx::IsNotNull( parentObject->bone_actions );
            										}
            										else {
HXLINE( 411)											_hx_tmp1 = false;
            										}
HXDLIN( 411)										if (_hx_tmp1) {
HXLINE( 412)											::Array< ::Dynamic> bactions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 413)											{
HXLINE( 413)												int _g2 = 0;
HXDLIN( 413)												::Array< ::String > _g3 = parentObject->bone_actions;
HXDLIN( 413)												while((_g2 < _g3->length)){
            													HX_BEGIN_LOCAL_FUNC_S10(hx::LocalFunc,_hx_Closure_2,::String,data_ref, ::iron::object::Object,parent, ::iron::Scene,_gthis,::Array< ::Dynamic>,materials,::String,object_file,::String,sceneName, ::iron::data::TObj,parentObject,::Array< ::Dynamic>,bactions, ::Dynamic,done, ::iron::data::TObj,o) HXARGC(1)
            													void _hx_run( ::iron::data::TSceneFormat action){
            														HX_GC_STACKFRAME(&_hx_pos_3ce623fd85856c5b_414_createObject)
HXLINE( 415)														bactions->push(action);
HXLINE( 416)														if ((bactions->length == parentObject->bone_actions->length)) {
HXLINE( 417)															 ::iron::data::Armature armature =  ::iron::data::Armature_obj::__alloc( HX_CTX ,parentObject->name,bactions);
HXLINE( 418)															_gthis->armatures->push(armature);
HXLINE( 422)															_gthis->returnMeshObject(object_file,data_ref,sceneName,armature,materials,parent,o,done);
            														}
            													}
            													HX_END_LOCAL_FUNC1((void))

HXLINE( 413)													::String ref2 = _g3->__get(_g2);
HXDLIN( 413)													_g2 = (_g2 + 1);
HXLINE( 414)													::iron::data::Data_obj::getSceneRaw(ref2, ::Dynamic(new _hx_Closure_2(data_ref,parent,_gthis,materials,object_file,sceneName,parentObject,bactions,done,o)));
            												}
            											}
            										}
            										else {
HXLINE( 433)											_gthis->returnMeshObject(object_file,data_ref,sceneName,null(),materials,parent,o,done);
            										}
            									}
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE( 389)								_g1 = (_g1 + 1);
HXDLIN( 389)								int i = (_g1 - 1);
HXLINE( 390)								::String ref = o->material_refs->__get(i);
HXLINE( 391)								::iron::data::Data_obj::getMaterial(sceneName,ref, ::Dynamic(new _hx_Closure_3(_gthis,parent,materialsLoaded,materials,parentObject,sceneName,done,o,i)));
            							}
            						}
            					}
            				}
            				else {
HXLINE( 442)					if ((o->type == HX_("speaker_object",3f,29,6c,51))) {
HXLINE( 443)						 ::iron::data::TSpeakerData object3 = ::iron::data::Data_obj::getSpeakerRawByName(format->speaker_datas,o->data_ref);
HXDLIN( 443)						 ::iron::object::SpeakerObject object4 = this->addSpeakerObject(object3,parent);
HXLINE( 444)						this->returnObject(object4,o,done);
            					}
            					else {
HXLINE( 460)						if ((o->type == HX_("object",bf,7e,3f,15))) {
            							HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_5, ::iron::Scene,_gthis, ::Dynamic,done, ::iron::data::TObj,o) HXARGC(1)
            							void _hx_run( ::iron::object::Object ro){
            								HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_463_createObject)
HXLINE( 463)								if (hx::IsNotNull( o->group_ref )) {
HXLINE( 464)									::Array< int > spawned = ::Array_obj< int >::fromData( _hx_array_data_e98e5186_61,1);
HXLINE( 465)									::Array< ::String > object_refs = _gthis->getGroupObjectRefs(o->group_ref);
HXLINE( 466)									if ((object_refs->length == 0)) {
HXLINE( 466)										done(ro);
            									}
            									else {
HXLINE( 468)										int _g4 = 0;
HXDLIN( 468)										while((_g4 < object_refs->length)){
            											HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_4,::Array< int >,spawned, ::iron::object::Object,ro, ::Dynamic,done,::Array< ::String >,object_refs) HXARGC(1)
            											void _hx_run( ::iron::object::Object so){
            												HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_470_createObject)
HXLINE( 470)												if ((++spawned[0] == object_refs->length)) {
HXLINE( 470)													done(ro);
            												}
            											}
            											HX_END_LOCAL_FUNC1((void))

HXLINE( 468)											::String s = object_refs->__get(_g4);
HXDLIN( 468)											_g4 = (_g4 + 1);
HXLINE( 469)											_gthis->spawnObject(s,ro, ::Dynamic(new _hx_Closure_4(spawned,ro,done,object_refs)),null());
            										}
            									}
            								}
            								else {
HXLINE( 475)									done(ro);
            								}
            							}
            							HX_END_LOCAL_FUNC1((void))

HXLINE( 461)							 ::iron::object::Object object5 = this->addObject(parent);
HXLINE( 462)							this->returnObject(object5,o, ::Dynamic(new _hx_Closure_5(_gthis,done,o)));
            						}
            						else {
HXLINE( 478)							done(null());
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Scene_obj,createObject,(void))

::Array< ::String > Scene_obj::getGroupObjectRefs(::String group_ref){
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_481_getGroupObjectRefs)
HXLINE( 482)		{
HXLINE( 482)			int _g = 0;
HXDLIN( 482)			::Array< ::Dynamic> _g1 = this->raw->groups;
HXDLIN( 482)			while((_g < _g1->length)){
HXLINE( 482)				 ::iron::data::TGroup g = _g1->__get(_g).StaticCast<  ::iron::data::TGroup >();
HXDLIN( 482)				_g = (_g + 1);
HXDLIN( 482)				if ((g->name == group_ref)) {
HXLINE( 482)					return g->object_refs;
            				}
            			}
            		}
HXLINE( 483)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,getGroupObjectRefs,return )

bool Scene_obj::isLod( ::iron::data::TObj raw){
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_503_isLod)
HXDLIN( 503)		bool _hx_tmp;
HXDLIN( 503)		if (hx::IsNotNull( raw )) {
HXDLIN( 503)			_hx_tmp = hx::IsNotNull( raw->lods );
            		}
            		else {
HXDLIN( 503)			_hx_tmp = false;
            		}
HXDLIN( 503)		if (_hx_tmp) {
HXDLIN( 503)			return (raw->lods->length > 0);
            		}
            		else {
HXDLIN( 503)			return false;
            		}
HXDLIN( 503)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,isLod,return )

void Scene_obj::returnMeshObject(::String object_file,::String data_ref,::String sceneName, ::iron::data::Armature armature,::Array< ::Dynamic> materials, ::iron::object::Object parent, ::iron::data::TObj o, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S7(hx::LocalFunc,_hx_Closure_0, ::iron::object::Object,parent, ::iron::Scene,_gthis,::Array< ::Dynamic>,materials, ::iron::data::Armature,armature,::String,sceneName, ::Dynamic,done, ::iron::data::TObj,o) HXARGC(1)
            		void _hx_run( ::iron::data::MeshData mesh){
            			HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_507_returnMeshObject)
HXLINE( 508)			if (mesh->isSkinned) {
HXLINE( 509)				 ::iron::data::Geometry g = mesh->geom;
HXLINE( 510)				if (hx::IsNotNull( armature )) {
HXLINE( 510)					g->addArmature(armature);
            				}
            				else {
HXLINE( 510)					g->addAction(mesh->format->objects,HX_("none",b8,12,0a,49));
            				}
            			}
HXLINE( 512)			 ::iron::object::MeshObject object = _gthis->addMeshObject(mesh,materials,parent);
HXLINE( 520)			if (hx::IsNotNull( o->particle_refs )) {
HXLINE( 521)				int _g = 0;
HXDLIN( 521)				::Array< ::Dynamic> _g1 = o->particle_refs;
HXDLIN( 521)				while((_g < _g1->length)){
HXLINE( 521)					 ::iron::data::TParticleReference ref = _g1->__get(_g).StaticCast<  ::iron::data::TParticleReference >();
HXDLIN( 521)					_g = (_g + 1);
HXDLIN( 521)					object->setupParticleSystem(sceneName,ref);
            				}
            			}
HXLINE( 525)			if (hx::IsNotNull( o->tilesheet_ref )) {
HXLINE( 526)				object->setupTilesheet(sceneName,o->tilesheet_ref,o->tilesheet_action_ref);
            			}
HXLINE( 528)			_gthis->returnObject(object,o,done);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_506_returnMeshObject)
HXDLIN( 506)		 ::iron::Scene _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 507)		::iron::data::Data_obj::getMesh(object_file,data_ref, ::Dynamic(new _hx_Closure_0(parent,_gthis,materials,armature,sceneName,done,o)));
            	}


HX_DEFINE_DYNAMIC_FUNC8(Scene_obj,returnMeshObject,(void))

void Scene_obj::returnObject( ::iron::object::Object object, ::iron::data::TObj o, ::Dynamic done){
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_532_returnObject)
HXDLIN( 532)		 ::iron::Scene _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 534)		bool _hx_tmp;
HXDLIN( 534)		if (hx::IsNotNull( object )) {
HXLINE( 534)			_hx_tmp = hx::IsNotNull( o->object_actions );
            		}
            		else {
HXLINE( 534)			_hx_tmp = false;
            		}
HXDLIN( 534)		if (_hx_tmp) {
HXLINE( 535)			::Array< ::Dynamic> oactions = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 536)			while((oactions->length < o->object_actions->length)){
HXLINE( 536)				oactions->push(null());
            			}
HXLINE( 537)			::Array< int > actionsLoaded = ::Array_obj< int >::fromData( _hx_array_data_e98e5186_72,1);
HXLINE( 538)			{
HXLINE( 538)				int _g1 = 0;
HXDLIN( 538)				int _g = o->object_actions->length;
HXDLIN( 538)				while((_g1 < _g)){
            					HX_BEGIN_LOCAL_FUNC_S7(hx::LocalFunc,_hx_Closure_0,::Array< ::Dynamic>,oactions, ::iron::Scene,_gthis, ::iron::object::Object,object,::Array< int >,actionsLoaded, ::Dynamic,done, ::iron::data::TObj,o,int,i) HXARGC(1)
            					void _hx_run( ::iron::data::TSceneFormat action){
            						HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_541_returnObject)
HXLINE( 542)						oactions[i] = action;
HXLINE( 543)						actionsLoaded[0]++;
HXLINE( 544)						if ((actionsLoaded->__get(0) == o->object_actions->length)) {
HXLINE( 545)							_gthis->returnObjectLoaded(object,o,oactions,done);
            						}
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 538)					_g1 = (_g1 + 1);
HXDLIN( 538)					int i = (_g1 - 1);
HXLINE( 539)					::String ref = o->object_actions->__get(i);
HXLINE( 540)					if ((ref == HX_("null",87,9e,0e,49))) {
HXLINE( 540)						actionsLoaded[0]++;
HXDLIN( 540)						continue;
            					}
HXLINE( 541)					::iron::data::Data_obj::getSceneRaw(ref, ::Dynamic(new _hx_Closure_0(oactions,_gthis,object,actionsLoaded,done,o,i)));
            				}
            			}
            		}
            		else {
HXLINE( 550)			this->returnObjectLoaded(object,o,null(),done);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Scene_obj,returnObject,(void))

void Scene_obj::returnObjectLoaded( ::iron::object::Object object, ::iron::data::TObj o,::Array< ::Dynamic> oactions, ::Dynamic done){
            	HX_GC_STACKFRAME(&_hx_pos_3ce623fd85856c5b_553_returnObjectLoaded)
HXLINE( 554)		if (hx::IsNotNull( object )) {
HXLINE( 555)			object->raw = o;
HXLINE( 556)			object->name = o->name;
HXLINE( 557)			if (hx::IsNotNull( o->visible )) {
HXLINE( 557)				object->visible = ( (bool)(o->visible) );
            			}
HXLINE( 558)			if (hx::IsNotNull( o->visible_mesh )) {
HXLINE( 558)				object->visibleMesh = ( (bool)(o->visible_mesh) );
            			}
HXLINE( 559)			if (hx::IsNotNull( o->visible_shadow )) {
HXLINE( 559)				object->visibleShadow = ( (bool)(o->visible_shadow) );
            			}
HXLINE( 560)			::iron::Scene_obj::createConstraints(o->constraints,object);
HXLINE( 561)			::iron::Scene_obj::generateTransform(o,object->transform);
HXLINE( 562)			object->setupAnimation(oactions);
HXLINE( 563)			if (hx::IsNotNull( o->groups )) {
HXLINE( 564)				if (hx::IsNull( this->groups )) {
HXLINE( 564)					this->groups =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            				}
HXLINE( 565)				{
HXLINE( 565)					int _g = 0;
HXDLIN( 565)					::Array< ::String > _g1 = o->groups;
HXDLIN( 565)					while((_g < _g1->length)){
HXLINE( 565)						::String gname = _g1->__get(_g);
HXDLIN( 565)						_g = (_g + 1);
HXLINE( 566)						::Array< ::Dynamic> g = ( (::Array< ::Dynamic>)(this->groups->get(gname)) );
HXLINE( 567)						if (hx::IsNull( g )) {
HXLINE( 567)							g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 567)							this->groups->set(gname,g);
            						}
HXLINE( 568)						g->push(object);
            					}
            				}
            			}
HXLINE( 571)			::iron::Scene_obj::createTraits(o->traits,object);
            		}
HXLINE( 573)		done(object);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Scene_obj,returnObjectLoaded,(void))

void Scene_obj::loadEmbeddedData(::Array< ::String > datas, ::Dynamic done){
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_655_loadEmbeddedData)
HXDLIN( 655)		 ::iron::Scene _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 656)		if (hx::IsNull( datas )) {
HXLINE( 656)			done();
HXDLIN( 656)			return;
            		}
HXLINE( 657)		::Array< int > loaded = ::Array_obj< int >::fromData( _hx_array_data_e98e5186_78,1);
HXLINE( 658)		{
HXLINE( 658)			int _g = 0;
HXDLIN( 658)			while((_g < datas->length)){
            				HX_BEGIN_LOCAL_FUNC_S5(hx::LocalFunc,_hx_Closure_0, ::iron::Scene,_gthis,::Array< ::String >,datas,::String,file,::Array< int >,loaded, ::Dynamic,done) HXARGC(1)
            				void _hx_run( ::kha::Image image){
            					HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_659_loadEmbeddedData)
HXLINE( 660)					_gthis->embedded->set(file,image);
HXLINE( 661)					loaded[0]++;
HXLINE( 662)					if ((loaded->__get(0) == datas->length)) {
HXLINE( 662)						done();
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 658)				::String file = datas->__get(_g);
HXDLIN( 658)				_g = (_g + 1);
HXLINE( 659)				::iron::data::Data_obj::getImage(file, ::Dynamic(new _hx_Closure_0(_gthis,datas,file,loaded,done)),null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Scene_obj,loadEmbeddedData,(void))

void Scene_obj::notifyOnInit( ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_669_notifyOnInit)
HXDLIN( 669)		if (this->ready) {
HXDLIN( 669)			f();
            		}
            		else {
HXLINE( 670)			this->traitInits->push(f);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,notifyOnInit,(void))

void Scene_obj::removeInit( ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_674_removeInit)
HXDLIN( 674)		this->traitInits->remove(f);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,removeInit,(void))

void Scene_obj::notifyOnRemove( ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_678_notifyOnRemove)
HXDLIN( 678)		this->traitRemoves->push(f);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,notifyOnRemove,(void))

::String Scene_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_682_toString)
HXDLIN( 682)		return (HX_("Scene ",74,bd,60,73) + this->raw->name);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scene_obj,toString,return )

 ::iron::Scene Scene_obj::active;

 ::iron::object::Object Scene_obj::global;

int Scene_obj::uidCounter;

void Scene_obj::create( ::iron::data::TSceneFormat format, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done, ::iron::data::TSceneFormat,format) HXARGC(1)
            		void _hx_run( ::iron::data::WorldData world){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done, ::iron::data::TSceneFormat,format) HXARGC(1)
            			void _hx_run( ::iron::object::Object sceneObject){
            				HX_GC_STACKFRAME(&_hx_pos_3ce623fd85856c5b_78_create)
HXLINE(  80)				if ((::iron::Scene_obj::active->cameras->length == 0)) {
HXLINE(  81)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  81)					_hx_tmp(((HX_("No camera found for scene \"",bd,92,36,34) + format->name) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Sources/iron/Scene.hx",82,51,f7,9d),81,HX_("iron.Scene",86,51,8e,e9),HX_("create",fc,66,0f,7c)));
            				}
HXLINE(  84)				::iron::Scene_obj::active->camera = ::iron::Scene_obj::active->getCamera(format->camera_ref);
HXLINE(  85)				::iron::Scene_obj::active->ready = true;
HXLINE(  87)				{
HXLINE(  87)					int _g = 0;
HXDLIN(  87)					::Array< ::Dynamic> _g1 = ::iron::Scene_obj::active->traitInits;
HXDLIN(  87)					while((_g < _g1->length)){
HXLINE(  87)						 ::Dynamic f = _g1->__get(_g);
HXDLIN(  87)						_g = (_g + 1);
HXDLIN(  87)						f();
            					}
            				}
HXLINE(  88)				::iron::Scene_obj::active->traitInits = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  90)				::iron::Scene_obj::active->sceneParent = sceneObject;
HXLINE(  91)				done(sceneObject);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_3ce623fd85856c5b_74_create)
HXLINE(  75)			::iron::Scene_obj::active->world = world;
HXLINE(  78)			::iron::Scene_obj::active->addScene(format->name,null(), ::Dynamic(new _hx_Closure_0(done,format)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_3ce623fd85856c5b_69_create)
HXLINE(  70)		::iron::Scene_obj::active =  ::iron::Scene_obj::__alloc( HX_CTX );
HXLINE(  71)		::iron::Scene_obj::active->ready = false;
HXLINE(  72)		::iron::Scene_obj::active->raw = format;
HXLINE(  74)		::iron::data::Data_obj::getWorld(format->name,format->world_ref, ::Dynamic(new _hx_Closure_1(done,format)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scene_obj,create,(void))

bool Scene_obj::framePassed;

void Scene_obj::setActive(::String sceneName, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::iron::data::TSceneFormat format){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::iron::object::Object o){
            				HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_118_setActive)
HXLINE( 118)				if (hx::IsNotNull( done )) {
HXLINE( 118)					done(o);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_117_setActive)
HXLINE( 117)			::iron::Scene_obj::create(format, ::Dynamic(new _hx_Closure_0(done)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_112_setActive)
HXLINE( 113)		if (!(::iron::Scene_obj::framePassed)) {
HXLINE( 113)			return;
            		}
HXLINE( 114)		::iron::Scene_obj::framePassed = false;
HXLINE( 115)		if (hx::IsNotNull( ::iron::Scene_obj::active )) {
HXLINE( 115)			::iron::Scene_obj::active->remove();
            		}
HXLINE( 116)		::iron::data::Data_obj::getSceneRaw(sceneName, ::Dynamic(new _hx_Closure_1(done)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scene_obj,setActive,(void))

void Scene_obj::generateTransform( ::iron::data::TObj object, ::iron::object::Transform transform){
            	HX_GC_STACKFRAME(&_hx_pos_3ce623fd85856c5b_576_generateTransform)
HXLINE( 577)		 ::iron::math::Mat4 _hx_tmp;
HXDLIN( 577)		if (hx::IsNotNull( object->transform )) {
HXLINE( 577)			 ::kha::arrays::Float32ArrayPrivate a = object->transform->values;
HXDLIN( 577)			int offset = 0;
HXDLIN( 577)			float _hx_tmp1 = a->self.get(offset);
HXDLIN( 577)			 float32array a1 = a->self;
HXDLIN( 577)			float _hx_tmp2 = a1.get((1 + offset));
HXDLIN( 577)			 float32array a2 = a->self;
HXDLIN( 577)			float _hx_tmp3 = a2.get((2 + offset));
HXDLIN( 577)			 float32array a3 = a->self;
HXDLIN( 577)			float _hx_tmp4 = a3.get((3 + offset));
HXDLIN( 577)			 float32array a4 = a->self;
HXDLIN( 577)			float _hx_tmp5 = a4.get((4 + offset));
HXDLIN( 577)			 float32array a5 = a->self;
HXDLIN( 577)			float _hx_tmp6 = a5.get((5 + offset));
HXDLIN( 577)			 float32array a6 = a->self;
HXDLIN( 577)			float _hx_tmp7 = a6.get((6 + offset));
HXDLIN( 577)			 float32array a7 = a->self;
HXDLIN( 577)			float _hx_tmp8 = a7.get((7 + offset));
HXDLIN( 577)			 float32array a8 = a->self;
HXDLIN( 577)			float _hx_tmp9 = a8.get((8 + offset));
HXDLIN( 577)			 float32array a9 = a->self;
HXDLIN( 577)			float _hx_tmp10 = a9.get((9 + offset));
HXDLIN( 577)			 float32array a10 = a->self;
HXDLIN( 577)			float _hx_tmp11 = a10.get((10 + offset));
HXDLIN( 577)			 float32array a11 = a->self;
HXDLIN( 577)			float _hx_tmp12 = a11.get((11 + offset));
HXDLIN( 577)			 float32array a12 = a->self;
HXDLIN( 577)			float _hx_tmp13 = a12.get((12 + offset));
HXDLIN( 577)			 float32array a13 = a->self;
HXDLIN( 577)			float _hx_tmp14 = a13.get((13 + offset));
HXDLIN( 577)			 float32array a14 = a->self;
HXDLIN( 577)			float _hx_tmp15 = a14.get((14 + offset));
HXDLIN( 577)			 float32array a15 = a->self;
HXDLIN( 577)			_hx_tmp =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8,_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13,_hx_tmp14,_hx_tmp15,a15.get((15 + offset)));
            		}
            		else {
HXLINE( 577)			_hx_tmp =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ));
            		}
HXDLIN( 577)		transform->world = _hx_tmp;
HXLINE( 578)		{
HXLINE( 578)			 ::iron::math::Mat4 _this = transform->world;
HXDLIN( 578)			 ::iron::math::Vec4 loc = transform->loc;
HXDLIN( 578)			 ::iron::math::Quat quat = transform->rot;
HXDLIN( 578)			 ::iron::math::Vec4 scale = transform->scale;
HXDLIN( 578)			loc->x = _this->self->_30;
HXDLIN( 578)			loc->y = _this->self->_31;
HXDLIN( 578)			loc->z = _this->self->_32;
HXDLIN( 578)			 ::iron::math::Vec4 _this1 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 578)			_this1->x = _this->self->_00;
HXDLIN( 578)			_this1->y = _this->self->_01;
HXDLIN( 578)			_this1->z = _this->self->_02;
HXDLIN( 578)			_this1->w = ( (float)(((Float)1.0)) );
HXDLIN( 578)			 ::iron::math::Vec4 _this2 = _this1;
HXDLIN( 578)			float v = (_this2->x * _this2->x);
HXDLIN( 578)			float v1 = (v + (_this2->y * _this2->y));
HXDLIN( 578)			scale->x = ( (float)(::Math_obj::sqrt(( (Float)((v1 + (_this2->z * _this2->z))) ))) );
HXDLIN( 578)			 ::iron::math::Vec4 _this3 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 578)			_this3->x = _this->self->_10;
HXDLIN( 578)			_this3->y = _this->self->_11;
HXDLIN( 578)			_this3->z = _this->self->_12;
HXDLIN( 578)			_this3->w = ( (float)(((Float)1.0)) );
HXDLIN( 578)			 ::iron::math::Vec4 _this4 = _this3;
HXDLIN( 578)			float v2 = (_this4->x * _this4->x);
HXDLIN( 578)			float v3 = (v2 + (_this4->y * _this4->y));
HXDLIN( 578)			scale->y = ( (float)(::Math_obj::sqrt(( (Float)((v3 + (_this4->z * _this4->z))) ))) );
HXDLIN( 578)			 ::iron::math::Vec4 _this5 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 578)			_this5->x = _this->self->_20;
HXDLIN( 578)			_this5->y = _this->self->_21;
HXDLIN( 578)			_this5->z = _this->self->_22;
HXDLIN( 578)			_this5->w = ( (float)(((Float)1.0)) );
HXDLIN( 578)			 ::iron::math::Vec4 _this6 = _this5;
HXDLIN( 578)			float v4 = (_this6->x * _this6->x);
HXDLIN( 578)			float v5 = (v4 + (_this6->y * _this6->y));
HXDLIN( 578)			scale->z = ( (float)(::Math_obj::sqrt(( (Float)((v5 + (_this6->z * _this6->z))) ))) );
HXDLIN( 578)			 ::kha::math::FastMatrix4 _this7 = _this->self;
HXDLIN( 578)			float m3 = _this7->_12;
HXDLIN( 578)			float m4 = _this7->_22;
HXDLIN( 578)			float m5 = _this7->_32;
HXDLIN( 578)			float m6 = _this7->_13;
HXDLIN( 578)			float m7 = _this7->_23;
HXDLIN( 578)			float m8 = _this7->_33;
HXDLIN( 578)			float _this8 = _this7->_11;
HXDLIN( 578)			float c00 = (_this8 * ((m4 * m8) - (m5 * m7)));
HXDLIN( 578)			float _this9 = _this7->_21;
HXDLIN( 578)			float c001 = (c00 - (_this9 * ((m3 * m8) - (m5 * m6))));
HXDLIN( 578)			float _this10 = _this7->_31;
HXDLIN( 578)			float c002 = (c001 + (_this10 * ((m3 * m7) - (m4 * m6))));
HXDLIN( 578)			float m31 = _this7->_12;
HXDLIN( 578)			float m41 = _this7->_22;
HXDLIN( 578)			float m51 = _this7->_32;
HXDLIN( 578)			float m61 = _this7->_13;
HXDLIN( 578)			float m71 = _this7->_23;
HXDLIN( 578)			float m81 = _this7->_33;
HXDLIN( 578)			float _this11 = _this7->_10;
HXDLIN( 578)			float c01 = (_this11 * ((m41 * m81) - (m51 * m71)));
HXDLIN( 578)			float _this12 = _this7->_20;
HXDLIN( 578)			float c011 = (c01 - (_this12 * ((m31 * m81) - (m51 * m61))));
HXDLIN( 578)			float _this13 = _this7->_30;
HXDLIN( 578)			float c012 = (c011 + (_this13 * ((m31 * m71) - (m41 * m61))));
HXDLIN( 578)			float m32 = _this7->_11;
HXDLIN( 578)			float m42 = _this7->_21;
HXDLIN( 578)			float m52 = _this7->_31;
HXDLIN( 578)			float m62 = _this7->_13;
HXDLIN( 578)			float m72 = _this7->_23;
HXDLIN( 578)			float m82 = _this7->_33;
HXDLIN( 578)			float _this14 = _this7->_10;
HXDLIN( 578)			float c02 = (_this14 * ((m42 * m82) - (m52 * m72)));
HXDLIN( 578)			float _this15 = _this7->_20;
HXDLIN( 578)			float c021 = (c02 - (_this15 * ((m32 * m82) - (m52 * m62))));
HXDLIN( 578)			float _this16 = _this7->_30;
HXDLIN( 578)			float c022 = (c021 + (_this16 * ((m32 * m72) - (m42 * m62))));
HXDLIN( 578)			float m33 = _this7->_11;
HXDLIN( 578)			float m43 = _this7->_21;
HXDLIN( 578)			float m53 = _this7->_31;
HXDLIN( 578)			float m63 = _this7->_12;
HXDLIN( 578)			float m73 = _this7->_22;
HXDLIN( 578)			float m83 = _this7->_32;
HXDLIN( 578)			float _this17 = _this7->_10;
HXDLIN( 578)			float c03 = (_this17 * ((m43 * m83) - (m53 * m73)));
HXDLIN( 578)			float _this18 = _this7->_20;
HXDLIN( 578)			float c031 = (c03 - (_this18 * ((m33 * m83) - (m53 * m63))));
HXDLIN( 578)			float _this19 = _this7->_30;
HXDLIN( 578)			float c032 = (c031 + (_this19 * ((m33 * m73) - (m43 * m63))));
HXDLIN( 578)			float _hx_tmp16 = (_this7->_00 * c002);
HXDLIN( 578)			float _hx_tmp17 = (_hx_tmp16 - (_this7->_01 * c012));
HXDLIN( 578)			float _hx_tmp18 = (_hx_tmp17 + (_this7->_02 * c022));
HXDLIN( 578)			if (((_hx_tmp18 - (_this7->_03 * c032)) < ((Float)0.0))) {
HXLINE( 578)				scale->x = -(scale->x);
            			}
HXDLIN( 578)			Float invs = (((Float)1.0) / ( (Float)(scale->x) ));
HXDLIN( 578)			::iron::math::Mat4_obj::helpMat->self->_00 = ( (float)((_this->self->_00 * invs)) );
HXDLIN( 578)			::iron::math::Mat4_obj::helpMat->self->_01 = ( (float)((_this->self->_01 * invs)) );
HXDLIN( 578)			::iron::math::Mat4_obj::helpMat->self->_02 = ( (float)((_this->self->_02 * invs)) );
HXDLIN( 578)			invs = (((Float)1.0) / ( (Float)(scale->y) ));
HXDLIN( 578)			::iron::math::Mat4_obj::helpMat->self->_10 = ( (float)((_this->self->_10 * invs)) );
HXDLIN( 578)			::iron::math::Mat4_obj::helpMat->self->_11 = ( (float)((_this->self->_11 * invs)) );
HXDLIN( 578)			::iron::math::Mat4_obj::helpMat->self->_12 = ( (float)((_this->self->_12 * invs)) );
HXDLIN( 578)			invs = (((Float)1.0) / ( (Float)(scale->z) ));
HXDLIN( 578)			::iron::math::Mat4_obj::helpMat->self->_20 = ( (float)((_this->self->_20 * invs)) );
HXDLIN( 578)			::iron::math::Mat4_obj::helpMat->self->_21 = ( (float)((_this->self->_21 * invs)) );
HXDLIN( 578)			::iron::math::Mat4_obj::helpMat->self->_22 = ( (float)((_this->self->_22 * invs)) );
HXDLIN( 578)			{
HXLINE( 578)				 ::iron::math::Mat4 m = ::iron::math::Mat4_obj::helpMat;
HXDLIN( 578)				float m11 = m->self->_00;
HXDLIN( 578)				float m12 = m->self->_10;
HXDLIN( 578)				float m13 = m->self->_20;
HXDLIN( 578)				float m21 = m->self->_01;
HXDLIN( 578)				float m22 = m->self->_11;
HXDLIN( 578)				float m23 = m->self->_21;
HXDLIN( 578)				float m311 = m->self->_02;
HXDLIN( 578)				float m321 = m->self->_12;
HXDLIN( 578)				float m331 = m->self->_22;
HXDLIN( 578)				float tr = ((m11 + m22) + m331);
HXDLIN( 578)				Float s = ((Float)0.0);
HXDLIN( 578)				if ((tr > 0)) {
HXLINE( 578)					s = (((Float)0.5) / ::Math_obj::sqrt((tr + ((Float)1.0))));
HXDLIN( 578)					quat->w = ( (float)((((Float)0.25) / s)) );
HXDLIN( 578)					quat->x = ( (float)(((m321 - m23) * s)) );
HXDLIN( 578)					quat->y = ( (float)(((m13 - m311) * s)) );
HXDLIN( 578)					quat->z = ( (float)(((m21 - m12) * s)) );
            				}
            				else {
HXLINE( 578)					bool _hx_tmp19;
HXDLIN( 578)					if ((m11 > m22)) {
HXLINE( 578)						_hx_tmp19 = (m11 > m331);
            					}
            					else {
HXLINE( 578)						_hx_tmp19 = false;
            					}
HXDLIN( 578)					if (_hx_tmp19) {
HXLINE( 578)						s = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m11) - m22) - m331)));
HXDLIN( 578)						quat->w = ( (float)((( (Float)((m321 - m23)) ) / s)) );
HXDLIN( 578)						quat->x = ( (float)((((Float)0.25) * s)) );
HXDLIN( 578)						quat->y = ( (float)((( (Float)((m12 + m21)) ) / s)) );
HXDLIN( 578)						quat->z = ( (float)((( (Float)((m13 + m311)) ) / s)) );
            					}
            					else {
HXLINE( 578)						if ((m22 > m331)) {
HXLINE( 578)							s = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m22) - m11) - m331)));
HXDLIN( 578)							quat->w = ( (float)((( (Float)((m13 - m311)) ) / s)) );
HXDLIN( 578)							quat->x = ( (float)((( (Float)((m12 + m21)) ) / s)) );
HXDLIN( 578)							quat->y = ( (float)((((Float)0.25) * s)) );
HXDLIN( 578)							quat->z = ( (float)((( (Float)((m23 + m321)) ) / s)) );
            						}
            						else {
HXLINE( 578)							s = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m331) - m11) - m22)));
HXDLIN( 578)							quat->w = ( (float)((( (Float)((m21 - m12)) ) / s)) );
HXDLIN( 578)							quat->x = ( (float)((( (Float)((m13 + m311)) ) / s)) );
HXDLIN( 578)							quat->y = ( (float)((( (Float)((m23 + m321)) ) / s)) );
HXDLIN( 578)							quat->z = ( (float)((((Float)0.25) * s)) );
            						}
            					}
            				}
            			}
            		}
HXLINE( 580)		if (hx::IsNotNull( object->local_only )) {
HXLINE( 580)			transform->localOnly = ( (bool)(object->local_only) );
            		}
HXLINE( 581)		if (hx::IsNotNull( transform->object->parent )) {
HXLINE( 581)			transform->update();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scene_obj,generateTransform,(void))

void Scene_obj::createTraits(::Array< ::Dynamic> traits, ::iron::object::Object object){
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_584_createTraits)
HXLINE( 585)		if (hx::IsNull( traits )) {
HXLINE( 585)			return;
            		}
HXLINE( 586)		{
HXLINE( 586)			int _g = 0;
HXDLIN( 586)			while((_g < traits->length)){
HXLINE( 586)				 ::iron::data::TTrait t = traits->__get(_g).StaticCast<  ::iron::data::TTrait >();
HXDLIN( 586)				_g = (_g + 1);
HXLINE( 587)				if ((t->type == HX_("Script",2b,c2,f4,7b))) {
HXLINE( 589)					::cpp::VirtualArray args = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 590)					if (hx::IsNotNull( t->parameters )) {
HXLINE( 591)						int _g1 = 0;
HXDLIN( 591)						::Array< ::String > _g2 = t->parameters;
HXDLIN( 591)						while((_g1 < _g2->length)){
HXLINE( 591)							::String param = _g2->__get(_g1);
HXDLIN( 591)							_g1 = (_g1 + 1);
HXLINE( 592)							args->push(::iron::Scene_obj::parseArg(param));
            						}
            					}
HXLINE( 595)					 ::iron::Trait traitInst = ( ( ::iron::Trait)(::iron::Scene_obj::createTraitClassInstance(t->class_name,args)) );
HXLINE( 596)					if (hx::IsNull( traitInst )) {
HXLINE( 597)						 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 597)						_hx_tmp(((((HX_("Error: Trait '",a7,04,a0,9b) + t->class_name) + HX_("' referenced in object '",93,54,24,c2)) + object->name) + HX_("' not found",3c,4a,88,c3)),hx::SourceInfo(HX_("Sources/iron/Scene.hx",82,51,f7,9d),597,HX_("iron.Scene",86,51,8e,e9),HX_("createTraits",01,01,d7,67)));
HXLINE( 598)						continue;
            					}
HXLINE( 600)					if (hx::IsNotNull( t->props )) {
HXLINE( 601)						int _g21 = 0;
HXDLIN( 601)						int _g11 = ::Std_obj::_hx_int((( (Float)(t->props->length) ) / ( (Float)(2) )));
HXDLIN( 601)						while((_g21 < _g11)){
HXLINE( 601)							_g21 = (_g21 + 1);
HXDLIN( 601)							int i = (_g21 - 1);
HXLINE( 602)							::Array< ::String > t1 = t->props;
HXDLIN( 602)							::String pname = t1->__get((i * 2));
HXLINE( 603)							::Array< ::String > t2 = t->props;
HXDLIN( 603)							::String pval = t2->__get(((i * 2) + 1));
HXLINE( 604)							if ((pval != HX_("",00,00,00,00))) {
HXLINE( 605)								::Reflect_obj::setProperty(traitInst,pname,::iron::Scene_obj::parseArg(pval));
            							}
            						}
            					}
HXLINE( 609)					object->addTrait(traitInst);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scene_obj,createTraits,(void))

 ::Dynamic Scene_obj::parseArg(::String str){
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_615_parseArg)
HXDLIN( 615)		if ((str == HX_("true",4e,a7,03,4d))) {
HXDLIN( 615)			return true;
            		}
            		else {
HXLINE( 616)			if ((str == HX_("false",a3,35,4f,fb))) {
HXLINE( 616)				return false;
            			}
            			else {
HXLINE( 617)				if ((str == HX_("null",87,9e,0e,49))) {
HXLINE( 617)					return null();
            				}
            				else {
HXLINE( 618)					if ((str.charAt(0) == HX_("'",27,00,00,00))) {
HXLINE( 618)						return ::StringTools_obj::replace(str,HX_("'",27,00,00,00),HX_("",00,00,00,00));
            					}
            					else {
HXLINE( 619)						if ((str.charAt(0) == HX_("\"",22,00,00,00))) {
HXLINE( 619)							return ::StringTools_obj::replace(str,HX_("\"",22,00,00,00),HX_("",00,00,00,00));
            						}
            						else {
HXLINE( 620)							if ((str.charAt(0) == HX_("[",5b,00,00,00))) {
HXLINE( 623)								str = ::StringTools_obj::replace(str,HX_("[",5b,00,00,00),HX_("",00,00,00,00));
HXLINE( 624)								str = ::StringTools_obj::replace(str,HX_("]",5d,00,00,00),HX_("",00,00,00,00));
HXLINE( 625)								str = ::StringTools_obj::replace(str,HX_(" ",20,00,00,00),HX_("",00,00,00,00));
HXLINE( 626)								 ::Dynamic ar = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 627)								::Array< ::String > s = str.split(HX_(",",2c,00,00,00));
HXLINE( 628)								{
HXLINE( 628)									int _g = 0;
HXDLIN( 628)									while((_g < s->length)){
HXLINE( 628)										::String childStr = s->__get(_g);
HXDLIN( 628)										_g = (_g + 1);
HXLINE( 629)										 ::Dynamic ar1 =  ::Dynamic(ar->__Field(HX_("push",da,11,61,4a),hx::paccDynamic));
HXDLIN( 629)										ar1(::iron::Scene_obj::parseArg(childStr));
            									}
            								}
HXLINE( 631)								return ar;
            							}
            							else {
HXLINE( 634)								Float f = ::Std_obj::parseFloat(str);
HXLINE( 635)								 ::Dynamic i = ::Std_obj::parseInt(str);
HXLINE( 636)								if (hx::IsEq( f,i )) {
HXLINE( 636)									return i;
            								}
            								else {
HXLINE( 636)									return f;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 615)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Scene_obj,parseArg,return )

void Scene_obj::createConstraints(::Array< ::Dynamic> constraints, ::iron::object::Object object){
            	HX_GC_STACKFRAME(&_hx_pos_3ce623fd85856c5b_640_createConstraints)
HXLINE( 641)		if (hx::IsNull( constraints )) {
HXLINE( 641)			return;
            		}
HXLINE( 642)		object->constraints = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 643)		{
HXLINE( 643)			int _g = 0;
HXDLIN( 643)			while((_g < constraints->length)){
HXLINE( 643)				 ::iron::data::TConstraint c = constraints->__get(_g).StaticCast<  ::iron::data::TConstraint >();
HXDLIN( 643)				_g = (_g + 1);
HXLINE( 644)				 ::iron::object::Constraint constr =  ::iron::object::Constraint_obj::__alloc( HX_CTX ,c);
HXLINE( 645)				object->constraints->push(constr);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scene_obj,createConstraints,(void))

 ::Dynamic Scene_obj::createTraitClassInstance(::String traitName,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_649_createTraitClassInstance)
HXLINE( 650)		hx::Class cname = ::Type_obj::resolveClass(traitName);
HXLINE( 651)		if (hx::IsNull( cname )) {
HXLINE( 651)			return null();
            		}
HXLINE( 652)		return ::Type_obj::createInstance(cname,args);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Scene_obj,createTraitClassInstance,return )


hx::ObjectPtr< Scene_obj > Scene_obj::__new() {
	hx::ObjectPtr< Scene_obj > __this = new Scene_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Scene_obj > Scene_obj::__alloc(hx::Ctx *_hx_ctx) {
	Scene_obj *__this = (Scene_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Scene_obj), true, "iron.Scene"));
	*(void **)__this = Scene_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Scene_obj::Scene_obj()
{
}

void Scene_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Scene);
	HX_MARK_MEMBER_NAME(uid,"uid");
	HX_MARK_MEMBER_NAME(raw,"raw");
	HX_MARK_MEMBER_NAME(root,"root");
	HX_MARK_MEMBER_NAME(sceneParent,"sceneParent");
	HX_MARK_MEMBER_NAME(camera,"camera");
	HX_MARK_MEMBER_NAME(world,"world");
	HX_MARK_MEMBER_NAME(meshes,"meshes");
	HX_MARK_MEMBER_NAME(lights,"lights");
	HX_MARK_MEMBER_NAME(cameras,"cameras");
	HX_MARK_MEMBER_NAME(speakers,"speakers");
	HX_MARK_MEMBER_NAME(decals,"decals");
	HX_MARK_MEMBER_NAME(empties,"empties");
	HX_MARK_MEMBER_NAME(animations,"animations");
	HX_MARK_MEMBER_NAME(armatures,"armatures");
	HX_MARK_MEMBER_NAME(groups,"groups");
	HX_MARK_MEMBER_NAME(embedded,"embedded");
	HX_MARK_MEMBER_NAME(ready,"ready");
	HX_MARK_MEMBER_NAME(traitInits,"traitInits");
	HX_MARK_MEMBER_NAME(traitRemoves,"traitRemoves");
	HX_MARK_END_CLASS();
}

void Scene_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(uid,"uid");
	HX_VISIT_MEMBER_NAME(raw,"raw");
	HX_VISIT_MEMBER_NAME(root,"root");
	HX_VISIT_MEMBER_NAME(sceneParent,"sceneParent");
	HX_VISIT_MEMBER_NAME(camera,"camera");
	HX_VISIT_MEMBER_NAME(world,"world");
	HX_VISIT_MEMBER_NAME(meshes,"meshes");
	HX_VISIT_MEMBER_NAME(lights,"lights");
	HX_VISIT_MEMBER_NAME(cameras,"cameras");
	HX_VISIT_MEMBER_NAME(speakers,"speakers");
	HX_VISIT_MEMBER_NAME(decals,"decals");
	HX_VISIT_MEMBER_NAME(empties,"empties");
	HX_VISIT_MEMBER_NAME(animations,"animations");
	HX_VISIT_MEMBER_NAME(armatures,"armatures");
	HX_VISIT_MEMBER_NAME(groups,"groups");
	HX_VISIT_MEMBER_NAME(embedded,"embedded");
	HX_VISIT_MEMBER_NAME(ready,"ready");
	HX_VISIT_MEMBER_NAME(traitInits,"traitInits");
	HX_VISIT_MEMBER_NAME(traitRemoves,"traitRemoves");
}

hx::Val Scene_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"uid") ) { return hx::Val( uid ); }
		if (HX_FIELD_EQ(inName,"raw") ) { return hx::Val( raw ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { return hx::Val( root ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"world") ) { return hx::Val( world ); }
		if (HX_FIELD_EQ(inName,"ready") ) { return hx::Val( ready ); }
		if (HX_FIELD_EQ(inName,"isLod") ) { return hx::Val( isLod_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"camera") ) { return hx::Val( camera ); }
		if (HX_FIELD_EQ(inName,"meshes") ) { return hx::Val( meshes ); }
		if (HX_FIELD_EQ(inName,"lights") ) { return hx::Val( lights ); }
		if (HX_FIELD_EQ(inName,"decals") ) { return hx::Val( decals ); }
		if (HX_FIELD_EQ(inName,"groups") ) { return hx::Val( groups ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"getObj") ) { return hx::Val( getObj_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"cameras") ) { return hx::Val( cameras ); }
		if (HX_FIELD_EQ(inName,"empties") ) { return hx::Val( empties ); }
		if (HX_FIELD_EQ(inName,"getMesh") ) { return hx::Val( getMesh_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"speakers") ) { return hx::Val( speakers ); }
		if (HX_FIELD_EQ(inName,"embedded") ) { return hx::Val( embedded ); }
		if (HX_FIELD_EQ(inName,"getChild") ) { return hx::Val( getChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTrait") ) { return hx::Val( getTrait_dyn() ); }
		if (HX_FIELD_EQ(inName,"getLight") ) { return hx::Val( getLight_dyn() ); }
		if (HX_FIELD_EQ(inName,"getEmpty") ) { return hx::Val( getEmpty_dyn() ); }
		if (HX_FIELD_EQ(inName,"addScene") ) { return hx::Val( addScene_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"armatures") ) { return hx::Val( armatures ); }
		if (HX_FIELD_EQ(inName,"addObject") ) { return hx::Val( addObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCamera") ) { return hx::Val( getCamera_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"animations") ) { return hx::Val( animations ); }
		if (HX_FIELD_EQ(inName,"traitInits") ) { return hx::Val( traitInits ); }
		if (HX_FIELD_EQ(inName,"getSpeaker") ) { return hx::Val( getSpeaker_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeInit") ) { return hx::Val( removeInit_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sceneParent") ) { return hx::Val( sceneParent ); }
		if (HX_FIELD_EQ(inName,"updateFrame") ) { return hx::Val( updateFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"renderFrame") ) { return hx::Val( renderFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"spawnObject") ) { return hx::Val( spawnObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseObject") ) { return hx::Val( parseObject_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"traitRemoves") ) { return hx::Val( traitRemoves ); }
		if (HX_FIELD_EQ(inName,"traverseObjs") ) { return hx::Val( traverseObjs_dyn() ); }
		if (HX_FIELD_EQ(inName,"createObject") ) { return hx::Val( createObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"returnObject") ) { return hx::Val( returnObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"notifyOnInit") ) { return hx::Val( notifyOnInit_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"addMeshObject") ) { return hx::Val( addMeshObject_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"addLightObject") ) { return hx::Val( addLightObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"notifyOnRemove") ) { return hx::Val( notifyOnRemove_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"addCameraObject") ) { return hx::Val( addCameraObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"getObjectsCount") ) { return hx::Val( getObjectsCount_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"addSpeakerObject") ) { return hx::Val( addSpeakerObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"returnMeshObject") ) { return hx::Val( returnMeshObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadEmbeddedData") ) { return hx::Val( loadEmbeddedData_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getGroupObjectRefs") ) { return hx::Val( getGroupObjectRefs_dyn() ); }
		if (HX_FIELD_EQ(inName,"returnObjectLoaded") ) { return hx::Val( returnObjectLoaded_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Scene_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { outValue = ( active ); return true; }
		if (HX_FIELD_EQ(inName,"global") ) { outValue = ( global ); return true; }
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"parseArg") ) { outValue = parseArg_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setActive") ) { outValue = setActive_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"uidCounter") ) { outValue = ( uidCounter ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"framePassed") ) { outValue = ( framePassed ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"createTraits") ) { outValue = createTraits_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"generateTransform") ) { outValue = generateTransform_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"createConstraints") ) { outValue = createConstraints_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"createTraitClassInstance") ) { outValue = createTraitClassInstance_dyn(); return true; }
	}
	return false;
}

hx::Val Scene_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"uid") ) { uid=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"raw") ) { raw=inValue.Cast<  ::iron::data::TSceneFormat >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { root=inValue.Cast<  ::iron::object::Object >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"world") ) { world=inValue.Cast<  ::iron::data::WorldData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ready") ) { ready=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"camera") ) { camera=inValue.Cast<  ::iron::object::CameraObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"meshes") ) { meshes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lights") ) { lights=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"decals") ) { decals=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"groups") ) { groups=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"cameras") ) { cameras=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"empties") ) { empties=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"speakers") ) { speakers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"embedded") ) { embedded=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"armatures") ) { armatures=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"animations") ) { animations=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"traitInits") ) { traitInits=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sceneParent") ) { sceneParent=inValue.Cast<  ::iron::object::Object >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"traitRemoves") ) { traitRemoves=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Scene_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { active=ioValue.Cast<  ::iron::Scene >(); return true; }
		if (HX_FIELD_EQ(inName,"global") ) { global=ioValue.Cast<  ::iron::object::Object >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"uidCounter") ) { uidCounter=ioValue.Cast< int >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"framePassed") ) { framePassed=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void Scene_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("uid",90,23,59,00));
	outFields->push(HX_("raw",e8,d5,56,00));
	outFields->push(HX_("root",22,ee,ae,4b));
	outFields->push(HX_("sceneParent",96,53,ac,97));
	outFields->push(HX_("camera",a5,46,8c,b7));
	outFields->push(HX_("world",52,96,64,ce));
	outFields->push(HX_("meshes",9b,b7,b1,08));
	outFields->push(HX_("lights",dd,2a,02,e8));
	outFields->push(HX_("cameras",2e,8a,31,e3));
	outFields->push(HX_("speakers",94,ca,fd,65));
	outFields->push(HX_("decals",a6,c4,e2,64));
	outFields->push(HX_("empties",2b,ec,bb,c6));
	outFields->push(HX_("animations",ef,34,1c,83));
	outFields->push(HX_("armatures",da,45,59,fb));
	outFields->push(HX_("groups",54,24,28,1c));
	outFields->push(HX_("embedded",8a,19,62,de));
	outFields->push(HX_("ready",63,a0,ba,e6));
	outFields->push(HX_("traitInits",b5,c4,55,7e));
	outFields->push(HX_("traitRemoves",81,e9,31,3a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Scene_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Scene_obj,uid),HX_("uid",90,23,59,00)},
	{hx::fsObject /*::iron::data::TSceneFormat*/ ,(int)offsetof(Scene_obj,raw),HX_("raw",e8,d5,56,00)},
	{hx::fsObject /*::iron::object::Object*/ ,(int)offsetof(Scene_obj,root),HX_("root",22,ee,ae,4b)},
	{hx::fsObject /*::iron::object::Object*/ ,(int)offsetof(Scene_obj,sceneParent),HX_("sceneParent",96,53,ac,97)},
	{hx::fsObject /*::iron::object::CameraObject*/ ,(int)offsetof(Scene_obj,camera),HX_("camera",a5,46,8c,b7)},
	{hx::fsObject /*::iron::data::WorldData*/ ,(int)offsetof(Scene_obj,world),HX_("world",52,96,64,ce)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Scene_obj,meshes),HX_("meshes",9b,b7,b1,08)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Scene_obj,lights),HX_("lights",dd,2a,02,e8)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Scene_obj,cameras),HX_("cameras",2e,8a,31,e3)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Scene_obj,speakers),HX_("speakers",94,ca,fd,65)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Scene_obj,decals),HX_("decals",a6,c4,e2,64)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Scene_obj,empties),HX_("empties",2b,ec,bb,c6)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Scene_obj,animations),HX_("animations",ef,34,1c,83)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Scene_obj,armatures),HX_("armatures",da,45,59,fb)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Scene_obj,groups),HX_("groups",54,24,28,1c)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Scene_obj,embedded),HX_("embedded",8a,19,62,de)},
	{hx::fsBool,(int)offsetof(Scene_obj,ready),HX_("ready",63,a0,ba,e6)},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Scene_obj,traitInits),HX_("traitInits",b5,c4,55,7e)},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Scene_obj,traitRemoves),HX_("traitRemoves",81,e9,31,3a)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Scene_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::iron::Scene*/ ,(void *) &Scene_obj::active,HX_("active",c6,41,46,16)},
	{hx::fsObject /*::iron::object::Object*/ ,(void *) &Scene_obj::global,HX_("global",63,31,b2,a7)},
	{hx::fsInt,(void *) &Scene_obj::uidCounter,HX_("uidCounter",4c,45,6c,a9)},
	{hx::fsBool,(void *) &Scene_obj::framePassed,HX_("framePassed",7d,9f,79,cc)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Scene_obj_sMemberFields[] = {
	HX_("uid",90,23,59,00),
	HX_("raw",e8,d5,56,00),
	HX_("root",22,ee,ae,4b),
	HX_("sceneParent",96,53,ac,97),
	HX_("camera",a5,46,8c,b7),
	HX_("world",52,96,64,ce),
	HX_("meshes",9b,b7,b1,08),
	HX_("lights",dd,2a,02,e8),
	HX_("cameras",2e,8a,31,e3),
	HX_("speakers",94,ca,fd,65),
	HX_("decals",a6,c4,e2,64),
	HX_("empties",2b,ec,bb,c6),
	HX_("animations",ef,34,1c,83),
	HX_("armatures",da,45,59,fb),
	HX_("groups",54,24,28,1c),
	HX_("embedded",8a,19,62,de),
	HX_("ready",63,a0,ba,e6),
	HX_("traitInits",b5,c4,55,7e),
	HX_("traitRemoves",81,e9,31,3a),
	HX_("remove",44,9c,88,04),
	HX_("updateFrame",64,e1,1b,ec),
	HX_("renderFrame",f7,a4,34,d2),
	HX_("addObject",c0,b3,63,cd),
	HX_("getChild",26,b9,90,a5),
	HX_("getTrait",58,a3,f6,75),
	HX_("getMesh",a3,f9,db,1a),
	HX_("getLight",60,a0,d3,d4),
	HX_("getCamera",db,cf,e2,33),
	HX_("getSpeaker",09,1b,66,2d),
	HX_("getEmpty",17,4a,b1,cf),
	HX_("addMeshObject",0d,36,72,63),
	HX_("addLightObject",94,cf,64,0f),
	HX_("addCameraObject",05,af,7d,64),
	HX_("addSpeakerObject",3d,ae,8f,56),
	HX_("addScene",6b,ff,2e,f2),
	HX_("getObjectsCount",11,21,fb,a0),
	HX_("spawnObject",5a,6f,77,b0),
	HX_("parseObject",52,2b,7c,90),
	HX_("getObj",01,c9,23,a3),
	HX_("traverseObjs",6e,d3,c2,b1),
	HX_("createObject",db,be,94,37),
	HX_("getGroupObjectRefs",48,42,05,c6),
	HX_("isLod",b7,7e,50,c1),
	HX_("returnMeshObject",5c,51,e6,28),
	HX_("returnObject",8f,3b,96,49),
	HX_("returnObjectLoaded",f4,8c,f5,d7),
	HX_("loadEmbeddedData",1a,b0,c6,ca),
	HX_("notifyOnInit",78,4f,0c,56),
	HX_("removeInit",74,75,da,c2),
	HX_("notifyOnRemove",ac,9a,95,9a),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

static void Scene_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Scene_obj::active,"active");
	HX_MARK_MEMBER_NAME(Scene_obj::global,"global");
	HX_MARK_MEMBER_NAME(Scene_obj::uidCounter,"uidCounter");
	HX_MARK_MEMBER_NAME(Scene_obj::framePassed,"framePassed");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Scene_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Scene_obj::active,"active");
	HX_VISIT_MEMBER_NAME(Scene_obj::global,"global");
	HX_VISIT_MEMBER_NAME(Scene_obj::uidCounter,"uidCounter");
	HX_VISIT_MEMBER_NAME(Scene_obj::framePassed,"framePassed");
};

#endif

hx::Class Scene_obj::__mClass;

static ::String Scene_obj_sStaticFields[] = {
	HX_("active",c6,41,46,16),
	HX_("global",63,31,b2,a7),
	HX_("uidCounter",4c,45,6c,a9),
	HX_("create",fc,66,0f,7c),
	HX_("framePassed",7d,9f,79,cc),
	HX_("setActive",08,b7,ed,75),
	HX_("generateTransform",77,9f,6a,3b),
	HX_("createTraits",01,01,d7,67),
	HX_("parseArg",e3,07,6c,d6),
	HX_("createConstraints",da,2b,55,6a),
	HX_("createTraitClassInstance",5b,39,ff,28),
	::String(null())
};

void Scene_obj::__register()
{
	Scene_obj _hx_dummy;
	Scene_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.Scene",86,51,8e,e9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Scene_obj::__GetStatic;
	__mClass->mSetStaticField = &Scene_obj::__SetStatic;
	__mClass->mMarkFunc = Scene_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Scene_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Scene_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Scene_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Scene_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Scene_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Scene_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Scene_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_11_boot)
HXDLIN(  11)		active = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_12_boot)
HXDLIN(  12)		global = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_13_boot)
HXDLIN(  13)		uidCounter = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3ce623fd85856c5b_111_boot)
HXDLIN( 111)		framePassed = true;
            	}
}

} // end namespace iron
