// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_StringTools
#include <hxinc/StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <hxinc/haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <hxinc/haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <hxinc/haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <hxinc/haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesInput
#include <hxinc/haxe/io/BytesInput.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <hxinc/haxe/io/Input.h>
#endif
#ifndef INCLUDED_iron_RenderPath
#include <hxinc/iron/RenderPath.h>
#endif
#ifndef INCLUDED_iron_data_CameraData
#include <hxinc/iron/data/CameraData.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <hxinc/iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_data_LightData
#include <hxinc/iron/data/LightData.h>
#endif
#ifndef INCLUDED_iron_data_MaterialData
#include <hxinc/iron/data/MaterialData.h>
#endif
#ifndef INCLUDED_iron_data_MeshData
#include <hxinc/iron/data/MeshData.h>
#endif
#ifndef INCLUDED_iron_data_ParticleData
#include <hxinc/iron/data/ParticleData.h>
#endif
#ifndef INCLUDED_iron_data_ShaderData
#include <hxinc/iron/data/ShaderData.h>
#endif
#ifndef INCLUDED_iron_data_TCameraData
#include <hxinc/iron/data/TCameraData.h>
#endif
#ifndef INCLUDED_iron_data_TLightData
#include <hxinc/iron/data/TLightData.h>
#endif
#ifndef INCLUDED_iron_data_TMaterialData
#include <hxinc/iron/data/TMaterialData.h>
#endif
#ifndef INCLUDED_iron_data_TMeshData
#include <hxinc/iron/data/TMeshData.h>
#endif
#ifndef INCLUDED_iron_data_TParticleData
#include <hxinc/iron/data/TParticleData.h>
#endif
#ifndef INCLUDED_iron_data_TSceneFormat
#include <hxinc/iron/data/TSceneFormat.h>
#endif
#ifndef INCLUDED_iron_data_TShaderData
#include <hxinc/iron/data/TShaderData.h>
#endif
#ifndef INCLUDED_iron_data_TShaderOverride
#include <hxinc/iron/data/TShaderOverride.h>
#endif
#ifndef INCLUDED_iron_data_TSpeakerData
#include <hxinc/iron/data/TSpeakerData.h>
#endif
#ifndef INCLUDED_iron_data_TWorldData
#include <hxinc/iron/data/TWorldData.h>
#endif
#ifndef INCLUDED_iron_data_WorldData
#include <hxinc/iron/data/WorldData.h>
#endif
#ifndef INCLUDED_iron_system_ArmPack
#include <hxinc/iron/system/ArmPack.h>
#endif
#ifndef INCLUDED_kha_Assets
#include <hxinc/kha/Assets.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Kravur
#include <hxinc/kha/Kravur.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Sound
#include <hxinc/kha/Sound.h>
#endif
#ifndef INCLUDED_kha_Video
#include <hxinc/kha/Video.h>
#endif
#ifndef INCLUDED_kha_internal_BytesBlob
#include <hxinc/kha/internal/BytesBlob.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_514b96931615595e_30_new,"iron.data.Data","new",0xd6d8755a,"iron.data.Data.new","iron/data/Data.hx",30,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_32_deleteAll,"iron.data.Data","deleteAll",0xdf4aba30,"iron.data.Data.deleteAll","iron/data/Data.hx",32,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_59_clearSceneData,"iron.data.Data","clearSceneData",0x9e0f2f8f,"iron.data.Data.clearSceneData","iron/data/Data.hx",59,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_83_getMesh,"iron.data.Data","getMesh",0x2cafa39d,"iron.data.Data.getMesh","iron/data/Data.hx",83,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_73_getMesh,"iron.data.Data","getMesh",0x2cafa39d,"iron.data.Data.getMesh","iron/data/Data.hx",73,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_91_deleteMesh,"iron.data.Data","deleteMesh",0x8a0175fe,"iron.data.Data.deleteMesh","iron/data/Data.hx",91,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_109_getLight,"iron.data.Data","getLight",0x5c34b126,"iron.data.Data.getLight","iron/data/Data.hx",109,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_100_getLight,"iron.data.Data","getLight",0x5c34b126,"iron.data.Data.getLight","iron/data/Data.hx",100,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_126_getCamera,"iron.data.Data","getCamera",0x21706c55,"iron.data.Data.getCamera","iron/data/Data.hx",126,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_117_getCamera,"iron.data.Data","getCamera",0x21706c55,"iron.data.Data.getCamera","iron/data/Data.hx",117,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_143_getMaterial,"iron.data.Data","getMaterial",0xb8224e57,"iron.data.Data.getMaterial","iron/data/Data.hx",143,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_134_getMaterial,"iron.data.Data","getMaterial",0xb8224e57,"iron.data.Data.getMaterial","iron/data/Data.hx",134,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_160_getParticle,"iron.data.Data","getParticle",0x340e2ff6,"iron.data.Data.getParticle","iron/data/Data.hx",160,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_151_getParticle,"iron.data.Data","getParticle",0x340e2ff6,"iron.data.Data.getParticle","iron/data/Data.hx",151,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_179_getWorld,"iron.data.Data","getWorld",0xb59cb6a2,"iron.data.Data.getWorld","iron/data/Data.hx",179,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_168_getWorld,"iron.data.Data","getWorld",0xb59cb6a2,"iron.data.Data.getWorld","iron/data/Data.hx",168,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_216_getShader,"iron.data.Data","getShader",0x8704e4d5,"iron.data.Data.getShader","iron/data/Data.hx",216,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_204_getShader,"iron.data.Data","getShader",0x8704e4d5,"iron.data.Data.getShader","iron/data/Data.hx",204,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_238_getSceneRaw,"iron.data.Data","getSceneRaw",0x89137dac,"iron.data.Data.getSceneRaw","iron/data/Data.hx",238,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_224_getSceneRaw,"iron.data.Data","getSceneRaw",0x89137dac,"iron.data.Data.getSceneRaw","iron/data/Data.hx",224,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_273_returnSceneRaw,"iron.data.Data","returnSceneRaw",0x0dd90612,"iron.data.Data.returnSceneRaw","iron/data/Data.hx",273,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_324_getMeshRawByName,"iron.data.Data","getMeshRawByName",0x723d346d,"iron.data.Data.getMeshRawByName","iron/data/Data.hx",324,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_330_getLightRawByName,"iron.data.Data","getLightRawByName",0x5a08adc4,"iron.data.Data.getLightRawByName","iron/data/Data.hx",330,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_336_getCameraRawByName,"iron.data.Data","getCameraRawByName",0x48a994b5,"iron.data.Data.getCameraRawByName","iron/data/Data.hx",336,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_342_getMaterialRawByName,"iron.data.Data","getMaterialRawByName",0x12406273,"iron.data.Data.getMaterialRawByName","iron/data/Data.hx",342,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_348_getParticleRawByName,"iron.data.Data","getParticleRawByName",0x2290d4f4,"iron.data.Data.getParticleRawByName","iron/data/Data.hx",348,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_354_getWorldRawByName,"iron.data.Data","getWorldRawByName",0x2c0a18c8,"iron.data.Data.getWorldRawByName","iron/data/Data.hx",354,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_366_getShaderRawByName,"iron.data.Data","getShaderRawByName",0x9e020c35,"iron.data.Data.getShaderRawByName","iron/data/Data.hx",366,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_372_getSpeakerRawByName,"iron.data.Data","getSpeakerRawByName",0x9b12287b,"iron.data.Data.getSpeakerRawByName","iron/data/Data.hx",372,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_393_getBlob,"iron.data.Data","getBlob",0x256f970d,"iron.data.Data.getBlob","iron/data/Data.hx",393,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_382_getBlob,"iron.data.Data","getBlob",0x256f970d,"iron.data.Data.getBlob","iron/data/Data.hx",382,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_418_getImage,"iron.data.Data","getImage",0xa4a13fab,"iron.data.Data.getImage","iron/data/Data.hx",418,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_402_getImage,"iron.data.Data","getImage",0xa4a13fab,"iron.data.Data.getImage","iron/data/Data.hx",402,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_455_getSound,"iron.data.Data","getSound",0x6804ad1f,"iron.data.Data.getSound","iron/data/Data.hx",455,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_433_getSound,"iron.data.Data","getSound",0x6804ad1f,"iron.data.Data.getSound","iron/data/Data.hx",433,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_482_getVideo,"iron.data.Data","getVideo",0x1e3434cb,"iron.data.Data.getVideo","iron/data/Data.hx",482,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_468_getVideo,"iron.data.Data","getVideo",0x1e3434cb,"iron.data.Data.getVideo","iron/data/Data.hx",468,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_502_getFont,"iron.data.Data","getFont",0x2816b77f,"iron.data.Data.getFont","iron/data/Data.hx",502,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_491_getFont,"iron.data.Data","getFont",0x2816b77f,"iron.data.Data.getFont","iron/data/Data.hx",491,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_8_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",8,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_9_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",9,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_10_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",10,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_11_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",11,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_12_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",12,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_13_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",13,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_14_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",14,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_16_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",16,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_18_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",18,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_19_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",19,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_20_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",20,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_21_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",21,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_22_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",22,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_27_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",27,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_72_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",72,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_99_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",99,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_116_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",116,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_133_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",133,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_150_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",150,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_167_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",167,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_203_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",203,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_223_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",223,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_379_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",379,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_381_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",381,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_401_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",401,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_426_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",426,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_467_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",467,0x68f3e2f6)
HX_LOCAL_STACK_FRAME(_hx_pos_514b96931615595e_490_boot,"iron.data.Data","boot",0x1ea739f8,"iron.data.Data.boot","iron/data/Data.hx",490,0x68f3e2f6)
namespace iron{
namespace data{

void Data_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_30_new)
            	}

Dynamic Data_obj::__CreateEmpty() { return new Data_obj; }

void *Data_obj::_hx_vtable = 0;

Dynamic Data_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Data_obj > _hx_result = new Data_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Data_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x25e6a720;
}

 ::haxe::ds::StringMap Data_obj::cachedSceneRaws;

 ::haxe::ds::StringMap Data_obj::cachedMeshes;

 ::haxe::ds::StringMap Data_obj::cachedLights;

 ::haxe::ds::StringMap Data_obj::cachedCameras;

 ::haxe::ds::StringMap Data_obj::cachedMaterials;

 ::haxe::ds::StringMap Data_obj::cachedParticles;

 ::haxe::ds::StringMap Data_obj::cachedWorlds;

 ::haxe::ds::StringMap Data_obj::cachedShaders;

 ::haxe::ds::StringMap Data_obj::cachedBlobs;

 ::haxe::ds::StringMap Data_obj::cachedImages;

 ::haxe::ds::StringMap Data_obj::cachedSounds;

 ::haxe::ds::StringMap Data_obj::cachedVideos;

 ::haxe::ds::StringMap Data_obj::cachedFonts;

::String Data_obj::dataPath;

void Data_obj::deleteAll(){
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_32_deleteAll)
HXLINE(  33)		{
HXLINE(  33)			 ::Dynamic c = ::iron::data::Data_obj::cachedMeshes->iterator();
HXDLIN(  33)			while(( (bool)(c->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  33)				 ::iron::data::MeshData c1 = ( ( ::iron::data::MeshData)(c->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN(  33)				c1->_hx_delete();
            			}
            		}
HXLINE(  34)		::iron::data::Data_obj::cachedMeshes =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  35)		{
HXLINE(  35)			 ::Dynamic c2 = ::iron::data::Data_obj::cachedShaders->iterator();
HXDLIN(  35)			while(( (bool)(c2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  35)				 ::iron::data::ShaderData c3 = ( ( ::iron::data::ShaderData)(c2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN(  35)				c3->_hx_delete();
            			}
            		}
HXLINE(  36)		::iron::data::Data_obj::cachedShaders =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  37)		::iron::data::Data_obj::cachedSceneRaws =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  38)		::iron::data::Data_obj::cachedLights =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  39)		::iron::data::Data_obj::cachedCameras =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  40)		::iron::data::Data_obj::cachedMaterials =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  41)		::iron::data::Data_obj::cachedParticles =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  42)		::iron::data::Data_obj::cachedWorlds =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  44)		if (hx::IsNotNull( ::iron::RenderPath_obj::active )) {
HXLINE(  44)			::iron::RenderPath_obj::active->unload();
            		}
HXLINE(  46)		{
HXLINE(  46)			 ::Dynamic c4 = ::iron::data::Data_obj::cachedBlobs->iterator();
HXDLIN(  46)			while(( (bool)(c4->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  46)				 ::kha::internal::BytesBlob c5 = ( ( ::kha::internal::BytesBlob)(c4->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN(  46)				c5->unload();
            			}
            		}
HXLINE(  47)		::iron::data::Data_obj::cachedBlobs =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  48)		{
HXLINE(  48)			 ::Dynamic c6 = ::iron::data::Data_obj::cachedImages->iterator();
HXDLIN(  48)			while(( (bool)(c6->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  48)				 ::kha::Image c7 = ( ( ::kha::Image)(c6->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN(  48)				c7->unload();
            			}
            		}
HXLINE(  49)		::iron::data::Data_obj::cachedImages =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  50)		{
HXLINE(  50)			 ::Dynamic c8 = ::iron::data::Data_obj::cachedSounds->iterator();
HXDLIN(  50)			while(( (bool)(c8->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  50)				 ::kha::Sound c9 = ( ( ::kha::Sound)(c8->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN(  50)				c9->unload();
            			}
            		}
HXLINE(  51)		::iron::data::Data_obj::cachedSounds =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  52)		{
HXLINE(  52)			 ::Dynamic c10 = ::iron::data::Data_obj::cachedVideos->iterator();
HXDLIN(  52)			while(( (bool)(c10->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  52)				 ::kha::Video c11 = ( ( ::kha::Video)(c10->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN(  52)				c11->unload();
            			}
            		}
HXLINE(  53)		::iron::data::Data_obj::cachedVideos =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  54)		{
HXLINE(  54)			 ::Dynamic c12 = ::iron::data::Data_obj::cachedFonts->iterator();
HXDLIN(  54)			while(( (bool)(c12->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  54)				 ::kha::Kravur c13 = ( ( ::kha::Kravur)(c12->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN(  54)				c13->unload();
            			}
            		}
HXLINE(  55)		::iron::data::Data_obj::cachedFonts =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Data_obj,deleteAll,(void))

void Data_obj::clearSceneData(){
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_59_clearSceneData)
HXLINE(  60)		::iron::data::Data_obj::cachedSceneRaws =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  61)		::iron::data::Data_obj::cachedMeshes =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  62)		::iron::data::Data_obj::cachedLights =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  63)		::iron::data::Data_obj::cachedMaterials =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  64)		::iron::data::Data_obj::cachedCameras =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  65)		::iron::data::Data_obj::cachedParticles =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  66)		::iron::data::Data_obj::cachedWorlds =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  68)		::iron::data::Data_obj::cachedShaders =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  69)		::iron::data::Data_obj::cachedBlobs =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Data_obj,clearSceneData,(void))

 ::haxe::ds::StringMap Data_obj::loadingMeshes;

void Data_obj::getMesh(::String file,::String name, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0,::String,name,::String,handle,::String,file) HXARGC(1)
            		void _hx_run( ::iron::data::MeshData b){
            			HX_STACKFRAME(&_hx_pos_514b96931615595e_83_getMesh)
HXLINE(  84)			::iron::data::Data_obj::cachedMeshes->set((file + name),b);
HXLINE(  85)			b->handle = handle;
HXLINE(  86)			{
HXLINE(  86)				int _g = 0;
HXDLIN(  86)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingMeshes->get((file + name))) );
HXDLIN(  86)				while((_g < _g1->length)){
HXLINE(  86)					 ::Dynamic f = _g1->__get(_g);
HXDLIN(  86)					_g = (_g + 1);
HXDLIN(  86)					f(b);
            				}
            			}
HXLINE(  87)			::iron::data::Data_obj::loadingMeshes->remove((file + name));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_514b96931615595e_73_getMesh)
HXLINE(  74)		::String handle = (file + name);
HXLINE(  75)		 ::iron::data::MeshData cached = ( ( ::iron::data::MeshData)(::iron::data::Data_obj::cachedMeshes->get(handle)) );
HXLINE(  76)		if (hx::IsNotNull( cached )) {
HXLINE(  76)			done(cached);
HXDLIN(  76)			return;
            		}
HXLINE(  78)		::Array< ::Dynamic> loading = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingMeshes->get(handle)) );
HXLINE(  79)		if (hx::IsNotNull( loading )) {
HXLINE(  79)			loading->push(done);
HXDLIN(  79)			return;
            		}
HXLINE(  81)		::iron::data::Data_obj::loadingMeshes->set((file + name),::Array_obj< ::Dynamic>::__new(1)->init(0,done));
HXLINE(  83)		::iron::data::MeshData_obj::parse(file,name, ::Dynamic(new _hx_Closure_0(name,handle,file)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Data_obj,getMesh,(void))

void Data_obj::deleteMesh(::String handle){
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_91_deleteMesh)
HXLINE(  93)		 ::iron::data::MeshData mesh = ( ( ::iron::data::MeshData)(::iron::data::Data_obj::cachedMeshes->get(handle)) );
HXLINE(  94)		if (hx::IsNull( mesh )) {
HXLINE(  94)			return;
            		}
HXLINE(  95)		mesh->_hx_delete();
HXLINE(  96)		::iron::data::Data_obj::cachedMeshes->remove(handle);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Data_obj,deleteMesh,(void))

 ::haxe::ds::StringMap Data_obj::loadingLights;

void Data_obj::getLight(::String file,::String name, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,name,::String,file) HXARGC(1)
            		void _hx_run( ::iron::data::LightData b){
            			HX_STACKFRAME(&_hx_pos_514b96931615595e_109_getLight)
HXLINE( 110)			::iron::data::Data_obj::cachedLights->set((file + name),b);
HXLINE( 111)			{
HXLINE( 111)				int _g = 0;
HXDLIN( 111)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingLights->get((file + name))) );
HXDLIN( 111)				while((_g < _g1->length)){
HXLINE( 111)					 ::Dynamic f = _g1->__get(_g);
HXDLIN( 111)					_g = (_g + 1);
HXDLIN( 111)					f(b);
            				}
            			}
HXLINE( 112)			::iron::data::Data_obj::loadingLights->remove((file + name));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_514b96931615595e_100_getLight)
HXLINE( 101)		 ::iron::data::LightData cached = ( ( ::iron::data::LightData)(::iron::data::Data_obj::cachedLights->get((file + name))) );
HXLINE( 102)		if (hx::IsNotNull( cached )) {
HXLINE( 102)			done(cached);
HXDLIN( 102)			return;
            		}
HXLINE( 104)		::Array< ::Dynamic> loading = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingLights->get((file + name))) );
HXLINE( 105)		if (hx::IsNotNull( loading )) {
HXLINE( 105)			loading->push(done);
HXDLIN( 105)			return;
            		}
HXLINE( 107)		::iron::data::Data_obj::loadingLights->set((file + name),::Array_obj< ::Dynamic>::__new(1)->init(0,done));
HXLINE( 109)		::iron::data::LightData_obj::parse(file,name, ::Dynamic(new _hx_Closure_0(name,file)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Data_obj,getLight,(void))

 ::haxe::ds::StringMap Data_obj::loadingCameras;

void Data_obj::getCamera(::String file,::String name, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,name,::String,file) HXARGC(1)
            		void _hx_run( ::iron::data::CameraData b){
            			HX_STACKFRAME(&_hx_pos_514b96931615595e_126_getCamera)
HXLINE( 127)			::iron::data::Data_obj::cachedCameras->set((file + name),b);
HXLINE( 128)			{
HXLINE( 128)				int _g = 0;
HXDLIN( 128)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingCameras->get((file + name))) );
HXDLIN( 128)				while((_g < _g1->length)){
HXLINE( 128)					 ::Dynamic f = _g1->__get(_g);
HXDLIN( 128)					_g = (_g + 1);
HXDLIN( 128)					f(b);
            				}
            			}
HXLINE( 129)			::iron::data::Data_obj::loadingCameras->remove((file + name));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_514b96931615595e_117_getCamera)
HXLINE( 118)		 ::iron::data::CameraData cached = ( ( ::iron::data::CameraData)(::iron::data::Data_obj::cachedCameras->get((file + name))) );
HXLINE( 119)		if (hx::IsNotNull( cached )) {
HXLINE( 119)			done(cached);
HXDLIN( 119)			return;
            		}
HXLINE( 121)		::Array< ::Dynamic> loading = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingCameras->get((file + name))) );
HXLINE( 122)		if (hx::IsNotNull( loading )) {
HXLINE( 122)			loading->push(done);
HXDLIN( 122)			return;
            		}
HXLINE( 124)		::iron::data::Data_obj::loadingCameras->set((file + name),::Array_obj< ::Dynamic>::__new(1)->init(0,done));
HXLINE( 126)		::iron::data::CameraData_obj::parse(file,name, ::Dynamic(new _hx_Closure_0(name,file)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Data_obj,getCamera,(void))

 ::haxe::ds::StringMap Data_obj::loadingMaterials;

void Data_obj::getMaterial(::String file,::String name, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,name,::String,file) HXARGC(1)
            		void _hx_run( ::iron::data::MaterialData b){
            			HX_STACKFRAME(&_hx_pos_514b96931615595e_143_getMaterial)
HXLINE( 144)			::iron::data::Data_obj::cachedMaterials->set((file + name),b);
HXLINE( 145)			{
HXLINE( 145)				int _g = 0;
HXDLIN( 145)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingMaterials->get((file + name))) );
HXDLIN( 145)				while((_g < _g1->length)){
HXLINE( 145)					 ::Dynamic f = _g1->__get(_g);
HXDLIN( 145)					_g = (_g + 1);
HXDLIN( 145)					f(b);
            				}
            			}
HXLINE( 146)			::iron::data::Data_obj::loadingMaterials->remove((file + name));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_514b96931615595e_134_getMaterial)
HXLINE( 135)		 ::iron::data::MaterialData cached = ( ( ::iron::data::MaterialData)(::iron::data::Data_obj::cachedMaterials->get((file + name))) );
HXLINE( 136)		if (hx::IsNotNull( cached )) {
HXLINE( 136)			done(cached);
HXDLIN( 136)			return;
            		}
HXLINE( 138)		::Array< ::Dynamic> loading = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingMaterials->get((file + name))) );
HXLINE( 139)		if (hx::IsNotNull( loading )) {
HXLINE( 139)			loading->push(done);
HXDLIN( 139)			return;
            		}
HXLINE( 141)		::iron::data::Data_obj::loadingMaterials->set((file + name),::Array_obj< ::Dynamic>::__new(1)->init(0,done));
HXLINE( 143)		::iron::data::MaterialData_obj::parse(file,name, ::Dynamic(new _hx_Closure_0(name,file)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Data_obj,getMaterial,(void))

 ::haxe::ds::StringMap Data_obj::loadingParticles;

void Data_obj::getParticle(::String file,::String name, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,name,::String,file) HXARGC(1)
            		void _hx_run( ::iron::data::ParticleData b){
            			HX_STACKFRAME(&_hx_pos_514b96931615595e_160_getParticle)
HXLINE( 161)			::iron::data::Data_obj::cachedParticles->set((file + name),b);
HXLINE( 162)			{
HXLINE( 162)				int _g = 0;
HXDLIN( 162)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingParticles->get((file + name))) );
HXDLIN( 162)				while((_g < _g1->length)){
HXLINE( 162)					 ::Dynamic f = _g1->__get(_g);
HXDLIN( 162)					_g = (_g + 1);
HXDLIN( 162)					f(b);
            				}
            			}
HXLINE( 163)			::iron::data::Data_obj::loadingParticles->remove((file + name));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_514b96931615595e_151_getParticle)
HXLINE( 152)		 ::iron::data::ParticleData cached = ( ( ::iron::data::ParticleData)(::iron::data::Data_obj::cachedParticles->get((file + name))) );
HXLINE( 153)		if (hx::IsNotNull( cached )) {
HXLINE( 153)			done(cached);
HXDLIN( 153)			return;
            		}
HXLINE( 155)		::Array< ::Dynamic> loading = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingParticles->get((file + name))) );
HXLINE( 156)		if (hx::IsNotNull( loading )) {
HXLINE( 156)			loading->push(done);
HXDLIN( 156)			return;
            		}
HXLINE( 158)		::iron::data::Data_obj::loadingParticles->set((file + name),::Array_obj< ::Dynamic>::__new(1)->init(0,done));
HXLINE( 160)		::iron::data::ParticleData_obj::parse(file,name, ::Dynamic(new _hx_Closure_0(name,file)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Data_obj,getParticle,(void))

 ::haxe::ds::StringMap Data_obj::loadingWorlds;

void Data_obj::getWorld(::String file,::String name, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,name,::String,file) HXARGC(1)
            		void _hx_run( ::iron::data::WorldData b){
            			HX_STACKFRAME(&_hx_pos_514b96931615595e_179_getWorld)
HXLINE( 180)			::iron::data::Data_obj::cachedWorlds->set((file + name),b);
HXLINE( 181)			{
HXLINE( 181)				int _g = 0;
HXDLIN( 181)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingWorlds->get((file + name))) );
HXDLIN( 181)				while((_g < _g1->length)){
HXLINE( 181)					 ::Dynamic f = _g1->__get(_g);
HXDLIN( 181)					_g = (_g + 1);
HXDLIN( 181)					f(b);
            				}
            			}
HXLINE( 182)			::iron::data::Data_obj::loadingWorlds->remove((file + name));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_514b96931615595e_168_getWorld)
HXLINE( 169)		if (hx::IsNull( name )) {
HXLINE( 169)			done(null());
HXDLIN( 169)			return;
            		}
HXLINE( 171)		 ::iron::data::WorldData cached = ( ( ::iron::data::WorldData)(::iron::data::Data_obj::cachedWorlds->get((file + name))) );
HXLINE( 172)		if (hx::IsNotNull( cached )) {
HXLINE( 172)			done(cached);
HXDLIN( 172)			return;
            		}
HXLINE( 174)		::Array< ::Dynamic> loading = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingWorlds->get((file + name))) );
HXLINE( 175)		if (hx::IsNotNull( loading )) {
HXLINE( 175)			loading->push(done);
HXDLIN( 175)			return;
            		}
HXLINE( 177)		::iron::data::Data_obj::loadingWorlds->set((file + name),::Array_obj< ::Dynamic>::__new(1)->init(0,done));
HXLINE( 179)		::iron::data::WorldData_obj::parse(file,name, ::Dynamic(new _hx_Closure_0(name,file)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Data_obj,getWorld,(void))

 ::haxe::ds::StringMap Data_obj::loadingShaders;

void Data_obj::getShader(::String file,::String name, ::Dynamic done, ::iron::data::TShaderOverride overrideContext){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::String,cacheName) HXARGC(1)
            		void _hx_run( ::iron::data::ShaderData b){
            			HX_STACKFRAME(&_hx_pos_514b96931615595e_216_getShader)
HXLINE( 217)			::iron::data::Data_obj::cachedShaders->set(cacheName,b);
HXLINE( 218)			{
HXLINE( 218)				int _g = 0;
HXDLIN( 218)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingShaders->get(cacheName)) );
HXDLIN( 218)				while((_g < _g1->length)){
HXLINE( 218)					 ::Dynamic f = _g1->__get(_g);
HXDLIN( 218)					_g = (_g + 1);
HXDLIN( 218)					f(b);
            				}
            			}
HXLINE( 219)			::iron::data::Data_obj::loadingShaders->remove(cacheName);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_514b96931615595e_204_getShader)
HXLINE( 206)		::String cacheName = name;
HXLINE( 207)		if (hx::IsNotNull( overrideContext )) {
HXLINE( 207)			cacheName = (cacheName + HX_("2",32,00,00,00));
            		}
HXLINE( 208)		 ::iron::data::ShaderData cached = ( ( ::iron::data::ShaderData)(::iron::data::Data_obj::cachedShaders->get(cacheName)) );
HXLINE( 209)		if (hx::IsNotNull( cached )) {
HXLINE( 209)			done(cached);
HXDLIN( 209)			return;
            		}
HXLINE( 211)		::Array< ::Dynamic> loading = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingShaders->get(cacheName)) );
HXLINE( 212)		if (hx::IsNotNull( loading )) {
HXLINE( 212)			loading->push(done);
HXDLIN( 212)			return;
            		}
HXLINE( 214)		::iron::data::Data_obj::loadingShaders->set(cacheName,::Array_obj< ::Dynamic>::__new(1)->init(0,done));
HXLINE( 216)		::iron::data::ShaderData_obj::parse(file,name, ::Dynamic(new _hx_Closure_0(cacheName)),overrideContext);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Data_obj,getShader,(void))

 ::haxe::ds::StringMap Data_obj::loadingSceneRaws;

void Data_obj::getSceneRaw(::String file, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0,bool,isJson,::String,file,bool,compressed) HXARGC(1)
            		void _hx_run( ::kha::internal::BytesBlob b){
            			HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_238_getSceneRaw)
HXLINE( 240)			bool compressed1 = compressed;
HXLINE( 259)			 ::iron::data::TSceneFormat parsed = null();
HXLINE( 260)			if (isJson) {
HXLINE( 261)				::String s = b->toString();
HXLINE( 262)				if ((s.charAt(0) == HX_("{",7b,00,00,00))) {
HXLINE( 262)					parsed = ( ( ::iron::data::TSceneFormat)( ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,s)->doParse()) );
            				}
            				else {
HXLINE( 262)					 ::haxe::io::BytesInput i =  ::haxe::io::BytesInput_obj::__alloc( HX_CTX ,b->toBytes(),null(),null());
HXDLIN( 262)					i->set_bigEndian(true);
HXDLIN( 262)					parsed = ( ( ::iron::data::TSceneFormat)(::iron::_hx_system::ArmPack_obj::read(i,null(),null())) );
            				}
            			}
            			else {
HXLINE( 265)				 ::haxe::io::BytesInput i1 =  ::haxe::io::BytesInput_obj::__alloc( HX_CTX ,b->toBytes(),null(),null());
HXDLIN( 265)				i1->set_bigEndian(true);
HXDLIN( 265)				parsed = ( ( ::iron::data::TSceneFormat)(::iron::_hx_system::ArmPack_obj::read(i1,null(),null())) );
            			}
HXLINE( 268)			::iron::data::Data_obj::returnSceneRaw(file,parsed);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_514b96931615595e_224_getSceneRaw)
HXLINE( 225)		 ::iron::data::TSceneFormat cached = ( ( ::iron::data::TSceneFormat)(::iron::data::Data_obj::cachedSceneRaws->get(file)) );
HXLINE( 226)		if (hx::IsNotNull( cached )) {
HXLINE( 226)			done(cached);
HXDLIN( 226)			return;
            		}
HXLINE( 228)		::Array< ::Dynamic> loading = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingSceneRaws->get(file)) );
HXLINE( 229)		if (hx::IsNotNull( loading )) {
HXLINE( 229)			loading->push(done);
HXDLIN( 229)			return;
            		}
HXLINE( 231)		::iron::data::Data_obj::loadingSceneRaws->set(file,::Array_obj< ::Dynamic>::__new(1)->init(0,done));
HXLINE( 234)		bool compressed = ::StringTools_obj::endsWith(file,HX_(".zip",73,bf,c4,1e));
HXLINE( 235)		bool isJson = ::StringTools_obj::endsWith(file,HX_(".json",56,f1,d6,c2));
HXLINE( 236)		::String ext;
HXDLIN( 236)		bool ext1;
HXDLIN( 236)		bool ext2;
HXDLIN( 236)		if (!(compressed)) {
HXLINE( 236)			ext2 = isJson;
            		}
            		else {
HXLINE( 236)			ext2 = true;
            		}
HXDLIN( 236)		if (!(ext2)) {
HXLINE( 236)			ext1 = ::StringTools_obj::endsWith(file,HX_(".arm",ee,ce,b1,1e));
            		}
            		else {
HXLINE( 236)			ext1 = true;
            		}
HXDLIN( 236)		if (ext1) {
HXLINE( 236)			ext = HX_("",00,00,00,00);
            		}
            		else {
HXLINE( 236)			ext = HX_(".arm",ee,ce,b1,1e);
            		}
HXLINE( 238)		::iron::data::Data_obj::getBlob((file + ext), ::Dynamic(new _hx_Closure_0(isJson,file,compressed)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,getSceneRaw,(void))

void Data_obj::returnSceneRaw(::String file, ::iron::data::TSceneFormat parsed){
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_273_returnSceneRaw)
HXLINE( 274)		::iron::data::Data_obj::cachedSceneRaws->set(file,parsed);
HXLINE( 275)		{
HXLINE( 275)			int _g = 0;
HXDLIN( 275)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingSceneRaws->get(file)) );
HXDLIN( 275)			while((_g < _g1->length)){
HXLINE( 275)				 ::Dynamic f = _g1->__get(_g);
HXDLIN( 275)				_g = (_g + 1);
HXDLIN( 275)				f(parsed);
            			}
            		}
HXLINE( 276)		::iron::data::Data_obj::loadingSceneRaws->remove(file);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,returnSceneRaw,(void))

 ::iron::data::TMeshData Data_obj::getMeshRawByName(::Array< ::Dynamic> datas,::String name){
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_324_getMeshRawByName)
HXLINE( 325)		if ((name == HX_("",00,00,00,00))) {
HXLINE( 325)			return datas->__get(0).StaticCast<  ::iron::data::TMeshData >();
            		}
HXLINE( 326)		{
HXLINE( 326)			int _g = 0;
HXDLIN( 326)			while((_g < datas->length)){
HXLINE( 326)				 ::iron::data::TMeshData dat = datas->__get(_g).StaticCast<  ::iron::data::TMeshData >();
HXDLIN( 326)				_g = (_g + 1);
HXDLIN( 326)				if ((dat->name == name)) {
HXLINE( 326)					return dat;
            				}
            			}
            		}
HXLINE( 327)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,getMeshRawByName,return )

 ::iron::data::TLightData Data_obj::getLightRawByName(::Array< ::Dynamic> datas,::String name){
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_330_getLightRawByName)
HXLINE( 331)		if ((name == HX_("",00,00,00,00))) {
HXLINE( 331)			return datas->__get(0).StaticCast<  ::iron::data::TLightData >();
            		}
HXLINE( 332)		{
HXLINE( 332)			int _g = 0;
HXDLIN( 332)			while((_g < datas->length)){
HXLINE( 332)				 ::iron::data::TLightData dat = datas->__get(_g).StaticCast<  ::iron::data::TLightData >();
HXDLIN( 332)				_g = (_g + 1);
HXDLIN( 332)				if ((dat->name == name)) {
HXLINE( 332)					return dat;
            				}
            			}
            		}
HXLINE( 333)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,getLightRawByName,return )

 ::iron::data::TCameraData Data_obj::getCameraRawByName(::Array< ::Dynamic> datas,::String name){
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_336_getCameraRawByName)
HXLINE( 337)		if ((name == HX_("",00,00,00,00))) {
HXLINE( 337)			return datas->__get(0).StaticCast<  ::iron::data::TCameraData >();
            		}
HXLINE( 338)		{
HXLINE( 338)			int _g = 0;
HXDLIN( 338)			while((_g < datas->length)){
HXLINE( 338)				 ::iron::data::TCameraData dat = datas->__get(_g).StaticCast<  ::iron::data::TCameraData >();
HXDLIN( 338)				_g = (_g + 1);
HXDLIN( 338)				if ((dat->name == name)) {
HXLINE( 338)					return dat;
            				}
            			}
            		}
HXLINE( 339)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,getCameraRawByName,return )

 ::iron::data::TMaterialData Data_obj::getMaterialRawByName(::Array< ::Dynamic> datas,::String name){
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_342_getMaterialRawByName)
HXLINE( 343)		if ((name == HX_("",00,00,00,00))) {
HXLINE( 343)			return datas->__get(0).StaticCast<  ::iron::data::TMaterialData >();
            		}
HXLINE( 344)		{
HXLINE( 344)			int _g = 0;
HXDLIN( 344)			while((_g < datas->length)){
HXLINE( 344)				 ::iron::data::TMaterialData dat = datas->__get(_g).StaticCast<  ::iron::data::TMaterialData >();
HXDLIN( 344)				_g = (_g + 1);
HXDLIN( 344)				if ((dat->name == name)) {
HXLINE( 344)					return dat;
            				}
            			}
            		}
HXLINE( 345)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,getMaterialRawByName,return )

 ::iron::data::TParticleData Data_obj::getParticleRawByName(::Array< ::Dynamic> datas,::String name){
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_348_getParticleRawByName)
HXLINE( 349)		if ((name == HX_("",00,00,00,00))) {
HXLINE( 349)			return datas->__get(0).StaticCast<  ::iron::data::TParticleData >();
            		}
HXLINE( 350)		{
HXLINE( 350)			int _g = 0;
HXDLIN( 350)			while((_g < datas->length)){
HXLINE( 350)				 ::iron::data::TParticleData dat = datas->__get(_g).StaticCast<  ::iron::data::TParticleData >();
HXDLIN( 350)				_g = (_g + 1);
HXDLIN( 350)				if ((dat->name == name)) {
HXLINE( 350)					return dat;
            				}
            			}
            		}
HXLINE( 351)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,getParticleRawByName,return )

 ::iron::data::TWorldData Data_obj::getWorldRawByName(::Array< ::Dynamic> datas,::String name){
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_354_getWorldRawByName)
HXLINE( 355)		if ((name == HX_("",00,00,00,00))) {
HXLINE( 355)			return datas->__get(0).StaticCast<  ::iron::data::TWorldData >();
            		}
HXLINE( 356)		{
HXLINE( 356)			int _g = 0;
HXDLIN( 356)			while((_g < datas->length)){
HXLINE( 356)				 ::iron::data::TWorldData dat = datas->__get(_g).StaticCast<  ::iron::data::TWorldData >();
HXDLIN( 356)				_g = (_g + 1);
HXDLIN( 356)				if ((dat->name == name)) {
HXLINE( 356)					return dat;
            				}
            			}
            		}
HXLINE( 357)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,getWorldRawByName,return )

 ::iron::data::TShaderData Data_obj::getShaderRawByName(::Array< ::Dynamic> datas,::String name){
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_366_getShaderRawByName)
HXLINE( 367)		if ((name == HX_("",00,00,00,00))) {
HXLINE( 367)			return datas->__get(0).StaticCast<  ::iron::data::TShaderData >();
            		}
HXLINE( 368)		{
HXLINE( 368)			int _g = 0;
HXDLIN( 368)			while((_g < datas->length)){
HXLINE( 368)				 ::iron::data::TShaderData dat = datas->__get(_g).StaticCast<  ::iron::data::TShaderData >();
HXDLIN( 368)				_g = (_g + 1);
HXDLIN( 368)				if ((dat->name == name)) {
HXLINE( 368)					return dat;
            				}
            			}
            		}
HXLINE( 369)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,getShaderRawByName,return )

 ::iron::data::TSpeakerData Data_obj::getSpeakerRawByName(::Array< ::Dynamic> datas,::String name){
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_372_getSpeakerRawByName)
HXLINE( 373)		if ((name == HX_("",00,00,00,00))) {
HXLINE( 373)			return datas->__get(0).StaticCast<  ::iron::data::TSpeakerData >();
            		}
HXLINE( 374)		{
HXLINE( 374)			int _g = 0;
HXDLIN( 374)			while((_g < datas->length)){
HXLINE( 374)				 ::iron::data::TSpeakerData dat = datas->__get(_g).StaticCast<  ::iron::data::TSpeakerData >();
HXDLIN( 374)				_g = (_g + 1);
HXDLIN( 374)				if ((dat->name == name)) {
HXLINE( 374)					return dat;
            				}
            			}
            		}
HXLINE( 375)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,getSpeakerRawByName,return )

int Data_obj::assetsLoaded;

 ::haxe::ds::StringMap Data_obj::loadingBlobs;

void Data_obj::getBlob(::String file, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::String,file) HXARGC(1)
            		void _hx_run( ::kha::internal::BytesBlob b){
            			HX_STACKFRAME(&_hx_pos_514b96931615595e_393_getBlob)
HXLINE( 394)			::iron::data::Data_obj::cachedBlobs->set(file,b);
HXLINE( 395)			{
HXLINE( 395)				int _g = 0;
HXDLIN( 395)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingBlobs->get(file)) );
HXDLIN( 395)				while((_g < _g1->length)){
HXLINE( 395)					 ::Dynamic f = _g1->__get(_g);
HXDLIN( 395)					_g = (_g + 1);
HXDLIN( 395)					f(b);
            				}
            			}
HXLINE( 396)			::iron::data::Data_obj::loadingBlobs->remove(file);
HXLINE( 397)			::iron::data::Data_obj::assetsLoaded++;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_514b96931615595e_382_getBlob)
HXLINE( 383)		 ::kha::internal::BytesBlob cached = ( ( ::kha::internal::BytesBlob)(::iron::data::Data_obj::cachedBlobs->get(file)) );
HXLINE( 384)		if (hx::IsNotNull( cached )) {
HXLINE( 384)			done(cached);
HXDLIN( 384)			return;
            		}
HXLINE( 386)		::Array< ::Dynamic> loading = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingBlobs->get(file)) );
HXLINE( 387)		if (hx::IsNotNull( loading )) {
HXLINE( 387)			loading->push(done);
HXDLIN( 387)			return;
            		}
HXLINE( 389)		::iron::data::Data_obj::loadingBlobs->set(file,::Array_obj< ::Dynamic>::__new(1)->init(0,done));
HXLINE( 391)		::String p;
HXDLIN( 391)		bool p1;
HXDLIN( 391)		if ((file.charAt(0) != HX_("/",2f,00,00,00))) {
HXLINE( 391)			p1 = (file.charAt(1) == HX_(":",3a,00,00,00));
            		}
            		else {
HXLINE( 391)			p1 = true;
            		}
HXDLIN( 391)		if (p1) {
HXLINE( 391)			p = file;
            		}
            		else {
HXLINE( 391)			p = (::iron::data::Data_obj::dataPath + file);
            		}
HXLINE( 393)		::kha::Assets_obj::loadBlobFromPath(p, ::Dynamic(new _hx_Closure_0(file)),null(),hx::SourceInfo(HX_("Sources/iron/data/Data.hx",ff,9a,fa,46),393,HX_("iron.data.Data",68,80,30,b4),HX_("getBlob",13,ed,9b,13)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,getBlob,(void))

 ::haxe::ds::StringMap Data_obj::loadingImages;

void Data_obj::getImage(::String file, ::Dynamic done,hx::Null< bool >  __o_readable,::String __o_format){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::String,file) HXARGC(1)
            		void _hx_run( ::kha::Image b){
            			HX_STACKFRAME(&_hx_pos_514b96931615595e_418_getImage)
HXLINE( 419)			::iron::data::Data_obj::cachedImages->set(file,b);
HXLINE( 420)			{
HXLINE( 420)				int _g = 0;
HXDLIN( 420)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingImages->get(file)) );
HXDLIN( 420)				while((_g < _g1->length)){
HXLINE( 420)					 ::Dynamic f = _g1->__get(_g);
HXDLIN( 420)					_g = (_g + 1);
HXDLIN( 420)					f(b);
            				}
            			}
HXLINE( 421)			::iron::data::Data_obj::loadingImages->remove(file);
HXLINE( 422)			::iron::data::Data_obj::assetsLoaded++;
            		}
            		HX_END_LOCAL_FUNC1((void))

bool readable = __o_readable.Default(false);
::String format = __o_format.Default(HX_("RGBA32",53,5a,88,d6));
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_402_getImage)
HXLINE( 404)		file = (file.substring(0,(file.length - 4)) + HX_(".k",7d,28,00,00));
HXLINE( 407)		 ::kha::Image cached = ( ( ::kha::Image)(::iron::data::Data_obj::cachedImages->get(file)) );
HXLINE( 408)		if (hx::IsNotNull( cached )) {
HXLINE( 408)			done(cached);
HXDLIN( 408)			return;
            		}
HXLINE( 410)		::Array< ::Dynamic> loading = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingImages->get(file)) );
HXLINE( 411)		if (hx::IsNotNull( loading )) {
HXLINE( 411)			loading->push(done);
HXDLIN( 411)			return;
            		}
HXLINE( 413)		::iron::data::Data_obj::loadingImages->set(file,::Array_obj< ::Dynamic>::__new(1)->init(0,done));
HXLINE( 415)		::String p;
HXDLIN( 415)		bool p1;
HXDLIN( 415)		if ((file.charAt(0) != HX_("/",2f,00,00,00))) {
HXLINE( 415)			p1 = (file.charAt(1) == HX_(":",3a,00,00,00));
            		}
            		else {
HXLINE( 415)			p1 = true;
            		}
HXDLIN( 415)		if (p1) {
HXLINE( 415)			p = file;
            		}
            		else {
HXLINE( 415)			p = (::iron::data::Data_obj::dataPath + file);
            		}
HXLINE( 418)		::kha::Assets_obj::loadImageFromPath(p,readable, ::Dynamic(new _hx_Closure_0(file)),null(),hx::SourceInfo(HX_("Sources/iron/data/Data.hx",ff,9a,fa,46),418,HX_("iron.data.Data",68,80,30,b4),HX_("getImage",e5,2e,40,1d)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Data_obj,getImage,(void))

 ::haxe::ds::StringMap Data_obj::loadingSounds;

void Data_obj::getSound(::String file, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1,::String,file) HXARGC(1)
            		void _hx_run( ::kha::Sound b){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,file, ::kha::Sound,b) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_514b96931615595e_455_getSound)
HXLINE( 457)				::iron::data::Data_obj::cachedSounds->set(file,b);
HXLINE( 458)				{
HXLINE( 458)					int _g = 0;
HXDLIN( 458)					::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingSounds->get(file)) );
HXDLIN( 458)					while((_g < _g1->length)){
HXLINE( 458)						 ::Dynamic f = _g1->__get(_g);
HXDLIN( 458)						_g = (_g + 1);
HXDLIN( 458)						f(b);
            					}
            				}
HXLINE( 459)				::iron::data::Data_obj::loadingSounds->remove(file);
HXLINE( 460)				::iron::data::Data_obj::assetsLoaded++;
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_STACKFRAME(&_hx_pos_514b96931615595e_455_getSound)
HXLINE( 455)			b->uncompress( ::Dynamic(new _hx_Closure_0(file,b)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_514b96931615595e_433_getSound)
HXLINE( 440)		if (::StringTools_obj::endsWith(file,HX_(".wav",be,71,c2,1e))) {
HXLINE( 440)			file = (file.substring(0,(file.length - 4)) + HX_(".ogg",e1,64,bc,1e));
            		}
HXLINE( 443)		 ::kha::Sound cached = ( ( ::kha::Sound)(::iron::data::Data_obj::cachedSounds->get(file)) );
HXLINE( 444)		if (hx::IsNotNull( cached )) {
HXLINE( 444)			done(cached);
HXDLIN( 444)			return;
            		}
HXLINE( 446)		::Array< ::Dynamic> loading = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingSounds->get(file)) );
HXLINE( 447)		if (hx::IsNotNull( loading )) {
HXLINE( 447)			loading->push(done);
HXDLIN( 447)			return;
            		}
HXLINE( 449)		::iron::data::Data_obj::loadingSounds->set(file,::Array_obj< ::Dynamic>::__new(1)->init(0,done));
HXLINE( 451)		::String p;
HXDLIN( 451)		bool p1;
HXDLIN( 451)		if ((file.charAt(0) != HX_("/",2f,00,00,00))) {
HXLINE( 451)			p1 = (file.charAt(1) == HX_(":",3a,00,00,00));
            		}
            		else {
HXLINE( 451)			p1 = true;
            		}
HXDLIN( 451)		if (p1) {
HXLINE( 451)			p = file;
            		}
            		else {
HXLINE( 451)			p = (::iron::data::Data_obj::dataPath + file);
            		}
HXLINE( 453)		::kha::Assets_obj::loadSoundFromPath(p, ::Dynamic(new _hx_Closure_1(file)),null(),hx::SourceInfo(HX_("Sources/iron/data/Data.hx",ff,9a,fa,46),453,HX_("iron.data.Data",68,80,30,b4),HX_("getSound",59,9c,a3,e0)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,getSound,(void))

 ::haxe::ds::StringMap Data_obj::loadingVideos;

void Data_obj::getVideo(::String file, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::String,file) HXARGC(1)
            		void _hx_run( ::kha::Video b){
            			HX_STACKFRAME(&_hx_pos_514b96931615595e_482_getVideo)
HXLINE( 483)			::iron::data::Data_obj::cachedVideos->set(file,b);
HXLINE( 484)			{
HXLINE( 484)				int _g = 0;
HXDLIN( 484)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingVideos->get(file)) );
HXDLIN( 484)				while((_g < _g1->length)){
HXLINE( 484)					 ::Dynamic f = _g1->__get(_g);
HXDLIN( 484)					_g = (_g + 1);
HXDLIN( 484)					f(b);
            				}
            			}
HXLINE( 485)			::iron::data::Data_obj::loadingVideos->remove(file);
HXLINE( 486)			::iron::data::Data_obj::assetsLoaded++;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_514b96931615595e_468_getVideo)
HXLINE( 470)		file = (file.substring(0,(file.length - 4)) + HX_(".avi",66,d2,b1,1e));
HXLINE( 472)		 ::kha::Video cached = ( ( ::kha::Video)(::iron::data::Data_obj::cachedVideos->get(file)) );
HXLINE( 473)		if (hx::IsNotNull( cached )) {
HXLINE( 473)			done(cached);
HXDLIN( 473)			return;
            		}
HXLINE( 475)		::Array< ::Dynamic> loading = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingVideos->get(file)) );
HXLINE( 476)		if (hx::IsNotNull( loading )) {
HXLINE( 476)			loading->push(done);
HXDLIN( 476)			return;
            		}
HXLINE( 478)		::iron::data::Data_obj::loadingVideos->set(file,::Array_obj< ::Dynamic>::__new(1)->init(0,done));
HXLINE( 480)		::String p;
HXDLIN( 480)		bool p1;
HXDLIN( 480)		if ((file.charAt(0) != HX_("/",2f,00,00,00))) {
HXLINE( 480)			p1 = (file.charAt(1) == HX_(":",3a,00,00,00));
            		}
            		else {
HXLINE( 480)			p1 = true;
            		}
HXDLIN( 480)		if (p1) {
HXLINE( 480)			p = file;
            		}
            		else {
HXLINE( 480)			p = (::iron::data::Data_obj::dataPath + file);
            		}
HXLINE( 482)		::kha::Assets_obj::loadVideoFromPath(p, ::Dynamic(new _hx_Closure_0(file)),null(),hx::SourceInfo(HX_("Sources/iron/data/Data.hx",ff,9a,fa,46),482,HX_("iron.data.Data",68,80,30,b4),HX_("getVideo",05,24,d3,96)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,getVideo,(void))

 ::haxe::ds::StringMap Data_obj::loadingFonts;

void Data_obj::getFont(::String file, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::String,file) HXARGC(1)
            		void _hx_run( ::kha::Kravur b){
            			HX_STACKFRAME(&_hx_pos_514b96931615595e_502_getFont)
HXLINE( 503)			::iron::data::Data_obj::cachedFonts->set(file,b);
HXLINE( 504)			{
HXLINE( 504)				int _g = 0;
HXDLIN( 504)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingFonts->get(file)) );
HXDLIN( 504)				while((_g < _g1->length)){
HXLINE( 504)					 ::Dynamic f = _g1->__get(_g);
HXDLIN( 504)					_g = (_g + 1);
HXDLIN( 504)					f(b);
            				}
            			}
HXLINE( 505)			::iron::data::Data_obj::loadingFonts->remove(file);
HXLINE( 506)			::iron::data::Data_obj::assetsLoaded++;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_514b96931615595e_491_getFont)
HXLINE( 492)		 ::kha::Kravur cached = ( ( ::kha::Kravur)(::iron::data::Data_obj::cachedFonts->get(file)) );
HXLINE( 493)		if (hx::IsNotNull( cached )) {
HXLINE( 493)			done(cached);
HXDLIN( 493)			return;
            		}
HXLINE( 495)		::Array< ::Dynamic> loading = ( (::Array< ::Dynamic>)(::iron::data::Data_obj::loadingFonts->get(file)) );
HXLINE( 496)		if (hx::IsNotNull( loading )) {
HXLINE( 496)			loading->push(done);
HXDLIN( 496)			return;
            		}
HXLINE( 498)		::iron::data::Data_obj::loadingFonts->set(file,::Array_obj< ::Dynamic>::__new(1)->init(0,done));
HXLINE( 500)		::String p;
HXDLIN( 500)		bool p1;
HXDLIN( 500)		if ((file.charAt(0) != HX_("/",2f,00,00,00))) {
HXLINE( 500)			p1 = (file.charAt(1) == HX_(":",3a,00,00,00));
            		}
            		else {
HXLINE( 500)			p1 = true;
            		}
HXDLIN( 500)		if (p1) {
HXLINE( 500)			p = file;
            		}
            		else {
HXLINE( 500)			p = (::iron::data::Data_obj::dataPath + file);
            		}
HXLINE( 502)		::kha::Assets_obj::loadFontFromPath(p, ::Dynamic(new _hx_Closure_0(file)),null(),hx::SourceInfo(HX_("Sources/iron/data/Data.hx",ff,9a,fa,46),502,HX_("iron.data.Data",68,80,30,b4),HX_("getFont",85,0d,43,16)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Data_obj,getFont,(void))


Data_obj::Data_obj()
{
}

bool Data_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getMesh") ) { outValue = getMesh_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBlob") ) { outValue = getBlob_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFont") ) { outValue = getFont_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dataPath") ) { outValue = ( dataPath ); return true; }
		if (HX_FIELD_EQ(inName,"getLight") ) { outValue = getLight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getWorld") ) { outValue = getWorld_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getImage") ) { outValue = getImage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getSound") ) { outValue = getSound_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getVideo") ) { outValue = getVideo_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"deleteAll") ) { outValue = deleteAll_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getCamera") ) { outValue = getCamera_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getShader") ) { outValue = getShader_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"deleteMesh") ) { outValue = deleteMesh_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cachedBlobs") ) { outValue = ( cachedBlobs ); return true; }
		if (HX_FIELD_EQ(inName,"cachedFonts") ) { outValue = ( cachedFonts ); return true; }
		if (HX_FIELD_EQ(inName,"getMaterial") ) { outValue = getMaterial_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getParticle") ) { outValue = getParticle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getSceneRaw") ) { outValue = getSceneRaw_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cachedMeshes") ) { outValue = ( cachedMeshes ); return true; }
		if (HX_FIELD_EQ(inName,"cachedLights") ) { outValue = ( cachedLights ); return true; }
		if (HX_FIELD_EQ(inName,"cachedWorlds") ) { outValue = ( cachedWorlds ); return true; }
		if (HX_FIELD_EQ(inName,"cachedImages") ) { outValue = ( cachedImages ); return true; }
		if (HX_FIELD_EQ(inName,"cachedSounds") ) { outValue = ( cachedSounds ); return true; }
		if (HX_FIELD_EQ(inName,"cachedVideos") ) { outValue = ( cachedVideos ); return true; }
		if (HX_FIELD_EQ(inName,"assetsLoaded") ) { outValue = ( assetsLoaded ); return true; }
		if (HX_FIELD_EQ(inName,"loadingBlobs") ) { outValue = ( loadingBlobs ); return true; }
		if (HX_FIELD_EQ(inName,"loadingFonts") ) { outValue = ( loadingFonts ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"cachedCameras") ) { outValue = ( cachedCameras ); return true; }
		if (HX_FIELD_EQ(inName,"cachedShaders") ) { outValue = ( cachedShaders ); return true; }
		if (HX_FIELD_EQ(inName,"loadingMeshes") ) { outValue = ( loadingMeshes ); return true; }
		if (HX_FIELD_EQ(inName,"loadingLights") ) { outValue = ( loadingLights ); return true; }
		if (HX_FIELD_EQ(inName,"loadingWorlds") ) { outValue = ( loadingWorlds ); return true; }
		if (HX_FIELD_EQ(inName,"loadingImages") ) { outValue = ( loadingImages ); return true; }
		if (HX_FIELD_EQ(inName,"loadingSounds") ) { outValue = ( loadingSounds ); return true; }
		if (HX_FIELD_EQ(inName,"loadingVideos") ) { outValue = ( loadingVideos ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"clearSceneData") ) { outValue = clearSceneData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadingCameras") ) { outValue = ( loadingCameras ); return true; }
		if (HX_FIELD_EQ(inName,"loadingShaders") ) { outValue = ( loadingShaders ); return true; }
		if (HX_FIELD_EQ(inName,"returnSceneRaw") ) { outValue = returnSceneRaw_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"cachedSceneRaws") ) { outValue = ( cachedSceneRaws ); return true; }
		if (HX_FIELD_EQ(inName,"cachedMaterials") ) { outValue = ( cachedMaterials ); return true; }
		if (HX_FIELD_EQ(inName,"cachedParticles") ) { outValue = ( cachedParticles ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"loadingMaterials") ) { outValue = ( loadingMaterials ); return true; }
		if (HX_FIELD_EQ(inName,"loadingParticles") ) { outValue = ( loadingParticles ); return true; }
		if (HX_FIELD_EQ(inName,"loadingSceneRaws") ) { outValue = ( loadingSceneRaws ); return true; }
		if (HX_FIELD_EQ(inName,"getMeshRawByName") ) { outValue = getMeshRawByName_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getLightRawByName") ) { outValue = getLightRawByName_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getWorldRawByName") ) { outValue = getWorldRawByName_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getCameraRawByName") ) { outValue = getCameraRawByName_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getShaderRawByName") ) { outValue = getShaderRawByName_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getSpeakerRawByName") ) { outValue = getSpeakerRawByName_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getMaterialRawByName") ) { outValue = getMaterialRawByName_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getParticleRawByName") ) { outValue = getParticleRawByName_dyn(); return true; }
	}
	return false;
}

bool Data_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"dataPath") ) { dataPath=ioValue.Cast< ::String >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cachedBlobs") ) { cachedBlobs=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"cachedFonts") ) { cachedFonts=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cachedMeshes") ) { cachedMeshes=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"cachedLights") ) { cachedLights=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"cachedWorlds") ) { cachedWorlds=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"cachedImages") ) { cachedImages=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"cachedSounds") ) { cachedSounds=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"cachedVideos") ) { cachedVideos=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"assetsLoaded") ) { assetsLoaded=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"loadingBlobs") ) { loadingBlobs=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"loadingFonts") ) { loadingFonts=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"cachedCameras") ) { cachedCameras=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"cachedShaders") ) { cachedShaders=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"loadingMeshes") ) { loadingMeshes=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"loadingLights") ) { loadingLights=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"loadingWorlds") ) { loadingWorlds=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"loadingImages") ) { loadingImages=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"loadingSounds") ) { loadingSounds=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"loadingVideos") ) { loadingVideos=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"loadingCameras") ) { loadingCameras=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"loadingShaders") ) { loadingShaders=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"cachedSceneRaws") ) { cachedSceneRaws=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"cachedMaterials") ) { cachedMaterials=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"cachedParticles") ) { cachedParticles=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"loadingMaterials") ) { loadingMaterials=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"loadingParticles") ) { loadingParticles=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"loadingSceneRaws") ) { loadingSceneRaws=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Data_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Data_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::cachedSceneRaws,HX_("cachedSceneRaws",b5,64,fe,48)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::cachedMeshes,HX_("cachedMeshes",1d,a1,bc,5c)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::cachedLights,HX_("cachedLights",5f,14,0d,3c)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::cachedCameras,HX_("cachedCameras",6c,f2,b2,18)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::cachedMaterials,HX_("cachedMaterials",aa,29,e6,46)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::cachedParticles,HX_("cachedParticles",2b,b3,5f,39)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::cachedWorlds,HX_("cachedWorlds",63,db,a9,1d)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::cachedShaders,HX_("cachedShaders",ec,e9,07,95)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::cachedBlobs,HX_("cachedBlobs",34,b1,e6,2d)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::cachedImages,HX_("cachedImages",3a,3a,9d,52)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::cachedSounds,HX_("cachedSounds",46,92,39,86)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::cachedVideos,HX_("cachedVideos",1a,c1,a0,39)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::cachedFonts,HX_("cachedFonts",82,f4,7b,7d)},
	{hx::fsString,(void *) &Data_obj::dataPath,HX_("dataPath",ef,c4,c5,89)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::loadingMeshes,HX_("loadingMeshes",37,ff,ac,f1)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::loadingLights,HX_("loadingLights",79,72,fd,d0)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::loadingCameras,HX_("loadingCameras",12,eb,14,d6)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::loadingMaterials,HX_("loadingMaterials",d0,17,34,9b)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::loadingParticles,HX_("loadingParticles",51,a1,ad,8d)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::loadingWorlds,HX_("loadingWorlds",7d,39,9a,b2)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::loadingShaders,HX_("loadingShaders",92,e2,69,52)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::loadingSceneRaws,HX_("loadingSceneRaws",db,52,4c,9d)},
	{hx::fsInt,(void *) &Data_obj::assetsLoaded,HX_("assetsLoaded",e8,c8,28,8e)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::loadingBlobs,HX_("loadingBlobs",5a,14,8d,aa)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::loadingImages,HX_("loadingImages",54,98,8d,e7)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::loadingSounds,HX_("loadingSounds",60,f0,29,1b)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::loadingVideos,HX_("loadingVideos",34,1f,91,ce)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Data_obj::loadingFonts,HX_("loadingFonts",a8,57,22,fa)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Data_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Data_obj::cachedSceneRaws,"cachedSceneRaws");
	HX_MARK_MEMBER_NAME(Data_obj::cachedMeshes,"cachedMeshes");
	HX_MARK_MEMBER_NAME(Data_obj::cachedLights,"cachedLights");
	HX_MARK_MEMBER_NAME(Data_obj::cachedCameras,"cachedCameras");
	HX_MARK_MEMBER_NAME(Data_obj::cachedMaterials,"cachedMaterials");
	HX_MARK_MEMBER_NAME(Data_obj::cachedParticles,"cachedParticles");
	HX_MARK_MEMBER_NAME(Data_obj::cachedWorlds,"cachedWorlds");
	HX_MARK_MEMBER_NAME(Data_obj::cachedShaders,"cachedShaders");
	HX_MARK_MEMBER_NAME(Data_obj::cachedBlobs,"cachedBlobs");
	HX_MARK_MEMBER_NAME(Data_obj::cachedImages,"cachedImages");
	HX_MARK_MEMBER_NAME(Data_obj::cachedSounds,"cachedSounds");
	HX_MARK_MEMBER_NAME(Data_obj::cachedVideos,"cachedVideos");
	HX_MARK_MEMBER_NAME(Data_obj::cachedFonts,"cachedFonts");
	HX_MARK_MEMBER_NAME(Data_obj::dataPath,"dataPath");
	HX_MARK_MEMBER_NAME(Data_obj::loadingMeshes,"loadingMeshes");
	HX_MARK_MEMBER_NAME(Data_obj::loadingLights,"loadingLights");
	HX_MARK_MEMBER_NAME(Data_obj::loadingCameras,"loadingCameras");
	HX_MARK_MEMBER_NAME(Data_obj::loadingMaterials,"loadingMaterials");
	HX_MARK_MEMBER_NAME(Data_obj::loadingParticles,"loadingParticles");
	HX_MARK_MEMBER_NAME(Data_obj::loadingWorlds,"loadingWorlds");
	HX_MARK_MEMBER_NAME(Data_obj::loadingShaders,"loadingShaders");
	HX_MARK_MEMBER_NAME(Data_obj::loadingSceneRaws,"loadingSceneRaws");
	HX_MARK_MEMBER_NAME(Data_obj::assetsLoaded,"assetsLoaded");
	HX_MARK_MEMBER_NAME(Data_obj::loadingBlobs,"loadingBlobs");
	HX_MARK_MEMBER_NAME(Data_obj::loadingImages,"loadingImages");
	HX_MARK_MEMBER_NAME(Data_obj::loadingSounds,"loadingSounds");
	HX_MARK_MEMBER_NAME(Data_obj::loadingVideos,"loadingVideos");
	HX_MARK_MEMBER_NAME(Data_obj::loadingFonts,"loadingFonts");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Data_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Data_obj::cachedSceneRaws,"cachedSceneRaws");
	HX_VISIT_MEMBER_NAME(Data_obj::cachedMeshes,"cachedMeshes");
	HX_VISIT_MEMBER_NAME(Data_obj::cachedLights,"cachedLights");
	HX_VISIT_MEMBER_NAME(Data_obj::cachedCameras,"cachedCameras");
	HX_VISIT_MEMBER_NAME(Data_obj::cachedMaterials,"cachedMaterials");
	HX_VISIT_MEMBER_NAME(Data_obj::cachedParticles,"cachedParticles");
	HX_VISIT_MEMBER_NAME(Data_obj::cachedWorlds,"cachedWorlds");
	HX_VISIT_MEMBER_NAME(Data_obj::cachedShaders,"cachedShaders");
	HX_VISIT_MEMBER_NAME(Data_obj::cachedBlobs,"cachedBlobs");
	HX_VISIT_MEMBER_NAME(Data_obj::cachedImages,"cachedImages");
	HX_VISIT_MEMBER_NAME(Data_obj::cachedSounds,"cachedSounds");
	HX_VISIT_MEMBER_NAME(Data_obj::cachedVideos,"cachedVideos");
	HX_VISIT_MEMBER_NAME(Data_obj::cachedFonts,"cachedFonts");
	HX_VISIT_MEMBER_NAME(Data_obj::dataPath,"dataPath");
	HX_VISIT_MEMBER_NAME(Data_obj::loadingMeshes,"loadingMeshes");
	HX_VISIT_MEMBER_NAME(Data_obj::loadingLights,"loadingLights");
	HX_VISIT_MEMBER_NAME(Data_obj::loadingCameras,"loadingCameras");
	HX_VISIT_MEMBER_NAME(Data_obj::loadingMaterials,"loadingMaterials");
	HX_VISIT_MEMBER_NAME(Data_obj::loadingParticles,"loadingParticles");
	HX_VISIT_MEMBER_NAME(Data_obj::loadingWorlds,"loadingWorlds");
	HX_VISIT_MEMBER_NAME(Data_obj::loadingShaders,"loadingShaders");
	HX_VISIT_MEMBER_NAME(Data_obj::loadingSceneRaws,"loadingSceneRaws");
	HX_VISIT_MEMBER_NAME(Data_obj::assetsLoaded,"assetsLoaded");
	HX_VISIT_MEMBER_NAME(Data_obj::loadingBlobs,"loadingBlobs");
	HX_VISIT_MEMBER_NAME(Data_obj::loadingImages,"loadingImages");
	HX_VISIT_MEMBER_NAME(Data_obj::loadingSounds,"loadingSounds");
	HX_VISIT_MEMBER_NAME(Data_obj::loadingVideos,"loadingVideos");
	HX_VISIT_MEMBER_NAME(Data_obj::loadingFonts,"loadingFonts");
};

#endif

hx::Class Data_obj::__mClass;

static ::String Data_obj_sStaticFields[] = {
	HX_("cachedSceneRaws",b5,64,fe,48),
	HX_("cachedMeshes",1d,a1,bc,5c),
	HX_("cachedLights",5f,14,0d,3c),
	HX_("cachedCameras",6c,f2,b2,18),
	HX_("cachedMaterials",aa,29,e6,46),
	HX_("cachedParticles",2b,b3,5f,39),
	HX_("cachedWorlds",63,db,a9,1d),
	HX_("cachedShaders",ec,e9,07,95),
	HX_("cachedBlobs",34,b1,e6,2d),
	HX_("cachedImages",3a,3a,9d,52),
	HX_("cachedSounds",46,92,39,86),
	HX_("cachedVideos",1a,c1,a0,39),
	HX_("cachedFonts",82,f4,7b,7d),
	HX_("dataPath",ef,c4,c5,89),
	HX_("deleteAll",b6,1d,bd,f1),
	HX_("clearSceneData",49,46,e8,56),
	HX_("loadingMeshes",37,ff,ac,f1),
	HX_("getMesh",a3,f9,db,1a),
	HX_("deleteMesh",b8,27,a6,9b),
	HX_("loadingLights",79,72,fd,d0),
	HX_("getLight",60,a0,d3,d4),
	HX_("loadingCameras",12,eb,14,d6),
	HX_("getCamera",db,cf,e2,33),
	HX_("loadingMaterials",d0,17,34,9b),
	HX_("getMaterial",5d,1f,99,16),
	HX_("loadingParticles",51,a1,ad,8d),
	HX_("getParticle",fc,00,85,92),
	HX_("loadingWorlds",7d,39,9a,b2),
	HX_("getWorld",dc,a5,3b,2e),
	HX_("loadingShaders",92,e2,69,52),
	HX_("getShader",5b,48,77,99),
	HX_("loadingSceneRaws",db,52,4c,9d),
	HX_("getSceneRaw",b2,4e,8a,e7),
	HX_("returnSceneRaw",cc,1c,b2,c6),
	HX_("getMeshRawByName",a7,ed,94,e4),
	HX_("getLightRawByName",4a,07,73,f4),
	HX_("getCameraRawByName",6f,90,4d,cb),
	HX_("getMaterialRawByName",ad,40,a6,82),
	HX_("getParticleRawByName",2e,b3,f6,92),
	HX_("getWorldRawByName",4e,72,74,c6),
	HX_("getShaderRawByName",ef,07,a6,20),
	HX_("getSpeakerRawByName",81,6f,ea,67),
	HX_("assetsLoaded",e8,c8,28,8e),
	HX_("loadingBlobs",5a,14,8d,aa),
	HX_("getBlob",13,ed,9b,13),
	HX_("loadingImages",54,98,8d,e7),
	HX_("getImage",e5,2e,40,1d),
	HX_("loadingSounds",60,f0,29,1b),
	HX_("getSound",59,9c,a3,e0),
	HX_("loadingVideos",34,1f,91,ce),
	HX_("getVideo",05,24,d3,96),
	HX_("loadingFonts",a8,57,22,fa),
	HX_("getFont",85,0d,43,16),
	::String(null())
};

void Data_obj::__register()
{
	Data_obj _hx_dummy;
	Data_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.Data",68,80,30,b4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Data_obj::__GetStatic;
	__mClass->mSetStaticField = &Data_obj::__SetStatic;
	__mClass->mMarkFunc = Data_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Data_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Data_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Data_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Data_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Data_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Data_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_8_boot)
HXDLIN(   8)		cachedSceneRaws =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_9_boot)
HXDLIN(   9)		cachedMeshes =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_10_boot)
HXDLIN(  10)		cachedLights =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_11_boot)
HXDLIN(  11)		cachedCameras =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_12_boot)
HXDLIN(  12)		cachedMaterials =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_13_boot)
HXDLIN(  13)		cachedParticles =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_14_boot)
HXDLIN(  14)		cachedWorlds =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_16_boot)
HXDLIN(  16)		cachedShaders =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_18_boot)
HXDLIN(  18)		cachedBlobs =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_19_boot)
HXDLIN(  19)		cachedImages =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_20_boot)
HXDLIN(  20)		cachedSounds =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_21_boot)
HXDLIN(  21)		cachedVideos =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_22_boot)
HXDLIN(  22)		cachedFonts =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_27_boot)
HXDLIN(  27)		dataPath = HX_("",00,00,00,00);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_72_boot)
HXDLIN(  72)		loadingMeshes =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_99_boot)
HXDLIN(  99)		loadingLights =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_116_boot)
HXDLIN( 116)		loadingCameras =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_133_boot)
HXDLIN( 133)		loadingMaterials =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_150_boot)
HXDLIN( 150)		loadingParticles =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_167_boot)
HXDLIN( 167)		loadingWorlds =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_203_boot)
HXDLIN( 203)		loadingShaders =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_223_boot)
HXDLIN( 223)		loadingSceneRaws =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_514b96931615595e_379_boot)
HXDLIN( 379)		assetsLoaded = 0;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_381_boot)
HXDLIN( 381)		loadingBlobs =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_401_boot)
HXDLIN( 401)		loadingImages =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_426_boot)
HXDLIN( 426)		loadingSounds =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_467_boot)
HXDLIN( 467)		loadingVideos =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_514b96931615595e_490_boot)
HXDLIN( 490)		loadingFonts =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace iron
} // end namespace data
