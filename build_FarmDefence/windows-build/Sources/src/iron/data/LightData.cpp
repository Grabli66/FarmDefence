// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Log
#include <hxinc/haxe/Log.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <hxinc/iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_data_LightData
#include <hxinc/iron/data/LightData.h>
#endif
#ifndef INCLUDED_iron_data_TLightData
#include <hxinc/iron/data/TLightData.h>
#endif
#ifndef INCLUDED_iron_data_TSceneFormat
#include <hxinc/iron/data/TSceneFormat.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_68c4cf683364e876_6_new,"iron.data.LightData","new",0x75290514,"iron.data.LightData.new","iron/data/LightData.hx",6,0x0291a53c)
HX_DEFINE_STACK_FRAME(_hx_pos_68c4cf683364e876_20_new,"iron.data.LightData","new",0x75290514,"iron.data.LightData.new","iron/data/LightData.hx",20,0x0291a53c)
HX_LOCAL_STACK_FRAME(_hx_pos_68c4cf683364e876_29_typeToInt,"iron.data.LightData","typeToInt",0xb4b5ccce,"iron.data.LightData.typeToInt","iron/data/LightData.hx",29,0x0291a53c)
HX_LOCAL_STACK_FRAME(_hx_pos_68c4cf683364e876_39_parse,"iron.data.LightData","parse",0xf96859e7,"iron.data.LightData.parse","iron/data/LightData.hx",39,0x0291a53c)
namespace iron{
namespace data{

void LightData_obj::__construct( ::iron::data::TLightData raw, ::Dynamic done){
            	HX_STACKFRAME(&_hx_pos_68c4cf683364e876_6_new)
HXLINE(  11)		this->colorTexture = null();
HXLINE(  13)		 ::iron::data::LightData _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  14)		super::__construct();
HXLINE(  16)		this->raw = raw;
HXLINE(  17)		this->name = raw->name;
HXLINE(  19)		if (hx::IsNotNull( raw->color_texture )) {
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::iron::data::LightData,_gthis, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::kha::Image image){
            				HX_STACKFRAME(&_hx_pos_68c4cf683364e876_20_new)
HXLINE(  21)				_gthis->colorTexture = image;
HXLINE(  22)				done(_gthis);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  20)			::iron::data::Data_obj::getImage(raw->color_texture, ::Dynamic(new _hx_Closure_0(_gthis,done)),null(),null());
            		}
            		else {
HXLINE(  25)			done(hx::ObjectPtr<OBJ_>(this));
            		}
            	}

Dynamic LightData_obj::__CreateEmpty() { return new LightData_obj; }

void *LightData_obj::_hx_vtable = 0;

Dynamic LightData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< LightData_obj > _hx_result = new LightData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool LightData_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25e6a720) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x25e6a720;
	} else {
		return inClassId==(int)0x77319c4e;
	}
}

int LightData_obj::typeToInt(::String s){
            	HX_STACKFRAME(&_hx_pos_68c4cf683364e876_29_typeToInt)
HXDLIN(  29)		::String _hx_switch_0 = s;
            		if (  (_hx_switch_0==HX_("area",8d,8b,74,40)) ){
HXLINE(  33)			return 3;
HXDLIN(  33)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("point",50,b4,8f,c6)) ){
HXLINE(  31)			return 1;
HXDLIN(  31)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("spot",02,e7,58,4c)) ){
HXLINE(  32)			return 2;
HXDLIN(  32)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("sun",8c,a9,57,00)) ){
HXLINE(  30)			return 0;
HXDLIN(  30)			goto _hx_goto_2;
            		}
            		/* default */{
HXLINE(  34)			return 0;
            		}
            		_hx_goto_2:;
HXLINE(  29)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LightData_obj,typeToInt,return )

void LightData_obj::parse(::String name,::String id, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,id, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::iron::data::TSceneFormat format){
            			HX_GC_STACKFRAME(&_hx_pos_68c4cf683364e876_39_parse)
HXLINE(  40)			 ::iron::data::TLightData raw = ::iron::data::Data_obj::getLightRawByName(format->light_datas,id);
HXLINE(  41)			if (hx::IsNull( raw )) {
HXLINE(  42)				 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  42)				_hx_tmp(((HX_("Light data \"",d6,ca,26,b0) + id) + HX_("\" not found!",4a,86,fb,0a)),hx::SourceInfo(HX_("Sources/iron/data/LightData.hx",93,2c,66,d2),42,HX_("iron.data.LightData",22,2b,dc,69),HX_("parse",33,90,55,bd)));
HXLINE(  43)				done(null());
            			}
HXLINE(  45)			 ::iron::data::LightData_obj::__alloc( HX_CTX ,raw,done);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_68c4cf683364e876_39_parse)
HXDLIN(  39)		::iron::data::Data_obj::getSceneRaw(name, ::Dynamic(new _hx_Closure_0(id,done)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(LightData_obj,parse,(void))


hx::ObjectPtr< LightData_obj > LightData_obj::__new( ::iron::data::TLightData raw, ::Dynamic done) {
	hx::ObjectPtr< LightData_obj > __this = new LightData_obj();
	__this->__construct(raw,done);
	return __this;
}

hx::ObjectPtr< LightData_obj > LightData_obj::__alloc(hx::Ctx *_hx_ctx, ::iron::data::TLightData raw, ::Dynamic done) {
	LightData_obj *__this = (LightData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(LightData_obj), true, "iron.data.LightData"));
	*(void **)__this = LightData_obj::_hx_vtable;
	__this->__construct(raw,done);
	return __this;
}

LightData_obj::LightData_obj()
{
}

void LightData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LightData);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(raw,"raw");
	HX_MARK_MEMBER_NAME(colorTexture,"colorTexture");
	HX_MARK_END_CLASS();
}

void LightData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(raw,"raw");
	HX_VISIT_MEMBER_NAME(colorTexture,"colorTexture");
}

hx::Val LightData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"raw") ) { return hx::Val( raw ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"colorTexture") ) { return hx::Val( colorTexture ); }
	}
	return super::__Field(inName,inCallProp);
}

bool LightData_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { outValue = parse_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"typeToInt") ) { outValue = typeToInt_dyn(); return true; }
	}
	return false;
}

hx::Val LightData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"raw") ) { raw=inValue.Cast<  ::iron::data::TLightData >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"colorTexture") ) { colorTexture=inValue.Cast<  ::kha::Image >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LightData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("raw",e8,d5,56,00));
	outFields->push(HX_("colorTexture",b8,c1,37,c8));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo LightData_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(LightData_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsObject /*::iron::data::TLightData*/ ,(int)offsetof(LightData_obj,raw),HX_("raw",e8,d5,56,00)},
	{hx::fsObject /*::kha::Image*/ ,(int)offsetof(LightData_obj,colorTexture),HX_("colorTexture",b8,c1,37,c8)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *LightData_obj_sStaticStorageInfo = 0;
#endif

static ::String LightData_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("raw",e8,d5,56,00),
	HX_("colorTexture",b8,c1,37,c8),
	::String(null()) };

hx::Class LightData_obj::__mClass;

static ::String LightData_obj_sStaticFields[] = {
	HX_("typeToInt",1a,19,ea,d8),
	HX_("parse",33,90,55,bd),
	::String(null())
};

void LightData_obj::__register()
{
	LightData_obj _hx_dummy;
	LightData_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.LightData",22,2b,dc,69);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &LightData_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(LightData_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(LightData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< LightData_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LightData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LightData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
