// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <hxinc/Reflect.h>
#endif
#ifndef INCLUDED_StringTools
#include <hxinc/StringTools.h>
#endif
#ifndef INCLUDED_iron_data_ShaderContext
#include <hxinc/iron/data/ShaderContext.h>
#endif
#ifndef INCLUDED_iron_data_TBindTexture
#include <hxinc/iron/data/TBindTexture.h>
#endif
#ifndef INCLUDED_iron_data_TShaderConstant
#include <hxinc/iron/data/TShaderConstant.h>
#endif
#ifndef INCLUDED_iron_data_TShaderContext
#include <hxinc/iron/data/TShaderContext.h>
#endif
#ifndef INCLUDED_iron_data_TShaderOverride
#include <hxinc/iron/data/TShaderOverride.h>
#endif
#ifndef INCLUDED_iron_data_TTextureUnit
#include <hxinc/iron/data/TTextureUnit.h>
#endif
#ifndef INCLUDED_iron_data_TVertexData
#include <hxinc/iron/data/TVertexData.h>
#endif
#ifndef INCLUDED_kha_Shaders
#include <hxinc/kha/Shaders.h>
#endif
#ifndef INCLUDED_kha_graphics4_BlendingFactor
#include <hxinc/kha/graphics4/BlendingFactor.h>
#endif
#ifndef INCLUDED_kha_graphics4_BlendingOperation
#include <hxinc/kha/graphics4/BlendingOperation.h>
#endif
#ifndef INCLUDED_kha_graphics4_CompareMode
#include <hxinc/kha/graphics4/CompareMode.h>
#endif
#ifndef INCLUDED_kha_graphics4_ConstantLocation
#include <hxinc/kha/graphics4/ConstantLocation.h>
#endif
#ifndef INCLUDED_kha_graphics4_CullMode
#include <hxinc/kha/graphics4/CullMode.h>
#endif
#ifndef INCLUDED_kha_graphics4_FragmentShader
#include <hxinc/kha/graphics4/FragmentShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_GeometryShader
#include <hxinc/kha/graphics4/GeometryShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <hxinc/kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_MipMapFilter
#include <hxinc/kha/graphics4/MipMapFilter.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <hxinc/kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <hxinc/kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_StencilAction
#include <hxinc/kha/graphics4/StencilAction.h>
#endif
#ifndef INCLUDED_kha_graphics4_TessellationControlShader
#include <hxinc/kha/graphics4/TessellationControlShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_TessellationEvaluationShader
#include <hxinc/kha/graphics4/TessellationEvaluationShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureAddressing
#include <hxinc/kha/graphics4/TextureAddressing.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureFilter
#include <hxinc/kha/graphics4/TextureFilter.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureUnit
#include <hxinc/kha/graphics4/TextureUnit.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexShader
#include <hxinc/kha/graphics4/VertexShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexStructure
#include <hxinc/kha/graphics4/VertexStructure.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_66_new,"iron.data.ShaderContext","new",0x4728323e,"iron.data.ShaderContext.new","iron/data/ShaderData.hx",66,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_94_compile,"iron.data.ShaderContext","compile",0x757cce51,"iron.data.ShaderContext.compile","iron/data/ShaderData.hx",94,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_241_finishCompile,"iron.data.ShaderContext","finishCompile",0xef5cb0be,"iron.data.ShaderContext.finishCompile","iron/data/ShaderData.hx",241,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_262_sizeToVD,"iron.data.ShaderContext","sizeToVD",0xc0ba202c,"iron.data.ShaderContext.sizeToVD","iron/data/ShaderData.hx",262,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_270_parseVertexStructure,"iron.data.ShaderContext","parseVertexStructure",0x8406199e,"iron.data.ShaderContext.parseVertexStructure","iron/data/ShaderData.hx",270,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_299_deleteShader,"iron.data.ShaderContext","deleteShader",0xba645812,"iron.data.ShaderContext.deleteShader","iron/data/ShaderData.hx",299,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_302_delete,"iron.data.ShaderContext","delete",0xd0f45d0d,"iron.data.ShaderContext.delete","iron/data/ShaderData.hx",302,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_312_getCompareMode,"iron.data.ShaderContext","getCompareMode",0x14017094,"iron.data.ShaderContext.getCompareMode","iron/data/ShaderData.hx",312,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_326_getCullMode,"iron.data.ShaderContext","getCullMode",0x77c738c9,"iron.data.ShaderContext.getCullMode","iron/data/ShaderData.hx",326,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_334_getBlendingOperation,"iron.data.ShaderContext","getBlendingOperation",0x900523a2,"iron.data.ShaderContext.getBlendingOperation","iron/data/ShaderData.hx",334,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_345_getBlendingFactor,"iron.data.ShaderContext","getBlendingFactor",0x5b384e74,"iron.data.ShaderContext.getBlendingFactor","iron/data/ShaderData.hx",345,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_361_getTextureAddresing,"iron.data.ShaderContext","getTextureAddresing",0x3b559a9c,"iron.data.ShaderContext.getTextureAddresing","iron/data/ShaderData.hx",361,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_369_getTextureFilter,"iron.data.ShaderContext","getTextureFilter",0x05fee7df,"iron.data.ShaderContext.getTextureFilter","iron/data/ShaderData.hx",369,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_377_getMipmapFilter,"iron.data.ShaderContext","getMipmapFilter",0x269da3f4,"iron.data.ShaderContext.getMipmapFilter","iron/data/ShaderData.hx",377,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_385_addConstant,"iron.data.ShaderContext","addConstant",0x77f06883,"iron.data.ShaderContext.addConstant","iron/data/ShaderData.hx",385,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_388_addTexture,"iron.data.ShaderContext","addTexture",0xb913aa9c,"iron.data.ShaderContext.addTexture","iron/data/ShaderData.hx",388,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_394_setTextureParameters,"iron.data.ShaderContext","setTextureParameters",0xd024ddc5,"iron.data.ShaderContext.setTextureParameters","iron/data/ShaderData.hx",394,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_287_getStructureRect,"iron.data.ShaderContext","getStructureRect",0xc52b57e3,"iron.data.ShaderContext.getStructureRect","iron/data/ShaderData.hx",287,0x8b5e6fd1)
HX_LOCAL_STACK_FRAME(_hx_pos_ee6dc5fa0be63533_77_boot,"iron.data.ShaderContext","boot",0xf41cc494,"iron.data.ShaderContext.boot","iron/data/ShaderData.hx",77,0x8b5e6fd1)
namespace iron{
namespace data{

void ShaderContext_obj::__construct( ::iron::data::TShaderContext raw, ::Dynamic done, ::iron::data::TShaderOverride overrideContext){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_66_new)
HXLINE(  75)		this->instancingType = 0;
HXLINE(  80)		this->raw = raw;
HXLINE(  81)		this->overrideContext = overrideContext;
HXLINE(  83)		if ((raw->name == HX_("rect",24,4d,a7,4b))) {
HXLINE(  84)			this->structure = ::iron::data::ShaderContext_obj::getStructureRect();
HXLINE(  85)			this->instancingType = 0;
            		}
            		else {
HXLINE(  88)			this->parseVertexStructure();
            		}
HXLINE(  91)		this->compile(done);
            	}

Dynamic ShaderContext_obj::__CreateEmpty() { return new ShaderContext_obj; }

void *ShaderContext_obj::_hx_vtable = 0;

Dynamic ShaderContext_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ShaderContext_obj > _hx_result = new ShaderContext_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool ShaderContext_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x44627278;
}

void ShaderContext_obj::compile( ::Dynamic done){
            	HX_GC_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_94_compile)
HXLINE(  95)		if (hx::IsNotNull( this->pipeState )) {
HXLINE(  95)			this->pipeState->_hx_delete();
            		}
HXLINE(  96)		this->pipeState =  ::kha::graphics4::PipelineState_obj::__alloc( HX_CTX );
HXLINE(  97)		this->constants = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  98)		this->textureUnits = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  99)		this->paramsSet = ::Array_obj< bool >::__new(0);
HXLINE( 102)		if ((this->instancingType > 0)) {
HXLINE( 103)			 ::kha::graphics4::VertexStructure instStruct =  ::kha::graphics4::VertexStructure_obj::__alloc( HX_CTX );
HXLINE( 104)			instStruct->add(HX_("ipos",cb,c4,bc,45),2);
HXLINE( 105)			bool _hx_tmp;
HXDLIN( 105)			if ((this->instancingType != 2)) {
HXLINE( 105)				_hx_tmp = (this->instancingType == 4);
            			}
            			else {
HXLINE( 105)				_hx_tmp = true;
            			}
HXDLIN( 105)			if (_hx_tmp) {
HXLINE( 106)				instStruct->add(HX_("irot",4e,49,be,45),2);
            			}
HXLINE( 108)			bool _hx_tmp1;
HXDLIN( 108)			if ((this->instancingType != 3)) {
HXLINE( 108)				_hx_tmp1 = (this->instancingType == 4);
            			}
            			else {
HXLINE( 108)				_hx_tmp1 = true;
            			}
HXDLIN( 108)			if (_hx_tmp1) {
HXLINE( 109)				instStruct->add(HX_("iscl",13,01,bf,45),2);
            			}
HXLINE( 111)			instStruct->instanced = true;
HXLINE( 112)			this->pipeState->inputLayout = ::Array_obj< ::Dynamic>::__new(2)->init(0,this->structure)->init(1,instStruct);
            		}
            		else {
HXLINE( 116)			this->pipeState->inputLayout = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->structure);
            		}
HXLINE( 120)		this->pipeState->depthWrite = this->raw->depth_write;
HXLINE( 121)		this->pipeState->depthMode = this->getCompareMode(this->raw->compare_mode);
HXLINE( 124)		if (hx::IsNotNull( this->raw->stencil_mode )) {
HXLINE( 125)			if ((this->raw->stencil_mode == HX_("always",cf,0e,d7,46))) {
HXLINE( 126)				this->pipeState->stencilMode = ::kha::graphics4::CompareMode_obj::Always_dyn();
            			}
            			else {
HXLINE( 127)				if ((this->raw->stencil_mode == HX_("equal",b4,cf,82,72))) {
HXLINE( 128)					this->pipeState->stencilMode = ::kha::graphics4::CompareMode_obj::Equal_dyn();
            				}
            				else {
HXLINE( 129)					if ((this->raw->stencil_mode == HX_("not_equal",48,80,be,b6))) {
HXLINE( 130)						this->pipeState->stencilMode = ::kha::graphics4::CompareMode_obj::NotEqual_dyn();
            					}
            				}
            			}
            		}
HXLINE( 132)		if (hx::IsNotNull( this->raw->stencil_pass )) {
HXLINE( 133)			if ((this->raw->stencil_pass == HX_("replace",34,48,28,ab))) {
HXLINE( 134)				this->pipeState->stencilBothPass = ::kha::graphics4::StencilAction_obj::Replace_dyn();
            			}
            			else {
HXLINE( 135)				if ((this->raw->stencil_pass == HX_("keep",85,d0,06,47))) {
HXLINE( 136)					this->pipeState->stencilBothPass = ::kha::graphics4::StencilAction_obj::Keep_dyn();
            				}
            			}
            		}
HXLINE( 138)		bool _hx_tmp2;
HXDLIN( 138)		if (hx::IsNotNull( this->raw->stencil_fail )) {
HXLINE( 138)			_hx_tmp2 = (this->raw->stencil_fail == HX_("keep",85,d0,06,47));
            		}
            		else {
HXLINE( 138)			_hx_tmp2 = false;
            		}
HXDLIN( 138)		if (_hx_tmp2) {
HXLINE( 139)			this->pipeState->stencilDepthFail = ::kha::graphics4::StencilAction_obj::Keep_dyn();
HXLINE( 140)			this->pipeState->stencilFail = ::kha::graphics4::StencilAction_obj::Keep_dyn();
            		}
HXLINE( 142)		if (hx::IsNotNull( this->raw->stencil_reference_value )) {
HXLINE( 143)			this->pipeState->stencilReferenceValue = ( (int)(this->raw->stencil_reference_value) );
            		}
HXLINE( 149)		this->pipeState->cullMode = this->getCullMode(this->raw->cull_mode);
HXLINE( 152)		if (hx::IsNotNull( this->raw->blend_source )) {
HXLINE( 152)			this->pipeState->blendSource = this->getBlendingFactor(this->raw->blend_source);
            		}
HXLINE( 153)		if (hx::IsNotNull( this->raw->blend_destination )) {
HXLINE( 153)			this->pipeState->blendDestination = this->getBlendingFactor(this->raw->blend_destination);
            		}
HXLINE( 154)		if (hx::IsNotNull( this->raw->blend_operation )) {
HXLINE( 154)			this->pipeState->blendOperation = this->getBlendingOperation(this->raw->blend_operation);
            		}
HXLINE( 155)		if (hx::IsNotNull( this->raw->alpha_blend_source )) {
HXLINE( 155)			this->pipeState->alphaBlendSource = this->getBlendingFactor(this->raw->alpha_blend_source);
            		}
HXLINE( 156)		if (hx::IsNotNull( this->raw->alpha_blend_destination )) {
HXLINE( 156)			this->pipeState->alphaBlendDestination = this->getBlendingFactor(this->raw->alpha_blend_destination);
            		}
HXLINE( 157)		if (hx::IsNotNull( this->raw->alpha_blend_operation )) {
HXLINE( 157)			this->pipeState->alphaBlendOperation = this->getBlendingOperation(this->raw->alpha_blend_operation);
            		}
HXLINE( 160)		if (hx::IsNotNull( this->raw->color_write_red )) {
HXLINE( 160)			this->pipeState->colorWriteMaskRed = ( (bool)(this->raw->color_write_red) );
            		}
HXLINE( 161)		if (hx::IsNotNull( this->raw->color_write_green )) {
HXLINE( 161)			this->pipeState->colorWriteMaskGreen = ( (bool)(this->raw->color_write_green) );
            		}
HXLINE( 162)		if (hx::IsNotNull( this->raw->color_write_blue )) {
HXLINE( 162)			this->pipeState->colorWriteMaskBlue = ( (bool)(this->raw->color_write_blue) );
            		}
HXLINE( 163)		if (hx::IsNotNull( this->raw->color_write_alpha )) {
HXLINE( 163)			this->pipeState->colorWriteMaskAlpha = ( (bool)(this->raw->color_write_alpha) );
            		}
HXLINE( 166)		if (hx::IsNotNull( this->raw->conservative_raster )) {
HXLINE( 166)			this->pipeState->conservativeRasterization = ( (bool)(this->raw->conservative_raster) );
            		}
HXLINE( 169)		if (( (bool)(this->raw->shader_from_source) )) {
HXLINE( 170)			this->pipeState->fragmentShader = ::kha::graphics4::FragmentShader_obj::fromSource(this->raw->fragment_shader);
HXLINE( 171)			this->pipeState->vertexShader = ::kha::graphics4::VertexShader_obj::fromSource(this->raw->vertex_shader);
HXLINE( 181)			this->finishCompile(done);
            		}
            		else {
HXLINE( 223)			::String _hx_tmp3 = ::StringTools_obj::replace(this->raw->fragment_shader,HX_(".",2e,00,00,00),HX_("_",5f,00,00,00));
HXDLIN( 223)			this->pipeState->fragmentShader = ( ( ::kha::graphics4::FragmentShader)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),_hx_tmp3)) );
HXLINE( 224)			::String _hx_tmp4 = ::StringTools_obj::replace(this->raw->vertex_shader,HX_(".",2e,00,00,00),HX_("_",5f,00,00,00));
HXDLIN( 224)			this->pipeState->vertexShader = ( ( ::kha::graphics4::VertexShader)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),_hx_tmp4)) );
HXLINE( 226)			if (hx::IsNotNull( this->raw->geometry_shader )) {
HXLINE( 227)				::String _hx_tmp5 = ::StringTools_obj::replace(this->raw->geometry_shader,HX_(".",2e,00,00,00),HX_("_",5f,00,00,00));
HXDLIN( 227)				this->pipeState->geometryShader = ( ( ::kha::graphics4::GeometryShader)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),_hx_tmp5)) );
            			}
HXLINE( 229)			if (hx::IsNotNull( this->raw->tesscontrol_shader )) {
HXLINE( 230)				::String _hx_tmp6 = ::StringTools_obj::replace(this->raw->tesscontrol_shader,HX_(".",2e,00,00,00),HX_("_",5f,00,00,00));
HXDLIN( 230)				this->pipeState->tessellationControlShader = ( ( ::kha::graphics4::TessellationControlShader)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),_hx_tmp6)) );
            			}
HXLINE( 232)			if (hx::IsNotNull( this->raw->tesseval_shader )) {
HXLINE( 233)				::String _hx_tmp7 = ::StringTools_obj::replace(this->raw->tesseval_shader,HX_(".",2e,00,00,00),HX_("_",5f,00,00,00));
HXDLIN( 233)				this->pipeState->tessellationEvaluationShader = ( ( ::kha::graphics4::TessellationEvaluationShader)(::Reflect_obj::field(hx::ClassOf< ::kha::Shaders >(),_hx_tmp7)) );
            			}
HXLINE( 235)			this->finishCompile(done);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderContext_obj,compile,(void))

void ShaderContext_obj::finishCompile( ::Dynamic done){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_241_finishCompile)
HXLINE( 243)		if (hx::IsNotNull( this->overrideContext )) {
HXLINE( 244)			if (hx::IsNotNull( this->overrideContext->cull_mode )) {
HXLINE( 245)				this->pipeState->cullMode = this->getCullMode(this->overrideContext->cull_mode);
            			}
            		}
HXLINE( 249)		this->pipeState->compile();
HXLINE( 251)		if (hx::IsNotNull( this->raw->constants )) {
HXLINE( 252)			int _g = 0;
HXDLIN( 252)			::Array< ::Dynamic> _g1 = this->raw->constants;
HXDLIN( 252)			while((_g < _g1->length)){
HXLINE( 252)				 ::iron::data::TShaderConstant c = _g1->__get(_g).StaticCast<  ::iron::data::TShaderConstant >();
HXDLIN( 252)				_g = (_g + 1);
HXDLIN( 252)				this->addConstant(c);
            			}
            		}
HXLINE( 255)		if (hx::IsNotNull( this->raw->texture_units )) {
HXLINE( 256)			int _g2 = 0;
HXDLIN( 256)			::Array< ::Dynamic> _g11 = this->raw->texture_units;
HXDLIN( 256)			while((_g2 < _g11->length)){
HXLINE( 256)				 ::iron::data::TTextureUnit tu = _g11->__get(_g2).StaticCast<  ::iron::data::TTextureUnit >();
HXDLIN( 256)				_g2 = (_g2 + 1);
HXDLIN( 256)				this->addTexture(tu);
            			}
            		}
HXLINE( 259)		done(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderContext_obj,finishCompile,(void))

int ShaderContext_obj::sizeToVD(int size){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_262_sizeToVD)
HXLINE( 263)		if ((size == 1)) {
HXLINE( 263)			return 0;
            		}
            		else {
HXLINE( 264)			if ((size == 2)) {
HXLINE( 264)				return 1;
            			}
            			else {
HXLINE( 265)				if ((size == 3)) {
HXLINE( 265)					return 2;
            				}
            				else {
HXLINE( 266)					if ((size == 4)) {
HXLINE( 266)						return 3;
            					}
            				}
            			}
            		}
HXLINE( 267)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderContext_obj,sizeToVD,return )

void ShaderContext_obj::parseVertexStructure(){
            	HX_GC_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_270_parseVertexStructure)
HXLINE( 271)		this->structure =  ::kha::graphics4::VertexStructure_obj::__alloc( HX_CTX );
HXLINE( 272)		bool ipos = false;
HXLINE( 273)		bool irot = false;
HXLINE( 274)		bool iscl = false;
HXLINE( 275)		{
HXLINE( 275)			int _g = 0;
HXDLIN( 275)			::Array< ::Dynamic> _g1 = this->raw->vertex_structure;
HXDLIN( 275)			while((_g < _g1->length)){
HXLINE( 275)				 ::iron::data::TVertexData vs = _g1->__get(_g).StaticCast<  ::iron::data::TVertexData >();
HXDLIN( 275)				_g = (_g + 1);
HXLINE( 276)				if ((vs->name == HX_("ipos",cb,c4,bc,45))) {
HXLINE( 276)					ipos = true;
HXDLIN( 276)					continue;
            				}
HXLINE( 277)				if ((vs->name == HX_("irot",4e,49,be,45))) {
HXLINE( 277)					ipos = true;
HXDLIN( 277)					continue;
            				}
HXLINE( 278)				if ((vs->name == HX_("iscl",13,01,bf,45))) {
HXLINE( 278)					ipos = true;
HXDLIN( 278)					continue;
            				}
HXLINE( 279)				 ::kha::graphics4::VertexStructure _hx_tmp = this->structure;
HXDLIN( 279)				::String vs1 = vs->name;
HXDLIN( 279)				_hx_tmp->add(vs1,this->sizeToVD(vs->size));
            			}
            		}
HXLINE( 281)		bool _hx_tmp1;
HXDLIN( 281)		bool _hx_tmp2;
HXDLIN( 281)		if (ipos) {
HXLINE( 281)			_hx_tmp2 = !(irot);
            		}
            		else {
HXLINE( 281)			_hx_tmp2 = false;
            		}
HXDLIN( 281)		if (_hx_tmp2) {
HXLINE( 281)			_hx_tmp1 = !(iscl);
            		}
            		else {
HXLINE( 281)			_hx_tmp1 = false;
            		}
HXDLIN( 281)		if (_hx_tmp1) {
HXLINE( 281)			this->instancingType = 1;
            		}
            		else {
HXLINE( 282)			bool _hx_tmp3;
HXDLIN( 282)			bool _hx_tmp4;
HXDLIN( 282)			if (ipos) {
HXLINE( 282)				_hx_tmp4 = irot;
            			}
            			else {
HXLINE( 282)				_hx_tmp4 = false;
            			}
HXDLIN( 282)			if (_hx_tmp4) {
HXLINE( 282)				_hx_tmp3 = !(iscl);
            			}
            			else {
HXLINE( 282)				_hx_tmp3 = false;
            			}
HXDLIN( 282)			if (_hx_tmp3) {
HXLINE( 282)				this->instancingType = 2;
            			}
            			else {
HXLINE( 283)				bool _hx_tmp5;
HXDLIN( 283)				bool _hx_tmp6;
HXDLIN( 283)				if (ipos) {
HXLINE( 283)					_hx_tmp6 = !(irot);
            				}
            				else {
HXLINE( 283)					_hx_tmp6 = false;
            				}
HXDLIN( 283)				if (_hx_tmp6) {
HXLINE( 283)					_hx_tmp5 = iscl;
            				}
            				else {
HXLINE( 283)					_hx_tmp5 = false;
            				}
HXDLIN( 283)				if (_hx_tmp5) {
HXLINE( 283)					this->instancingType = 3;
            				}
            				else {
HXLINE( 284)					bool _hx_tmp7;
HXDLIN( 284)					bool _hx_tmp8;
HXDLIN( 284)					if (ipos) {
HXLINE( 284)						_hx_tmp8 = irot;
            					}
            					else {
HXLINE( 284)						_hx_tmp8 = false;
            					}
HXDLIN( 284)					if (_hx_tmp8) {
HXLINE( 284)						_hx_tmp7 = iscl;
            					}
            					else {
HXLINE( 284)						_hx_tmp7 = false;
            					}
HXDLIN( 284)					if (_hx_tmp7) {
HXLINE( 284)						this->instancingType = 4;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ShaderContext_obj,parseVertexStructure,(void))

void ShaderContext_obj::deleteShader( ::Dynamic shader){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_299_deleteShader)
HXDLIN( 299)		shader->__Field(HX_("delete",2b,c0,d8,6a),hx::paccDynamic)();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderContext_obj,deleteShader,(void))

void ShaderContext_obj::_hx_delete(){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_302_delete)
HXLINE( 303)		if (hx::IsNotNull( this->pipeState->fragmentShader )) {
HXLINE( 303)			this->pipeState->fragmentShader->__Field(HX_("delete",2b,c0,d8,6a),hx::paccDynamic)();
            		}
HXLINE( 304)		if (hx::IsNotNull( this->pipeState->vertexShader )) {
HXLINE( 304)			this->pipeState->vertexShader->__Field(HX_("delete",2b,c0,d8,6a),hx::paccDynamic)();
            		}
HXLINE( 305)		if (hx::IsNotNull( this->pipeState->geometryShader )) {
HXLINE( 305)			this->pipeState->geometryShader->__Field(HX_("delete",2b,c0,d8,6a),hx::paccDynamic)();
            		}
HXLINE( 306)		if (hx::IsNotNull( this->pipeState->tessellationControlShader )) {
HXLINE( 306)			this->pipeState->tessellationControlShader->__Field(HX_("delete",2b,c0,d8,6a),hx::paccDynamic)();
            		}
HXLINE( 307)		if (hx::IsNotNull( this->pipeState->tessellationEvaluationShader )) {
HXLINE( 307)			this->pipeState->tessellationEvaluationShader->__Field(HX_("delete",2b,c0,d8,6a),hx::paccDynamic)();
            		}
HXLINE( 308)		this->pipeState->_hx_delete();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ShaderContext_obj,_hx_delete,(void))

 ::kha::graphics4::CompareMode ShaderContext_obj::getCompareMode(::String s){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_312_getCompareMode)
HXDLIN( 312)		::String _hx_switch_0 = s;
            		if (  (_hx_switch_0==HX_("always",cf,0e,d7,46)) ){
HXLINE( 313)			return ::kha::graphics4::CompareMode_obj::Always_dyn();
HXDLIN( 313)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_0==HX_("equal",b4,cf,82,72)) ){
HXLINE( 319)			return ::kha::graphics4::CompareMode_obj::Equal_dyn();
HXDLIN( 319)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_0==HX_("greater",fa,90,c0,b7)) ){
HXLINE( 317)			return ::kha::graphics4::CompareMode_obj::Greater_dyn();
HXDLIN( 317)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_0==HX_("greater_equal",6f,9f,ec,24)) ){
HXLINE( 318)			return ::kha::graphics4::CompareMode_obj::GreaterEqual_dyn();
HXDLIN( 318)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_0==HX_("less",59,13,b0,47)) ){
HXLINE( 315)			return ::kha::graphics4::CompareMode_obj::Less_dyn();
HXDLIN( 315)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_0==HX_("less_equal",0e,b3,e0,26)) ){
HXLINE( 316)			return ::kha::graphics4::CompareMode_obj::LessEqual_dyn();
HXDLIN( 316)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_0==HX_("never",8c,3e,30,99)) ){
HXLINE( 314)			return ::kha::graphics4::CompareMode_obj::Never_dyn();
HXDLIN( 314)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_0==HX_("not_equal",48,80,be,b6)) ){
HXLINE( 320)			return ::kha::graphics4::CompareMode_obj::NotEqual_dyn();
HXDLIN( 320)			goto _hx_goto_10;
            		}
            		/* default */{
HXLINE( 321)			return ::kha::graphics4::CompareMode_obj::Less_dyn();
            		}
            		_hx_goto_10:;
HXLINE( 312)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderContext_obj,getCompareMode,return )

 ::kha::graphics4::CullMode ShaderContext_obj::getCullMode(::String s){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_326_getCullMode)
HXDLIN( 326)		::String _hx_switch_0 = s;
            		if (  (_hx_switch_0==HX_("clockwise",f2,7d,9f,3c)) ){
HXLINE( 328)			return ::kha::graphics4::CullMode_obj::Clockwise_dyn();
HXDLIN( 328)			goto _hx_goto_12;
            		}
            		if (  (_hx_switch_0==HX_("none",b8,12,0a,49)) ){
HXLINE( 327)			return ::kha::graphics4::CullMode_obj::None_dyn();
HXDLIN( 327)			goto _hx_goto_12;
            		}
            		/* default */{
HXLINE( 329)			return ::kha::graphics4::CullMode_obj::CounterClockwise_dyn();
            		}
            		_hx_goto_12:;
HXLINE( 326)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderContext_obj,getCullMode,return )

 ::kha::graphics4::BlendingOperation ShaderContext_obj::getBlendingOperation(::String s){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_334_getBlendingOperation)
HXDLIN( 334)		::String _hx_switch_0 = s;
            		if (  (_hx_switch_0==HX_("add",21,f2,49,00)) ){
HXLINE( 335)			return ::kha::graphics4::BlendingOperation_obj::Add_dyn();
HXDLIN( 335)			goto _hx_goto_14;
            		}
            		if (  (_hx_switch_0==HX_("max",a4,0a,53,00)) ){
HXLINE( 339)			return ::kha::graphics4::BlendingOperation_obj::Max_dyn();
HXDLIN( 339)			goto _hx_goto_14;
            		}
            		if (  (_hx_switch_0==HX_("min",92,11,53,00)) ){
HXLINE( 338)			return ::kha::graphics4::BlendingOperation_obj::Min_dyn();
HXDLIN( 338)			goto _hx_goto_14;
            		}
            		if (  (_hx_switch_0==HX_("reverse_subtract",11,ff,bf,03)) ){
HXLINE( 337)			return ::kha::graphics4::BlendingOperation_obj::ReverseSubtract_dyn();
HXDLIN( 337)			goto _hx_goto_14;
            		}
            		if (  (_hx_switch_0==HX_("subtract",14,75,11,f8)) ){
HXLINE( 336)			return ::kha::graphics4::BlendingOperation_obj::Subtract_dyn();
HXDLIN( 336)			goto _hx_goto_14;
            		}
            		/* default */{
HXLINE( 340)			return ::kha::graphics4::BlendingOperation_obj::Add_dyn();
            		}
            		_hx_goto_14:;
HXLINE( 334)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderContext_obj,getBlendingOperation,return )

 ::kha::graphics4::BlendingFactor ShaderContext_obj::getBlendingFactor(::String s){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_345_getBlendingFactor)
HXDLIN( 345)		::String _hx_switch_0 = s;
            		if (  (_hx_switch_0==HX_("blend_one",38,c4,1d,18)) ){
HXLINE( 346)			return ::kha::graphics4::BlendingFactor_obj::BlendOne_dyn();
HXDLIN( 346)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==HX_("blend_zero",16,7d,2c,09)) ){
HXLINE( 347)			return ::kha::graphics4::BlendingFactor_obj::BlendZero_dyn();
HXDLIN( 347)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==HX_("destination_alpha",ad,d7,a4,00)) ){
HXLINE( 349)			return ::kha::graphics4::BlendingFactor_obj::DestinationAlpha_dyn();
HXDLIN( 349)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==HX_("destination_color",b2,a1,6a,29)) ){
HXLINE( 353)			return ::kha::graphics4::BlendingFactor_obj::DestinationColor_dyn();
HXDLIN( 353)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==HX_("inverse_destination_alpha",1e,74,d8,af)) ){
HXLINE( 351)			return ::kha::graphics4::BlendingFactor_obj::InverseDestinationAlpha_dyn();
HXDLIN( 351)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==HX_("inverse_destination_color",23,3e,9e,d8)) ){
HXLINE( 355)			return ::kha::graphics4::BlendingFactor_obj::InverseDestinationColor_dyn();
HXDLIN( 355)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==HX_("inverse_source_alpha",e9,ee,63,7f)) ){
HXLINE( 350)			return ::kha::graphics4::BlendingFactor_obj::InverseSourceAlpha_dyn();
HXDLIN( 350)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==HX_("inverse_source_color",ee,b8,29,a8)) ){
HXLINE( 354)			return ::kha::graphics4::BlendingFactor_obj::InverseSourceColor_dyn();
HXDLIN( 354)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==HX_("source_alpha",ba,35,f0,de)) ){
HXLINE( 348)			return ::kha::graphics4::BlendingFactor_obj::SourceAlpha_dyn();
HXDLIN( 348)			goto _hx_goto_16;
            		}
            		if (  (_hx_switch_0==HX_("source_color",bf,ff,b5,07)) ){
HXLINE( 352)			return ::kha::graphics4::BlendingFactor_obj::SourceColor_dyn();
HXDLIN( 352)			goto _hx_goto_16;
            		}
            		/* default */{
HXLINE( 356)			return ::kha::graphics4::BlendingFactor_obj::Undefined_dyn();
            		}
            		_hx_goto_16:;
HXLINE( 345)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderContext_obj,getBlendingFactor,return )

 ::kha::graphics4::TextureAddressing ShaderContext_obj::getTextureAddresing(::String s){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_361_getTextureAddresing)
HXDLIN( 361)		::String _hx_switch_0 = s;
            		if (  (_hx_switch_0==HX_("mirror",3f,72,aa,55)) ){
HXLINE( 363)			return ::kha::graphics4::TextureAddressing_obj::Mirror_dyn();
HXDLIN( 363)			goto _hx_goto_18;
            		}
            		if (  (_hx_switch_0==HX_("repeat",5b,97,7c,06)) ){
HXLINE( 362)			return ::kha::graphics4::TextureAddressing_obj::Repeat_dyn();
HXDLIN( 362)			goto _hx_goto_18;
            		}
            		/* default */{
HXLINE( 364)			return ::kha::graphics4::TextureAddressing_obj::Clamp_dyn();
            		}
            		_hx_goto_18:;
HXLINE( 361)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderContext_obj,getTextureAddresing,return )

 ::kha::graphics4::TextureFilter ShaderContext_obj::getTextureFilter(::String s){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_369_getTextureFilter)
HXDLIN( 369)		::String _hx_switch_0 = s;
            		if (  (_hx_switch_0==HX_("linear",e5,51,a0,ec)) ){
HXLINE( 371)			return ::kha::graphics4::TextureFilter_obj::LinearFilter_dyn();
HXDLIN( 371)			goto _hx_goto_20;
            		}
            		if (  (_hx_switch_0==HX_("point",50,b4,8f,c6)) ){
HXLINE( 370)			return ::kha::graphics4::TextureFilter_obj::PointFilter_dyn();
HXDLIN( 370)			goto _hx_goto_20;
            		}
            		/* default */{
HXLINE( 372)			return ::kha::graphics4::TextureFilter_obj::AnisotropicFilter_dyn();
            		}
            		_hx_goto_20:;
HXLINE( 369)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderContext_obj,getTextureFilter,return )

 ::kha::graphics4::MipMapFilter ShaderContext_obj::getMipmapFilter(::String s){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_377_getMipmapFilter)
HXDLIN( 377)		::String _hx_switch_0 = s;
            		if (  (_hx_switch_0==HX_("no",41,60,00,00)) ){
HXLINE( 378)			return ::kha::graphics4::MipMapFilter_obj::NoMipFilter_dyn();
HXDLIN( 378)			goto _hx_goto_22;
            		}
            		if (  (_hx_switch_0==HX_("point",50,b4,8f,c6)) ){
HXLINE( 379)			return ::kha::graphics4::MipMapFilter_obj::PointMipFilter_dyn();
HXDLIN( 379)			goto _hx_goto_22;
            		}
            		/* default */{
HXLINE( 380)			return ::kha::graphics4::MipMapFilter_obj::LinearMipFilter_dyn();
            		}
            		_hx_goto_22:;
HXLINE( 377)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderContext_obj,getMipmapFilter,return )

void ShaderContext_obj::addConstant( ::iron::data::TShaderConstant c){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_385_addConstant)
HXDLIN( 385)		::Array< ::Dynamic> _hx_tmp = this->constants;
HXDLIN( 385)		_hx_tmp->push(this->pipeState->getConstantLocation(c->name));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderContext_obj,addConstant,(void))

void ShaderContext_obj::addTexture( ::iron::data::TTextureUnit tu){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_388_addTexture)
HXLINE( 389)		::Dynamic unit = this->pipeState->getTextureUnit(tu->name);
HXLINE( 390)		this->textureUnits->push(unit);
HXLINE( 391)		this->paramsSet->push(false);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderContext_obj,addTexture,(void))

void ShaderContext_obj::setTextureParameters(::Dynamic g,int unitIndex, ::iron::data::TBindTexture tex){
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_394_setTextureParameters)
HXLINE( 396)		::Dynamic unit = this->textureUnits->__get(unitIndex);
HXLINE( 398)		 ::kha::graphics4::TextureAddressing _hx_tmp;
HXDLIN( 398)		if (hx::IsNull( tex->u_addressing )) {
HXLINE( 398)			_hx_tmp = ::kha::graphics4::TextureAddressing_obj::Repeat_dyn();
            		}
            		else {
HXLINE( 398)			_hx_tmp = this->getTextureAddresing(tex->u_addressing);
            		}
HXLINE( 399)		 ::kha::graphics4::TextureAddressing _hx_tmp1;
HXDLIN( 399)		if (hx::IsNull( tex->v_addressing )) {
HXLINE( 399)			_hx_tmp1 = ::kha::graphics4::TextureAddressing_obj::Repeat_dyn();
            		}
            		else {
HXLINE( 399)			_hx_tmp1 = this->getTextureAddresing(tex->v_addressing);
            		}
HXLINE( 400)		 ::kha::graphics4::TextureFilter _hx_tmp2;
HXDLIN( 400)		if (hx::IsNull( tex->min_filter )) {
HXLINE( 400)			_hx_tmp2 = ::kha::graphics4::TextureFilter_obj::LinearFilter_dyn();
            		}
            		else {
HXLINE( 400)			_hx_tmp2 = this->getTextureFilter(tex->min_filter);
            		}
HXLINE( 401)		 ::kha::graphics4::TextureFilter _hx_tmp3;
HXDLIN( 401)		if (hx::IsNull( tex->mag_filter )) {
HXLINE( 401)			_hx_tmp3 = ::kha::graphics4::TextureFilter_obj::LinearFilter_dyn();
            		}
            		else {
HXLINE( 401)			_hx_tmp3 = this->getTextureFilter(tex->mag_filter);
            		}
HXLINE( 402)		 ::kha::graphics4::MipMapFilter _hx_tmp4;
HXDLIN( 402)		if (hx::IsNull( tex->mipmap_filter )) {
HXLINE( 402)			_hx_tmp4 = ::kha::graphics4::MipMapFilter_obj::NoMipFilter_dyn();
            		}
            		else {
HXLINE( 402)			_hx_tmp4 = this->getMipmapFilter(tex->mipmap_filter);
            		}
HXLINE( 397)		::kha::graphics4::Graphics_obj::setTextureParameters(g,unit,_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4);
            	}


HX_DEFINE_DYNAMIC_FUNC3(ShaderContext_obj,setTextureParameters,(void))

 ::kha::graphics4::VertexStructure ShaderContext_obj::structureRect;

 ::kha::graphics4::VertexStructure ShaderContext_obj::getStructureRect(){
            	HX_GC_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_287_getStructureRect)
HXLINE( 288)		if (hx::IsNull( ::iron::data::ShaderContext_obj::structureRect )) {
HXLINE( 289)			::iron::data::ShaderContext_obj::structureRect =  ::kha::graphics4::VertexStructure_obj::__alloc( HX_CTX );
HXLINE( 290)			::iron::data::ShaderContext_obj::structureRect->add(HX_("pos",94,5d,55,00),1);
            		}
HXLINE( 292)		return ::iron::data::ShaderContext_obj::structureRect;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ShaderContext_obj,getStructureRect,return )


hx::ObjectPtr< ShaderContext_obj > ShaderContext_obj::__new( ::iron::data::TShaderContext raw, ::Dynamic done, ::iron::data::TShaderOverride overrideContext) {
	hx::ObjectPtr< ShaderContext_obj > __this = new ShaderContext_obj();
	__this->__construct(raw,done,overrideContext);
	return __this;
}

hx::ObjectPtr< ShaderContext_obj > ShaderContext_obj::__alloc(hx::Ctx *_hx_ctx, ::iron::data::TShaderContext raw, ::Dynamic done, ::iron::data::TShaderOverride overrideContext) {
	ShaderContext_obj *__this = (ShaderContext_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ShaderContext_obj), true, "iron.data.ShaderContext"));
	*(void **)__this = ShaderContext_obj::_hx_vtable;
	__this->__construct(raw,done,overrideContext);
	return __this;
}

ShaderContext_obj::ShaderContext_obj()
{
}

void ShaderContext_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ShaderContext);
	HX_MARK_MEMBER_NAME(raw,"raw");
	HX_MARK_MEMBER_NAME(pipeState,"pipeState");
	HX_MARK_MEMBER_NAME(constants,"constants");
	HX_MARK_MEMBER_NAME(textureUnits,"textureUnits");
	HX_MARK_MEMBER_NAME(paramsSet,"paramsSet");
	HX_MARK_MEMBER_NAME(structure,"structure");
	HX_MARK_MEMBER_NAME(instancingType,"instancingType");
	HX_MARK_MEMBER_NAME(overrideContext,"overrideContext");
	HX_MARK_END_CLASS();
}

void ShaderContext_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(raw,"raw");
	HX_VISIT_MEMBER_NAME(pipeState,"pipeState");
	HX_VISIT_MEMBER_NAME(constants,"constants");
	HX_VISIT_MEMBER_NAME(textureUnits,"textureUnits");
	HX_VISIT_MEMBER_NAME(paramsSet,"paramsSet");
	HX_VISIT_MEMBER_NAME(structure,"structure");
	HX_VISIT_MEMBER_NAME(instancingType,"instancingType");
	HX_VISIT_MEMBER_NAME(overrideContext,"overrideContext");
}

hx::Val ShaderContext_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"raw") ) { return hx::Val( raw ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"delete") ) { return hx::Val( _hx_delete_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compile") ) { return hx::Val( compile_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"sizeToVD") ) { return hx::Val( sizeToVD_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"pipeState") ) { return hx::Val( pipeState ); }
		if (HX_FIELD_EQ(inName,"constants") ) { return hx::Val( constants ); }
		if (HX_FIELD_EQ(inName,"paramsSet") ) { return hx::Val( paramsSet ); }
		if (HX_FIELD_EQ(inName,"structure") ) { return hx::Val( structure ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"addTexture") ) { return hx::Val( addTexture_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getCullMode") ) { return hx::Val( getCullMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"addConstant") ) { return hx::Val( addConstant_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"textureUnits") ) { return hx::Val( textureUnits ); }
		if (HX_FIELD_EQ(inName,"deleteShader") ) { return hx::Val( deleteShader_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"finishCompile") ) { return hx::Val( finishCompile_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"instancingType") ) { return hx::Val( instancingType ); }
		if (HX_FIELD_EQ(inName,"getCompareMode") ) { return hx::Val( getCompareMode_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"overrideContext") ) { return hx::Val( overrideContext ); }
		if (HX_FIELD_EQ(inName,"getMipmapFilter") ) { return hx::Val( getMipmapFilter_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getTextureFilter") ) { return hx::Val( getTextureFilter_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getBlendingFactor") ) { return hx::Val( getBlendingFactor_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getTextureAddresing") ) { return hx::Val( getTextureAddresing_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"parseVertexStructure") ) { return hx::Val( parseVertexStructure_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBlendingOperation") ) { return hx::Val( getBlendingOperation_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTextureParameters") ) { return hx::Val( setTextureParameters_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ShaderContext_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"structureRect") ) { outValue = ( structureRect ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getStructureRect") ) { outValue = getStructureRect_dyn(); return true; }
	}
	return false;
}

hx::Val ShaderContext_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"raw") ) { raw=inValue.Cast<  ::iron::data::TShaderContext >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"pipeState") ) { pipeState=inValue.Cast<  ::kha::graphics4::PipelineState >(); return inValue; }
		if (HX_FIELD_EQ(inName,"constants") ) { constants=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paramsSet") ) { paramsSet=inValue.Cast< ::Array< bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"structure") ) { structure=inValue.Cast<  ::kha::graphics4::VertexStructure >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"textureUnits") ) { textureUnits=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"instancingType") ) { instancingType=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"overrideContext") ) { overrideContext=inValue.Cast<  ::iron::data::TShaderOverride >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ShaderContext_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"structureRect") ) { structureRect=ioValue.Cast<  ::kha::graphics4::VertexStructure >(); return true; }
	}
	return false;
}

void ShaderContext_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("raw",e8,d5,56,00));
	outFields->push(HX_("pipeState",03,0b,f7,69));
	outFields->push(HX_("constants",8f,76,6b,44));
	outFields->push(HX_("textureUnits",94,16,87,9f));
	outFields->push(HX_("paramsSet",fc,27,d8,51));
	outFields->push(HX_("structure",33,54,4f,47));
	outFields->push(HX_("instancingType",ec,e7,bf,ed));
	outFields->push(HX_("overrideContext",03,bd,c2,40));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ShaderContext_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::data::TShaderContext*/ ,(int)offsetof(ShaderContext_obj,raw),HX_("raw",e8,d5,56,00)},
	{hx::fsObject /*::kha::graphics4::PipelineState*/ ,(int)offsetof(ShaderContext_obj,pipeState),HX_("pipeState",03,0b,f7,69)},
	{hx::fsObject /*Array< ::kha::graphics4::ConstantLocation >*/ ,(int)offsetof(ShaderContext_obj,constants),HX_("constants",8f,76,6b,44)},
	{hx::fsObject /*Array< ::kha::graphics4::TextureUnit >*/ ,(int)offsetof(ShaderContext_obj,textureUnits),HX_("textureUnits",94,16,87,9f)},
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(ShaderContext_obj,paramsSet),HX_("paramsSet",fc,27,d8,51)},
	{hx::fsObject /*::kha::graphics4::VertexStructure*/ ,(int)offsetof(ShaderContext_obj,structure),HX_("structure",33,54,4f,47)},
	{hx::fsInt,(int)offsetof(ShaderContext_obj,instancingType),HX_("instancingType",ec,e7,bf,ed)},
	{hx::fsObject /*::iron::data::TShaderOverride*/ ,(int)offsetof(ShaderContext_obj,overrideContext),HX_("overrideContext",03,bd,c2,40)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ShaderContext_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::kha::graphics4::VertexStructure*/ ,(void *) &ShaderContext_obj::structureRect,HX_("structureRect",f7,62,79,d7)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ShaderContext_obj_sMemberFields[] = {
	HX_("raw",e8,d5,56,00),
	HX_("pipeState",03,0b,f7,69),
	HX_("constants",8f,76,6b,44),
	HX_("textureUnits",94,16,87,9f),
	HX_("paramsSet",fc,27,d8,51),
	HX_("structure",33,54,4f,47),
	HX_("instancingType",ec,e7,bf,ed),
	HX_("overrideContext",03,bd,c2,40),
	HX_("compile",73,25,6f,83),
	HX_("finishCompile",60,0d,04,50),
	HX_("sizeToVD",ca,06,d4,e6),
	HX_("parseVertexStructure",3c,75,2e,e9),
	HX_("deleteShader",b0,e5,b8,83),
	HX_("delete",2b,c0,d8,6a),
	HX_("getCompareMode",b2,21,cb,45),
	HX_("getCullMode",eb,c8,d0,d6),
	HX_("getBlendingOperation",40,7f,2d,f5),
	HX_("getBlendingFactor",16,a4,a7,bf),
	HX_("getTextureAddresing",be,1c,7f,1a),
	HX_("getTextureFilter",7d,9c,6d,82),
	HX_("getMipmapFilter",16,ed,4e,85),
	HX_("addConstant",a5,f8,f9,d6),
	HX_("addTexture",ba,f4,6a,06),
	HX_("setTextureParameters",63,39,4d,35),
	::String(null()) };

static void ShaderContext_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ShaderContext_obj::structureRect,"structureRect");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ShaderContext_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ShaderContext_obj::structureRect,"structureRect");
};

#endif

hx::Class ShaderContext_obj::__mClass;

static ::String ShaderContext_obj_sStaticFields[] = {
	HX_("structureRect",f7,62,79,d7),
	HX_("getStructureRect",81,0c,9a,41),
	::String(null())
};

void ShaderContext_obj::__register()
{
	ShaderContext_obj _hx_dummy;
	ShaderContext_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.ShaderContext",4c,fb,5e,cb);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ShaderContext_obj::__GetStatic;
	__mClass->mSetStaticField = &ShaderContext_obj::__SetStatic;
	__mClass->mMarkFunc = ShaderContext_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ShaderContext_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ShaderContext_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ShaderContext_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ShaderContext_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ShaderContext_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ShaderContext_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ShaderContext_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ee6dc5fa0be63533_77_boot)
HXDLIN(  77)		structureRect = null();
            	}
}

} // end namespace iron
} // end namespace data
