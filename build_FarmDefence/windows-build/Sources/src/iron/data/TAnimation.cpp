// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_TAnimation
#include <hxinc/iron/data/TAnimation.h>
#endif
#ifndef INCLUDED_iron_data_TTrack
#include <hxinc/iron/data/TTrack.h>
#endif
#ifndef INCLUDED_kha_arrays_Uint32ArrayPrivate
#include <hxinc/kha/arrays/Uint32ArrayPrivate.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d2fa95be3fb88022_531_new,"iron.data.TAnimation","new",0xec2c1ca0,"iron.data.TAnimation.new","iron/data/SceneFormat.hx",531,0x98b03519)
namespace iron{
namespace data{

void TAnimation_obj::__construct(::Array< ::Dynamic> tracks, ::Dynamic begin, ::Dynamic end, ::Dynamic has_delta, ::kha::arrays::Uint32ArrayPrivate marker_frames,::Array< ::String > marker_names){
            	HX_STACKFRAME(&_hx_pos_d2fa95be3fb88022_531_new)
HXDLIN( 531)		this->tracks = tracks;
HXDLIN( 531)		this->begin = begin;
HXDLIN( 531)		this->end = end;
HXDLIN( 531)		this->has_delta = has_delta;
HXDLIN( 531)		this->marker_frames = marker_frames;
HXDLIN( 531)		this->marker_names = marker_names;
            	}

Dynamic TAnimation_obj::__CreateEmpty() { return new TAnimation_obj; }

void *TAnimation_obj::_hx_vtable = 0;

Dynamic TAnimation_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TAnimation_obj > _hx_result = new TAnimation_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool TAnimation_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0475a65a;
}


hx::ObjectPtr< TAnimation_obj > TAnimation_obj::__new(::Array< ::Dynamic> tracks, ::Dynamic begin, ::Dynamic end, ::Dynamic has_delta, ::kha::arrays::Uint32ArrayPrivate marker_frames,::Array< ::String > marker_names) {
	hx::ObjectPtr< TAnimation_obj > __this = new TAnimation_obj();
	__this->__construct(tracks,begin,end,has_delta,marker_frames,marker_names);
	return __this;
}

hx::ObjectPtr< TAnimation_obj > TAnimation_obj::__alloc(hx::Ctx *_hx_ctx,::Array< ::Dynamic> tracks, ::Dynamic begin, ::Dynamic end, ::Dynamic has_delta, ::kha::arrays::Uint32ArrayPrivate marker_frames,::Array< ::String > marker_names) {
	TAnimation_obj *__this = (TAnimation_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TAnimation_obj), true, "iron.data.TAnimation"));
	*(void **)__this = TAnimation_obj::_hx_vtable;
	__this->__construct(tracks,begin,end,has_delta,marker_frames,marker_names);
	return __this;
}

TAnimation_obj::TAnimation_obj()
{
}

void TAnimation_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TAnimation);
	HX_MARK_MEMBER_NAME(tracks,"tracks");
	HX_MARK_MEMBER_NAME(begin,"begin");
	HX_MARK_MEMBER_NAME(end,"end");
	HX_MARK_MEMBER_NAME(has_delta,"has_delta");
	HX_MARK_MEMBER_NAME(marker_frames,"marker_frames");
	HX_MARK_MEMBER_NAME(marker_names,"marker_names");
	HX_MARK_END_CLASS();
}

void TAnimation_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(tracks,"tracks");
	HX_VISIT_MEMBER_NAME(begin,"begin");
	HX_VISIT_MEMBER_NAME(end,"end");
	HX_VISIT_MEMBER_NAME(has_delta,"has_delta");
	HX_VISIT_MEMBER_NAME(marker_frames,"marker_frames");
	HX_VISIT_MEMBER_NAME(marker_names,"marker_names");
}

hx::Val TAnimation_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"tracks") ) { return hx::Val( tracks ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"has_delta") ) { return hx::Val( has_delta ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"marker_names") ) { return hx::Val( marker_names ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"marker_frames") ) { return hx::Val( marker_frames ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TAnimation_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { end=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { begin=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"tracks") ) { tracks=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"has_delta") ) { has_delta=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"marker_names") ) { marker_names=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"marker_frames") ) { marker_frames=inValue.Cast<  ::kha::arrays::Uint32ArrayPrivate >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TAnimation_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("tracks",88,2b,7d,45));
	outFields->push(HX_("begin",29,ea,55,b0));
	outFields->push(HX_("end",db,03,4d,00));
	outFields->push(HX_("has_delta",13,6e,62,df));
	outFields->push(HX_("marker_frames",cb,d6,5b,2b));
	outFields->push(HX_("marker_names",43,54,ba,46));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TAnimation_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TAnimation_obj,tracks),HX_("tracks",88,2b,7d,45)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TAnimation_obj,begin),HX_("begin",29,ea,55,b0)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TAnimation_obj,end),HX_("end",db,03,4d,00)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TAnimation_obj,has_delta),HX_("has_delta",13,6e,62,df)},
	{hx::fsObject /*::kha::arrays::Uint32ArrayPrivate*/ ,(int)offsetof(TAnimation_obj,marker_frames),HX_("marker_frames",cb,d6,5b,2b)},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(TAnimation_obj,marker_names),HX_("marker_names",43,54,ba,46)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TAnimation_obj_sStaticStorageInfo = 0;
#endif

static ::String TAnimation_obj_sMemberFields[] = {
	HX_("tracks",88,2b,7d,45),
	HX_("begin",29,ea,55,b0),
	HX_("end",db,03,4d,00),
	HX_("has_delta",13,6e,62,df),
	HX_("marker_frames",cb,d6,5b,2b),
	HX_("marker_names",43,54,ba,46),
	::String(null()) };

hx::Class TAnimation_obj::__mClass;

void TAnimation_obj::__register()
{
	TAnimation_obj _hx_dummy;
	TAnimation_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.TAnimation",ae,8c,01,f0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TAnimation_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TAnimation_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TAnimation_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TAnimation_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
