// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_TAnimationTransform
#include <hxinc/iron/data/TAnimationTransform.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a7f54641e651dff7_544_new,"iron.data.TAnimationTransform","new",0x27e5e2d0,"iron.data.TAnimationTransform.new","iron/data/SceneFormat.hx",544,0x98b03519)
namespace iron{
namespace data{

void TAnimationTransform_obj::__construct(::String type,::String name, ::kha::arrays::Float32ArrayPrivate values, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_a7f54641e651dff7_544_new)
HXDLIN( 544)		this->type = type;
HXDLIN( 544)		this->name = name;
HXDLIN( 544)		this->values = values;
HXDLIN( 544)		this->value = value;
            	}

Dynamic TAnimationTransform_obj::__CreateEmpty() { return new TAnimationTransform_obj; }

void *TAnimationTransform_obj::_hx_vtable = 0;

Dynamic TAnimationTransform_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TAnimationTransform_obj > _hx_result = new TAnimationTransform_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool TAnimationTransform_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x18979b0a;
}


hx::ObjectPtr< TAnimationTransform_obj > TAnimationTransform_obj::__new(::String type,::String name, ::kha::arrays::Float32ArrayPrivate values, ::Dynamic value) {
	hx::ObjectPtr< TAnimationTransform_obj > __this = new TAnimationTransform_obj();
	__this->__construct(type,name,values,value);
	return __this;
}

hx::ObjectPtr< TAnimationTransform_obj > TAnimationTransform_obj::__alloc(hx::Ctx *_hx_ctx,::String type,::String name, ::kha::arrays::Float32ArrayPrivate values, ::Dynamic value) {
	TAnimationTransform_obj *__this = (TAnimationTransform_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TAnimationTransform_obj), true, "iron.data.TAnimationTransform"));
	*(void **)__this = TAnimationTransform_obj::_hx_vtable;
	__this->__construct(type,name,values,value);
	return __this;
}

TAnimationTransform_obj::TAnimationTransform_obj()
{
}

void TAnimationTransform_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TAnimationTransform);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(values,"values");
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_END_CLASS();
}

void TAnimationTransform_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(values,"values");
	HX_VISIT_MEMBER_NAME(value,"value");
}

hx::Val TAnimationTransform_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { return hx::Val( values ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TAnimationTransform_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { values=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TAnimationTransform_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("values",e2,03,b7,4f));
	outFields->push(HX_("value",71,7f,b8,31));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TAnimationTransform_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TAnimationTransform_obj,type),HX_("type",ba,f2,08,4d)},
	{hx::fsString,(int)offsetof(TAnimationTransform_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(TAnimationTransform_obj,values),HX_("values",e2,03,b7,4f)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TAnimationTransform_obj,value),HX_("value",71,7f,b8,31)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TAnimationTransform_obj_sStaticStorageInfo = 0;
#endif

static ::String TAnimationTransform_obj_sMemberFields[] = {
	HX_("type",ba,f2,08,4d),
	HX_("name",4b,72,ff,48),
	HX_("values",e2,03,b7,4f),
	HX_("value",71,7f,b8,31),
	::String(null()) };

hx::Class TAnimationTransform_obj::__mClass;

void TAnimationTransform_obj::__register()
{
	TAnimationTransform_obj _hx_dummy;
	TAnimationTransform_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.TAnimationTransform",de,7a,70,db);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TAnimationTransform_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TAnimationTransform_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TAnimationTransform_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TAnimationTransform_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
