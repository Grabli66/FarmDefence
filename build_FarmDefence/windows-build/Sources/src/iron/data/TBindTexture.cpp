// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_TBindTexture
#include <hxinc/iron/data/TBindTexture.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f07502ecfab5f793_173_new,"iron.data.TBindTexture","new",0xe45c5dba,"iron.data.TBindTexture.new","iron/data/SceneFormat.hx",173,0x98b03519)
namespace iron{
namespace data{

void TBindTexture_obj::__construct(::String name,::String file,::String format, ::Dynamic generate_mipmaps,::Array< ::String > mipmaps,::String u_addressing,::String v_addressing,::String min_filter,::String mag_filter,::String mipmap_filter,::String source){
            	HX_STACKFRAME(&_hx_pos_f07502ecfab5f793_173_new)
HXDLIN( 173)		this->name = name;
HXDLIN( 173)		this->file = file;
HXDLIN( 173)		this->format = format;
HXDLIN( 173)		this->generate_mipmaps = generate_mipmaps;
HXDLIN( 173)		this->mipmaps = mipmaps;
HXDLIN( 173)		this->u_addressing = u_addressing;
HXDLIN( 173)		this->v_addressing = v_addressing;
HXDLIN( 173)		this->min_filter = min_filter;
HXDLIN( 173)		this->mag_filter = mag_filter;
HXDLIN( 173)		this->mipmap_filter = mipmap_filter;
HXDLIN( 173)		this->source = source;
            	}

Dynamic TBindTexture_obj::__CreateEmpty() { return new TBindTexture_obj; }

void *TBindTexture_obj::_hx_vtable = 0;

Dynamic TBindTexture_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TBindTexture_obj > _hx_result = new TBindTexture_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10]);
	return _hx_result;
}

bool TBindTexture_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0d905780;
}


TBindTexture_obj::TBindTexture_obj()
{
}

void TBindTexture_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TBindTexture);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(file,"file");
	HX_MARK_MEMBER_NAME(format,"format");
	HX_MARK_MEMBER_NAME(generate_mipmaps,"generate_mipmaps");
	HX_MARK_MEMBER_NAME(mipmaps,"mipmaps");
	HX_MARK_MEMBER_NAME(u_addressing,"u_addressing");
	HX_MARK_MEMBER_NAME(v_addressing,"v_addressing");
	HX_MARK_MEMBER_NAME(min_filter,"min_filter");
	HX_MARK_MEMBER_NAME(mag_filter,"mag_filter");
	HX_MARK_MEMBER_NAME(mipmap_filter,"mipmap_filter");
	HX_MARK_MEMBER_NAME(source,"source");
	HX_MARK_END_CLASS();
}

void TBindTexture_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(file,"file");
	HX_VISIT_MEMBER_NAME(format,"format");
	HX_VISIT_MEMBER_NAME(generate_mipmaps,"generate_mipmaps");
	HX_VISIT_MEMBER_NAME(mipmaps,"mipmaps");
	HX_VISIT_MEMBER_NAME(u_addressing,"u_addressing");
	HX_VISIT_MEMBER_NAME(v_addressing,"v_addressing");
	HX_VISIT_MEMBER_NAME(min_filter,"min_filter");
	HX_VISIT_MEMBER_NAME(mag_filter,"mag_filter");
	HX_VISIT_MEMBER_NAME(mipmap_filter,"mipmap_filter");
	HX_VISIT_MEMBER_NAME(source,"source");
}

hx::Val TBindTexture_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"file") ) { return hx::Val( file ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"format") ) { return hx::Val( format ); }
		if (HX_FIELD_EQ(inName,"source") ) { return hx::Val( source ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mipmaps") ) { return hx::Val( mipmaps ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"min_filter") ) { return hx::Val( min_filter ); }
		if (HX_FIELD_EQ(inName,"mag_filter") ) { return hx::Val( mag_filter ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"u_addressing") ) { return hx::Val( u_addressing ); }
		if (HX_FIELD_EQ(inName,"v_addressing") ) { return hx::Val( v_addressing ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mipmap_filter") ) { return hx::Val( mipmap_filter ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"generate_mipmaps") ) { return hx::Val( generate_mipmaps ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TBindTexture_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"file") ) { file=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"format") ) { format=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"source") ) { source=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mipmaps") ) { mipmaps=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"min_filter") ) { min_filter=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mag_filter") ) { mag_filter=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"u_addressing") ) { u_addressing=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"v_addressing") ) { v_addressing=inValue.Cast< ::String >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mipmap_filter") ) { mipmap_filter=inValue.Cast< ::String >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"generate_mipmaps") ) { generate_mipmaps=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TBindTexture_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("file",7c,ce,bb,43));
	outFields->push(HX_("format",37,8f,8e,fd));
	outFields->push(HX_("generate_mipmaps",a1,1f,a0,3c));
	outFields->push(HX_("mipmaps",eb,a9,53,75));
	outFields->push(HX_("u_addressing",78,8a,42,e3));
	outFields->push(HX_("v_addressing",17,f8,01,25));
	outFields->push(HX_("min_filter",05,56,12,ec));
	outFields->push(HX_("mag_filter",24,ef,25,c4));
	outFields->push(HX_("mipmap_filter",cf,44,b4,d2));
	outFields->push(HX_("source",db,b0,31,32));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TBindTexture_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TBindTexture_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsString,(int)offsetof(TBindTexture_obj,file),HX_("file",7c,ce,bb,43)},
	{hx::fsString,(int)offsetof(TBindTexture_obj,format),HX_("format",37,8f,8e,fd)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TBindTexture_obj,generate_mipmaps),HX_("generate_mipmaps",a1,1f,a0,3c)},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(TBindTexture_obj,mipmaps),HX_("mipmaps",eb,a9,53,75)},
	{hx::fsString,(int)offsetof(TBindTexture_obj,u_addressing),HX_("u_addressing",78,8a,42,e3)},
	{hx::fsString,(int)offsetof(TBindTexture_obj,v_addressing),HX_("v_addressing",17,f8,01,25)},
	{hx::fsString,(int)offsetof(TBindTexture_obj,min_filter),HX_("min_filter",05,56,12,ec)},
	{hx::fsString,(int)offsetof(TBindTexture_obj,mag_filter),HX_("mag_filter",24,ef,25,c4)},
	{hx::fsString,(int)offsetof(TBindTexture_obj,mipmap_filter),HX_("mipmap_filter",cf,44,b4,d2)},
	{hx::fsString,(int)offsetof(TBindTexture_obj,source),HX_("source",db,b0,31,32)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TBindTexture_obj_sStaticStorageInfo = 0;
#endif

static ::String TBindTexture_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("file",7c,ce,bb,43),
	HX_("format",37,8f,8e,fd),
	HX_("generate_mipmaps",a1,1f,a0,3c),
	HX_("mipmaps",eb,a9,53,75),
	HX_("u_addressing",78,8a,42,e3),
	HX_("v_addressing",17,f8,01,25),
	HX_("min_filter",05,56,12,ec),
	HX_("mag_filter",24,ef,25,c4),
	HX_("mipmap_filter",cf,44,b4,d2),
	HX_("source",db,b0,31,32),
	::String(null()) };

hx::Class TBindTexture_obj::__mClass;

void TBindTexture_obj::__register()
{
	TBindTexture_obj _hx_dummy;
	TBindTexture_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.TBindTexture",c8,b8,c0,82);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TBindTexture_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TBindTexture_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TBindTexture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TBindTexture_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
