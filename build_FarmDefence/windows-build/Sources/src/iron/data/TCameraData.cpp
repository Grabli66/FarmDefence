// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_TCameraData
#include <hxinc/iron/data/TCameraData.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b624ba8241b7043a_111_new,"iron.data.TCameraData","new",0xe0e89df7,"iron.data.TCameraData.new","iron/data/SceneFormat.hx",111,0x98b03519)
namespace iron{
namespace data{

void TCameraData_obj::__construct(::String name,float near_plane,float far_plane,float fov, ::kha::arrays::Float32ArrayPrivate clear_color, ::Dynamic aspect, ::Dynamic frustum_culling, ::Dynamic render_to_texture, ::Dynamic texture_resolution_x, ::Dynamic texture_resolution_y, ::Dynamic ortho_scale){
            	HX_STACKFRAME(&_hx_pos_b624ba8241b7043a_111_new)
HXDLIN( 111)		this->name = name;
HXDLIN( 111)		this->near_plane = near_plane;
HXDLIN( 111)		this->far_plane = far_plane;
HXDLIN( 111)		this->fov = fov;
HXDLIN( 111)		this->clear_color = clear_color;
HXDLIN( 111)		this->aspect = aspect;
HXDLIN( 111)		this->frustum_culling = frustum_culling;
HXDLIN( 111)		this->render_to_texture = render_to_texture;
HXDLIN( 111)		this->texture_resolution_x = texture_resolution_x;
HXDLIN( 111)		this->texture_resolution_y = texture_resolution_y;
HXDLIN( 111)		this->ortho_scale = ortho_scale;
            	}

Dynamic TCameraData_obj::__CreateEmpty() { return new TCameraData_obj; }

void *TCameraData_obj::_hx_vtable = 0;

Dynamic TCameraData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TCameraData_obj > _hx_result = new TCameraData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10]);
	return _hx_result;
}

bool TCameraData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5933eab1;
}


hx::ObjectPtr< TCameraData_obj > TCameraData_obj::__new(::String name,float near_plane,float far_plane,float fov, ::kha::arrays::Float32ArrayPrivate clear_color, ::Dynamic aspect, ::Dynamic frustum_culling, ::Dynamic render_to_texture, ::Dynamic texture_resolution_x, ::Dynamic texture_resolution_y, ::Dynamic ortho_scale) {
	hx::ObjectPtr< TCameraData_obj > __this = new TCameraData_obj();
	__this->__construct(name,near_plane,far_plane,fov,clear_color,aspect,frustum_culling,render_to_texture,texture_resolution_x,texture_resolution_y,ortho_scale);
	return __this;
}

hx::ObjectPtr< TCameraData_obj > TCameraData_obj::__alloc(hx::Ctx *_hx_ctx,::String name,float near_plane,float far_plane,float fov, ::kha::arrays::Float32ArrayPrivate clear_color, ::Dynamic aspect, ::Dynamic frustum_culling, ::Dynamic render_to_texture, ::Dynamic texture_resolution_x, ::Dynamic texture_resolution_y, ::Dynamic ortho_scale) {
	TCameraData_obj *__this = (TCameraData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TCameraData_obj), true, "iron.data.TCameraData"));
	*(void **)__this = TCameraData_obj::_hx_vtable;
	__this->__construct(name,near_plane,far_plane,fov,clear_color,aspect,frustum_culling,render_to_texture,texture_resolution_x,texture_resolution_y,ortho_scale);
	return __this;
}

TCameraData_obj::TCameraData_obj()
{
}

void TCameraData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TCameraData);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(near_plane,"near_plane");
	HX_MARK_MEMBER_NAME(far_plane,"far_plane");
	HX_MARK_MEMBER_NAME(fov,"fov");
	HX_MARK_MEMBER_NAME(clear_color,"clear_color");
	HX_MARK_MEMBER_NAME(aspect,"aspect");
	HX_MARK_MEMBER_NAME(frustum_culling,"frustum_culling");
	HX_MARK_MEMBER_NAME(render_to_texture,"render_to_texture");
	HX_MARK_MEMBER_NAME(texture_resolution_x,"texture_resolution_x");
	HX_MARK_MEMBER_NAME(texture_resolution_y,"texture_resolution_y");
	HX_MARK_MEMBER_NAME(ortho_scale,"ortho_scale");
	HX_MARK_END_CLASS();
}

void TCameraData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(near_plane,"near_plane");
	HX_VISIT_MEMBER_NAME(far_plane,"far_plane");
	HX_VISIT_MEMBER_NAME(fov,"fov");
	HX_VISIT_MEMBER_NAME(clear_color,"clear_color");
	HX_VISIT_MEMBER_NAME(aspect,"aspect");
	HX_VISIT_MEMBER_NAME(frustum_culling,"frustum_culling");
	HX_VISIT_MEMBER_NAME(render_to_texture,"render_to_texture");
	HX_VISIT_MEMBER_NAME(texture_resolution_x,"texture_resolution_x");
	HX_VISIT_MEMBER_NAME(texture_resolution_y,"texture_resolution_y");
	HX_VISIT_MEMBER_NAME(ortho_scale,"ortho_scale");
}

hx::Val TCameraData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"fov") ) { return hx::Val( fov ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"aspect") ) { return hx::Val( aspect ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"far_plane") ) { return hx::Val( far_plane ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"near_plane") ) { return hx::Val( near_plane ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"clear_color") ) { return hx::Val( clear_color ); }
		if (HX_FIELD_EQ(inName,"ortho_scale") ) { return hx::Val( ortho_scale ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"frustum_culling") ) { return hx::Val( frustum_culling ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"render_to_texture") ) { return hx::Val( render_to_texture ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"texture_resolution_x") ) { return hx::Val( texture_resolution_x ); }
		if (HX_FIELD_EQ(inName,"texture_resolution_y") ) { return hx::Val( texture_resolution_y ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TCameraData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"fov") ) { fov=inValue.Cast< float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"aspect") ) { aspect=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"far_plane") ) { far_plane=inValue.Cast< float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"near_plane") ) { near_plane=inValue.Cast< float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"clear_color") ) { clear_color=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ortho_scale") ) { ortho_scale=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"frustum_culling") ) { frustum_culling=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"render_to_texture") ) { render_to_texture=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"texture_resolution_x") ) { texture_resolution_x=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"texture_resolution_y") ) { texture_resolution_y=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TCameraData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("near_plane",85,54,5f,ca));
	outFields->push(HX_("far_plane",b4,3b,51,fd));
	outFields->push(HX_("fov",0d,c7,4d,00));
	outFields->push(HX_("clear_color",f1,51,9c,a5));
	outFields->push(HX_("aspect",d8,95,07,4a));
	outFields->push(HX_("frustum_culling",53,b5,43,1c));
	outFields->push(HX_("render_to_texture",60,10,25,06));
	outFields->push(HX_("texture_resolution_x",89,48,d9,a4));
	outFields->push(HX_("texture_resolution_y",8a,48,d9,a4));
	outFields->push(HX_("ortho_scale",03,67,00,d0));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TCameraData_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TCameraData_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TCameraData_obj,near_plane),HX_("near_plane",85,54,5f,ca)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TCameraData_obj,far_plane),HX_("far_plane",b4,3b,51,fd)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TCameraData_obj,fov),HX_("fov",0d,c7,4d,00)},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(TCameraData_obj,clear_color),HX_("clear_color",f1,51,9c,a5)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TCameraData_obj,aspect),HX_("aspect",d8,95,07,4a)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TCameraData_obj,frustum_culling),HX_("frustum_culling",53,b5,43,1c)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TCameraData_obj,render_to_texture),HX_("render_to_texture",60,10,25,06)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TCameraData_obj,texture_resolution_x),HX_("texture_resolution_x",89,48,d9,a4)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TCameraData_obj,texture_resolution_y),HX_("texture_resolution_y",8a,48,d9,a4)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TCameraData_obj,ortho_scale),HX_("ortho_scale",03,67,00,d0)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TCameraData_obj_sStaticStorageInfo = 0;
#endif

static ::String TCameraData_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("near_plane",85,54,5f,ca),
	HX_("far_plane",b4,3b,51,fd),
	HX_("fov",0d,c7,4d,00),
	HX_("clear_color",f1,51,9c,a5),
	HX_("aspect",d8,95,07,4a),
	HX_("frustum_culling",53,b5,43,1c),
	HX_("render_to_texture",60,10,25,06),
	HX_("texture_resolution_x",89,48,d9,a4),
	HX_("texture_resolution_y",8a,48,d9,a4),
	HX_("ortho_scale",03,67,00,d0),
	::String(null()) };

hx::Class TCameraData_obj::__mClass;

void TCameraData_obj::__register()
{
	TCameraData_obj _hx_dummy;
	TCameraData_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.TCameraData",85,d6,be,36);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TCameraData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TCameraData_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TCameraData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TCameraData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
