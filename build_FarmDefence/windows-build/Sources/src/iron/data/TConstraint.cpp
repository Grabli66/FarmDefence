// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_TConstraint
#include <hxinc/iron/data/TConstraint.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bcd8764ed2c7fa25_492_new,"iron.data.TConstraint","new",0xd3d12de5,"iron.data.TConstraint.new","iron/data/SceneFormat.hx",492,0x98b03519)
namespace iron{
namespace data{

void TConstraint_obj::__construct(::String name,::String type,::String bone,::String target, ::Dynamic use_x, ::Dynamic use_y, ::Dynamic use_z, ::Dynamic invert_x, ::Dynamic invert_y, ::Dynamic invert_z, ::Dynamic use_offset, ::Dynamic influence){
            	HX_STACKFRAME(&_hx_pos_bcd8764ed2c7fa25_492_new)
HXDLIN( 492)		this->name = name;
HXDLIN( 492)		this->type = type;
HXDLIN( 492)		this->bone = bone;
HXDLIN( 492)		this->target = target;
HXDLIN( 492)		this->use_x = use_x;
HXDLIN( 492)		this->use_y = use_y;
HXDLIN( 492)		this->use_z = use_z;
HXDLIN( 492)		this->invert_x = invert_x;
HXDLIN( 492)		this->invert_y = invert_y;
HXDLIN( 492)		this->invert_z = invert_z;
HXDLIN( 492)		this->use_offset = use_offset;
HXDLIN( 492)		this->influence = influence;
            	}

Dynamic TConstraint_obj::__CreateEmpty() { return new TConstraint_obj; }

void *TConstraint_obj::_hx_vtable = 0;

Dynamic TConstraint_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TConstraint_obj > _hx_result = new TConstraint_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11]);
	return _hx_result;
}

bool TConstraint_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0b7e6b9f;
}


TConstraint_obj::TConstraint_obj()
{
}

void TConstraint_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TConstraint);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(bone,"bone");
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_MEMBER_NAME(use_x,"use_x");
	HX_MARK_MEMBER_NAME(use_y,"use_y");
	HX_MARK_MEMBER_NAME(use_z,"use_z");
	HX_MARK_MEMBER_NAME(invert_x,"invert_x");
	HX_MARK_MEMBER_NAME(invert_y,"invert_y");
	HX_MARK_MEMBER_NAME(invert_z,"invert_z");
	HX_MARK_MEMBER_NAME(use_offset,"use_offset");
	HX_MARK_MEMBER_NAME(influence,"influence");
	HX_MARK_END_CLASS();
}

void TConstraint_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(bone,"bone");
	HX_VISIT_MEMBER_NAME(target,"target");
	HX_VISIT_MEMBER_NAME(use_x,"use_x");
	HX_VISIT_MEMBER_NAME(use_y,"use_y");
	HX_VISIT_MEMBER_NAME(use_z,"use_z");
	HX_VISIT_MEMBER_NAME(invert_x,"invert_x");
	HX_VISIT_MEMBER_NAME(invert_y,"invert_y");
	HX_VISIT_MEMBER_NAME(invert_z,"invert_z");
	HX_VISIT_MEMBER_NAME(use_offset,"use_offset");
	HX_VISIT_MEMBER_NAME(influence,"influence");
}

hx::Val TConstraint_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"bone") ) { return hx::Val( bone ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"use_x") ) { return hx::Val( use_x ); }
		if (HX_FIELD_EQ(inName,"use_y") ) { return hx::Val( use_y ); }
		if (HX_FIELD_EQ(inName,"use_z") ) { return hx::Val( use_z ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { return hx::Val( target ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"invert_x") ) { return hx::Val( invert_x ); }
		if (HX_FIELD_EQ(inName,"invert_y") ) { return hx::Val( invert_y ); }
		if (HX_FIELD_EQ(inName,"invert_z") ) { return hx::Val( invert_z ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"influence") ) { return hx::Val( influence ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"use_offset") ) { return hx::Val( use_offset ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TConstraint_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bone") ) { bone=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"use_x") ) { use_x=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"use_y") ) { use_y=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"use_z") ) { use_z=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { target=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"invert_x") ) { invert_x=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"invert_y") ) { invert_y=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"invert_z") ) { invert_z=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"influence") ) { influence=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"use_offset") ) { use_offset=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TConstraint_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("bone",44,83,1b,41));
	outFields->push(HX_("target",51,f3,ec,86));
	outFields->push(HX_("use_x",40,5f,32,aa));
	outFields->push(HX_("use_y",41,5f,32,aa));
	outFields->push(HX_("use_z",42,5f,32,aa));
	outFields->push(HX_("invert_x",cf,ab,31,f5));
	outFields->push(HX_("invert_y",d0,ab,31,f5));
	outFields->push(HX_("invert_z",d1,ab,31,f5));
	outFields->push(HX_("use_offset",cb,a3,18,04));
	outFields->push(HX_("influence",f5,9d,c1,79));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TConstraint_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TConstraint_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsString,(int)offsetof(TConstraint_obj,type),HX_("type",ba,f2,08,4d)},
	{hx::fsString,(int)offsetof(TConstraint_obj,bone),HX_("bone",44,83,1b,41)},
	{hx::fsString,(int)offsetof(TConstraint_obj,target),HX_("target",51,f3,ec,86)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TConstraint_obj,use_x),HX_("use_x",40,5f,32,aa)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TConstraint_obj,use_y),HX_("use_y",41,5f,32,aa)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TConstraint_obj,use_z),HX_("use_z",42,5f,32,aa)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TConstraint_obj,invert_x),HX_("invert_x",cf,ab,31,f5)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TConstraint_obj,invert_y),HX_("invert_y",d0,ab,31,f5)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TConstraint_obj,invert_z),HX_("invert_z",d1,ab,31,f5)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TConstraint_obj,use_offset),HX_("use_offset",cb,a3,18,04)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TConstraint_obj,influence),HX_("influence",f5,9d,c1,79)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TConstraint_obj_sStaticStorageInfo = 0;
#endif

static ::String TConstraint_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("type",ba,f2,08,4d),
	HX_("bone",44,83,1b,41),
	HX_("target",51,f3,ec,86),
	HX_("use_x",40,5f,32,aa),
	HX_("use_y",41,5f,32,aa),
	HX_("use_z",42,5f,32,aa),
	HX_("invert_x",cf,ab,31,f5),
	HX_("invert_y",d0,ab,31,f5),
	HX_("invert_z",d1,ab,31,f5),
	HX_("use_offset",cb,a3,18,04),
	HX_("influence",f5,9d,c1,79),
	::String(null()) };

hx::Class TConstraint_obj::__mClass;

void TConstraint_obj::__register()
{
	TConstraint_obj _hx_dummy;
	TConstraint_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.TConstraint",73,57,09,e9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TConstraint_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TConstraint_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TConstraint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TConstraint_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
