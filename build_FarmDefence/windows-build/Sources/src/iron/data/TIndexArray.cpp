// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_TIndexArray
#include <hxinc/iron/data/TIndexArray.h>
#endif
#ifndef INCLUDED_kha_arrays_Uint32ArrayPrivate
#include <hxinc/kha/arrays/Uint32ArrayPrivate.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_03f6ed6235a3a7ee_78_new,"iron.data.TIndexArray","new",0x12693baf,"iron.data.TIndexArray.new","iron/data/SceneFormat.hx",78,0x98b03519)
namespace iron{
namespace data{

void TIndexArray_obj::__construct( ::kha::arrays::Uint32ArrayPrivate values,int material){
            	HX_STACKFRAME(&_hx_pos_03f6ed6235a3a7ee_78_new)
HXDLIN(  78)		this->values = values;
HXDLIN(  78)		this->material = material;
            	}

Dynamic TIndexArray_obj::__CreateEmpty() { return new TIndexArray_obj; }

void *TIndexArray_obj::_hx_vtable = 0;

Dynamic TIndexArray_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TIndexArray_obj > _hx_result = new TIndexArray_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool TIndexArray_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x35c464a1;
}


hx::ObjectPtr< TIndexArray_obj > TIndexArray_obj::__new( ::kha::arrays::Uint32ArrayPrivate values,int material) {
	hx::ObjectPtr< TIndexArray_obj > __this = new TIndexArray_obj();
	__this->__construct(values,material);
	return __this;
}

hx::ObjectPtr< TIndexArray_obj > TIndexArray_obj::__alloc(hx::Ctx *_hx_ctx, ::kha::arrays::Uint32ArrayPrivate values,int material) {
	TIndexArray_obj *__this = (TIndexArray_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TIndexArray_obj), true, "iron.data.TIndexArray"));
	*(void **)__this = TIndexArray_obj::_hx_vtable;
	__this->__construct(values,material);
	return __this;
}

TIndexArray_obj::TIndexArray_obj()
{
}

void TIndexArray_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TIndexArray);
	HX_MARK_MEMBER_NAME(values,"values");
	HX_MARK_MEMBER_NAME(material,"material");
	HX_MARK_END_CLASS();
}

void TIndexArray_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(values,"values");
	HX_VISIT_MEMBER_NAME(material,"material");
}

hx::Val TIndexArray_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { return hx::Val( values ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"material") ) { return hx::Val( material ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TIndexArray_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { values=inValue.Cast<  ::kha::arrays::Uint32ArrayPrivate >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"material") ) { material=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TIndexArray_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("values",e2,03,b7,4f));
	outFields->push(HX_("material",a7,5c,a5,f0));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TIndexArray_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::kha::arrays::Uint32ArrayPrivate*/ ,(int)offsetof(TIndexArray_obj,values),HX_("values",e2,03,b7,4f)},
	{hx::fsInt,(int)offsetof(TIndexArray_obj,material),HX_("material",a7,5c,a5,f0)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TIndexArray_obj_sStaticStorageInfo = 0;
#endif

static ::String TIndexArray_obj_sMemberFields[] = {
	HX_("values",e2,03,b7,4f),
	HX_("material",a7,5c,a5,f0),
	::String(null()) };

hx::Class TIndexArray_obj::__mClass;

void TIndexArray_obj::__register()
{
	TIndexArray_obj _hx_dummy;
	TIndexArray_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.TIndexArray",3d,38,c0,83);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TIndexArray_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TIndexArray_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TIndexArray_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TIndexArray_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
