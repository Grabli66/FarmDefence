// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_TLightData
#include <hxinc/iron/data/TLightData.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0c6bee22bc70c02f_87_new,"iron.data.TLightData","new",0x04e021bc,"iron.data.TLightData.new","iron/data/SceneFormat.hx",87,0x98b03519)
namespace iron{
namespace data{

void TLightData_obj::__construct(::String name,::String type, ::kha::arrays::Float32ArrayPrivate color,float strength, ::Dynamic cast_shadow, ::Dynamic near_plane, ::Dynamic far_plane, ::Dynamic fov, ::Dynamic shadows_bias, ::Dynamic shadowmap_size, ::Dynamic shadowmap_cube, ::Dynamic spot_size, ::Dynamic spot_blend, ::Dynamic light_size,::String color_texture, ::Dynamic size, ::Dynamic size_y){
            	HX_STACKFRAME(&_hx_pos_0c6bee22bc70c02f_87_new)
HXDLIN(  87)		this->name = name;
HXDLIN(  87)		this->type = type;
HXDLIN(  87)		this->color = color;
HXDLIN(  87)		this->strength = strength;
HXDLIN(  87)		this->cast_shadow = cast_shadow;
HXDLIN(  87)		this->near_plane = near_plane;
HXDLIN(  87)		this->far_plane = far_plane;
HXDLIN(  87)		this->fov = fov;
HXDLIN(  87)		this->shadows_bias = shadows_bias;
HXDLIN(  87)		this->shadowmap_size = shadowmap_size;
HXDLIN(  87)		this->shadowmap_cube = shadowmap_cube;
HXDLIN(  87)		this->spot_size = spot_size;
HXDLIN(  87)		this->spot_blend = spot_blend;
HXDLIN(  87)		this->light_size = light_size;
HXDLIN(  87)		this->color_texture = color_texture;
HXDLIN(  87)		this->size = size;
HXDLIN(  87)		this->size_y = size_y;
            	}

Dynamic TLightData_obj::__CreateEmpty() { return new TLightData_obj; }

void *TLightData_obj::_hx_vtable = 0;

Dynamic TLightData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TLightData_obj > _hx_result = new TLightData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12],inArgs[13],inArgs[14],inArgs[15],inArgs[16]);
	return _hx_result;
}

bool TLightData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1191d482;
}


hx::ObjectPtr< TLightData_obj > TLightData_obj::__new(::String name,::String type, ::kha::arrays::Float32ArrayPrivate color,float strength, ::Dynamic cast_shadow, ::Dynamic near_plane, ::Dynamic far_plane, ::Dynamic fov, ::Dynamic shadows_bias, ::Dynamic shadowmap_size, ::Dynamic shadowmap_cube, ::Dynamic spot_size, ::Dynamic spot_blend, ::Dynamic light_size,::String color_texture, ::Dynamic size, ::Dynamic size_y) {
	hx::ObjectPtr< TLightData_obj > __this = new TLightData_obj();
	__this->__construct(name,type,color,strength,cast_shadow,near_plane,far_plane,fov,shadows_bias,shadowmap_size,shadowmap_cube,spot_size,spot_blend,light_size,color_texture,size,size_y);
	return __this;
}

hx::ObjectPtr< TLightData_obj > TLightData_obj::__alloc(hx::Ctx *_hx_ctx,::String name,::String type, ::kha::arrays::Float32ArrayPrivate color,float strength, ::Dynamic cast_shadow, ::Dynamic near_plane, ::Dynamic far_plane, ::Dynamic fov, ::Dynamic shadows_bias, ::Dynamic shadowmap_size, ::Dynamic shadowmap_cube, ::Dynamic spot_size, ::Dynamic spot_blend, ::Dynamic light_size,::String color_texture, ::Dynamic size, ::Dynamic size_y) {
	TLightData_obj *__this = (TLightData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TLightData_obj), true, "iron.data.TLightData"));
	*(void **)__this = TLightData_obj::_hx_vtable;
	__this->__construct(name,type,color,strength,cast_shadow,near_plane,far_plane,fov,shadows_bias,shadowmap_size,shadowmap_cube,spot_size,spot_blend,light_size,color_texture,size,size_y);
	return __this;
}

TLightData_obj::TLightData_obj()
{
}

void TLightData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TLightData);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(strength,"strength");
	HX_MARK_MEMBER_NAME(cast_shadow,"cast_shadow");
	HX_MARK_MEMBER_NAME(near_plane,"near_plane");
	HX_MARK_MEMBER_NAME(far_plane,"far_plane");
	HX_MARK_MEMBER_NAME(fov,"fov");
	HX_MARK_MEMBER_NAME(shadows_bias,"shadows_bias");
	HX_MARK_MEMBER_NAME(shadowmap_size,"shadowmap_size");
	HX_MARK_MEMBER_NAME(shadowmap_cube,"shadowmap_cube");
	HX_MARK_MEMBER_NAME(spot_size,"spot_size");
	HX_MARK_MEMBER_NAME(spot_blend,"spot_blend");
	HX_MARK_MEMBER_NAME(light_size,"light_size");
	HX_MARK_MEMBER_NAME(color_texture,"color_texture");
	HX_MARK_MEMBER_NAME(size,"size");
	HX_MARK_MEMBER_NAME(size_y,"size_y");
	HX_MARK_END_CLASS();
}

void TLightData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(strength,"strength");
	HX_VISIT_MEMBER_NAME(cast_shadow,"cast_shadow");
	HX_VISIT_MEMBER_NAME(near_plane,"near_plane");
	HX_VISIT_MEMBER_NAME(far_plane,"far_plane");
	HX_VISIT_MEMBER_NAME(fov,"fov");
	HX_VISIT_MEMBER_NAME(shadows_bias,"shadows_bias");
	HX_VISIT_MEMBER_NAME(shadowmap_size,"shadowmap_size");
	HX_VISIT_MEMBER_NAME(shadowmap_cube,"shadowmap_cube");
	HX_VISIT_MEMBER_NAME(spot_size,"spot_size");
	HX_VISIT_MEMBER_NAME(spot_blend,"spot_blend");
	HX_VISIT_MEMBER_NAME(light_size,"light_size");
	HX_VISIT_MEMBER_NAME(color_texture,"color_texture");
	HX_VISIT_MEMBER_NAME(size,"size");
	HX_VISIT_MEMBER_NAME(size_y,"size_y");
}

hx::Val TLightData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"fov") ) { return hx::Val( fov ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { return hx::Val( color ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"size_y") ) { return hx::Val( size_y ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"strength") ) { return hx::Val( strength ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"far_plane") ) { return hx::Val( far_plane ); }
		if (HX_FIELD_EQ(inName,"spot_size") ) { return hx::Val( spot_size ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"near_plane") ) { return hx::Val( near_plane ); }
		if (HX_FIELD_EQ(inName,"spot_blend") ) { return hx::Val( spot_blend ); }
		if (HX_FIELD_EQ(inName,"light_size") ) { return hx::Val( light_size ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cast_shadow") ) { return hx::Val( cast_shadow ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"shadows_bias") ) { return hx::Val( shadows_bias ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"color_texture") ) { return hx::Val( color_texture ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"shadowmap_size") ) { return hx::Val( shadowmap_size ); }
		if (HX_FIELD_EQ(inName,"shadowmap_cube") ) { return hx::Val( shadowmap_cube ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TLightData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"fov") ) { fov=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"size") ) { size=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { color=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"size_y") ) { size_y=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"strength") ) { strength=inValue.Cast< float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"far_plane") ) { far_plane=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"spot_size") ) { spot_size=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"near_plane") ) { near_plane=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"spot_blend") ) { spot_blend=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"light_size") ) { light_size=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cast_shadow") ) { cast_shadow=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"shadows_bias") ) { shadows_bias=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"color_texture") ) { color_texture=inValue.Cast< ::String >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"shadowmap_size") ) { shadowmap_size=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shadowmap_cube") ) { shadowmap_cube=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TLightData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("color",63,71,5c,4a));
	outFields->push(HX_("strength",81,d2,8e,8e));
	outFields->push(HX_("cast_shadow",a0,a0,20,eb));
	outFields->push(HX_("near_plane",85,54,5f,ca));
	outFields->push(HX_("far_plane",b4,3b,51,fd));
	outFields->push(HX_("fov",0d,c7,4d,00));
	outFields->push(HX_("shadows_bias",e5,74,6a,36));
	outFields->push(HX_("shadowmap_size",64,64,75,5c));
	outFields->push(HX_("shadowmap_cube",98,00,eb,51));
	outFields->push(HX_("spot_size",5e,2e,1d,31));
	outFields->push(HX_("spot_blend",14,44,87,00));
	outFields->push(HX_("light_size",0a,64,3d,ed));
	outFields->push(HX_("color_texture",bf,2e,aa,01));
	outFields->push(HX_("size",c1,a0,53,4c));
	outFields->push(HX_("size_y",3b,66,0e,c1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TLightData_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TLightData_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsString,(int)offsetof(TLightData_obj,type),HX_("type",ba,f2,08,4d)},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(TLightData_obj,color),HX_("color",63,71,5c,4a)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TLightData_obj,strength),HX_("strength",81,d2,8e,8e)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TLightData_obj,cast_shadow),HX_("cast_shadow",a0,a0,20,eb)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TLightData_obj,near_plane),HX_("near_plane",85,54,5f,ca)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TLightData_obj,far_plane),HX_("far_plane",b4,3b,51,fd)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TLightData_obj,fov),HX_("fov",0d,c7,4d,00)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TLightData_obj,shadows_bias),HX_("shadows_bias",e5,74,6a,36)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TLightData_obj,shadowmap_size),HX_("shadowmap_size",64,64,75,5c)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TLightData_obj,shadowmap_cube),HX_("shadowmap_cube",98,00,eb,51)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TLightData_obj,spot_size),HX_("spot_size",5e,2e,1d,31)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TLightData_obj,spot_blend),HX_("spot_blend",14,44,87,00)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TLightData_obj,light_size),HX_("light_size",0a,64,3d,ed)},
	{hx::fsString,(int)offsetof(TLightData_obj,color_texture),HX_("color_texture",bf,2e,aa,01)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TLightData_obj,size),HX_("size",c1,a0,53,4c)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TLightData_obj,size_y),HX_("size_y",3b,66,0e,c1)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TLightData_obj_sStaticStorageInfo = 0;
#endif

static ::String TLightData_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("type",ba,f2,08,4d),
	HX_("color",63,71,5c,4a),
	HX_("strength",81,d2,8e,8e),
	HX_("cast_shadow",a0,a0,20,eb),
	HX_("near_plane",85,54,5f,ca),
	HX_("far_plane",b4,3b,51,fd),
	HX_("fov",0d,c7,4d,00),
	HX_("shadows_bias",e5,74,6a,36),
	HX_("shadowmap_size",64,64,75,5c),
	HX_("shadowmap_cube",98,00,eb,51),
	HX_("spot_size",5e,2e,1d,31),
	HX_("spot_blend",14,44,87,00),
	HX_("light_size",0a,64,3d,ed),
	HX_("color_texture",bf,2e,aa,01),
	HX_("size",c1,a0,53,4c),
	HX_("size_y",3b,66,0e,c1),
	::String(null()) };

hx::Class TLightData_obj::__mClass;

void TLightData_obj::__register()
{
	TLightData_obj _hx_dummy;
	TLightData_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.TLightData",ca,d3,4d,60);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TLightData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TLightData_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TLightData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TLightData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
