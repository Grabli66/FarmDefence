// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_TLod
#include <hxinc/iron/data/TLod.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0858ab71bf93b788_483_new,"iron.data.TLod","new",0xbb27c91d,"iron.data.TLod.new","iron/data/SceneFormat.hx",483,0x98b03519)
namespace iron{
namespace data{

void TLod_obj::__construct(::String object_ref,float screen_size){
            	HX_STACKFRAME(&_hx_pos_0858ab71bf93b788_483_new)
HXDLIN( 483)		this->object_ref = object_ref;
HXDLIN( 483)		this->screen_size = screen_size;
            	}

Dynamic TLod_obj::__CreateEmpty() { return new TLod_obj; }

void *TLod_obj::_hx_vtable = 0;

Dynamic TLod_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TLod_obj > _hx_result = new TLod_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool TLod_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x092c14ff;
}


TLod_obj::TLod_obj()
{
}

void TLod_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TLod);
	HX_MARK_MEMBER_NAME(object_ref,"object_ref");
	HX_MARK_MEMBER_NAME(screen_size,"screen_size");
	HX_MARK_END_CLASS();
}

void TLod_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(object_ref,"object_ref");
	HX_VISIT_MEMBER_NAME(screen_size,"screen_size");
}

hx::Val TLod_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"object_ref") ) { return hx::Val( object_ref ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"screen_size") ) { return hx::Val( screen_size ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TLod_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"object_ref") ) { object_ref=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"screen_size") ) { screen_size=inValue.Cast< float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TLod_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("object_ref",93,68,81,d6));
	outFields->push(HX_("screen_size",b4,99,bc,23));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TLod_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TLod_obj,object_ref),HX_("object_ref",93,68,81,d6)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TLod_obj,screen_size),HX_("screen_size",b4,99,bc,23)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TLod_obj_sStaticStorageInfo = 0;
#endif

static ::String TLod_obj_sMemberFields[] = {
	HX_("object_ref",93,68,81,d6),
	HX_("screen_size",b4,99,bc,23),
	::String(null()) };

hx::Class TLod_obj::__mClass;

void TLod_obj::__register()
{
	TLod_obj _hx_dummy;
	TLod_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.TLod",ab,f6,b3,be);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TLod_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TLod_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TLod_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TLod_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
