// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_TMaterialContext
#include <hxinc/iron/data/TMaterialContext.h>
#endif
#ifndef INCLUDED_iron_data_TMaterialData
#include <hxinc/iron/data/TMaterialData.h>
#endif
#ifndef INCLUDED_iron_data_TShaderOverride
#include <hxinc/iron/data/TShaderOverride.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0129e53a11e992a3_129_new,"iron.data.TMaterialData","new",0x0015b779,"iron.data.TMaterialData.new","iron/data/SceneFormat.hx",129,0x98b03519)
namespace iron{
namespace data{

void TMaterialData_obj::__construct(::String name,::String shader,::Array< ::Dynamic> contexts,::String skip_context, ::iron::data::TShaderOverride override_context){
            	HX_STACKFRAME(&_hx_pos_0129e53a11e992a3_129_new)
HXDLIN( 129)		this->name = name;
HXDLIN( 129)		this->shader = shader;
HXDLIN( 129)		this->contexts = contexts;
HXDLIN( 129)		this->skip_context = skip_context;
HXDLIN( 129)		this->override_context = override_context;
            	}

Dynamic TMaterialData_obj::__CreateEmpty() { return new TMaterialData_obj; }

void *TMaterialData_obj::_hx_vtable = 0;

Dynamic TMaterialData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TMaterialData_obj > _hx_result = new TMaterialData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool TMaterialData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5e17c94f;
}


hx::ObjectPtr< TMaterialData_obj > TMaterialData_obj::__new(::String name,::String shader,::Array< ::Dynamic> contexts,::String skip_context, ::iron::data::TShaderOverride override_context) {
	hx::ObjectPtr< TMaterialData_obj > __this = new TMaterialData_obj();
	__this->__construct(name,shader,contexts,skip_context,override_context);
	return __this;
}

hx::ObjectPtr< TMaterialData_obj > TMaterialData_obj::__alloc(hx::Ctx *_hx_ctx,::String name,::String shader,::Array< ::Dynamic> contexts,::String skip_context, ::iron::data::TShaderOverride override_context) {
	TMaterialData_obj *__this = (TMaterialData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TMaterialData_obj), true, "iron.data.TMaterialData"));
	*(void **)__this = TMaterialData_obj::_hx_vtable;
	__this->__construct(name,shader,contexts,skip_context,override_context);
	return __this;
}

TMaterialData_obj::TMaterialData_obj()
{
}

void TMaterialData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TMaterialData);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(shader,"shader");
	HX_MARK_MEMBER_NAME(contexts,"contexts");
	HX_MARK_MEMBER_NAME(skip_context,"skip_context");
	HX_MARK_MEMBER_NAME(override_context,"override_context");
	HX_MARK_END_CLASS();
}

void TMaterialData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(shader,"shader");
	HX_VISIT_MEMBER_NAME(contexts,"contexts");
	HX_VISIT_MEMBER_NAME(skip_context,"skip_context");
	HX_VISIT_MEMBER_NAME(override_context,"override_context");
}

hx::Val TMaterialData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shader") ) { return hx::Val( shader ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"contexts") ) { return hx::Val( contexts ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"skip_context") ) { return hx::Val( skip_context ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"override_context") ) { return hx::Val( override_context ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TMaterialData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shader") ) { shader=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"contexts") ) { contexts=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"skip_context") ) { skip_context=inValue.Cast< ::String >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"override_context") ) { override_context=inValue.Cast<  ::iron::data::TShaderOverride >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TMaterialData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("shader",25,bf,20,1d));
	outFields->push(HX_("contexts",a4,9b,2b,2f));
	outFields->push(HX_("skip_context",ef,1c,4e,e1));
	outFields->push(HX_("override_context",bc,3d,f5,b3));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TMaterialData_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TMaterialData_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsString,(int)offsetof(TMaterialData_obj,shader),HX_("shader",25,bf,20,1d)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TMaterialData_obj,contexts),HX_("contexts",a4,9b,2b,2f)},
	{hx::fsString,(int)offsetof(TMaterialData_obj,skip_context),HX_("skip_context",ef,1c,4e,e1)},
	{hx::fsObject /*::iron::data::TShaderOverride*/ ,(int)offsetof(TMaterialData_obj,override_context),HX_("override_context",bc,3d,f5,b3)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TMaterialData_obj_sStaticStorageInfo = 0;
#endif

static ::String TMaterialData_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("shader",25,bf,20,1d),
	HX_("contexts",a4,9b,2b,2f),
	HX_("skip_context",ef,1c,4e,e1),
	HX_("override_context",bc,3d,f5,b3),
	::String(null()) };

hx::Class TMaterialData_obj::__mClass;

void TMaterialData_obj::__register()
{
	TMaterialData_obj _hx_dummy;
	TMaterialData_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.TMaterialData",07,87,3c,73);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TMaterialData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TMaterialData_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TMaterialData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TMaterialData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
