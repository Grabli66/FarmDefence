// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_TIndexArray
#include <hxinc/iron/data/TIndexArray.h>
#endif
#ifndef INCLUDED_iron_data_TMeshData
#include <hxinc/iron/data/TMeshData.h>
#endif
#ifndef INCLUDED_iron_data_TSkin
#include <hxinc/iron/data/TSkin.h>
#endif
#ifndef INCLUDED_iron_data_TVertexArray
#include <hxinc/iron/data/TVertexArray.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_68a26bb148110339_38_new,"iron.data.TMeshData","new",0xd06257bf,"iron.data.TMeshData.new","iron/data/SceneFormat.hx",38,0x98b03519)
namespace iron{
namespace data{

void TMeshData_obj::__construct(::String name,::Array< ::Dynamic> vertex_arrays,::Array< ::Dynamic> index_arrays, ::Dynamic dynamic_usage, ::iron::data::TSkin skin, ::kha::arrays::Float32ArrayPrivate instanced_data, ::Dynamic instanced_type,::String sdf_ref){
            	HX_STACKFRAME(&_hx_pos_68a26bb148110339_38_new)
HXDLIN(  38)		this->name = name;
HXDLIN(  38)		this->vertex_arrays = vertex_arrays;
HXDLIN(  38)		this->index_arrays = index_arrays;
HXDLIN(  38)		this->dynamic_usage = dynamic_usage;
HXDLIN(  38)		this->skin = skin;
HXDLIN(  38)		this->instanced_data = instanced_data;
HXDLIN(  38)		this->instanced_type = instanced_type;
HXDLIN(  38)		this->sdf_ref = sdf_ref;
            	}

Dynamic TMeshData_obj::__CreateEmpty() { return new TMeshData_obj; }

void *TMeshData_obj::_hx_vtable = 0;

Dynamic TMeshData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TMeshData_obj > _hx_result = new TMeshData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7]);
	return _hx_result;
}

bool TMeshData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x545597b1;
}


hx::ObjectPtr< TMeshData_obj > TMeshData_obj::__new(::String name,::Array< ::Dynamic> vertex_arrays,::Array< ::Dynamic> index_arrays, ::Dynamic dynamic_usage, ::iron::data::TSkin skin, ::kha::arrays::Float32ArrayPrivate instanced_data, ::Dynamic instanced_type,::String sdf_ref) {
	hx::ObjectPtr< TMeshData_obj > __this = new TMeshData_obj();
	__this->__construct(name,vertex_arrays,index_arrays,dynamic_usage,skin,instanced_data,instanced_type,sdf_ref);
	return __this;
}

hx::ObjectPtr< TMeshData_obj > TMeshData_obj::__alloc(hx::Ctx *_hx_ctx,::String name,::Array< ::Dynamic> vertex_arrays,::Array< ::Dynamic> index_arrays, ::Dynamic dynamic_usage, ::iron::data::TSkin skin, ::kha::arrays::Float32ArrayPrivate instanced_data, ::Dynamic instanced_type,::String sdf_ref) {
	TMeshData_obj *__this = (TMeshData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TMeshData_obj), true, "iron.data.TMeshData"));
	*(void **)__this = TMeshData_obj::_hx_vtable;
	__this->__construct(name,vertex_arrays,index_arrays,dynamic_usage,skin,instanced_data,instanced_type,sdf_ref);
	return __this;
}

TMeshData_obj::TMeshData_obj()
{
}

void TMeshData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TMeshData);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(vertex_arrays,"vertex_arrays");
	HX_MARK_MEMBER_NAME(index_arrays,"index_arrays");
	HX_MARK_MEMBER_NAME(dynamic_usage,"dynamic_usage");
	HX_MARK_MEMBER_NAME(skin,"skin");
	HX_MARK_MEMBER_NAME(instanced_data,"instanced_data");
	HX_MARK_MEMBER_NAME(instanced_type,"instanced_type");
	HX_MARK_MEMBER_NAME(sdf_ref,"sdf_ref");
	HX_MARK_END_CLASS();
}

void TMeshData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(vertex_arrays,"vertex_arrays");
	HX_VISIT_MEMBER_NAME(index_arrays,"index_arrays");
	HX_VISIT_MEMBER_NAME(dynamic_usage,"dynamic_usage");
	HX_VISIT_MEMBER_NAME(skin,"skin");
	HX_VISIT_MEMBER_NAME(instanced_data,"instanced_data");
	HX_VISIT_MEMBER_NAME(instanced_type,"instanced_type");
	HX_VISIT_MEMBER_NAME(sdf_ref,"sdf_ref");
}

hx::Val TMeshData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"skin") ) { return hx::Val( skin ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"sdf_ref") ) { return hx::Val( sdf_ref ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"index_arrays") ) { return hx::Val( index_arrays ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"vertex_arrays") ) { return hx::Val( vertex_arrays ); }
		if (HX_FIELD_EQ(inName,"dynamic_usage") ) { return hx::Val( dynamic_usage ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"instanced_data") ) { return hx::Val( instanced_data ); }
		if (HX_FIELD_EQ(inName,"instanced_type") ) { return hx::Val( instanced_type ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TMeshData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skin") ) { skin=inValue.Cast<  ::iron::data::TSkin >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"sdf_ref") ) { sdf_ref=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"index_arrays") ) { index_arrays=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"vertex_arrays") ) { vertex_arrays=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dynamic_usage") ) { dynamic_usage=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"instanced_data") ) { instanced_data=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		if (HX_FIELD_EQ(inName,"instanced_type") ) { instanced_type=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TMeshData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("vertex_arrays",75,a3,55,cb));
	outFields->push(HX_("index_arrays",87,55,78,a3));
	outFields->push(HX_("dynamic_usage",21,6d,d3,8f));
	outFields->push(HX_("skin",7d,16,55,4c));
	outFields->push(HX_("instanced_data",7a,04,25,b7));
	outFields->push(HX_("instanced_type",0a,a1,ca,c1));
	outFields->push(HX_("sdf_ref",89,b7,d5,a3));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TMeshData_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TMeshData_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TMeshData_obj,vertex_arrays),HX_("vertex_arrays",75,a3,55,cb)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TMeshData_obj,index_arrays),HX_("index_arrays",87,55,78,a3)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TMeshData_obj,dynamic_usage),HX_("dynamic_usage",21,6d,d3,8f)},
	{hx::fsObject /*::iron::data::TSkin*/ ,(int)offsetof(TMeshData_obj,skin),HX_("skin",7d,16,55,4c)},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(TMeshData_obj,instanced_data),HX_("instanced_data",7a,04,25,b7)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TMeshData_obj,instanced_type),HX_("instanced_type",0a,a1,ca,c1)},
	{hx::fsString,(int)offsetof(TMeshData_obj,sdf_ref),HX_("sdf_ref",89,b7,d5,a3)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TMeshData_obj_sStaticStorageInfo = 0;
#endif

static ::String TMeshData_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("vertex_arrays",75,a3,55,cb),
	HX_("index_arrays",87,55,78,a3),
	HX_("dynamic_usage",21,6d,d3,8f),
	HX_("skin",7d,16,55,4c),
	HX_("instanced_data",7a,04,25,b7),
	HX_("instanced_type",0a,a1,ca,c1),
	HX_("sdf_ref",89,b7,d5,a3),
	::String(null()) };

hx::Class TMeshData_obj::__mClass;

void TMeshData_obj::__register()
{
	TMeshData_obj _hx_dummy;
	TMeshData_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.TMeshData",4d,0c,d6,e9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TMeshData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TMeshData_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TMeshData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TMeshData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
