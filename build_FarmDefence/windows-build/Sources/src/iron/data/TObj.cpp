// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_TAnimation
#include <hxinc/iron/data/TAnimation.h>
#endif
#ifndef INCLUDED_iron_data_TConstraint
#include <hxinc/iron/data/TConstraint.h>
#endif
#ifndef INCLUDED_iron_data_TLod
#include <hxinc/iron/data/TLod.h>
#endif
#ifndef INCLUDED_iron_data_TObj
#include <hxinc/iron/data/TObj.h>
#endif
#ifndef INCLUDED_iron_data_TParticleReference
#include <hxinc/iron/data/TParticleReference.h>
#endif
#ifndef INCLUDED_iron_data_TTrait
#include <hxinc/iron/data/TTrait.h>
#endif
#ifndef INCLUDED_iron_data_TTransform
#include <hxinc/iron/data/TTransform.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4ed28482413db265_435_new,"iron.data.TObj","new",0x79abf793,"iron.data.TObj.new","iron/data/SceneFormat.hx",435,0x98b03519)
namespace iron{
namespace data{

void TObj_obj::__construct(::String type,::String name,::String data_ref, ::iron::data::TTransform transform,::Array< ::String > material_refs,::Array< ::Dynamic> particle_refs, ::Dynamic is_particle,::Array< ::Dynamic> children,::String group_ref,::Array< ::String > groups,::Array< ::Dynamic> lods, ::Dynamic lod_material,::Array< ::Dynamic> traits,::Array< ::Dynamic> constraints, ::kha::arrays::Float32ArrayPrivate dimensions,::Array< ::String > object_actions,::Array< ::String > bone_actions, ::iron::data::TAnimation anim, ::iron::data::TObj parent,::String parent_bone, ::kha::arrays::Float32ArrayPrivate parent_bone_tail, ::kha::arrays::Float32ArrayPrivate parent_bone_tail_pose, ::Dynamic parent_bone_connected, ::Dynamic visible, ::Dynamic visible_mesh, ::Dynamic visible_shadow, ::Dynamic mobile, ::Dynamic spawn, ::Dynamic local_only,::String tilesheet_ref,::String tilesheet_action_ref, ::Dynamic sampled){
            	HX_STACKFRAME(&_hx_pos_4ed28482413db265_435_new)
HXDLIN( 435)		this->type = type;
HXDLIN( 435)		this->name = name;
HXDLIN( 435)		this->data_ref = data_ref;
HXDLIN( 435)		this->transform = transform;
HXDLIN( 435)		this->material_refs = material_refs;
HXDLIN( 435)		this->particle_refs = particle_refs;
HXDLIN( 435)		this->is_particle = is_particle;
HXDLIN( 435)		this->children = children;
HXDLIN( 435)		this->group_ref = group_ref;
HXDLIN( 435)		this->groups = groups;
HXDLIN( 435)		this->lods = lods;
HXDLIN( 435)		this->lod_material = lod_material;
HXDLIN( 435)		this->traits = traits;
HXDLIN( 435)		this->constraints = constraints;
HXDLIN( 435)		this->dimensions = dimensions;
HXDLIN( 435)		this->object_actions = object_actions;
HXDLIN( 435)		this->bone_actions = bone_actions;
HXDLIN( 435)		this->anim = anim;
HXDLIN( 435)		this->parent = parent;
HXDLIN( 435)		this->parent_bone = parent_bone;
HXDLIN( 435)		this->parent_bone_tail = parent_bone_tail;
HXDLIN( 435)		this->parent_bone_tail_pose = parent_bone_tail_pose;
HXDLIN( 435)		this->parent_bone_connected = parent_bone_connected;
HXDLIN( 435)		this->visible = visible;
HXDLIN( 435)		this->visible_mesh = visible_mesh;
HXDLIN( 435)		this->visible_shadow = visible_shadow;
HXDLIN( 435)		this->mobile = mobile;
HXDLIN( 435)		this->spawn = spawn;
HXDLIN( 435)		this->local_only = local_only;
HXDLIN( 435)		this->tilesheet_ref = tilesheet_ref;
HXDLIN( 435)		this->tilesheet_action_ref = tilesheet_action_ref;
HXDLIN( 435)		this->sampled = sampled;
            	}

Dynamic TObj_obj::__CreateEmpty() { return new TObj_obj; }

void *TObj_obj::_hx_vtable = 0;

Dynamic TObj_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TObj_obj > _hx_result = new TObj_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12],inArgs[13],inArgs[14],inArgs[15],inArgs[16],inArgs[17],inArgs[18],inArgs[19],inArgs[20],inArgs[21],inArgs[22],inArgs[23],inArgs[24],inArgs[25],inArgs[26],inArgs[27],inArgs[28],inArgs[29],inArgs[30],inArgs[31]);
	return _hx_result;
}

bool TObj_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x092e5075;
}


hx::ObjectPtr< TObj_obj > TObj_obj::__new(::String type,::String name,::String data_ref, ::iron::data::TTransform transform,::Array< ::String > material_refs,::Array< ::Dynamic> particle_refs, ::Dynamic is_particle,::Array< ::Dynamic> children,::String group_ref,::Array< ::String > groups,::Array< ::Dynamic> lods, ::Dynamic lod_material,::Array< ::Dynamic> traits,::Array< ::Dynamic> constraints, ::kha::arrays::Float32ArrayPrivate dimensions,::Array< ::String > object_actions,::Array< ::String > bone_actions, ::iron::data::TAnimation anim, ::iron::data::TObj parent,::String parent_bone, ::kha::arrays::Float32ArrayPrivate parent_bone_tail, ::kha::arrays::Float32ArrayPrivate parent_bone_tail_pose, ::Dynamic parent_bone_connected, ::Dynamic visible, ::Dynamic visible_mesh, ::Dynamic visible_shadow, ::Dynamic mobile, ::Dynamic spawn, ::Dynamic local_only,::String tilesheet_ref,::String tilesheet_action_ref, ::Dynamic sampled) {
	hx::ObjectPtr< TObj_obj > __this = new TObj_obj();
	__this->__construct(type,name,data_ref,transform,material_refs,particle_refs,is_particle,children,group_ref,groups,lods,lod_material,traits,constraints,dimensions,object_actions,bone_actions,anim,parent,parent_bone,parent_bone_tail,parent_bone_tail_pose,parent_bone_connected,visible,visible_mesh,visible_shadow,mobile,spawn,local_only,tilesheet_ref,tilesheet_action_ref,sampled);
	return __this;
}

hx::ObjectPtr< TObj_obj > TObj_obj::__alloc(hx::Ctx *_hx_ctx,::String type,::String name,::String data_ref, ::iron::data::TTransform transform,::Array< ::String > material_refs,::Array< ::Dynamic> particle_refs, ::Dynamic is_particle,::Array< ::Dynamic> children,::String group_ref,::Array< ::String > groups,::Array< ::Dynamic> lods, ::Dynamic lod_material,::Array< ::Dynamic> traits,::Array< ::Dynamic> constraints, ::kha::arrays::Float32ArrayPrivate dimensions,::Array< ::String > object_actions,::Array< ::String > bone_actions, ::iron::data::TAnimation anim, ::iron::data::TObj parent,::String parent_bone, ::kha::arrays::Float32ArrayPrivate parent_bone_tail, ::kha::arrays::Float32ArrayPrivate parent_bone_tail_pose, ::Dynamic parent_bone_connected, ::Dynamic visible, ::Dynamic visible_mesh, ::Dynamic visible_shadow, ::Dynamic mobile, ::Dynamic spawn, ::Dynamic local_only,::String tilesheet_ref,::String tilesheet_action_ref, ::Dynamic sampled) {
	TObj_obj *__this = (TObj_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TObj_obj), true, "iron.data.TObj"));
	*(void **)__this = TObj_obj::_hx_vtable;
	__this->__construct(type,name,data_ref,transform,material_refs,particle_refs,is_particle,children,group_ref,groups,lods,lod_material,traits,constraints,dimensions,object_actions,bone_actions,anim,parent,parent_bone,parent_bone_tail,parent_bone_tail_pose,parent_bone_connected,visible,visible_mesh,visible_shadow,mobile,spawn,local_only,tilesheet_ref,tilesheet_action_ref,sampled);
	return __this;
}

TObj_obj::TObj_obj()
{
}

void TObj_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TObj);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(data_ref,"data_ref");
	HX_MARK_MEMBER_NAME(transform,"transform");
	HX_MARK_MEMBER_NAME(material_refs,"material_refs");
	HX_MARK_MEMBER_NAME(particle_refs,"particle_refs");
	HX_MARK_MEMBER_NAME(is_particle,"is_particle");
	HX_MARK_MEMBER_NAME(children,"children");
	HX_MARK_MEMBER_NAME(group_ref,"group_ref");
	HX_MARK_MEMBER_NAME(groups,"groups");
	HX_MARK_MEMBER_NAME(lods,"lods");
	HX_MARK_MEMBER_NAME(lod_material,"lod_material");
	HX_MARK_MEMBER_NAME(traits,"traits");
	HX_MARK_MEMBER_NAME(constraints,"constraints");
	HX_MARK_MEMBER_NAME(dimensions,"dimensions");
	HX_MARK_MEMBER_NAME(object_actions,"object_actions");
	HX_MARK_MEMBER_NAME(bone_actions,"bone_actions");
	HX_MARK_MEMBER_NAME(anim,"anim");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(parent_bone,"parent_bone");
	HX_MARK_MEMBER_NAME(parent_bone_tail,"parent_bone_tail");
	HX_MARK_MEMBER_NAME(parent_bone_tail_pose,"parent_bone_tail_pose");
	HX_MARK_MEMBER_NAME(parent_bone_connected,"parent_bone_connected");
	HX_MARK_MEMBER_NAME(visible,"visible");
	HX_MARK_MEMBER_NAME(visible_mesh,"visible_mesh");
	HX_MARK_MEMBER_NAME(visible_shadow,"visible_shadow");
	HX_MARK_MEMBER_NAME(mobile,"mobile");
	HX_MARK_MEMBER_NAME(spawn,"spawn");
	HX_MARK_MEMBER_NAME(local_only,"local_only");
	HX_MARK_MEMBER_NAME(tilesheet_ref,"tilesheet_ref");
	HX_MARK_MEMBER_NAME(tilesheet_action_ref,"tilesheet_action_ref");
	HX_MARK_MEMBER_NAME(sampled,"sampled");
	HX_MARK_END_CLASS();
}

void TObj_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(data_ref,"data_ref");
	HX_VISIT_MEMBER_NAME(transform,"transform");
	HX_VISIT_MEMBER_NAME(material_refs,"material_refs");
	HX_VISIT_MEMBER_NAME(particle_refs,"particle_refs");
	HX_VISIT_MEMBER_NAME(is_particle,"is_particle");
	HX_VISIT_MEMBER_NAME(children,"children");
	HX_VISIT_MEMBER_NAME(group_ref,"group_ref");
	HX_VISIT_MEMBER_NAME(groups,"groups");
	HX_VISIT_MEMBER_NAME(lods,"lods");
	HX_VISIT_MEMBER_NAME(lod_material,"lod_material");
	HX_VISIT_MEMBER_NAME(traits,"traits");
	HX_VISIT_MEMBER_NAME(constraints,"constraints");
	HX_VISIT_MEMBER_NAME(dimensions,"dimensions");
	HX_VISIT_MEMBER_NAME(object_actions,"object_actions");
	HX_VISIT_MEMBER_NAME(bone_actions,"bone_actions");
	HX_VISIT_MEMBER_NAME(anim,"anim");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(parent_bone,"parent_bone");
	HX_VISIT_MEMBER_NAME(parent_bone_tail,"parent_bone_tail");
	HX_VISIT_MEMBER_NAME(parent_bone_tail_pose,"parent_bone_tail_pose");
	HX_VISIT_MEMBER_NAME(parent_bone_connected,"parent_bone_connected");
	HX_VISIT_MEMBER_NAME(visible,"visible");
	HX_VISIT_MEMBER_NAME(visible_mesh,"visible_mesh");
	HX_VISIT_MEMBER_NAME(visible_shadow,"visible_shadow");
	HX_VISIT_MEMBER_NAME(mobile,"mobile");
	HX_VISIT_MEMBER_NAME(spawn,"spawn");
	HX_VISIT_MEMBER_NAME(local_only,"local_only");
	HX_VISIT_MEMBER_NAME(tilesheet_ref,"tilesheet_ref");
	HX_VISIT_MEMBER_NAME(tilesheet_action_ref,"tilesheet_action_ref");
	HX_VISIT_MEMBER_NAME(sampled,"sampled");
}

hx::Val TObj_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"lods") ) { return hx::Val( lods ); }
		if (HX_FIELD_EQ(inName,"anim") ) { return hx::Val( anim ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"spawn") ) { return hx::Val( spawn ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"groups") ) { return hx::Val( groups ); }
		if (HX_FIELD_EQ(inName,"traits") ) { return hx::Val( traits ); }
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent ); }
		if (HX_FIELD_EQ(inName,"mobile") ) { return hx::Val( mobile ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"visible") ) { return hx::Val( visible ); }
		if (HX_FIELD_EQ(inName,"sampled") ) { return hx::Val( sampled ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"data_ref") ) { return hx::Val( data_ref ); }
		if (HX_FIELD_EQ(inName,"children") ) { return hx::Val( children ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"transform") ) { return hx::Val( transform ); }
		if (HX_FIELD_EQ(inName,"group_ref") ) { return hx::Val( group_ref ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dimensions") ) { return hx::Val( dimensions ); }
		if (HX_FIELD_EQ(inName,"local_only") ) { return hx::Val( local_only ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"is_particle") ) { return hx::Val( is_particle ); }
		if (HX_FIELD_EQ(inName,"constraints") ) { return hx::Val( constraints ); }
		if (HX_FIELD_EQ(inName,"parent_bone") ) { return hx::Val( parent_bone ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lod_material") ) { return hx::Val( lod_material ); }
		if (HX_FIELD_EQ(inName,"bone_actions") ) { return hx::Val( bone_actions ); }
		if (HX_FIELD_EQ(inName,"visible_mesh") ) { return hx::Val( visible_mesh ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"material_refs") ) { return hx::Val( material_refs ); }
		if (HX_FIELD_EQ(inName,"particle_refs") ) { return hx::Val( particle_refs ); }
		if (HX_FIELD_EQ(inName,"tilesheet_ref") ) { return hx::Val( tilesheet_ref ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"object_actions") ) { return hx::Val( object_actions ); }
		if (HX_FIELD_EQ(inName,"visible_shadow") ) { return hx::Val( visible_shadow ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"parent_bone_tail") ) { return hx::Val( parent_bone_tail ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"tilesheet_action_ref") ) { return hx::Val( tilesheet_action_ref ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"parent_bone_tail_pose") ) { return hx::Val( parent_bone_tail_pose ); }
		if (HX_FIELD_EQ(inName,"parent_bone_connected") ) { return hx::Val( parent_bone_connected ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TObj_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lods") ) { lods=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"anim") ) { anim=inValue.Cast<  ::iron::data::TAnimation >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"spawn") ) { spawn=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"groups") ) { groups=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"traits") ) { traits=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::iron::data::TObj >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mobile") ) { mobile=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"visible") ) { visible=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sampled") ) { sampled=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"data_ref") ) { data_ref=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"children") ) { children=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"transform") ) { transform=inValue.Cast<  ::iron::data::TTransform >(); return inValue; }
		if (HX_FIELD_EQ(inName,"group_ref") ) { group_ref=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dimensions") ) { dimensions=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		if (HX_FIELD_EQ(inName,"local_only") ) { local_only=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"is_particle") ) { is_particle=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"constraints") ) { constraints=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parent_bone") ) { parent_bone=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lod_material") ) { lod_material=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bone_actions") ) { bone_actions=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"visible_mesh") ) { visible_mesh=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"material_refs") ) { material_refs=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"particle_refs") ) { particle_refs=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tilesheet_ref") ) { tilesheet_ref=inValue.Cast< ::String >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"object_actions") ) { object_actions=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"visible_shadow") ) { visible_shadow=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"parent_bone_tail") ) { parent_bone_tail=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"tilesheet_action_ref") ) { tilesheet_action_ref=inValue.Cast< ::String >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"parent_bone_tail_pose") ) { parent_bone_tail_pose=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parent_bone_connected") ) { parent_bone_connected=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TObj_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("data_ref",7e,d1,bc,93));
	outFields->push(HX_("transform",6c,2d,93,45));
	outFields->push(HX_("material_refs",98,d1,be,32));
	outFields->push(HX_("particle_refs",99,af,e1,81));
	outFields->push(HX_("is_particle",7b,0c,d5,f0));
	outFields->push(HX_("children",3f,19,6a,70));
	outFields->push(HX_("group_ref",13,dd,2a,e3));
	outFields->push(HX_("groups",54,24,28,1c));
	outFields->push(HX_("lods",d2,9c,b7,47));
	outFields->push(HX_("lod_material",65,e7,84,f2));
	outFields->push(HX_("traits",e5,c0,81,45));
	outFields->push(HX_("constraints",76,51,b4,17));
	outFields->push(HX_("dimensions",4d,be,9f,dc));
	outFields->push(HX_("object_actions",3d,33,f1,c0));
	outFields->push(HX_("bone_actions",c2,c4,dc,85));
	outFields->push(HX_("anim",11,86,71,40));
	outFields->push(HX_("parent",2a,05,7e,ed));
	outFields->push(HX_("parent_bone",b9,a1,b9,f1));
	outFields->push(HX_("parent_bone_tail",16,52,cc,9c));
	outFields->push(HX_("parent_bone_tail_pose",5a,fe,91,8c));
	outFields->push(HX_("parent_bone_connected",83,c1,c1,b3));
	outFields->push(HX_("visible",72,78,24,a3));
	outFields->push(HX_("visible_mesh",1a,10,c2,dd));
	outFields->push(HX_("visible_shadow",4d,33,e9,72));
	outFields->push(HX_("mobile",62,ac,77,bf));
	outFields->push(HX_("spawn",3b,9e,66,81));
	outFields->push(HX_("local_only",00,d4,89,a1));
	outFields->push(HX_("tilesheet_ref",85,9b,84,a0));
	outFields->push(HX_("tilesheet_action_ref",18,35,58,35));
	outFields->push(HX_("sampled",fa,c4,c9,83));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TObj_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TObj_obj,type),HX_("type",ba,f2,08,4d)},
	{hx::fsString,(int)offsetof(TObj_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsString,(int)offsetof(TObj_obj,data_ref),HX_("data_ref",7e,d1,bc,93)},
	{hx::fsObject /*::iron::data::TTransform*/ ,(int)offsetof(TObj_obj,transform),HX_("transform",6c,2d,93,45)},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(TObj_obj,material_refs),HX_("material_refs",98,d1,be,32)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TObj_obj,particle_refs),HX_("particle_refs",99,af,e1,81)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TObj_obj,is_particle),HX_("is_particle",7b,0c,d5,f0)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TObj_obj,children),HX_("children",3f,19,6a,70)},
	{hx::fsString,(int)offsetof(TObj_obj,group_ref),HX_("group_ref",13,dd,2a,e3)},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(TObj_obj,groups),HX_("groups",54,24,28,1c)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TObj_obj,lods),HX_("lods",d2,9c,b7,47)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TObj_obj,lod_material),HX_("lod_material",65,e7,84,f2)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TObj_obj,traits),HX_("traits",e5,c0,81,45)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TObj_obj,constraints),HX_("constraints",76,51,b4,17)},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(TObj_obj,dimensions),HX_("dimensions",4d,be,9f,dc)},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(TObj_obj,object_actions),HX_("object_actions",3d,33,f1,c0)},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(TObj_obj,bone_actions),HX_("bone_actions",c2,c4,dc,85)},
	{hx::fsObject /*::iron::data::TAnimation*/ ,(int)offsetof(TObj_obj,anim),HX_("anim",11,86,71,40)},
	{hx::fsObject /*::iron::data::TObj*/ ,(int)offsetof(TObj_obj,parent),HX_("parent",2a,05,7e,ed)},
	{hx::fsString,(int)offsetof(TObj_obj,parent_bone),HX_("parent_bone",b9,a1,b9,f1)},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(TObj_obj,parent_bone_tail),HX_("parent_bone_tail",16,52,cc,9c)},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(TObj_obj,parent_bone_tail_pose),HX_("parent_bone_tail_pose",5a,fe,91,8c)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TObj_obj,parent_bone_connected),HX_("parent_bone_connected",83,c1,c1,b3)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TObj_obj,visible),HX_("visible",72,78,24,a3)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TObj_obj,visible_mesh),HX_("visible_mesh",1a,10,c2,dd)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TObj_obj,visible_shadow),HX_("visible_shadow",4d,33,e9,72)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TObj_obj,mobile),HX_("mobile",62,ac,77,bf)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TObj_obj,spawn),HX_("spawn",3b,9e,66,81)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TObj_obj,local_only),HX_("local_only",00,d4,89,a1)},
	{hx::fsString,(int)offsetof(TObj_obj,tilesheet_ref),HX_("tilesheet_ref",85,9b,84,a0)},
	{hx::fsString,(int)offsetof(TObj_obj,tilesheet_action_ref),HX_("tilesheet_action_ref",18,35,58,35)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TObj_obj,sampled),HX_("sampled",fa,c4,c9,83)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TObj_obj_sStaticStorageInfo = 0;
#endif

static ::String TObj_obj_sMemberFields[] = {
	HX_("type",ba,f2,08,4d),
	HX_("name",4b,72,ff,48),
	HX_("data_ref",7e,d1,bc,93),
	HX_("transform",6c,2d,93,45),
	HX_("material_refs",98,d1,be,32),
	HX_("particle_refs",99,af,e1,81),
	HX_("is_particle",7b,0c,d5,f0),
	HX_("children",3f,19,6a,70),
	HX_("group_ref",13,dd,2a,e3),
	HX_("groups",54,24,28,1c),
	HX_("lods",d2,9c,b7,47),
	HX_("lod_material",65,e7,84,f2),
	HX_("traits",e5,c0,81,45),
	HX_("constraints",76,51,b4,17),
	HX_("dimensions",4d,be,9f,dc),
	HX_("object_actions",3d,33,f1,c0),
	HX_("bone_actions",c2,c4,dc,85),
	HX_("anim",11,86,71,40),
	HX_("parent",2a,05,7e,ed),
	HX_("parent_bone",b9,a1,b9,f1),
	HX_("parent_bone_tail",16,52,cc,9c),
	HX_("parent_bone_tail_pose",5a,fe,91,8c),
	HX_("parent_bone_connected",83,c1,c1,b3),
	HX_("visible",72,78,24,a3),
	HX_("visible_mesh",1a,10,c2,dd),
	HX_("visible_shadow",4d,33,e9,72),
	HX_("mobile",62,ac,77,bf),
	HX_("spawn",3b,9e,66,81),
	HX_("local_only",00,d4,89,a1),
	HX_("tilesheet_ref",85,9b,84,a0),
	HX_("tilesheet_action_ref",18,35,58,35),
	HX_("sampled",fa,c4,c9,83),
	::String(null()) };

hx::Class TObj_obj::__mClass;

void TObj_obj::__register()
{
	TObj_obj _hx_dummy;
	TObj_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.TObj",21,32,b6,be);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TObj_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TObj_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TObj_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TObj_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
