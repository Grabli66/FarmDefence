// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_TParticleData
#include <hxinc/iron/data/TParticleData.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9de9dcb276a1560d_394_new,"iron.data.TParticleData","new",0x103ad018,"iron.data.TParticleData.new","iron/data/SceneFormat.hx",394,0x98b03519)
namespace iron{
namespace data{

void TParticleData_obj::__construct(::String name,int type,bool loop,bool render_emitter,int count,float frame_start,float frame_end,float lifetime,float lifetime_random,int emit_from, ::kha::arrays::Float32ArrayPrivate object_align_factor,float factor_random,int physics_type,float particle_size,float size_random,float mass,::String dupli_object,float weight_gravity){
            	HX_STACKFRAME(&_hx_pos_9de9dcb276a1560d_394_new)
HXDLIN( 394)		this->name = name;
HXDLIN( 394)		this->type = type;
HXDLIN( 394)		this->loop = loop;
HXDLIN( 394)		this->render_emitter = render_emitter;
HXDLIN( 394)		this->count = count;
HXDLIN( 394)		this->frame_start = frame_start;
HXDLIN( 394)		this->frame_end = frame_end;
HXDLIN( 394)		this->lifetime = lifetime;
HXDLIN( 394)		this->lifetime_random = lifetime_random;
HXDLIN( 394)		this->emit_from = emit_from;
HXDLIN( 394)		this->object_align_factor = object_align_factor;
HXDLIN( 394)		this->factor_random = factor_random;
HXDLIN( 394)		this->physics_type = physics_type;
HXDLIN( 394)		this->particle_size = particle_size;
HXDLIN( 394)		this->size_random = size_random;
HXDLIN( 394)		this->mass = mass;
HXDLIN( 394)		this->dupli_object = dupli_object;
HXDLIN( 394)		this->weight_gravity = weight_gravity;
            	}

Dynamic TParticleData_obj::__CreateEmpty() { return new TParticleData_obj; }

void *TParticleData_obj::_hx_vtable = 0;

Dynamic TParticleData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TParticleData_obj > _hx_result = new TParticleData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12],inArgs[13],inArgs[14],inArgs[15],inArgs[16],inArgs[17]);
	return _hx_result;
}

bool TParticleData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x60be666e;
}


hx::ObjectPtr< TParticleData_obj > TParticleData_obj::__new(::String name,int type,bool loop,bool render_emitter,int count,float frame_start,float frame_end,float lifetime,float lifetime_random,int emit_from, ::kha::arrays::Float32ArrayPrivate object_align_factor,float factor_random,int physics_type,float particle_size,float size_random,float mass,::String dupli_object,float weight_gravity) {
	hx::ObjectPtr< TParticleData_obj > __this = new TParticleData_obj();
	__this->__construct(name,type,loop,render_emitter,count,frame_start,frame_end,lifetime,lifetime_random,emit_from,object_align_factor,factor_random,physics_type,particle_size,size_random,mass,dupli_object,weight_gravity);
	return __this;
}

hx::ObjectPtr< TParticleData_obj > TParticleData_obj::__alloc(hx::Ctx *_hx_ctx,::String name,int type,bool loop,bool render_emitter,int count,float frame_start,float frame_end,float lifetime,float lifetime_random,int emit_from, ::kha::arrays::Float32ArrayPrivate object_align_factor,float factor_random,int physics_type,float particle_size,float size_random,float mass,::String dupli_object,float weight_gravity) {
	TParticleData_obj *__this = (TParticleData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TParticleData_obj), true, "iron.data.TParticleData"));
	*(void **)__this = TParticleData_obj::_hx_vtable;
	__this->__construct(name,type,loop,render_emitter,count,frame_start,frame_end,lifetime,lifetime_random,emit_from,object_align_factor,factor_random,physics_type,particle_size,size_random,mass,dupli_object,weight_gravity);
	return __this;
}

TParticleData_obj::TParticleData_obj()
{
}

void TParticleData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TParticleData);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(loop,"loop");
	HX_MARK_MEMBER_NAME(render_emitter,"render_emitter");
	HX_MARK_MEMBER_NAME(count,"count");
	HX_MARK_MEMBER_NAME(frame_start,"frame_start");
	HX_MARK_MEMBER_NAME(frame_end,"frame_end");
	HX_MARK_MEMBER_NAME(lifetime,"lifetime");
	HX_MARK_MEMBER_NAME(lifetime_random,"lifetime_random");
	HX_MARK_MEMBER_NAME(emit_from,"emit_from");
	HX_MARK_MEMBER_NAME(object_align_factor,"object_align_factor");
	HX_MARK_MEMBER_NAME(factor_random,"factor_random");
	HX_MARK_MEMBER_NAME(physics_type,"physics_type");
	HX_MARK_MEMBER_NAME(particle_size,"particle_size");
	HX_MARK_MEMBER_NAME(size_random,"size_random");
	HX_MARK_MEMBER_NAME(mass,"mass");
	HX_MARK_MEMBER_NAME(dupli_object,"dupli_object");
	HX_MARK_MEMBER_NAME(weight_gravity,"weight_gravity");
	HX_MARK_END_CLASS();
}

void TParticleData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(loop,"loop");
	HX_VISIT_MEMBER_NAME(render_emitter,"render_emitter");
	HX_VISIT_MEMBER_NAME(count,"count");
	HX_VISIT_MEMBER_NAME(frame_start,"frame_start");
	HX_VISIT_MEMBER_NAME(frame_end,"frame_end");
	HX_VISIT_MEMBER_NAME(lifetime,"lifetime");
	HX_VISIT_MEMBER_NAME(lifetime_random,"lifetime_random");
	HX_VISIT_MEMBER_NAME(emit_from,"emit_from");
	HX_VISIT_MEMBER_NAME(object_align_factor,"object_align_factor");
	HX_VISIT_MEMBER_NAME(factor_random,"factor_random");
	HX_VISIT_MEMBER_NAME(physics_type,"physics_type");
	HX_VISIT_MEMBER_NAME(particle_size,"particle_size");
	HX_VISIT_MEMBER_NAME(size_random,"size_random");
	HX_VISIT_MEMBER_NAME(mass,"mass");
	HX_VISIT_MEMBER_NAME(dupli_object,"dupli_object");
	HX_VISIT_MEMBER_NAME(weight_gravity,"weight_gravity");
}

hx::Val TParticleData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"loop") ) { return hx::Val( loop ); }
		if (HX_FIELD_EQ(inName,"mass") ) { return hx::Val( mass ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"count") ) { return hx::Val( count ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lifetime") ) { return hx::Val( lifetime ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frame_end") ) { return hx::Val( frame_end ); }
		if (HX_FIELD_EQ(inName,"emit_from") ) { return hx::Val( emit_from ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"frame_start") ) { return hx::Val( frame_start ); }
		if (HX_FIELD_EQ(inName,"size_random") ) { return hx::Val( size_random ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"physics_type") ) { return hx::Val( physics_type ); }
		if (HX_FIELD_EQ(inName,"dupli_object") ) { return hx::Val( dupli_object ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"factor_random") ) { return hx::Val( factor_random ); }
		if (HX_FIELD_EQ(inName,"particle_size") ) { return hx::Val( particle_size ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"render_emitter") ) { return hx::Val( render_emitter ); }
		if (HX_FIELD_EQ(inName,"weight_gravity") ) { return hx::Val( weight_gravity ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"lifetime_random") ) { return hx::Val( lifetime_random ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"object_align_factor") ) { return hx::Val( object_align_factor ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TParticleData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"loop") ) { loop=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mass") ) { mass=inValue.Cast< float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"count") ) { count=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lifetime") ) { lifetime=inValue.Cast< float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frame_end") ) { frame_end=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"emit_from") ) { emit_from=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"frame_start") ) { frame_start=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"size_random") ) { size_random=inValue.Cast< float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"physics_type") ) { physics_type=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dupli_object") ) { dupli_object=inValue.Cast< ::String >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"factor_random") ) { factor_random=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"particle_size") ) { particle_size=inValue.Cast< float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"render_emitter") ) { render_emitter=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"weight_gravity") ) { weight_gravity=inValue.Cast< float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"lifetime_random") ) { lifetime_random=inValue.Cast< float >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"object_align_factor") ) { object_align_factor=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TParticleData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("loop",64,a6,b7,47));
	outFields->push(HX_("render_emitter",45,40,d4,92));
	outFields->push(HX_("count",cf,44,63,4a));
	outFields->push(HX_("frame_start",90,13,a6,29));
	outFields->push(HX_("frame_end",89,db,bf,41));
	outFields->push(HX_("lifetime",09,0b,72,6c));
	outFields->push(HX_("lifetime_random",b9,8b,81,39));
	outFields->push(HX_("emit_from",16,56,40,fa));
	outFields->push(HX_("object_align_factor",09,6f,65,ab));
	outFields->push(HX_("factor_random",b3,e2,25,c1));
	outFields->push(HX_("physics_type",72,a4,62,49));
	outFields->push(HX_("particle_size",9a,00,8e,82));
	outFields->push(HX_("size_random",01,9d,6e,00));
	outFields->push(HX_("mass",f4,40,56,48));
	outFields->push(HX_("dupli_object",e2,f3,41,ac));
	outFields->push(HX_("weight_gravity",47,71,e0,39));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TParticleData_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TParticleData_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsInt,(int)offsetof(TParticleData_obj,type),HX_("type",ba,f2,08,4d)},
	{hx::fsBool,(int)offsetof(TParticleData_obj,loop),HX_("loop",64,a6,b7,47)},
	{hx::fsBool,(int)offsetof(TParticleData_obj,render_emitter),HX_("render_emitter",45,40,d4,92)},
	{hx::fsInt,(int)offsetof(TParticleData_obj,count),HX_("count",cf,44,63,4a)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TParticleData_obj,frame_start),HX_("frame_start",90,13,a6,29)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TParticleData_obj,frame_end),HX_("frame_end",89,db,bf,41)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TParticleData_obj,lifetime),HX_("lifetime",09,0b,72,6c)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TParticleData_obj,lifetime_random),HX_("lifetime_random",b9,8b,81,39)},
	{hx::fsInt,(int)offsetof(TParticleData_obj,emit_from),HX_("emit_from",16,56,40,fa)},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(TParticleData_obj,object_align_factor),HX_("object_align_factor",09,6f,65,ab)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TParticleData_obj,factor_random),HX_("factor_random",b3,e2,25,c1)},
	{hx::fsInt,(int)offsetof(TParticleData_obj,physics_type),HX_("physics_type",72,a4,62,49)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TParticleData_obj,particle_size),HX_("particle_size",9a,00,8e,82)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TParticleData_obj,size_random),HX_("size_random",01,9d,6e,00)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TParticleData_obj,mass),HX_("mass",f4,40,56,48)},
	{hx::fsString,(int)offsetof(TParticleData_obj,dupli_object),HX_("dupli_object",e2,f3,41,ac)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TParticleData_obj,weight_gravity),HX_("weight_gravity",47,71,e0,39)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TParticleData_obj_sStaticStorageInfo = 0;
#endif

static ::String TParticleData_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("type",ba,f2,08,4d),
	HX_("loop",64,a6,b7,47),
	HX_("render_emitter",45,40,d4,92),
	HX_("count",cf,44,63,4a),
	HX_("frame_start",90,13,a6,29),
	HX_("frame_end",89,db,bf,41),
	HX_("lifetime",09,0b,72,6c),
	HX_("lifetime_random",b9,8b,81,39),
	HX_("emit_from",16,56,40,fa),
	HX_("object_align_factor",09,6f,65,ab),
	HX_("factor_random",b3,e2,25,c1),
	HX_("physics_type",72,a4,62,49),
	HX_("particle_size",9a,00,8e,82),
	HX_("size_random",01,9d,6e,00),
	HX_("mass",f4,40,56,48),
	HX_("dupli_object",e2,f3,41,ac),
	HX_("weight_gravity",47,71,e0,39),
	::String(null()) };

hx::Class TParticleData_obj::__mClass;

void TParticleData_obj::__register()
{
	TParticleData_obj _hx_dummy;
	TParticleData_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.TParticleData",26,24,e3,75);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TParticleData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TParticleData_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TParticleData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TParticleData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
