// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_TParticleReference
#include <hxinc/iron/data/TParticleReference.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6c6a258d838a2341_425_new,"iron.data.TParticleReference","new",0x40547cc1,"iron.data.TParticleReference.new","iron/data/SceneFormat.hx",425,0x98b03519)
namespace iron{
namespace data{

void TParticleReference_obj::__construct(::String name,::String particle,int seed){
            	HX_STACKFRAME(&_hx_pos_6c6a258d838a2341_425_new)
HXDLIN( 425)		this->name = name;
HXDLIN( 425)		this->particle = particle;
HXDLIN( 425)		this->seed = seed;
            	}

Dynamic TParticleReference_obj::__CreateEmpty() { return new TParticleReference_obj; }

void *TParticleReference_obj::_hx_vtable = 0;

Dynamic TParticleReference_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TParticleReference_obj > _hx_result = new TParticleReference_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool TParticleReference_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x118e11a3;
}


TParticleReference_obj::TParticleReference_obj()
{
}

void TParticleReference_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TParticleReference);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(particle,"particle");
	HX_MARK_MEMBER_NAME(seed,"seed");
	HX_MARK_END_CLASS();
}

void TParticleReference_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(particle,"particle");
	HX_VISIT_MEMBER_NAME(seed,"seed");
}

hx::Val TParticleReference_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"seed") ) { return hx::Val( seed ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"particle") ) { return hx::Val( particle ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TParticleReference_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"seed") ) { seed=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"particle") ) { particle=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TParticleReference_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("particle",46,3e,91,6c));
	outFields->push(HX_("seed",71,85,50,4c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TParticleReference_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TParticleReference_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsString,(int)offsetof(TParticleReference_obj,particle),HX_("particle",46,3e,91,6c)},
	{hx::fsInt,(int)offsetof(TParticleReference_obj,seed),HX_("seed",71,85,50,4c)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TParticleReference_obj_sStaticStorageInfo = 0;
#endif

static ::String TParticleReference_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("particle",46,3e,91,6c),
	HX_("seed",71,85,50,4c),
	::String(null()) };

hx::Class TParticleReference_obj::__mClass;

void TParticleReference_obj::__register()
{
	TParticleReference_obj _hx_dummy;
	TParticleReference_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.TParticleReference",4f,08,cd,05);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TParticleReference_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TParticleReference_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TParticleReference_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TParticleReference_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
