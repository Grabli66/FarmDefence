// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_TProbe
#include <hxinc/iron/data/TProbe.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bff6a9dc9a44c9ae_302_new,"iron.data.TProbe","new",0xe3dd71cc,"iron.data.TProbe.new","iron/data/SceneFormat.hx",302,0x98b03519)
namespace iron{
namespace data{

void TProbe_obj::__construct(::String name,::String irradiance,float strength,float blending, ::kha::arrays::Float32ArrayPrivate volume, ::kha::arrays::Float32ArrayPrivate volume_center,::String radiance, ::Dynamic radiance_mipmaps){
            	HX_STACKFRAME(&_hx_pos_bff6a9dc9a44c9ae_302_new)
HXDLIN( 302)		this->name = name;
HXDLIN( 302)		this->irradiance = irradiance;
HXDLIN( 302)		this->strength = strength;
HXDLIN( 302)		this->blending = blending;
HXDLIN( 302)		this->volume = volume;
HXDLIN( 302)		this->volume_center = volume_center;
HXDLIN( 302)		this->radiance = radiance;
HXDLIN( 302)		this->radiance_mipmaps = radiance_mipmaps;
            	}

Dynamic TProbe_obj::__CreateEmpty() { return new TProbe_obj; }

void *TProbe_obj::_hx_vtable = 0;

Dynamic TProbe_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TProbe_obj > _hx_result = new TProbe_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7]);
	return _hx_result;
}

bool TProbe_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0bb9372e;
}


hx::ObjectPtr< TProbe_obj > TProbe_obj::__new(::String name,::String irradiance,float strength,float blending, ::kha::arrays::Float32ArrayPrivate volume, ::kha::arrays::Float32ArrayPrivate volume_center,::String radiance, ::Dynamic radiance_mipmaps) {
	hx::ObjectPtr< TProbe_obj > __this = new TProbe_obj();
	__this->__construct(name,irradiance,strength,blending,volume,volume_center,radiance,radiance_mipmaps);
	return __this;
}

hx::ObjectPtr< TProbe_obj > TProbe_obj::__alloc(hx::Ctx *_hx_ctx,::String name,::String irradiance,float strength,float blending, ::kha::arrays::Float32ArrayPrivate volume, ::kha::arrays::Float32ArrayPrivate volume_center,::String radiance, ::Dynamic radiance_mipmaps) {
	TProbe_obj *__this = (TProbe_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TProbe_obj), true, "iron.data.TProbe"));
	*(void **)__this = TProbe_obj::_hx_vtable;
	__this->__construct(name,irradiance,strength,blending,volume,volume_center,radiance,radiance_mipmaps);
	return __this;
}

TProbe_obj::TProbe_obj()
{
}

void TProbe_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TProbe);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(irradiance,"irradiance");
	HX_MARK_MEMBER_NAME(strength,"strength");
	HX_MARK_MEMBER_NAME(blending,"blending");
	HX_MARK_MEMBER_NAME(volume,"volume");
	HX_MARK_MEMBER_NAME(volume_center,"volume_center");
	HX_MARK_MEMBER_NAME(radiance,"radiance");
	HX_MARK_MEMBER_NAME(radiance_mipmaps,"radiance_mipmaps");
	HX_MARK_END_CLASS();
}

void TProbe_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(irradiance,"irradiance");
	HX_VISIT_MEMBER_NAME(strength,"strength");
	HX_VISIT_MEMBER_NAME(blending,"blending");
	HX_VISIT_MEMBER_NAME(volume,"volume");
	HX_VISIT_MEMBER_NAME(volume_center,"volume_center");
	HX_VISIT_MEMBER_NAME(radiance,"radiance");
	HX_VISIT_MEMBER_NAME(radiance_mipmaps,"radiance_mipmaps");
}

hx::Val TProbe_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"volume") ) { return hx::Val( volume ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"strength") ) { return hx::Val( strength ); }
		if (HX_FIELD_EQ(inName,"blending") ) { return hx::Val( blending ); }
		if (HX_FIELD_EQ(inName,"radiance") ) { return hx::Val( radiance ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"irradiance") ) { return hx::Val( irradiance ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"volume_center") ) { return hx::Val( volume_center ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"radiance_mipmaps") ) { return hx::Val( radiance_mipmaps ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TProbe_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"volume") ) { volume=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"strength") ) { strength=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blending") ) { blending=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"radiance") ) { radiance=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"irradiance") ) { irradiance=inValue.Cast< ::String >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"volume_center") ) { volume_center=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"radiance_mipmaps") ) { radiance_mipmaps=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TProbe_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("irradiance",ac,3c,59,b9));
	outFields->push(HX_("strength",81,d2,8e,8e));
	outFields->push(HX_("blending",31,6d,e6,6a));
	outFields->push(HX_("volume",da,29,53,5f));
	outFields->push(HX_("volume_center",da,5c,9b,be));
	outFields->push(HX_("radiance",c3,4f,4d,eb));
	outFields->push(HX_("radiance_mipmaps",2f,4e,a3,5c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TProbe_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TProbe_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsString,(int)offsetof(TProbe_obj,irradiance),HX_("irradiance",ac,3c,59,b9)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TProbe_obj,strength),HX_("strength",81,d2,8e,8e)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TProbe_obj,blending),HX_("blending",31,6d,e6,6a)},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(TProbe_obj,volume),HX_("volume",da,29,53,5f)},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(TProbe_obj,volume_center),HX_("volume_center",da,5c,9b,be)},
	{hx::fsString,(int)offsetof(TProbe_obj,radiance),HX_("radiance",c3,4f,4d,eb)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TProbe_obj,radiance_mipmaps),HX_("radiance_mipmaps",2f,4e,a3,5c)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TProbe_obj_sStaticStorageInfo = 0;
#endif

static ::String TProbe_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("irradiance",ac,3c,59,b9),
	HX_("strength",81,d2,8e,8e),
	HX_("blending",31,6d,e6,6a),
	HX_("volume",da,29,53,5f),
	HX_("volume_center",da,5c,9b,be),
	HX_("radiance",c3,4f,4d,eb),
	HX_("radiance_mipmaps",2f,4e,a3,5c),
	::String(null()) };

hx::Class TProbe_obj::__mClass;

void TProbe_obj::__register()
{
	TProbe_obj _hx_dummy;
	TProbe_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.TProbe",da,db,3d,1c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TProbe_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TProbe_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TProbe_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TProbe_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
