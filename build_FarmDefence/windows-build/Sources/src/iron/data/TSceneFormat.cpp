// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_TCameraData
#include <hxinc/iron/data/TCameraData.h>
#endif
#ifndef INCLUDED_iron_data_TGroup
#include <hxinc/iron/data/TGroup.h>
#endif
#ifndef INCLUDED_iron_data_TLightData
#include <hxinc/iron/data/TLightData.h>
#endif
#ifndef INCLUDED_iron_data_TMaterialData
#include <hxinc/iron/data/TMaterialData.h>
#endif
#ifndef INCLUDED_iron_data_TMeshData
#include <hxinc/iron/data/TMeshData.h>
#endif
#ifndef INCLUDED_iron_data_TObj
#include <hxinc/iron/data/TObj.h>
#endif
#ifndef INCLUDED_iron_data_TParticleData
#include <hxinc/iron/data/TParticleData.h>
#endif
#ifndef INCLUDED_iron_data_TSceneFormat
#include <hxinc/iron/data/TSceneFormat.h>
#endif
#ifndef INCLUDED_iron_data_TShaderData
#include <hxinc/iron/data/TShaderData.h>
#endif
#ifndef INCLUDED_iron_data_TSpeakerData
#include <hxinc/iron/data/TSpeakerData.h>
#endif
#ifndef INCLUDED_iron_data_TTilesheetData
#include <hxinc/iron/data/TTilesheetData.h>
#endif
#ifndef INCLUDED_iron_data_TTrait
#include <hxinc/iron/data/TTrait.h>
#endif
#ifndef INCLUDED_iron_data_TWorldData
#include <hxinc/iron/data/TWorldData.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9ccd38c977a877a1_10_new,"iron.data.TSceneFormat","new",0x49dcc53f,"iron.data.TSceneFormat.new","iron/data/SceneFormat.hx",10,0x98b03519)
namespace iron{
namespace data{

void TSceneFormat_obj::__construct(::String name,::Array< ::Dynamic> mesh_datas,::Array< ::Dynamic> light_datas,::Array< ::Dynamic> camera_datas,::String camera_ref,::Array< ::Dynamic> material_datas,::Array< ::Dynamic> particle_datas,::Array< ::Dynamic> shader_datas,::Array< ::Dynamic> speaker_datas,::Array< ::Dynamic> world_datas,::String world_ref,::Array< ::Dynamic> tilesheet_datas,::Array< ::Dynamic> objects,::Array< ::Dynamic> groups, ::kha::arrays::Float32ArrayPrivate gravity,::Array< ::Dynamic> traits,::Array< ::String > embedded_datas, ::Dynamic frame_time, ::kha::arrays::Float32ArrayPrivate irradiance){
            	HX_STACKFRAME(&_hx_pos_9ccd38c977a877a1_10_new)
HXDLIN(  10)		this->name = name;
HXDLIN(  10)		this->mesh_datas = mesh_datas;
HXDLIN(  10)		this->light_datas = light_datas;
HXDLIN(  10)		this->camera_datas = camera_datas;
HXDLIN(  10)		this->camera_ref = camera_ref;
HXDLIN(  10)		this->material_datas = material_datas;
HXDLIN(  10)		this->particle_datas = particle_datas;
HXDLIN(  10)		this->shader_datas = shader_datas;
HXDLIN(  10)		this->speaker_datas = speaker_datas;
HXDLIN(  10)		this->world_datas = world_datas;
HXDLIN(  10)		this->world_ref = world_ref;
HXDLIN(  10)		this->tilesheet_datas = tilesheet_datas;
HXDLIN(  10)		this->objects = objects;
HXDLIN(  10)		this->groups = groups;
HXDLIN(  10)		this->gravity = gravity;
HXDLIN(  10)		this->traits = traits;
HXDLIN(  10)		this->embedded_datas = embedded_datas;
HXDLIN(  10)		this->frame_time = frame_time;
HXDLIN(  10)		this->irradiance = irradiance;
            	}

Dynamic TSceneFormat_obj::__CreateEmpty() { return new TSceneFormat_obj; }

void *TSceneFormat_obj::_hx_vtable = 0;

Dynamic TSceneFormat_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TSceneFormat_obj > _hx_result = new TSceneFormat_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12],inArgs[13],inArgs[14],inArgs[15],inArgs[16],inArgs[17],inArgs[18]);
	return _hx_result;
}

bool TSceneFormat_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x19fb5885;
}


hx::ObjectPtr< TSceneFormat_obj > TSceneFormat_obj::__new(::String name,::Array< ::Dynamic> mesh_datas,::Array< ::Dynamic> light_datas,::Array< ::Dynamic> camera_datas,::String camera_ref,::Array< ::Dynamic> material_datas,::Array< ::Dynamic> particle_datas,::Array< ::Dynamic> shader_datas,::Array< ::Dynamic> speaker_datas,::Array< ::Dynamic> world_datas,::String world_ref,::Array< ::Dynamic> tilesheet_datas,::Array< ::Dynamic> objects,::Array< ::Dynamic> groups, ::kha::arrays::Float32ArrayPrivate gravity,::Array< ::Dynamic> traits,::Array< ::String > embedded_datas, ::Dynamic frame_time, ::kha::arrays::Float32ArrayPrivate irradiance) {
	hx::ObjectPtr< TSceneFormat_obj > __this = new TSceneFormat_obj();
	__this->__construct(name,mesh_datas,light_datas,camera_datas,camera_ref,material_datas,particle_datas,shader_datas,speaker_datas,world_datas,world_ref,tilesheet_datas,objects,groups,gravity,traits,embedded_datas,frame_time,irradiance);
	return __this;
}

hx::ObjectPtr< TSceneFormat_obj > TSceneFormat_obj::__alloc(hx::Ctx *_hx_ctx,::String name,::Array< ::Dynamic> mesh_datas,::Array< ::Dynamic> light_datas,::Array< ::Dynamic> camera_datas,::String camera_ref,::Array< ::Dynamic> material_datas,::Array< ::Dynamic> particle_datas,::Array< ::Dynamic> shader_datas,::Array< ::Dynamic> speaker_datas,::Array< ::Dynamic> world_datas,::String world_ref,::Array< ::Dynamic> tilesheet_datas,::Array< ::Dynamic> objects,::Array< ::Dynamic> groups, ::kha::arrays::Float32ArrayPrivate gravity,::Array< ::Dynamic> traits,::Array< ::String > embedded_datas, ::Dynamic frame_time, ::kha::arrays::Float32ArrayPrivate irradiance) {
	TSceneFormat_obj *__this = (TSceneFormat_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TSceneFormat_obj), true, "iron.data.TSceneFormat"));
	*(void **)__this = TSceneFormat_obj::_hx_vtable;
	__this->__construct(name,mesh_datas,light_datas,camera_datas,camera_ref,material_datas,particle_datas,shader_datas,speaker_datas,world_datas,world_ref,tilesheet_datas,objects,groups,gravity,traits,embedded_datas,frame_time,irradiance);
	return __this;
}

TSceneFormat_obj::TSceneFormat_obj()
{
}

void TSceneFormat_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TSceneFormat);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(mesh_datas,"mesh_datas");
	HX_MARK_MEMBER_NAME(light_datas,"light_datas");
	HX_MARK_MEMBER_NAME(camera_datas,"camera_datas");
	HX_MARK_MEMBER_NAME(camera_ref,"camera_ref");
	HX_MARK_MEMBER_NAME(material_datas,"material_datas");
	HX_MARK_MEMBER_NAME(particle_datas,"particle_datas");
	HX_MARK_MEMBER_NAME(shader_datas,"shader_datas");
	HX_MARK_MEMBER_NAME(speaker_datas,"speaker_datas");
	HX_MARK_MEMBER_NAME(world_datas,"world_datas");
	HX_MARK_MEMBER_NAME(world_ref,"world_ref");
	HX_MARK_MEMBER_NAME(tilesheet_datas,"tilesheet_datas");
	HX_MARK_MEMBER_NAME(objects,"objects");
	HX_MARK_MEMBER_NAME(groups,"groups");
	HX_MARK_MEMBER_NAME(gravity,"gravity");
	HX_MARK_MEMBER_NAME(traits,"traits");
	HX_MARK_MEMBER_NAME(embedded_datas,"embedded_datas");
	HX_MARK_MEMBER_NAME(frame_time,"frame_time");
	HX_MARK_MEMBER_NAME(irradiance,"irradiance");
	HX_MARK_END_CLASS();
}

void TSceneFormat_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(mesh_datas,"mesh_datas");
	HX_VISIT_MEMBER_NAME(light_datas,"light_datas");
	HX_VISIT_MEMBER_NAME(camera_datas,"camera_datas");
	HX_VISIT_MEMBER_NAME(camera_ref,"camera_ref");
	HX_VISIT_MEMBER_NAME(material_datas,"material_datas");
	HX_VISIT_MEMBER_NAME(particle_datas,"particle_datas");
	HX_VISIT_MEMBER_NAME(shader_datas,"shader_datas");
	HX_VISIT_MEMBER_NAME(speaker_datas,"speaker_datas");
	HX_VISIT_MEMBER_NAME(world_datas,"world_datas");
	HX_VISIT_MEMBER_NAME(world_ref,"world_ref");
	HX_VISIT_MEMBER_NAME(tilesheet_datas,"tilesheet_datas");
	HX_VISIT_MEMBER_NAME(objects,"objects");
	HX_VISIT_MEMBER_NAME(groups,"groups");
	HX_VISIT_MEMBER_NAME(gravity,"gravity");
	HX_VISIT_MEMBER_NAME(traits,"traits");
	HX_VISIT_MEMBER_NAME(embedded_datas,"embedded_datas");
	HX_VISIT_MEMBER_NAME(frame_time,"frame_time");
	HX_VISIT_MEMBER_NAME(irradiance,"irradiance");
}

hx::Val TSceneFormat_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"groups") ) { return hx::Val( groups ); }
		if (HX_FIELD_EQ(inName,"traits") ) { return hx::Val( traits ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"objects") ) { return hx::Val( objects ); }
		if (HX_FIELD_EQ(inName,"gravity") ) { return hx::Val( gravity ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"world_ref") ) { return hx::Val( world_ref ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mesh_datas") ) { return hx::Val( mesh_datas ); }
		if (HX_FIELD_EQ(inName,"camera_ref") ) { return hx::Val( camera_ref ); }
		if (HX_FIELD_EQ(inName,"frame_time") ) { return hx::Val( frame_time ); }
		if (HX_FIELD_EQ(inName,"irradiance") ) { return hx::Val( irradiance ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"light_datas") ) { return hx::Val( light_datas ); }
		if (HX_FIELD_EQ(inName,"world_datas") ) { return hx::Val( world_datas ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"camera_datas") ) { return hx::Val( camera_datas ); }
		if (HX_FIELD_EQ(inName,"shader_datas") ) { return hx::Val( shader_datas ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"speaker_datas") ) { return hx::Val( speaker_datas ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"material_datas") ) { return hx::Val( material_datas ); }
		if (HX_FIELD_EQ(inName,"particle_datas") ) { return hx::Val( particle_datas ); }
		if (HX_FIELD_EQ(inName,"embedded_datas") ) { return hx::Val( embedded_datas ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"tilesheet_datas") ) { return hx::Val( tilesheet_datas ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TSceneFormat_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"groups") ) { groups=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"traits") ) { traits=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"objects") ) { objects=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gravity") ) { gravity=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"world_ref") ) { world_ref=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mesh_datas") ) { mesh_datas=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camera_ref") ) { camera_ref=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frame_time") ) { frame_time=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"irradiance") ) { irradiance=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"light_datas") ) { light_datas=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"world_datas") ) { world_datas=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"camera_datas") ) { camera_datas=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shader_datas") ) { shader_datas=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"speaker_datas") ) { speaker_datas=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"material_datas") ) { material_datas=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"particle_datas") ) { particle_datas=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"embedded_datas") ) { embedded_datas=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"tilesheet_datas") ) { tilesheet_datas=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TSceneFormat_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("mesh_datas",f7,4f,c4,7f));
	outFields->push(HX_("light_datas",a0,2b,29,00));
	outFields->push(HX_("camera_datas",af,a6,c9,64));
	outFields->push(HX_("camera_ref",79,1b,67,ba));
	outFields->push(HX_("material_datas",31,2a,02,22));
	outFields->push(HX_("particle_datas",10,8d,61,11));
	outFields->push(HX_("shader_datas",2f,7f,c3,0b));
	outFields->push(HX_("speaker_datas",89,34,fc,dd));
	outFields->push(HX_("world_datas",1c,76,48,67));
	outFields->push(HX_("world_ref",a6,45,65,61));
	outFields->push(HX_("tilesheet_datas",bb,41,50,2d));
	outFields->push(HX_("objects",d4,68,4f,82));
	outFields->push(HX_("groups",54,24,28,1c));
	outFields->push(HX_("gravity",4e,6e,ff,77));
	outFields->push(HX_("traits",e5,c0,81,45));
	outFields->push(HX_("embedded_datas",54,33,7c,a7));
	outFields->push(HX_("frame_time",9f,ac,06,50));
	outFields->push(HX_("irradiance",ac,3c,59,b9));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TSceneFormat_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TSceneFormat_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TSceneFormat_obj,mesh_datas),HX_("mesh_datas",f7,4f,c4,7f)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TSceneFormat_obj,light_datas),HX_("light_datas",a0,2b,29,00)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TSceneFormat_obj,camera_datas),HX_("camera_datas",af,a6,c9,64)},
	{hx::fsString,(int)offsetof(TSceneFormat_obj,camera_ref),HX_("camera_ref",79,1b,67,ba)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TSceneFormat_obj,material_datas),HX_("material_datas",31,2a,02,22)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TSceneFormat_obj,particle_datas),HX_("particle_datas",10,8d,61,11)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TSceneFormat_obj,shader_datas),HX_("shader_datas",2f,7f,c3,0b)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TSceneFormat_obj,speaker_datas),HX_("speaker_datas",89,34,fc,dd)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TSceneFormat_obj,world_datas),HX_("world_datas",1c,76,48,67)},
	{hx::fsString,(int)offsetof(TSceneFormat_obj,world_ref),HX_("world_ref",a6,45,65,61)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TSceneFormat_obj,tilesheet_datas),HX_("tilesheet_datas",bb,41,50,2d)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TSceneFormat_obj,objects),HX_("objects",d4,68,4f,82)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TSceneFormat_obj,groups),HX_("groups",54,24,28,1c)},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(TSceneFormat_obj,gravity),HX_("gravity",4e,6e,ff,77)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TSceneFormat_obj,traits),HX_("traits",e5,c0,81,45)},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(TSceneFormat_obj,embedded_datas),HX_("embedded_datas",54,33,7c,a7)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TSceneFormat_obj,frame_time),HX_("frame_time",9f,ac,06,50)},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(TSceneFormat_obj,irradiance),HX_("irradiance",ac,3c,59,b9)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TSceneFormat_obj_sStaticStorageInfo = 0;
#endif

static ::String TSceneFormat_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("mesh_datas",f7,4f,c4,7f),
	HX_("light_datas",a0,2b,29,00),
	HX_("camera_datas",af,a6,c9,64),
	HX_("camera_ref",79,1b,67,ba),
	HX_("material_datas",31,2a,02,22),
	HX_("particle_datas",10,8d,61,11),
	HX_("shader_datas",2f,7f,c3,0b),
	HX_("speaker_datas",89,34,fc,dd),
	HX_("world_datas",1c,76,48,67),
	HX_("world_ref",a6,45,65,61),
	HX_("tilesheet_datas",bb,41,50,2d),
	HX_("objects",d4,68,4f,82),
	HX_("groups",54,24,28,1c),
	HX_("gravity",4e,6e,ff,77),
	HX_("traits",e5,c0,81,45),
	HX_("embedded_datas",54,33,7c,a7),
	HX_("frame_time",9f,ac,06,50),
	HX_("irradiance",ac,3c,59,b9),
	::String(null()) };

hx::Class TSceneFormat_obj::__mClass;

void TSceneFormat_obj::__register()
{
	TSceneFormat_obj _hx_dummy;
	TSceneFormat_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.TSceneFormat",cd,b9,2b,8f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TSceneFormat_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TSceneFormat_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TSceneFormat_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TSceneFormat_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
