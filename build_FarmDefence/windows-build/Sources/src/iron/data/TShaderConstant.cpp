// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_TShaderConstant
#include <hxinc/iron/data/TShaderConstant.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_24fd94dcdd528580_246_new,"iron.data.TShaderConstant","new",0xc732f031,"iron.data.TShaderConstant.new","iron/data/SceneFormat.hx",246,0x98b03519)
namespace iron{
namespace data{

void TShaderConstant_obj::__construct(::String name,::String type,::String link, ::kha::arrays::Float32ArrayPrivate vec4, ::kha::arrays::Float32ArrayPrivate vec3, ::kha::arrays::Float32ArrayPrivate vec2, ::Dynamic _hx_float, ::Dynamic _hx_bool, ::Dynamic _hx_int){
            	HX_STACKFRAME(&_hx_pos_24fd94dcdd528580_246_new)
HXDLIN( 246)		this->name = name;
HXDLIN( 246)		this->type = type;
HXDLIN( 246)		this->link = link;
HXDLIN( 246)		this->vec4 = vec4;
HXDLIN( 246)		this->vec3 = vec3;
HXDLIN( 246)		this->vec2 = vec2;
HXDLIN( 246)		this->_hx_float = _hx_float;
HXDLIN( 246)		this->_hx_bool = _hx_bool;
HXDLIN( 246)		this->_hx_int = _hx_int;
            	}

Dynamic TShaderConstant_obj::__CreateEmpty() { return new TShaderConstant_obj; }

void *TShaderConstant_obj::_hx_vtable = 0;

Dynamic TShaderConstant_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TShaderConstant_obj > _hx_result = new TShaderConstant_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8]);
	return _hx_result;
}

bool TShaderConstant_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x28e19deb;
}


hx::ObjectPtr< TShaderConstant_obj > TShaderConstant_obj::__new(::String name,::String type,::String link, ::kha::arrays::Float32ArrayPrivate vec4, ::kha::arrays::Float32ArrayPrivate vec3, ::kha::arrays::Float32ArrayPrivate vec2, ::Dynamic _hx_float, ::Dynamic _hx_bool, ::Dynamic _hx_int) {
	hx::ObjectPtr< TShaderConstant_obj > __this = new TShaderConstant_obj();
	__this->__construct(name,type,link,vec4,vec3,vec2,_hx_float,_hx_bool,_hx_int);
	return __this;
}

hx::ObjectPtr< TShaderConstant_obj > TShaderConstant_obj::__alloc(hx::Ctx *_hx_ctx,::String name,::String type,::String link, ::kha::arrays::Float32ArrayPrivate vec4, ::kha::arrays::Float32ArrayPrivate vec3, ::kha::arrays::Float32ArrayPrivate vec2, ::Dynamic _hx_float, ::Dynamic _hx_bool, ::Dynamic _hx_int) {
	TShaderConstant_obj *__this = (TShaderConstant_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TShaderConstant_obj), true, "iron.data.TShaderConstant"));
	*(void **)__this = TShaderConstant_obj::_hx_vtable;
	__this->__construct(name,type,link,vec4,vec3,vec2,_hx_float,_hx_bool,_hx_int);
	return __this;
}

TShaderConstant_obj::TShaderConstant_obj()
{
}

void TShaderConstant_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TShaderConstant);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(link,"link");
	HX_MARK_MEMBER_NAME(vec4,"vec4");
	HX_MARK_MEMBER_NAME(vec3,"vec3");
	HX_MARK_MEMBER_NAME(vec2,"vec2");
	HX_MARK_MEMBER_NAME(_hx_float,"float");
	HX_MARK_MEMBER_NAME(_hx_bool,"bool");
	HX_MARK_MEMBER_NAME(_hx_int,"int");
	HX_MARK_END_CLASS();
}

void TShaderConstant_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(link,"link");
	HX_VISIT_MEMBER_NAME(vec4,"vec4");
	HX_VISIT_MEMBER_NAME(vec3,"vec3");
	HX_VISIT_MEMBER_NAME(vec2,"vec2");
	HX_VISIT_MEMBER_NAME(_hx_float,"float");
	HX_VISIT_MEMBER_NAME(_hx_bool,"bool");
	HX_VISIT_MEMBER_NAME(_hx_int,"int");
}

hx::Val TShaderConstant_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"int") ) { return hx::Val( _hx_int ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"link") ) { return hx::Val( link ); }
		if (HX_FIELD_EQ(inName,"vec4") ) { return hx::Val( vec4 ); }
		if (HX_FIELD_EQ(inName,"vec3") ) { return hx::Val( vec3 ); }
		if (HX_FIELD_EQ(inName,"vec2") ) { return hx::Val( vec2 ); }
		if (HX_FIELD_EQ(inName,"bool") ) { return hx::Val( _hx_bool ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"float") ) { return hx::Val( _hx_float ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TShaderConstant_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"int") ) { _hx_int=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"link") ) { link=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vec4") ) { vec4=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vec3") ) { vec3=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vec2") ) { vec2=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bool") ) { _hx_bool=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"float") ) { _hx_float=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TShaderConstant_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("link",fa,17,b3,47));
	outFields->push(HX_("vec4",60,27,4c,4e));
	outFields->push(HX_("vec3",5f,27,4c,4e));
	outFields->push(HX_("vec2",5e,27,4c,4e));
	outFields->push(HX_("float",9c,c5,96,02));
	outFields->push(HX_("bool",2a,84,1b,41));
	outFields->push(HX_("int",ef,0c,50,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TShaderConstant_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TShaderConstant_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsString,(int)offsetof(TShaderConstant_obj,type),HX_("type",ba,f2,08,4d)},
	{hx::fsString,(int)offsetof(TShaderConstant_obj,link),HX_("link",fa,17,b3,47)},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(TShaderConstant_obj,vec4),HX_("vec4",60,27,4c,4e)},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(TShaderConstant_obj,vec3),HX_("vec3",5f,27,4c,4e)},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(TShaderConstant_obj,vec2),HX_("vec2",5e,27,4c,4e)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TShaderConstant_obj,_hx_float),HX_("float",9c,c5,96,02)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TShaderConstant_obj,_hx_bool),HX_("bool",2a,84,1b,41)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TShaderConstant_obj,_hx_int),HX_("int",ef,0c,50,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TShaderConstant_obj_sStaticStorageInfo = 0;
#endif

static ::String TShaderConstant_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("type",ba,f2,08,4d),
	HX_("link",fa,17,b3,47),
	HX_("vec4",60,27,4c,4e),
	HX_("vec3",5f,27,4c,4e),
	HX_("vec2",5e,27,4c,4e),
	HX_("float",9c,c5,96,02),
	HX_("bool",2a,84,1b,41),
	HX_("int",ef,0c,50,00),
	::String(null()) };

hx::Class TShaderConstant_obj::__mClass;

void TShaderConstant_obj::__register()
{
	TShaderConstant_obj _hx_dummy;
	TShaderConstant_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.TShaderConstant",bf,03,b1,ce);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TShaderConstant_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TShaderConstant_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TShaderConstant_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TShaderConstant_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
