// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_TShaderContext
#include <hxinc/iron/data/TShaderContext.h>
#endif
#ifndef INCLUDED_iron_data_TShaderData
#include <hxinc/iron/data/TShaderData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bf52ecb3b9b0a26b_191_new,"iron.data.TShaderData","new",0x9c699677,"iron.data.TShaderData.new","iron/data/SceneFormat.hx",191,0x98b03519)
namespace iron{
namespace data{

void TShaderData_obj::__construct(::String name,::Array< ::Dynamic> contexts){
            	HX_STACKFRAME(&_hx_pos_bf52ecb3b9b0a26b_191_new)
HXDLIN( 191)		this->name = name;
HXDLIN( 191)		this->contexts = contexts;
            	}

Dynamic TShaderData_obj::__CreateEmpty() { return new TShaderData_obj; }

void *TShaderData_obj::_hx_vtable = 0;

Dynamic TShaderData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TShaderData_obj > _hx_result = new TShaderData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool TShaderData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x29762f4d;
}


hx::ObjectPtr< TShaderData_obj > TShaderData_obj::__new(::String name,::Array< ::Dynamic> contexts) {
	hx::ObjectPtr< TShaderData_obj > __this = new TShaderData_obj();
	__this->__construct(name,contexts);
	return __this;
}

hx::ObjectPtr< TShaderData_obj > TShaderData_obj::__alloc(hx::Ctx *_hx_ctx,::String name,::Array< ::Dynamic> contexts) {
	TShaderData_obj *__this = (TShaderData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TShaderData_obj), true, "iron.data.TShaderData"));
	*(void **)__this = TShaderData_obj::_hx_vtable;
	__this->__construct(name,contexts);
	return __this;
}

TShaderData_obj::TShaderData_obj()
{
}

void TShaderData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TShaderData);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(contexts,"contexts");
	HX_MARK_END_CLASS();
}

void TShaderData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(contexts,"contexts");
}

hx::Val TShaderData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"contexts") ) { return hx::Val( contexts ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TShaderData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"contexts") ) { contexts=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TShaderData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("contexts",a4,9b,2b,2f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TShaderData_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TShaderData_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TShaderData_obj,contexts),HX_("contexts",a4,9b,2b,2f)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TShaderData_obj_sStaticStorageInfo = 0;
#endif

static ::String TShaderData_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("contexts",a4,9b,2b,2f),
	::String(null()) };

hx::Class TShaderData_obj::__mClass;

void TShaderData_obj::__register()
{
	TShaderData_obj _hx_dummy;
	TShaderData_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.TShaderData",05,8f,39,bf);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TShaderData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TShaderData_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TShaderData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TShaderData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
