// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_TShaderOverride
#include <hxinc/iron/data/TShaderOverride.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a318cda2d928f55c_141_new,"iron.data.TShaderOverride","new",0x0463e519,"iron.data.TShaderOverride.new","iron/data/SceneFormat.hx",141,0x98b03519)
namespace iron{
namespace data{

void TShaderOverride_obj::__construct(::String cull_mode){
            	HX_STACKFRAME(&_hx_pos_a318cda2d928f55c_141_new)
HXDLIN( 141)		this->cull_mode = cull_mode;
            	}

Dynamic TShaderOverride_obj::__CreateEmpty() { return new TShaderOverride_obj; }

void *TShaderOverride_obj::_hx_vtable = 0;

Dynamic TShaderOverride_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TShaderOverride_obj > _hx_result = new TShaderOverride_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TShaderOverride_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3c21c8ef;
}


TShaderOverride_obj::TShaderOverride_obj()
{
}

void TShaderOverride_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TShaderOverride);
	HX_MARK_MEMBER_NAME(cull_mode,"cull_mode");
	HX_MARK_END_CLASS();
}

void TShaderOverride_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(cull_mode,"cull_mode");
}

hx::Val TShaderOverride_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"cull_mode") ) { return hx::Val( cull_mode ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TShaderOverride_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"cull_mode") ) { cull_mode=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TShaderOverride_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("cull_mode",50,c4,74,6c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TShaderOverride_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TShaderOverride_obj,cull_mode),HX_("cull_mode",50,c4,74,6c)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TShaderOverride_obj_sStaticStorageInfo = 0;
#endif

static ::String TShaderOverride_obj_sMemberFields[] = {
	HX_("cull_mode",50,c4,74,6c),
	::String(null()) };

hx::Class TShaderOverride_obj::__mClass;

void TShaderOverride_obj::__register()
{
	TShaderOverride_obj _hx_dummy;
	TShaderOverride_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.TShaderOverride",a7,64,3b,72);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TShaderOverride_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TShaderOverride_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TShaderOverride_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TShaderOverride_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
