// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_TSpeakerData
#include <hxinc/iron/data/TSpeakerData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fbde65f84ded5571_272_new,"iron.data.TSpeakerData","new",0x0b197565,"iron.data.TSpeakerData.new","iron/data/SceneFormat.hx",272,0x98b03519)
namespace iron{
namespace data{

void TSpeakerData_obj::__construct(::String name,::String sound,bool muted,bool loop,bool stream,float volume,float pitch,float attenuation,bool play_on_start){
            	HX_STACKFRAME(&_hx_pos_fbde65f84ded5571_272_new)
HXDLIN( 272)		this->name = name;
HXDLIN( 272)		this->sound = sound;
HXDLIN( 272)		this->muted = muted;
HXDLIN( 272)		this->loop = loop;
HXDLIN( 272)		this->stream = stream;
HXDLIN( 272)		this->volume = volume;
HXDLIN( 272)		this->pitch = pitch;
HXDLIN( 272)		this->attenuation = attenuation;
HXDLIN( 272)		this->play_on_start = play_on_start;
            	}

Dynamic TSpeakerData_obj::__CreateEmpty() { return new TSpeakerData_obj; }

void *TSpeakerData_obj::_hx_vtable = 0;

Dynamic TSpeakerData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TSpeakerData_obj > _hx_result = new TSpeakerData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8]);
	return _hx_result;
}

bool TSpeakerData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x69b47147;
}


TSpeakerData_obj::TSpeakerData_obj()
{
}

void TSpeakerData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TSpeakerData);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(sound,"sound");
	HX_MARK_MEMBER_NAME(muted,"muted");
	HX_MARK_MEMBER_NAME(loop,"loop");
	HX_MARK_MEMBER_NAME(stream,"stream");
	HX_MARK_MEMBER_NAME(volume,"volume");
	HX_MARK_MEMBER_NAME(pitch,"pitch");
	HX_MARK_MEMBER_NAME(attenuation,"attenuation");
	HX_MARK_MEMBER_NAME(play_on_start,"play_on_start");
	HX_MARK_END_CLASS();
}

void TSpeakerData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(sound,"sound");
	HX_VISIT_MEMBER_NAME(muted,"muted");
	HX_VISIT_MEMBER_NAME(loop,"loop");
	HX_VISIT_MEMBER_NAME(stream,"stream");
	HX_VISIT_MEMBER_NAME(volume,"volume");
	HX_VISIT_MEMBER_NAME(pitch,"pitch");
	HX_VISIT_MEMBER_NAME(attenuation,"attenuation");
	HX_VISIT_MEMBER_NAME(play_on_start,"play_on_start");
}

hx::Val TSpeakerData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"loop") ) { return hx::Val( loop ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"sound") ) { return hx::Val( sound ); }
		if (HX_FIELD_EQ(inName,"muted") ) { return hx::Val( muted ); }
		if (HX_FIELD_EQ(inName,"pitch") ) { return hx::Val( pitch ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"stream") ) { return hx::Val( stream ); }
		if (HX_FIELD_EQ(inName,"volume") ) { return hx::Val( volume ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"attenuation") ) { return hx::Val( attenuation ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"play_on_start") ) { return hx::Val( play_on_start ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TSpeakerData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"loop") ) { loop=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"sound") ) { sound=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"muted") ) { muted=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pitch") ) { pitch=inValue.Cast< float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"stream") ) { stream=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"volume") ) { volume=inValue.Cast< float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"attenuation") ) { attenuation=inValue.Cast< float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"play_on_start") ) { play_on_start=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TSpeakerData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("sound",cf,8c,cc,80));
	outFields->push(HX_("muted",6b,8f,5b,10));
	outFields->push(HX_("loop",64,a6,b7,47));
	outFields->push(HX_("stream",80,14,2d,11));
	outFields->push(HX_("volume",da,29,53,5f));
	outFields->push(HX_("pitch",c0,bb,a0,c2));
	outFields->push(HX_("attenuation",6a,e0,24,e9));
	outFields->push(HX_("play_on_start",ed,a8,13,6b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TSpeakerData_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TSpeakerData_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsString,(int)offsetof(TSpeakerData_obj,sound),HX_("sound",cf,8c,cc,80)},
	{hx::fsBool,(int)offsetof(TSpeakerData_obj,muted),HX_("muted",6b,8f,5b,10)},
	{hx::fsBool,(int)offsetof(TSpeakerData_obj,loop),HX_("loop",64,a6,b7,47)},
	{hx::fsBool,(int)offsetof(TSpeakerData_obj,stream),HX_("stream",80,14,2d,11)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TSpeakerData_obj,volume),HX_("volume",da,29,53,5f)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TSpeakerData_obj,pitch),HX_("pitch",c0,bb,a0,c2)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TSpeakerData_obj,attenuation),HX_("attenuation",6a,e0,24,e9)},
	{hx::fsBool,(int)offsetof(TSpeakerData_obj,play_on_start),HX_("play_on_start",ed,a8,13,6b)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TSpeakerData_obj_sStaticStorageInfo = 0;
#endif

static ::String TSpeakerData_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("sound",cf,8c,cc,80),
	HX_("muted",6b,8f,5b,10),
	HX_("loop",64,a6,b7,47),
	HX_("stream",80,14,2d,11),
	HX_("volume",da,29,53,5f),
	HX_("pitch",c0,bb,a0,c2),
	HX_("attenuation",6a,e0,24,e9),
	HX_("play_on_start",ed,a8,13,6b),
	::String(null()) };

hx::Class TSpeakerData_obj::__mClass;

void TSpeakerData_obj::__register()
{
	TSpeakerData_obj _hx_dummy;
	TSpeakerData_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.TSpeakerData",f3,de,b7,65);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TSpeakerData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TSpeakerData_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TSpeakerData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TSpeakerData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
