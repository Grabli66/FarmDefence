// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_TTilesheetAction
#include <hxinc/iron/data/TTilesheetAction.h>
#endif
#ifndef INCLUDED_iron_data_TTilesheetData
#include <hxinc/iron/data/TTilesheetData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d56a26422121d4bb_371_new,"iron.data.TTilesheetData","new",0xc710d197,"iron.data.TTilesheetData.new","iron/data/SceneFormat.hx",371,0x98b03519)
namespace iron{
namespace data{

void TTilesheetData_obj::__construct(::String name,int tilesx,int tilesy,int framerate,::Array< ::Dynamic> actions){
            	HX_STACKFRAME(&_hx_pos_d56a26422121d4bb_371_new)
HXDLIN( 371)		this->name = name;
HXDLIN( 371)		this->tilesx = tilesx;
HXDLIN( 371)		this->tilesy = tilesy;
HXDLIN( 371)		this->framerate = framerate;
HXDLIN( 371)		this->actions = actions;
            	}

Dynamic TTilesheetData_obj::__CreateEmpty() { return new TTilesheetData_obj; }

void *TTilesheetData_obj::_hx_vtable = 0;

Dynamic TTilesheetData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TTilesheetData_obj > _hx_result = new TTilesheetData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool TTilesheetData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x14956441;
}


hx::ObjectPtr< TTilesheetData_obj > TTilesheetData_obj::__new(::String name,int tilesx,int tilesy,int framerate,::Array< ::Dynamic> actions) {
	hx::ObjectPtr< TTilesheetData_obj > __this = new TTilesheetData_obj();
	__this->__construct(name,tilesx,tilesy,framerate,actions);
	return __this;
}

hx::ObjectPtr< TTilesheetData_obj > TTilesheetData_obj::__alloc(hx::Ctx *_hx_ctx,::String name,int tilesx,int tilesy,int framerate,::Array< ::Dynamic> actions) {
	TTilesheetData_obj *__this = (TTilesheetData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TTilesheetData_obj), true, "iron.data.TTilesheetData"));
	*(void **)__this = TTilesheetData_obj::_hx_vtable;
	__this->__construct(name,tilesx,tilesy,framerate,actions);
	return __this;
}

TTilesheetData_obj::TTilesheetData_obj()
{
}

void TTilesheetData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TTilesheetData);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(tilesx,"tilesx");
	HX_MARK_MEMBER_NAME(tilesy,"tilesy");
	HX_MARK_MEMBER_NAME(framerate,"framerate");
	HX_MARK_MEMBER_NAME(actions,"actions");
	HX_MARK_END_CLASS();
}

void TTilesheetData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(tilesx,"tilesx");
	HX_VISIT_MEMBER_NAME(tilesy,"tilesy");
	HX_VISIT_MEMBER_NAME(framerate,"framerate");
	HX_VISIT_MEMBER_NAME(actions,"actions");
}

hx::Val TTilesheetData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"tilesx") ) { return hx::Val( tilesx ); }
		if (HX_FIELD_EQ(inName,"tilesy") ) { return hx::Val( tilesy ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"actions") ) { return hx::Val( actions ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"framerate") ) { return hx::Val( framerate ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TTilesheetData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"tilesx") ) { tilesx=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tilesy") ) { tilesy=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"actions") ) { actions=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"framerate") ) { framerate=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TTilesheetData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("tilesx",53,d7,28,1e));
	outFields->push(HX_("tilesy",54,d7,28,1e));
	outFields->push(HX_("framerate",8d,e5,4b,4e));
	outFields->push(HX_("actions",fd,03,2e,67));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TTilesheetData_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TTilesheetData_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsInt,(int)offsetof(TTilesheetData_obj,tilesx),HX_("tilesx",53,d7,28,1e)},
	{hx::fsInt,(int)offsetof(TTilesheetData_obj,tilesy),HX_("tilesy",54,d7,28,1e)},
	{hx::fsInt,(int)offsetof(TTilesheetData_obj,framerate),HX_("framerate",8d,e5,4b,4e)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TTilesheetData_obj,actions),HX_("actions",fd,03,2e,67)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TTilesheetData_obj_sStaticStorageInfo = 0;
#endif

static ::String TTilesheetData_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("tilesx",53,d7,28,1e),
	HX_("tilesy",54,d7,28,1e),
	HX_("framerate",8d,e5,4b,4e),
	HX_("actions",fd,03,2e,67),
	::String(null()) };

hx::Class TTilesheetData_obj::__mClass;

void TTilesheetData_obj::__register()
{
	TTilesheetData_obj _hx_dummy;
	TTilesheetData_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.TTilesheetData",25,ba,9c,54);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TTilesheetData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TTilesheetData_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TTilesheetData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TTilesheetData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
