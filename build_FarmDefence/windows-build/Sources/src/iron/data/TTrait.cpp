// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_TTrait
#include <hxinc/iron/data/TTrait.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_57308ccad6603211_511_new,"iron.data.TTrait","new",0x58f8d16a,"iron.data.TTrait.new","iron/data/SceneFormat.hx",511,0x98b03519)
namespace iron{
namespace data{

void TTrait_obj::__construct(::String type,::String class_name,::Array< ::String > parameters,::Array< ::String > props){
            	HX_STACKFRAME(&_hx_pos_57308ccad6603211_511_new)
HXDLIN( 511)		this->type = type;
HXDLIN( 511)		this->class_name = class_name;
HXDLIN( 511)		this->parameters = parameters;
HXDLIN( 511)		this->props = props;
            	}

Dynamic TTrait_obj::__CreateEmpty() { return new TTrait_obj; }

void *TTrait_obj::_hx_vtable = 0;

Dynamic TTrait_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TTrait_obj > _hx_result = new TTrait_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool TTrait_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5948efcc;
}


TTrait_obj::TTrait_obj()
{
}

void TTrait_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TTrait);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(class_name,"class_name");
	HX_MARK_MEMBER_NAME(parameters,"parameters");
	HX_MARK_MEMBER_NAME(props,"props");
	HX_MARK_END_CLASS();
}

void TTrait_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(class_name,"class_name");
	HX_VISIT_MEMBER_NAME(parameters,"parameters");
	HX_VISIT_MEMBER_NAME(props,"props");
}

hx::Val TTrait_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"props") ) { return hx::Val( props ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"class_name") ) { return hx::Val( class_name ); }
		if (HX_FIELD_EQ(inName,"parameters") ) { return hx::Val( parameters ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TTrait_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"props") ) { props=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"class_name") ) { class_name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parameters") ) { parameters=inValue.Cast< ::Array< ::String > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TTrait_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("class_name",f2,4a,01,ac));
	outFields->push(HX_("parameters",aa,be,7e,51));
	outFields->push(HX_("props",70,e7,8f,c8));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TTrait_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TTrait_obj,type),HX_("type",ba,f2,08,4d)},
	{hx::fsString,(int)offsetof(TTrait_obj,class_name),HX_("class_name",f2,4a,01,ac)},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(TTrait_obj,parameters),HX_("parameters",aa,be,7e,51)},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(TTrait_obj,props),HX_("props",70,e7,8f,c8)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TTrait_obj_sStaticStorageInfo = 0;
#endif

static ::String TTrait_obj_sMemberFields[] = {
	HX_("type",ba,f2,08,4d),
	HX_("class_name",f2,4a,01,ac),
	HX_("parameters",aa,be,7e,51),
	HX_("props",70,e7,8f,c8),
	::String(null()) };

hx::Class TTrait_obj::__mClass;

void TTrait_obj::__register()
{
	TTrait_obj _hx_dummy;
	TTrait_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.TTrait",78,94,cd,69);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TTrait_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TTrait_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TTrait_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TTrait_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
