// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_TTransform
#include <hxinc/iron/data/TTransform.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_308c675fd545b126_522_new,"iron.data.TTransform","new",0x272daf08,"iron.data.TTransform.new","iron/data/SceneFormat.hx",522,0x98b03519)
namespace iron{
namespace data{

void TTransform_obj::__construct(::String target, ::kha::arrays::Float32ArrayPrivate values){
            	HX_STACKFRAME(&_hx_pos_308c675fd545b126_522_new)
HXDLIN( 522)		this->target = target;
HXDLIN( 522)		this->values = values;
            	}

Dynamic TTransform_obj::__CreateEmpty() { return new TTransform_obj; }

void *TTransform_obj::_hx_vtable = 0;

Dynamic TTransform_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TTransform_obj > _hx_result = new TTransform_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool TTransform_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x12aa5026;
}


hx::ObjectPtr< TTransform_obj > TTransform_obj::__new(::String target, ::kha::arrays::Float32ArrayPrivate values) {
	hx::ObjectPtr< TTransform_obj > __this = new TTransform_obj();
	__this->__construct(target,values);
	return __this;
}

hx::ObjectPtr< TTransform_obj > TTransform_obj::__alloc(hx::Ctx *_hx_ctx,::String target, ::kha::arrays::Float32ArrayPrivate values) {
	TTransform_obj *__this = (TTransform_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TTransform_obj), true, "iron.data.TTransform"));
	*(void **)__this = TTransform_obj::_hx_vtable;
	__this->__construct(target,values);
	return __this;
}

TTransform_obj::TTransform_obj()
{
}

void TTransform_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TTransform);
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_MEMBER_NAME(values,"values");
	HX_MARK_END_CLASS();
}

void TTransform_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(target,"target");
	HX_VISIT_MEMBER_NAME(values,"values");
}

hx::Val TTransform_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { return hx::Val( target ); }
		if (HX_FIELD_EQ(inName,"values") ) { return hx::Val( values ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TTransform_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { target=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"values") ) { values=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TTransform_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("target",51,f3,ec,86));
	outFields->push(HX_("values",e2,03,b7,4f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TTransform_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TTransform_obj,target),HX_("target",51,f3,ec,86)},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(TTransform_obj,values),HX_("values",e2,03,b7,4f)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TTransform_obj_sStaticStorageInfo = 0;
#endif

static ::String TTransform_obj_sMemberFields[] = {
	HX_("target",51,f3,ec,86),
	HX_("values",e2,03,b7,4f),
	::String(null()) };

hx::Class TTransform_obj::__mClass;

void TTransform_obj::__register()
{
	TTransform_obj _hx_dummy;
	TTransform_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.TTransform",16,cb,5f,ea);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TTransform_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TTransform_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TTransform_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TTransform_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
