// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_TVertexArray
#include <hxinc/iron/data/TVertexArray.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_25906fc49391a9dd_68_new,"iron.data.TVertexArray","new",0xfb840031,"iron.data.TVertexArray.new","iron/data/SceneFormat.hx",68,0x98b03519)
namespace iron{
namespace data{

void TVertexArray_obj::__construct(::String attrib, ::kha::arrays::Float32ArrayPrivate values, ::Dynamic size){
            	HX_STACKFRAME(&_hx_pos_25906fc49391a9dd_68_new)
HXDLIN(  68)		this->attrib = attrib;
HXDLIN(  68)		this->values = values;
HXDLIN(  68)		this->size = size;
            	}

Dynamic TVertexArray_obj::__CreateEmpty() { return new TVertexArray_obj; }

void *TVertexArray_obj::_hx_vtable = 0;

Dynamic TVertexArray_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TVertexArray_obj > _hx_result = new TVertexArray_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool TVertexArray_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2536a613;
}


hx::ObjectPtr< TVertexArray_obj > TVertexArray_obj::__new(::String attrib, ::kha::arrays::Float32ArrayPrivate values, ::Dynamic size) {
	hx::ObjectPtr< TVertexArray_obj > __this = new TVertexArray_obj();
	__this->__construct(attrib,values,size);
	return __this;
}

hx::ObjectPtr< TVertexArray_obj > TVertexArray_obj::__alloc(hx::Ctx *_hx_ctx,::String attrib, ::kha::arrays::Float32ArrayPrivate values, ::Dynamic size) {
	TVertexArray_obj *__this = (TVertexArray_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TVertexArray_obj), true, "iron.data.TVertexArray"));
	*(void **)__this = TVertexArray_obj::_hx_vtable;
	__this->__construct(attrib,values,size);
	return __this;
}

TVertexArray_obj::TVertexArray_obj()
{
}

void TVertexArray_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TVertexArray);
	HX_MARK_MEMBER_NAME(attrib,"attrib");
	HX_MARK_MEMBER_NAME(values,"values");
	HX_MARK_MEMBER_NAME(size,"size");
	HX_MARK_END_CLASS();
}

void TVertexArray_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(attrib,"attrib");
	HX_VISIT_MEMBER_NAME(values,"values");
	HX_VISIT_MEMBER_NAME(size,"size");
}

hx::Val TVertexArray_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"attrib") ) { return hx::Val( attrib ); }
		if (HX_FIELD_EQ(inName,"values") ) { return hx::Val( values ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TVertexArray_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { size=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"attrib") ) { attrib=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"values") ) { values=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TVertexArray_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("attrib",4a,e7,1c,e0));
	outFields->push(HX_("values",e2,03,b7,4f));
	outFields->push(HX_("size",c1,a0,53,4c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TVertexArray_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TVertexArray_obj,attrib),HX_("attrib",4a,e7,1c,e0)},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(TVertexArray_obj,values),HX_("values",e2,03,b7,4f)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TVertexArray_obj,size),HX_("size",c1,a0,53,4c)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TVertexArray_obj_sStaticStorageInfo = 0;
#endif

static ::String TVertexArray_obj_sMemberFields[] = {
	HX_("attrib",4a,e7,1c,e0),
	HX_("values",e2,03,b7,4f),
	HX_("size",c1,a0,53,4c),
	::String(null()) };

hx::Class TVertexArray_obj::__mClass;

void TVertexArray_obj::__register()
{
	TVertexArray_obj _hx_dummy;
	TVertexArray_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.TVertexArray",bf,13,3a,21);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TVertexArray_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TVertexArray_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TVertexArray_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TVertexArray_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
