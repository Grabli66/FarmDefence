// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_TVertexData
#include <hxinc/iron/data/TVertexData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_52566373f5c2c3ca_237_new,"iron.data.TVertexData","new",0x707589b6,"iron.data.TVertexData.new","iron/data/SceneFormat.hx",237,0x98b03519)
namespace iron{
namespace data{

void TVertexData_obj::__construct(::String name,int size){
            	HX_STACKFRAME(&_hx_pos_52566373f5c2c3ca_237_new)
HXDLIN( 237)		this->name = name;
HXDLIN( 237)		this->size = size;
            	}

Dynamic TVertexData_obj::__CreateEmpty() { return new TVertexData_obj; }

void *TVertexData_obj::_hx_vtable = 0;

Dynamic TVertexData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TVertexData_obj > _hx_result = new TVertexData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool TVertexData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x13616328;
}


TVertexData_obj::TVertexData_obj()
{
}

void TVertexData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TVertexData);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(size,"size");
	HX_MARK_END_CLASS();
}

void TVertexData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(size,"size");
}

hx::Val TVertexData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TVertexData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"size") ) { size=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TVertexData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("size",c1,a0,53,4c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TVertexData_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TVertexData_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsInt,(int)offsetof(TVertexData_obj,size),HX_("size",c1,a0,53,4c)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TVertexData_obj_sStaticStorageInfo = 0;
#endif

static ::String TVertexData_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("size",c1,a0,53,4c),
	::String(null()) };

hx::Class TVertexData_obj::__mClass;

void TVertexData_obj::__register()
{
	TVertexData_obj _hx_dummy;
	TVertexData_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.TVertexData",c4,36,5d,61);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TVertexData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TVertexData_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TVertexData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TVertexData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
