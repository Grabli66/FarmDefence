// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_data_TProbe
#include <hxinc/iron/data/TProbe.h>
#endif
#ifndef INCLUDED_iron_data_TWorldData
#include <hxinc/iron/data/TWorldData.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d07c371f4c101a20_288_new,"iron.data.TWorldData","new",0xea440338,"iron.data.TWorldData.new","iron/data/SceneFormat.hx",288,0x98b03519)
namespace iron{
namespace data{

void TWorldData_obj::__construct(::String name,int background_color,::Array< ::Dynamic> probes, ::kha::arrays::Float32ArrayPrivate sun_direction, ::Dynamic turbidity, ::Dynamic ground_albedo,::String envmap){
            	HX_STACKFRAME(&_hx_pos_d07c371f4c101a20_288_new)
HXDLIN( 288)		this->name = name;
HXDLIN( 288)		this->background_color = background_color;
HXDLIN( 288)		this->probes = probes;
HXDLIN( 288)		this->sun_direction = sun_direction;
HXDLIN( 288)		this->turbidity = turbidity;
HXDLIN( 288)		this->ground_albedo = ground_albedo;
HXDLIN( 288)		this->envmap = envmap;
            	}

Dynamic TWorldData_obj::__CreateEmpty() { return new TWorldData_obj; }

void *TWorldData_obj::_hx_vtable = 0;

Dynamic TWorldData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TWorldData_obj > _hx_result = new TWorldData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool TWorldData_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x08c060f2;
}


hx::ObjectPtr< TWorldData_obj > TWorldData_obj::__new(::String name,int background_color,::Array< ::Dynamic> probes, ::kha::arrays::Float32ArrayPrivate sun_direction, ::Dynamic turbidity, ::Dynamic ground_albedo,::String envmap) {
	hx::ObjectPtr< TWorldData_obj > __this = new TWorldData_obj();
	__this->__construct(name,background_color,probes,sun_direction,turbidity,ground_albedo,envmap);
	return __this;
}

hx::ObjectPtr< TWorldData_obj > TWorldData_obj::__alloc(hx::Ctx *_hx_ctx,::String name,int background_color,::Array< ::Dynamic> probes, ::kha::arrays::Float32ArrayPrivate sun_direction, ::Dynamic turbidity, ::Dynamic ground_albedo,::String envmap) {
	TWorldData_obj *__this = (TWorldData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TWorldData_obj), true, "iron.data.TWorldData"));
	*(void **)__this = TWorldData_obj::_hx_vtable;
	__this->__construct(name,background_color,probes,sun_direction,turbidity,ground_albedo,envmap);
	return __this;
}

TWorldData_obj::TWorldData_obj()
{
}

void TWorldData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TWorldData);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(background_color,"background_color");
	HX_MARK_MEMBER_NAME(probes,"probes");
	HX_MARK_MEMBER_NAME(sun_direction,"sun_direction");
	HX_MARK_MEMBER_NAME(turbidity,"turbidity");
	HX_MARK_MEMBER_NAME(ground_albedo,"ground_albedo");
	HX_MARK_MEMBER_NAME(envmap,"envmap");
	HX_MARK_END_CLASS();
}

void TWorldData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(background_color,"background_color");
	HX_VISIT_MEMBER_NAME(probes,"probes");
	HX_VISIT_MEMBER_NAME(sun_direction,"sun_direction");
	HX_VISIT_MEMBER_NAME(turbidity,"turbidity");
	HX_VISIT_MEMBER_NAME(ground_albedo,"ground_albedo");
	HX_VISIT_MEMBER_NAME(envmap,"envmap");
}

hx::Val TWorldData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"probes") ) { return hx::Val( probes ); }
		if (HX_FIELD_EQ(inName,"envmap") ) { return hx::Val( envmap ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"turbidity") ) { return hx::Val( turbidity ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sun_direction") ) { return hx::Val( sun_direction ); }
		if (HX_FIELD_EQ(inName,"ground_albedo") ) { return hx::Val( ground_albedo ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"background_color") ) { return hx::Val( background_color ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TWorldData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"probes") ) { probes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"envmap") ) { envmap=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"turbidity") ) { turbidity=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"sun_direction") ) { sun_direction=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ground_albedo") ) { ground_albedo=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"background_color") ) { background_color=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TWorldData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("background_color",12,f3,45,dc));
	outFields->push(HX_("probes",43,ef,4f,b5));
	outFields->push(HX_("sun_direction",8c,6e,6a,2d));
	outFields->push(HX_("turbidity",22,4c,76,24));
	outFields->push(HX_("ground_albedo",71,e8,09,bd));
	outFields->push(HX_("envmap",cf,78,71,06));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TWorldData_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TWorldData_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsInt,(int)offsetof(TWorldData_obj,background_color),HX_("background_color",12,f3,45,dc)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TWorldData_obj,probes),HX_("probes",43,ef,4f,b5)},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(TWorldData_obj,sun_direction),HX_("sun_direction",8c,6e,6a,2d)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TWorldData_obj,turbidity),HX_("turbidity",22,4c,76,24)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(TWorldData_obj,ground_albedo),HX_("ground_albedo",71,e8,09,bd)},
	{hx::fsString,(int)offsetof(TWorldData_obj,envmap),HX_("envmap",cf,78,71,06)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TWorldData_obj_sStaticStorageInfo = 0;
#endif

static ::String TWorldData_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("background_color",12,f3,45,dc),
	HX_("probes",43,ef,4f,b5),
	HX_("sun_direction",8c,6e,6a,2d),
	HX_("turbidity",22,4c,76,24),
	HX_("ground_albedo",71,e8,09,bd),
	HX_("envmap",cf,78,71,06),
	::String(null()) };

hx::Class TWorldData_obj::__mClass;

void TWorldData_obj::__register()
{
	TWorldData_obj _hx_dummy;
	TWorldData_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.TWorldData",46,47,4c,f4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TWorldData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TWorldData_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TWorldData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TWorldData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace data
