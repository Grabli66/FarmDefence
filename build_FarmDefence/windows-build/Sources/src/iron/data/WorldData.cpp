// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_haxe_Log
#include <hxinc/haxe/Log.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <hxinc/iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_data_Probe
#include <hxinc/iron/data/Probe.h>
#endif
#ifndef INCLUDED_iron_data_TProbe
#include <hxinc/iron/data/TProbe.h>
#endif
#ifndef INCLUDED_iron_data_TSceneFormat
#include <hxinc/iron/data/TSceneFormat.h>
#endif
#ifndef INCLUDED_iron_data_TWorldData
#include <hxinc/iron/data/TWorldData.h>
#endif
#ifndef INCLUDED_iron_data_WorldData
#include <hxinc/iron/data/WorldData.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <hxinc/iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <hxinc/iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <hxinc/iron/object/Transform.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_89867625257f5616_8_new,"iron.data.WorldData","new",0x5a8ce690,"iron.data.WorldData.new","iron/data/WorldData.hx",8,0xd6d38740)
HX_DEFINE_STACK_FRAME(_hx_pos_89867625257f5616_28_new,"iron.data.WorldData","new",0x5a8ce690,"iron.data.WorldData.new","iron/data/WorldData.hx",28,0xd6d38740)
HX_LOCAL_STACK_FRAME(_hx_pos_89867625257f5616_37_loadEnvmap,"iron.data.WorldData","loadEnvmap",0x19c7b765,"iron.data.WorldData.loadEnvmap","iron/data/WorldData.hx",37,0xd6d38740)
HX_LOCAL_STACK_FRAME(_hx_pos_89867625257f5616_39_loadEnvmap,"iron.data.WorldData","loadEnvmap",0x19c7b765,"iron.data.WorldData.loadEnvmap","iron/data/WorldData.hx",39,0xd6d38740)
HX_LOCAL_STACK_FRAME(_hx_pos_89867625257f5616_67_getGlobalProbe,"iron.data.WorldData","getGlobalProbe",0x3e23bda7,"iron.data.WorldData.getGlobalProbe","iron/data/WorldData.hx",67,0xd6d38740)
HX_LOCAL_STACK_FRAME(_hx_pos_89867625257f5616_71_getLocalProbe,"iron.data.WorldData","getLocalProbe",0x5f5a8c2b,"iron.data.WorldData.getLocalProbe","iron/data/WorldData.hx",71,0xd6d38740)
HX_LOCAL_STACK_FRAME(_hx_pos_89867625257f5616_75_getSHIrradiance,"iron.data.WorldData","getSHIrradiance",0x851a9d67,"iron.data.WorldData.getSHIrradiance","iron/data/WorldData.hx",75,0xd6d38740)
HX_LOCAL_STACK_FRAME(_hx_pos_89867625257f5616_90_getProbeID,"iron.data.WorldData","getProbeID",0x9e2ddce5,"iron.data.WorldData.getProbeID","iron/data/WorldData.hx",90,0xd6d38740)
HX_LOCAL_STACK_FRAME(_hx_pos_89867625257f5616_110_getProbeVolumeCenter,"iron.data.WorldData","getProbeVolumeCenter",0xe444fcf9,"iron.data.WorldData.getProbeVolumeCenter","iron/data/WorldData.hx",110,0xd6d38740)
HX_LOCAL_STACK_FRAME(_hx_pos_89867625257f5616_114_getProbeVolumeSize,"iron.data.WorldData","getProbeVolumeSize",0x83d4a6e5,"iron.data.WorldData.getProbeVolumeSize","iron/data/WorldData.hx",114,0xd6d38740)
HX_LOCAL_STACK_FRAME(_hx_pos_89867625257f5616_118_getProbeStrength,"iron.data.WorldData","getProbeStrength",0xafd88f2b,"iron.data.WorldData.getProbeStrength","iron/data/WorldData.hx",118,0xd6d38740)
HX_LOCAL_STACK_FRAME(_hx_pos_89867625257f5616_122_getProbeBlending,"iron.data.WorldData","getProbeBlending",0x8c3029db,"iron.data.WorldData.getProbeBlending","iron/data/WorldData.hx",122,0xd6d38740)
HX_LOCAL_STACK_FRAME(_hx_pos_89867625257f5616_48_parse,"iron.data.WorldData","parse",0xe8a49263,"iron.data.WorldData.parse","iron/data/WorldData.hx",48,0xd6d38740)
HX_LOCAL_STACK_FRAME(_hx_pos_89867625257f5616_58_getEmptyIrradiance,"iron.data.WorldData","getEmptyIrradiance",0xd06f0d73,"iron.data.WorldData.getEmptyIrradiance","iron/data/WorldData.hx",58,0xd6d38740)
HX_LOCAL_STACK_FRAME(_hx_pos_89867625257f5616_16_boot,"iron.data.WorldData","boot",0xd8d5d802,"iron.data.WorldData.boot","iron/data/WorldData.hx",16,0xd6d38740)
namespace iron{
namespace data{

void WorldData_obj::__construct( ::iron::data::TWorldData raw, ::Dynamic done){
            	HX_GC_STACKFRAME(&_hx_pos_89867625257f5616_8_new)
HXLINE(  89)		this->vec =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  74)		this->shirr = null();
HXLINE(  18)		 ::iron::data::WorldData _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  19)		super::__construct();
HXLINE(  21)		this->raw = raw;
HXLINE(  22)		this->name = raw->name;
HXLINE(  25)		bool _hx_tmp;
HXDLIN(  25)		if (hx::IsNotNull( raw->probes )) {
HXLINE(  25)			_hx_tmp = (raw->probes->length > 0);
            		}
            		else {
HXLINE(  25)			_hx_tmp = false;
            		}
HXDLIN(  25)		if (_hx_tmp) {
HXLINE(  26)			this->probes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  27)			{
HXLINE(  27)				int _g = 0;
HXDLIN(  27)				::Array< ::Dynamic> _g1 = raw->probes;
HXDLIN(  27)				while((_g < _g1->length)){
            					HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0, ::iron::data::WorldData,_gthis, ::iron::data::TWorldData,raw, ::Dynamic,done) HXARGC(1)
            					void _hx_run( ::iron::data::Probe self){
            						HX_GC_STACKFRAME(&_hx_pos_89867625257f5616_28_new)
HXLINE(  29)						_gthis->probes->push(self);
HXLINE(  30)						if ((_gthis->probes->length == raw->probes->length)) {
HXLINE(  30)							_gthis->loadEnvmap(done);
            						}
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(  27)					 ::iron::data::TProbe p = _g1->__get(_g).StaticCast<  ::iron::data::TProbe >();
HXDLIN(  27)					_g = (_g + 1);
HXLINE(  28)					 ::iron::data::Probe_obj::__alloc( HX_CTX ,p, ::Dynamic(new _hx_Closure_0(_gthis,raw,done)));
            				}
            			}
            		}
            		else {
HXLINE(  34)			this->loadEnvmap(done);
            		}
            	}

Dynamic WorldData_obj::__CreateEmpty() { return new WorldData_obj; }

void *WorldData_obj::_hx_vtable = 0;

Dynamic WorldData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< WorldData_obj > _hx_result = new WorldData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool WorldData_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0b300fca) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0b300fca;
	} else {
		return inClassId==(int)0x25e6a720;
	}
}

void WorldData_obj::loadEnvmap( ::Dynamic done){
            	HX_STACKFRAME(&_hx_pos_89867625257f5616_37_loadEnvmap)
HXDLIN(  37)		 ::iron::data::WorldData _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  38)		if (hx::IsNotNull( this->raw->envmap )) {
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::iron::data::WorldData,_gthis, ::Dynamic,done) HXARGC(1)
            			void _hx_run( ::kha::Image image){
            				HX_STACKFRAME(&_hx_pos_89867625257f5616_39_loadEnvmap)
HXLINE(  40)				_gthis->envmap = image;
HXLINE(  41)				done(_gthis);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  39)			::iron::data::Data_obj::getImage(this->raw->envmap, ::Dynamic(new _hx_Closure_0(_gthis,done)),null(),null());
            		}
            		else {
HXLINE(  44)			done(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(WorldData_obj,loadEnvmap,(void))

 ::iron::data::Probe WorldData_obj::getGlobalProbe(){
            	HX_STACKFRAME(&_hx_pos_89867625257f5616_67_getGlobalProbe)
HXDLIN(  67)		return this->probes->__get(0).StaticCast<  ::iron::data::Probe >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(WorldData_obj,getGlobalProbe,return )

 ::iron::data::Probe WorldData_obj::getLocalProbe(int i){
            	HX_STACKFRAME(&_hx_pos_89867625257f5616_71_getLocalProbe)
HXDLIN(  71)		if ((i < this->probes->length)) {
HXDLIN(  71)			return this->probes->__get(i).StaticCast<  ::iron::data::Probe >();
            		}
            		else {
HXDLIN(  71)			return null();
            		}
HXDLIN(  71)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(WorldData_obj,getLocalProbe,return )

 ::kha::arrays::Float32ArrayPrivate WorldData_obj::getSHIrradiance(){
            	HX_GC_STACKFRAME(&_hx_pos_89867625257f5616_75_getSHIrradiance)
HXLINE(  77)		if (hx::IsNull( this->shirr )) {
HXLINE(  78)			 ::kha::arrays::Float32ArrayPrivate this1 =  ::kha::arrays::Float32ArrayPrivate_obj::__alloc( HX_CTX ,28);
HXDLIN(  78)			this->shirr = this1;
HXLINE(  80)			 ::iron::data::Probe p = this->probes->__get(0).StaticCast<  ::iron::data::Probe >();
HXLINE(  81)			{
HXLINE(  81)				int _g1 = 0;
HXDLIN(  81)				int _g = p->irradiance->self.length();
HXDLIN(  81)				while((_g1 < _g)){
HXLINE(  81)					_g1 = (_g1 + 1);
HXDLIN(  81)					int j = (_g1 - 1);
HXLINE(  82)					{
HXLINE(  82)						 ::kha::arrays::Float32ArrayPrivate this2 = this->shirr;
HXDLIN(  82)						float value = p->irradiance->self.get(j);
HXDLIN(  82)						this2->self.set(j,value);
            					}
            				}
            			}
            		}
HXLINE(  86)		return this->shirr;
            	}


HX_DEFINE_DYNAMIC_FUNC0(WorldData_obj,getSHIrradiance,return )

int WorldData_obj::getProbeID( ::iron::object::Transform t){
            	HX_STACKFRAME(&_hx_pos_89867625257f5616_90_getProbeID)
HXLINE(  91)		this->vec->x = t->world->self->_30;
HXLINE(  92)		this->vec->y = t->world->self->_31;
HXLINE(  93)		this->vec->z = t->world->self->_32;
HXLINE(  94)		 ::iron::math::Vec4 dim = t->dim;
HXLINE(  95)		{
HXLINE(  95)			int _g1 = 1;
HXDLIN(  95)			int _g = this->probes->length;
HXDLIN(  95)			while((_g1 < _g)){
HXLINE(  95)				_g1 = (_g1 + 1);
HXDLIN(  95)				int i = (_g1 - 1);
HXLINE(  96)				 ::iron::data::Probe p = this->probes->__get(i).StaticCast<  ::iron::data::Probe >();
HXLINE(  98)				bool _hx_tmp;
HXDLIN(  98)				bool _hx_tmp1;
HXDLIN(  98)				bool _hx_tmp2;
HXDLIN(  98)				bool _hx_tmp3;
HXDLIN(  98)				bool _hx_tmp4;
HXDLIN(  98)				float _hx_tmp5 = this->vec->x;
HXDLIN(  98)				if (!(((_hx_tmp5 + (( (Float)(dim->x) ) / ( (Float)(2) ))) < p->volumeMin->x))) {
HXLINE(  98)					float _hx_tmp6 = this->vec->x;
HXDLIN(  98)					_hx_tmp4 = ((_hx_tmp6 - (( (Float)(dim->x) ) / ( (Float)(2) ))) > p->volumeMax->x);
            				}
            				else {
HXLINE(  98)					_hx_tmp4 = true;
            				}
HXDLIN(  98)				if (!(_hx_tmp4)) {
HXLINE(  99)					float _hx_tmp7 = this->vec->y;
HXLINE(  98)					_hx_tmp3 = ((_hx_tmp7 + (( (Float)(dim->y) ) / ( (Float)(2) ))) < p->volumeMin->y);
            				}
            				else {
HXLINE(  98)					_hx_tmp3 = true;
            				}
HXDLIN(  98)				if (!(_hx_tmp3)) {
HXLINE(  99)					float _hx_tmp8 = this->vec->y;
HXLINE(  98)					_hx_tmp2 = ((_hx_tmp8 - (( (Float)(dim->y) ) / ( (Float)(2) ))) > p->volumeMax->y);
            				}
            				else {
HXLINE(  98)					_hx_tmp2 = true;
            				}
HXDLIN(  98)				if (!(_hx_tmp2)) {
HXLINE( 100)					float _hx_tmp9 = this->vec->z;
HXLINE(  98)					_hx_tmp1 = ((_hx_tmp9 + (( (Float)(dim->z) ) / ( (Float)(2) ))) < p->volumeMin->z);
            				}
            				else {
HXLINE(  98)					_hx_tmp1 = true;
            				}
HXDLIN(  98)				if (!(_hx_tmp1)) {
HXLINE( 100)					float _hx_tmp10 = this->vec->z;
HXLINE(  98)					_hx_tmp = ((_hx_tmp10 - (( (Float)(dim->z) ) / ( (Float)(2) ))) > p->volumeMax->z);
            				}
            				else {
HXLINE(  98)					_hx_tmp = true;
            				}
HXDLIN(  98)				if (_hx_tmp) {
HXLINE( 101)					continue;
            				}
HXLINE( 104)				return i;
            			}
            		}
HXLINE( 106)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(WorldData_obj,getProbeID,return )

 ::iron::math::Vec4 WorldData_obj::getProbeVolumeCenter( ::iron::object::Transform t){
            	HX_STACKFRAME(&_hx_pos_89867625257f5616_110_getProbeVolumeCenter)
HXDLIN( 110)		::Array< ::Dynamic> _hx_tmp = this->probes;
HXDLIN( 110)		return _hx_tmp->__get(this->getProbeID(t)).StaticCast<  ::iron::data::Probe >()->volumeCenter;
            	}


HX_DEFINE_DYNAMIC_FUNC1(WorldData_obj,getProbeVolumeCenter,return )

 ::iron::math::Vec4 WorldData_obj::getProbeVolumeSize( ::iron::object::Transform t){
            	HX_STACKFRAME(&_hx_pos_89867625257f5616_114_getProbeVolumeSize)
HXDLIN( 114)		::Array< ::Dynamic> _hx_tmp = this->probes;
HXDLIN( 114)		return _hx_tmp->__get(this->getProbeID(t)).StaticCast<  ::iron::data::Probe >()->volume;
            	}


HX_DEFINE_DYNAMIC_FUNC1(WorldData_obj,getProbeVolumeSize,return )

Float WorldData_obj::getProbeStrength( ::iron::object::Transform t){
            	HX_STACKFRAME(&_hx_pos_89867625257f5616_118_getProbeStrength)
HXDLIN( 118)		::Array< ::Dynamic> _hx_tmp = this->probes;
HXDLIN( 118)		return ( (Float)(_hx_tmp->__get(this->getProbeID(t)).StaticCast<  ::iron::data::Probe >()->raw->strength) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(WorldData_obj,getProbeStrength,return )

Float WorldData_obj::getProbeBlending( ::iron::object::Transform t){
            	HX_STACKFRAME(&_hx_pos_89867625257f5616_122_getProbeBlending)
HXDLIN( 122)		::Array< ::Dynamic> _hx_tmp = this->probes;
HXDLIN( 122)		return ( (Float)(_hx_tmp->__get(this->getProbeID(t)).StaticCast<  ::iron::data::Probe >()->raw->blending) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(WorldData_obj,getProbeBlending,return )

 ::kha::arrays::Float32ArrayPrivate WorldData_obj::emptyIrr;

void WorldData_obj::parse(::String name,::String id, ::Dynamic done){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,id, ::Dynamic,done) HXARGC(1)
            		void _hx_run( ::iron::data::TSceneFormat format){
            			HX_GC_STACKFRAME(&_hx_pos_89867625257f5616_48_parse)
HXLINE(  49)			 ::iron::data::TWorldData raw = ::iron::data::Data_obj::getWorldRawByName(format->world_datas,id);
HXLINE(  50)			if (hx::IsNull( raw )) {
HXLINE(  51)				 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  51)				_hx_tmp(((HX_("World data \"",da,ac,68,84) + id) + HX_("\" not found!",4a,86,fb,0a)),hx::SourceInfo(HX_("Sources/iron/data/WorldData.hx",97,0e,a8,a6),51,HX_("iron.data.WorldData",9e,9e,da,fd),HX_("parse",33,90,55,bd)));
HXLINE(  52)				done(null());
            			}
HXLINE(  54)			 ::iron::data::WorldData_obj::__alloc( HX_CTX ,raw,done);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_89867625257f5616_48_parse)
HXDLIN(  48)		::iron::data::Data_obj::getSceneRaw(name, ::Dynamic(new _hx_Closure_0(id,done)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(WorldData_obj,parse,(void))

 ::kha::arrays::Float32ArrayPrivate WorldData_obj::getEmptyIrradiance(){
            	HX_GC_STACKFRAME(&_hx_pos_89867625257f5616_58_getEmptyIrradiance)
HXLINE(  59)		if (hx::IsNull( ::iron::data::WorldData_obj::emptyIrr )) {
HXLINE(  60)			 ::kha::arrays::Float32ArrayPrivate this1 =  ::kha::arrays::Float32ArrayPrivate_obj::__alloc( HX_CTX ,28);
HXDLIN(  60)			::iron::data::WorldData_obj::emptyIrr = this1;
HXLINE(  61)			{
HXLINE(  61)				int _g1 = 0;
HXDLIN(  61)				int _g = ::iron::data::WorldData_obj::emptyIrr->self.length();
HXDLIN(  61)				while((_g1 < _g)){
HXLINE(  61)					_g1 = (_g1 + 1);
HXDLIN(  61)					int i = (_g1 - 1);
HXDLIN(  61)					::iron::data::WorldData_obj::emptyIrr->self.set(i,( (float)(((Float)0.0)) ));
            				}
            			}
            		}
HXLINE(  63)		return ::iron::data::WorldData_obj::emptyIrr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(WorldData_obj,getEmptyIrradiance,return )


hx::ObjectPtr< WorldData_obj > WorldData_obj::__new( ::iron::data::TWorldData raw, ::Dynamic done) {
	hx::ObjectPtr< WorldData_obj > __this = new WorldData_obj();
	__this->__construct(raw,done);
	return __this;
}

hx::ObjectPtr< WorldData_obj > WorldData_obj::__alloc(hx::Ctx *_hx_ctx, ::iron::data::TWorldData raw, ::Dynamic done) {
	WorldData_obj *__this = (WorldData_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(WorldData_obj), true, "iron.data.WorldData"));
	*(void **)__this = WorldData_obj::_hx_vtable;
	__this->__construct(raw,done);
	return __this;
}

WorldData_obj::WorldData_obj()
{
}

void WorldData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(WorldData);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(raw,"raw");
	HX_MARK_MEMBER_NAME(envmap,"envmap");
	HX_MARK_MEMBER_NAME(probes,"probes");
	HX_MARK_MEMBER_NAME(shirr,"shirr");
	HX_MARK_MEMBER_NAME(vec,"vec");
	HX_MARK_END_CLASS();
}

void WorldData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(raw,"raw");
	HX_VISIT_MEMBER_NAME(envmap,"envmap");
	HX_VISIT_MEMBER_NAME(probes,"probes");
	HX_VISIT_MEMBER_NAME(shirr,"shirr");
	HX_VISIT_MEMBER_NAME(vec,"vec");
}

hx::Val WorldData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"raw") ) { return hx::Val( raw ); }
		if (HX_FIELD_EQ(inName,"vec") ) { return hx::Val( vec ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shirr") ) { return hx::Val( shirr ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"envmap") ) { return hx::Val( envmap ); }
		if (HX_FIELD_EQ(inName,"probes") ) { return hx::Val( probes ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"loadEnvmap") ) { return hx::Val( loadEnvmap_dyn() ); }
		if (HX_FIELD_EQ(inName,"getProbeID") ) { return hx::Val( getProbeID_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getLocalProbe") ) { return hx::Val( getLocalProbe_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getGlobalProbe") ) { return hx::Val( getGlobalProbe_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getSHIrradiance") ) { return hx::Val( getSHIrradiance_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getProbeStrength") ) { return hx::Val( getProbeStrength_dyn() ); }
		if (HX_FIELD_EQ(inName,"getProbeBlending") ) { return hx::Val( getProbeBlending_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getProbeVolumeSize") ) { return hx::Val( getProbeVolumeSize_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getProbeVolumeCenter") ) { return hx::Val( getProbeVolumeCenter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool WorldData_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { outValue = parse_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"emptyIrr") ) { outValue = ( emptyIrr ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getEmptyIrradiance") ) { outValue = getEmptyIrradiance_dyn(); return true; }
	}
	return false;
}

hx::Val WorldData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"raw") ) { raw=inValue.Cast<  ::iron::data::TWorldData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vec") ) { vec=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shirr") ) { shirr=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"envmap") ) { envmap=inValue.Cast<  ::kha::Image >(); return inValue; }
		if (HX_FIELD_EQ(inName,"probes") ) { probes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool WorldData_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"emptyIrr") ) { emptyIrr=ioValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return true; }
	}
	return false;
}

void WorldData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("raw",e8,d5,56,00));
	outFields->push(HX_("envmap",cf,78,71,06));
	outFields->push(HX_("probes",43,ef,4f,b5));
	outFields->push(HX_("shirr",f4,f6,22,7c));
	outFields->push(HX_("vec",54,e2,59,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo WorldData_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(WorldData_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsObject /*::iron::data::TWorldData*/ ,(int)offsetof(WorldData_obj,raw),HX_("raw",e8,d5,56,00)},
	{hx::fsObject /*::kha::Image*/ ,(int)offsetof(WorldData_obj,envmap),HX_("envmap",cf,78,71,06)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(WorldData_obj,probes),HX_("probes",43,ef,4f,b5)},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(WorldData_obj,shirr),HX_("shirr",f4,f6,22,7c)},
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(WorldData_obj,vec),HX_("vec",54,e2,59,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo WorldData_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(void *) &WorldData_obj::emptyIrr,HX_("emptyIrr",dc,e3,30,28)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String WorldData_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("raw",e8,d5,56,00),
	HX_("envmap",cf,78,71,06),
	HX_("probes",43,ef,4f,b5),
	HX_("loadEnvmap",95,a7,9c,bb),
	HX_("getGlobalProbe",d7,85,6c,28),
	HX_("getLocalProbe",fb,d9,f5,5c),
	HX_("shirr",f4,f6,22,7c),
	HX_("getSHIrradiance",37,ff,80,9a),
	HX_("vec",54,e2,59,00),
	HX_("getProbeID",15,cd,02,40),
	HX_("getProbeVolumeCenter",29,09,5a,45),
	HX_("getProbeVolumeSize",15,47,5d,f9),
	HX_("getProbeStrength",5b,c3,07,54),
	HX_("getProbeBlending",0b,5e,5f,30),
	::String(null()) };

static void WorldData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(WorldData_obj::emptyIrr,"emptyIrr");
};

#ifdef HXCPP_VISIT_ALLOCS
static void WorldData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(WorldData_obj::emptyIrr,"emptyIrr");
};

#endif

hx::Class WorldData_obj::__mClass;

static ::String WorldData_obj_sStaticFields[] = {
	HX_("emptyIrr",dc,e3,30,28),
	HX_("parse",33,90,55,bd),
	HX_("getEmptyIrradiance",a3,ad,f7,45),
	::String(null())
};

void WorldData_obj::__register()
{
	WorldData_obj _hx_dummy;
	WorldData_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.data.WorldData",9e,9e,da,fd);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &WorldData_obj::__GetStatic;
	__mClass->mSetStaticField = &WorldData_obj::__SetStatic;
	__mClass->mMarkFunc = WorldData_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(WorldData_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(WorldData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< WorldData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = WorldData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = WorldData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = WorldData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void WorldData_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_89867625257f5616_16_boot)
HXDLIN(  16)		emptyIrr = null();
            	}
}

} // end namespace iron
} // end namespace data
