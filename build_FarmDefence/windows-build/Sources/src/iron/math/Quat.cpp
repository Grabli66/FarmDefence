// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <hxinc/iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Quat
#include <hxinc/iron/math/Quat.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <hxinc/iron/math/Vec4.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b22ee3d0836f1999_19_new,"iron.math.Quat","new",0x0bb86329,"iron.math.Quat.new","iron/math/Quat.hx",19,0xb4f4e407)
HX_LOCAL_STACK_FRAME(_hx_pos_b22ee3d0836f1999_26_set,"iron.math.Quat","set",0x0bbc2e6b,"iron.math.Quat.set","iron/math/Quat.hx",26,0xb4f4e407)
HX_LOCAL_STACK_FRAME(_hx_pos_b22ee3d0836f1999_34_fromAxisAngle,"iron.math.Quat","fromAxisAngle",0xa8a0b4b1,"iron.math.Quat.fromAxisAngle","iron/math/Quat.hx",34,0xb4f4e407)
HX_LOCAL_STACK_FRAME(_hx_pos_b22ee3d0836f1999_43_toAxisAngle,"iron.math.Quat","toAxisAngle",0x403da640,"iron.math.Quat.toAxisAngle","iron/math/Quat.hx",43,0xb4f4e407)
HX_LOCAL_STACK_FRAME(_hx_pos_b22ee3d0836f1999_60_fromMat,"iron.math.Quat","fromMat",0x219e069f,"iron.math.Quat.fromMat","iron/math/Quat.hx",60,0xb4f4e407)
HX_LOCAL_STACK_FRAME(_hx_pos_b22ee3d0836f1999_66_fromRotationMat,"iron.math.Quat","fromRotationMat",0x56297301,"iron.math.Quat.fromRotationMat","iron/math/Quat.hx",66,0xb4f4e407)
HX_LOCAL_STACK_FRAME(_hx_pos_b22ee3d0836f1999_106_mult,"iron.math.Quat","mult",0x35014507,"iron.math.Quat.mult","iron/math/Quat.hx",106,0xb4f4e407)
HX_LOCAL_STACK_FRAME(_hx_pos_b22ee3d0836f1999_109_multquats,"iron.math.Quat","multquats",0xd1aba555,"iron.math.Quat.multquats","iron/math/Quat.hx",109,0xb4f4e407)
HX_LOCAL_STACK_FRAME(_hx_pos_b22ee3d0836f1999_119_normalize,"iron.math.Quat","normalize",0x3e198716,"iron.math.Quat.normalize","iron/math/Quat.hx",119,0xb4f4e407)
HX_LOCAL_STACK_FRAME(_hx_pos_b22ee3d0836f1999_137_setFrom,"iron.math.Quat","setFrom",0xd2e71175,"iron.math.Quat.setFrom","iron/math/Quat.hx",137,0xb4f4e407)
HX_LOCAL_STACK_FRAME(_hx_pos_b22ee3d0836f1999_145_getEuler,"iron.math.Quat","getEuler",0x777d9d8a,"iron.math.Quat.getEuler","iron/math/Quat.hx",145,0xb4f4e407)
HX_LOCAL_STACK_FRAME(_hx_pos_b22ee3d0836f1999_173_fromEuler,"iron.math.Quat","fromEuler",0xbc221328,"iron.math.Quat.fromEuler","iron/math/Quat.hx",173,0xb4f4e407)
HX_LOCAL_STACK_FRAME(_hx_pos_b22ee3d0836f1999_191_lerp,"iron.math.Quat","lerp",0x344bef8e,"iron.math.Quat.lerp","iron/math/Quat.hx",191,0xb4f4e407)
HX_LOCAL_STACK_FRAME(_hx_pos_b22ee3d0836f1999_236_dot,"iron.math.Quat","dot",0x0bb0d552,"iron.math.Quat.dot","iron/math/Quat.hx",236,0xb4f4e407)
HX_LOCAL_STACK_FRAME(_hx_pos_b22ee3d0836f1999_239_fromTo,"iron.math.Quat","fromTo",0xe6e52e5c,"iron.math.Quat.fromTo","iron/math/Quat.hx",239,0xb4f4e407)
HX_LOCAL_STACK_FRAME(_hx_pos_b22ee3d0836f1999_262_toString,"iron.math.Quat","toString",0xdaf48543,"iron.math.Quat.toString","iron/math/Quat.hx",262,0xb4f4e407)
HX_LOCAL_STACK_FRAME(_hx_pos_b22ee3d0836f1999_12_boot,"iron.math.Quat","boot",0x2db76149,"iron.math.Quat.boot","iron/math/Quat.hx",12,0xb4f4e407)
HX_LOCAL_STACK_FRAME(_hx_pos_b22ee3d0836f1999_13_boot,"iron.math.Quat","boot",0x2db76149,"iron.math.Quat.boot","iron/math/Quat.hx",13,0xb4f4e407)
HX_LOCAL_STACK_FRAME(_hx_pos_b22ee3d0836f1999_14_boot,"iron.math.Quat","boot",0x2db76149,"iron.math.Quat.boot","iron/math/Quat.hx",14,0xb4f4e407)
HX_LOCAL_STACK_FRAME(_hx_pos_b22ee3d0836f1999_15_boot,"iron.math.Quat","boot",0x2db76149,"iron.math.Quat.boot","iron/math/Quat.hx",15,0xb4f4e407)
HX_LOCAL_STACK_FRAME(_hx_pos_b22ee3d0836f1999_16_boot,"iron.math.Quat","boot",0x2db76149,"iron.math.Quat.boot","iron/math/Quat.hx",16,0xb4f4e407)
HX_LOCAL_STACK_FRAME(_hx_pos_b22ee3d0836f1999_17_boot,"iron.math.Quat","boot",0x2db76149,"iron.math.Quat.boot","iron/math/Quat.hx",17,0xb4f4e407)
namespace iron{
namespace math{

void Quat_obj::__construct(hx::Null< float >  __o_x,hx::Null< float >  __o_y,hx::Null< float >  __o_z,hx::Null< float >  __o_w){
float x = __o_x.Default(((Float)0.0));
float y = __o_y.Default(((Float)0.0));
float z = __o_z.Default(((Float)0.0));
float w = __o_w.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_b22ee3d0836f1999_19_new)
HXLINE(  20)		this->x = x;
HXLINE(  21)		this->y = y;
HXLINE(  22)		this->z = z;
HXLINE(  23)		this->w = w;
            	}

Dynamic Quat_obj::__CreateEmpty() { return new Quat_obj; }

void *Quat_obj::_hx_vtable = 0;

Dynamic Quat_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Quat_obj > _hx_result = new Quat_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Quat_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1441ffeb;
}

 ::iron::math::Quat Quat_obj::set(float x,float y,float z,float w){
            	HX_STACKFRAME(&_hx_pos_b22ee3d0836f1999_26_set)
HXLINE(  27)		this->x = x;
HXLINE(  28)		this->y = y;
HXLINE(  29)		this->z = z;
HXLINE(  30)		this->w = w;
HXLINE(  31)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Quat_obj,set,return )

 ::iron::math::Quat Quat_obj::fromAxisAngle( ::iron::math::Vec4 axis,float angle){
            	HX_STACKFRAME(&_hx_pos_b22ee3d0836f1999_34_fromAxisAngle)
HXLINE(  35)		float s = ( (float)(::Math_obj::sin((angle * ((Float)0.5)))) );
HXLINE(  36)		this->x = (axis->x * s);
HXLINE(  37)		this->y = (axis->y * s);
HXLINE(  38)		this->z = (axis->z * s);
HXLINE(  39)		this->w = ( (float)(::Math_obj::cos((angle * ((Float)0.5)))) );
HXLINE(  40)		float v = (this->x * this->x);
HXDLIN(  40)		float v1 = (v + (this->y * this->y));
HXDLIN(  40)		float v2 = (v1 + (this->z * this->z));
HXDLIN(  40)		Float l = ::Math_obj::sqrt(( (Float)((v2 + (this->w * this->w))) ));
HXDLIN(  40)		if ((l == ((Float)0.0))) {
HXLINE(  40)			this->x = ( (float)(0) );
HXDLIN(  40)			this->y = ( (float)(0) );
HXDLIN(  40)			this->z = ( (float)(0) );
HXDLIN(  40)			this->w = ( (float)(0) );
            		}
            		else {
HXLINE(  40)			l = (((Float)1.0) / l);
HXDLIN(  40)			 ::iron::math::Quat _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  40)			_hx_tmp->x = (_hx_tmp->x * l);
HXDLIN(  40)			 ::iron::math::Quat _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  40)			_hx_tmp1->y = (_hx_tmp1->y * l);
HXDLIN(  40)			 ::iron::math::Quat _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  40)			_hx_tmp2->z = (_hx_tmp2->z * l);
HXDLIN(  40)			 ::iron::math::Quat _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  40)			_hx_tmp3->w = (_hx_tmp3->w * l);
            		}
HXDLIN(  40)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Quat_obj,fromAxisAngle,return )

float Quat_obj::toAxisAngle( ::iron::math::Vec4 axis){
            	HX_STACKFRAME(&_hx_pos_b22ee3d0836f1999_43_toAxisAngle)
HXLINE(  44)		{
HXLINE(  44)			float v = (this->x * this->x);
HXDLIN(  44)			float v1 = (v + (this->y * this->y));
HXDLIN(  44)			float v2 = (v1 + (this->z * this->z));
HXDLIN(  44)			Float l = ::Math_obj::sqrt(( (Float)((v2 + (this->w * this->w))) ));
HXDLIN(  44)			if ((l == ((Float)0.0))) {
HXLINE(  44)				this->x = ( (float)(0) );
HXDLIN(  44)				this->y = ( (float)(0) );
HXDLIN(  44)				this->z = ( (float)(0) );
HXDLIN(  44)				this->w = ( (float)(0) );
            			}
            			else {
HXLINE(  44)				l = (((Float)1.0) / l);
HXDLIN(  44)				 ::iron::math::Quat _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  44)				_hx_tmp->x = (_hx_tmp->x * l);
HXDLIN(  44)				 ::iron::math::Quat _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  44)				_hx_tmp1->y = (_hx_tmp1->y * l);
HXDLIN(  44)				 ::iron::math::Quat _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  44)				_hx_tmp2->z = (_hx_tmp2->z * l);
HXDLIN(  44)				 ::iron::math::Quat _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  44)				_hx_tmp3->w = (_hx_tmp3->w * l);
            			}
            		}
HXLINE(  45)		Float angle = (2 * ::Math_obj::acos(( (Float)(this->w) )));
HXLINE(  46)		Float s = ::Math_obj::sqrt(( (Float)((1 - (this->w * this->w))) ));
HXLINE(  47)		if ((s < ((Float)0.001))) {
HXLINE(  48)			axis->x = this->x;
HXLINE(  49)			axis->y = this->y;
HXLINE(  50)			axis->z = this->z;
            		}
            		else {
HXLINE(  53)			axis->x = ( (float)((( (Float)(this->x) ) / s)) );
HXLINE(  54)			axis->y = ( (float)((( (Float)(this->y) ) / s)) );
HXLINE(  55)			axis->z = ( (float)((( (Float)(this->z) ) / s)) );
            		}
HXLINE(  57)		return ( (float)(angle) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Quat_obj,toAxisAngle,return )

 ::iron::math::Quat Quat_obj::fromMat( ::iron::math::Mat4 m){
            	HX_STACKFRAME(&_hx_pos_b22ee3d0836f1999_60_fromMat)
HXLINE(  61)		{
HXLINE(  61)			 ::iron::math::Mat4 _this = ::iron::math::Quat_obj::helpMat;
HXDLIN(  61)			_this->self->_00 = m->self->_00;
HXDLIN(  61)			_this->self->_01 = m->self->_01;
HXDLIN(  61)			_this->self->_02 = m->self->_02;
HXDLIN(  61)			_this->self->_03 = m->self->_03;
HXDLIN(  61)			_this->self->_10 = m->self->_10;
HXDLIN(  61)			_this->self->_11 = m->self->_11;
HXDLIN(  61)			_this->self->_12 = m->self->_12;
HXDLIN(  61)			_this->self->_13 = m->self->_13;
HXDLIN(  61)			_this->self->_20 = m->self->_20;
HXDLIN(  61)			_this->self->_21 = m->self->_21;
HXDLIN(  61)			_this->self->_22 = m->self->_22;
HXDLIN(  61)			_this->self->_23 = m->self->_23;
HXDLIN(  61)			_this->self->_30 = m->self->_30;
HXDLIN(  61)			_this->self->_31 = m->self->_31;
HXDLIN(  61)			_this->self->_32 = m->self->_32;
HXDLIN(  61)			_this->self->_33 = m->self->_33;
            		}
HXLINE(  62)		{
HXLINE(  62)			 ::iron::math::Mat4 _this1 = ::iron::math::Quat_obj::helpMat;
HXDLIN(  62)			 ::iron::math::Vec4 _this2 = ::iron::math::Mat4_obj::helpVec;
HXDLIN(  62)			_this2->x = _this1->self->_00;
HXDLIN(  62)			_this2->y = _this1->self->_01;
HXDLIN(  62)			_this2->z = _this1->self->_02;
HXDLIN(  62)			_this2->w = ( (float)(((Float)1.0)) );
HXDLIN(  62)			 ::iron::math::Vec4 _this3 = _this2;
HXDLIN(  62)			float v = (_this3->x * _this3->x);
HXDLIN(  62)			float v1 = (v + (_this3->y * _this3->y));
HXDLIN(  62)			Float scale = (((Float)1.0) / ( (Float)(( (float)(::Math_obj::sqrt(( (Float)((v1 + (_this3->z * _this3->z))) ))) )) ));
HXDLIN(  62)			_this1->self->_00 = ( (float)((_this1->self->_00 * scale)) );
HXDLIN(  62)			_this1->self->_01 = ( (float)((_this1->self->_01 * scale)) );
HXDLIN(  62)			_this1->self->_02 = ( (float)((_this1->self->_02 * scale)) );
HXDLIN(  62)			 ::iron::math::Vec4 _this4 = ::iron::math::Mat4_obj::helpVec;
HXDLIN(  62)			_this4->x = _this1->self->_10;
HXDLIN(  62)			_this4->y = _this1->self->_11;
HXDLIN(  62)			_this4->z = _this1->self->_12;
HXDLIN(  62)			_this4->w = ( (float)(((Float)1.0)) );
HXDLIN(  62)			 ::iron::math::Vec4 _this5 = _this4;
HXDLIN(  62)			float v2 = (_this5->x * _this5->x);
HXDLIN(  62)			float v3 = (v2 + (_this5->y * _this5->y));
HXDLIN(  62)			scale = (((Float)1.0) / ( (Float)(( (float)(::Math_obj::sqrt(( (Float)((v3 + (_this5->z * _this5->z))) ))) )) ));
HXDLIN(  62)			_this1->self->_10 = ( (float)((_this1->self->_10 * scale)) );
HXDLIN(  62)			_this1->self->_11 = ( (float)((_this1->self->_11 * scale)) );
HXDLIN(  62)			_this1->self->_12 = ( (float)((_this1->self->_12 * scale)) );
HXDLIN(  62)			 ::iron::math::Vec4 _this6 = ::iron::math::Mat4_obj::helpVec;
HXDLIN(  62)			_this6->x = _this1->self->_20;
HXDLIN(  62)			_this6->y = _this1->self->_21;
HXDLIN(  62)			_this6->z = _this1->self->_22;
HXDLIN(  62)			_this6->w = ( (float)(((Float)1.0)) );
HXDLIN(  62)			 ::iron::math::Vec4 _this7 = _this6;
HXDLIN(  62)			float v4 = (_this7->x * _this7->x);
HXDLIN(  62)			float v5 = (v4 + (_this7->y * _this7->y));
HXDLIN(  62)			scale = (((Float)1.0) / ( (Float)(( (float)(::Math_obj::sqrt(( (Float)((v5 + (_this7->z * _this7->z))) ))) )) ));
HXDLIN(  62)			_this1->self->_20 = ( (float)((_this1->self->_20 * scale)) );
HXDLIN(  62)			_this1->self->_21 = ( (float)((_this1->self->_21 * scale)) );
HXDLIN(  62)			_this1->self->_22 = ( (float)((_this1->self->_22 * scale)) );
HXDLIN(  62)			_this1->self->_03 = ( (float)(((Float)0.0)) );
HXDLIN(  62)			_this1->self->_13 = ( (float)(((Float)0.0)) );
HXDLIN(  62)			_this1->self->_23 = ( (float)(((Float)0.0)) );
HXDLIN(  62)			_this1->self->_30 = ( (float)(((Float)0.0)) );
HXDLIN(  62)			_this1->self->_31 = ( (float)(((Float)0.0)) );
HXDLIN(  62)			_this1->self->_32 = ( (float)(((Float)0.0)) );
HXDLIN(  62)			_this1->self->_33 = ( (float)(((Float)1.0)) );
            		}
HXLINE(  63)		 ::iron::math::Mat4 m1 = ::iron::math::Quat_obj::helpMat;
HXDLIN(  63)		float m11 = m1->self->_00;
HXDLIN(  63)		float m12 = m1->self->_10;
HXDLIN(  63)		float m13 = m1->self->_20;
HXDLIN(  63)		float m21 = m1->self->_01;
HXDLIN(  63)		float m22 = m1->self->_11;
HXDLIN(  63)		float m23 = m1->self->_21;
HXDLIN(  63)		float m31 = m1->self->_02;
HXDLIN(  63)		float m32 = m1->self->_12;
HXDLIN(  63)		float m33 = m1->self->_22;
HXDLIN(  63)		float tr = ((m11 + m22) + m33);
HXDLIN(  63)		Float s = ((Float)0.0);
HXDLIN(  63)		if ((tr > 0)) {
HXLINE(  63)			s = (((Float)0.5) / ::Math_obj::sqrt((tr + ((Float)1.0))));
HXDLIN(  63)			this->w = ( (float)((((Float)0.25) / s)) );
HXDLIN(  63)			this->x = ( (float)(((m32 - m23) * s)) );
HXDLIN(  63)			this->y = ( (float)(((m13 - m31) * s)) );
HXDLIN(  63)			this->z = ( (float)(((m21 - m12) * s)) );
            		}
            		else {
HXLINE(  63)			bool _hx_tmp;
HXDLIN(  63)			if ((m11 > m22)) {
HXLINE(  63)				_hx_tmp = (m11 > m33);
            			}
            			else {
HXLINE(  63)				_hx_tmp = false;
            			}
HXDLIN(  63)			if (_hx_tmp) {
HXLINE(  63)				s = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m11) - m22) - m33)));
HXDLIN(  63)				this->w = ( (float)((( (Float)((m32 - m23)) ) / s)) );
HXDLIN(  63)				this->x = ( (float)((((Float)0.25) * s)) );
HXDLIN(  63)				this->y = ( (float)((( (Float)((m12 + m21)) ) / s)) );
HXDLIN(  63)				this->z = ( (float)((( (Float)((m13 + m31)) ) / s)) );
            			}
            			else {
HXLINE(  63)				if ((m22 > m33)) {
HXLINE(  63)					s = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m22) - m11) - m33)));
HXDLIN(  63)					this->w = ( (float)((( (Float)((m13 - m31)) ) / s)) );
HXDLIN(  63)					this->x = ( (float)((( (Float)((m12 + m21)) ) / s)) );
HXDLIN(  63)					this->y = ( (float)((((Float)0.25) * s)) );
HXDLIN(  63)					this->z = ( (float)((( (Float)((m23 + m32)) ) / s)) );
            				}
            				else {
HXLINE(  63)					s = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m33) - m11) - m22)));
HXDLIN(  63)					this->w = ( (float)((( (Float)((m21 - m12)) ) / s)) );
HXDLIN(  63)					this->x = ( (float)((( (Float)((m13 + m31)) ) / s)) );
HXDLIN(  63)					this->y = ( (float)((( (Float)((m23 + m32)) ) / s)) );
HXDLIN(  63)					this->z = ( (float)((((Float)0.25) * s)) );
            				}
            			}
            		}
HXDLIN(  63)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Quat_obj,fromMat,return )

 ::iron::math::Quat Quat_obj::fromRotationMat( ::iron::math::Mat4 m){
            	HX_STACKFRAME(&_hx_pos_b22ee3d0836f1999_66_fromRotationMat)
HXLINE(  68)		float m11 = m->self->_00;
HXDLIN(  68)		float m12 = m->self->_10;
HXDLIN(  68)		float m13 = m->self->_20;
HXLINE(  69)		float m21 = m->self->_01;
HXDLIN(  69)		float m22 = m->self->_11;
HXDLIN(  69)		float m23 = m->self->_21;
HXLINE(  70)		float m31 = m->self->_02;
HXDLIN(  70)		float m32 = m->self->_12;
HXDLIN(  70)		float m33 = m->self->_22;
HXLINE(  71)		float tr = ((m11 + m22) + m33);
HXLINE(  72)		Float s = ((Float)0.0);
HXLINE(  74)		if ((tr > 0)) {
HXLINE(  75)			s = (((Float)0.5) / ::Math_obj::sqrt((tr + ((Float)1.0))));
HXLINE(  76)			this->w = ( (float)((((Float)0.25) / s)) );
HXLINE(  77)			this->x = ( (float)(((m32 - m23) * s)) );
HXLINE(  78)			this->y = ( (float)(((m13 - m31) * s)) );
HXLINE(  79)			this->z = ( (float)(((m21 - m12) * s)) );
            		}
            		else {
HXLINE(  81)			bool _hx_tmp;
HXDLIN(  81)			if ((m11 > m22)) {
HXLINE(  81)				_hx_tmp = (m11 > m33);
            			}
            			else {
HXLINE(  81)				_hx_tmp = false;
            			}
HXDLIN(  81)			if (_hx_tmp) {
HXLINE(  82)				s = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m11) - m22) - m33)));
HXLINE(  83)				this->w = ( (float)((( (Float)((m32 - m23)) ) / s)) );
HXLINE(  84)				this->x = ( (float)((((Float)0.25) * s)) );
HXLINE(  85)				this->y = ( (float)((( (Float)((m12 + m21)) ) / s)) );
HXLINE(  86)				this->z = ( (float)((( (Float)((m13 + m31)) ) / s)) );
            			}
            			else {
HXLINE(  88)				if ((m22 > m33)) {
HXLINE(  89)					s = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m22) - m11) - m33)));
HXLINE(  90)					this->w = ( (float)((( (Float)((m13 - m31)) ) / s)) );
HXLINE(  91)					this->x = ( (float)((( (Float)((m12 + m21)) ) / s)) );
HXLINE(  92)					this->y = ( (float)((((Float)0.25) * s)) );
HXLINE(  93)					this->z = ( (float)((( (Float)((m23 + m32)) ) / s)) );
            				}
            				else {
HXLINE(  96)					s = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m33) - m11) - m22)));
HXLINE(  97)					this->w = ( (float)((( (Float)((m21 - m12)) ) / s)) );
HXLINE(  98)					this->x = ( (float)((( (Float)((m13 + m31)) ) / s)) );
HXLINE(  99)					this->y = ( (float)((( (Float)((m23 + m32)) ) / s)) );
HXLINE( 100)					this->z = ( (float)((((Float)0.25) * s)) );
            				}
            			}
            		}
HXLINE( 102)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Quat_obj,fromRotationMat,return )

 ::iron::math::Quat Quat_obj::mult( ::iron::math::Quat q){
            	HX_STACKFRAME(&_hx_pos_b22ee3d0836f1999_106_mult)
HXDLIN( 106)		float q1x = this->x;
HXDLIN( 106)		float q1y = this->y;
HXDLIN( 106)		float q1z = this->z;
HXDLIN( 106)		float q1w = this->w;
HXDLIN( 106)		float q2x = q->x;
HXDLIN( 106)		float q2y = q->y;
HXDLIN( 106)		float q2z = q->z;
HXDLIN( 106)		float q2w = q->w;
HXDLIN( 106)		this->x = ((((q1x * q2w) + (q1w * q2x)) + (q1y * q2z)) - (q1z * q2y));
HXDLIN( 106)		this->y = ((((q1w * q2y) - (q1x * q2z)) + (q1y * q2w)) + (q1z * q2x));
HXDLIN( 106)		this->z = ((((q1w * q2z) + (q1x * q2y)) - (q1y * q2x)) + (q1z * q2w));
HXDLIN( 106)		this->w = ((((q1w * q2w) - (q1x * q2x)) - (q1y * q2y)) - (q1z * q2z));
HXDLIN( 106)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Quat_obj,mult,return )

 ::iron::math::Quat Quat_obj::multquats( ::iron::math::Quat q1, ::iron::math::Quat q2){
            	HX_STACKFRAME(&_hx_pos_b22ee3d0836f1999_109_multquats)
HXLINE( 110)		float q1x = q1->x;
HXDLIN( 110)		float q1y = q1->y;
HXDLIN( 110)		float q1z = q1->z;
HXDLIN( 110)		float q1w = q1->w;
HXLINE( 111)		float q2x = q2->x;
HXDLIN( 111)		float q2y = q2->y;
HXDLIN( 111)		float q2z = q2->z;
HXDLIN( 111)		float q2w = q2->w;
HXLINE( 112)		this->x = ((((q1x * q2w) + (q1w * q2x)) + (q1y * q2z)) - (q1z * q2y));
HXLINE( 113)		this->y = ((((q1w * q2y) - (q1x * q2z)) + (q1y * q2w)) + (q1z * q2x));
HXLINE( 114)		this->z = ((((q1w * q2z) + (q1x * q2y)) - (q1y * q2x)) + (q1z * q2w));
HXLINE( 115)		this->w = ((((q1w * q2w) - (q1x * q2x)) - (q1y * q2y)) - (q1z * q2z));
HXLINE( 116)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Quat_obj,multquats,return )

 ::iron::math::Quat Quat_obj::normalize(){
            	HX_STACKFRAME(&_hx_pos_b22ee3d0836f1999_119_normalize)
HXLINE( 120)		float v = (this->x * this->x);
HXDLIN( 120)		float v1 = (v + (this->y * this->y));
HXDLIN( 120)		float v2 = (v1 + (this->z * this->z));
HXDLIN( 120)		Float l = ::Math_obj::sqrt(( (Float)((v2 + (this->w * this->w))) ));
HXLINE( 121)		if ((l == ((Float)0.0))) {
HXLINE( 122)			this->x = ( (float)(0) );
HXLINE( 123)			this->y = ( (float)(0) );
HXLINE( 124)			this->z = ( (float)(0) );
HXLINE( 125)			this->w = ( (float)(0) );
            		}
            		else {
HXLINE( 128)			l = (((Float)1.0) / l);
HXLINE( 129)			 ::iron::math::Quat _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 129)			_hx_tmp->x = (_hx_tmp->x * l);
HXLINE( 130)			 ::iron::math::Quat _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 130)			_hx_tmp1->y = (_hx_tmp1->y * l);
HXLINE( 131)			 ::iron::math::Quat _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 131)			_hx_tmp2->z = (_hx_tmp2->z * l);
HXLINE( 132)			 ::iron::math::Quat _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 132)			_hx_tmp3->w = (_hx_tmp3->w * l);
            		}
HXLINE( 134)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Quat_obj,normalize,return )

 ::iron::math::Quat Quat_obj::setFrom( ::iron::math::Quat q){
            	HX_STACKFRAME(&_hx_pos_b22ee3d0836f1999_137_setFrom)
HXLINE( 138)		this->x = q->x;
HXLINE( 139)		this->y = q->y;
HXLINE( 140)		this->z = q->z;
HXLINE( 141)		this->w = q->w;
HXLINE( 142)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Quat_obj,setFrom,return )

 ::iron::math::Vec4 Quat_obj::getEuler(){
            	HX_GC_STACKFRAME(&_hx_pos_b22ee3d0836f1999_145_getEuler)
HXLINE( 147)		Float roll = ::Math_obj::NaN;
HXLINE( 148)		Float yaw = ((Float)0.0);
HXLINE( 149)		Float pitch = ((Float)0.0);
HXLINE( 151)		float test = (this->x * this->y);
HXDLIN( 151)		float test1 = (test + (this->z * this->w));
HXLINE( 152)		if ((test1 > ((Float)0.499))) {
HXLINE( 153)			roll = (2 * ::Math_obj::atan2(( (Float)(this->x) ),( (Float)(this->w) )));
HXLINE( 154)			yaw = ((Float)1.5707963267948966);
HXLINE( 155)			pitch = ( (Float)(0) );
            		}
HXLINE( 157)		if ((test1 < ((Float)-0.499))) {
HXLINE( 158)			roll = (-2 * ::Math_obj::atan2(( (Float)(this->x) ),( (Float)(this->w) )));
HXLINE( 159)			yaw = ((Float)-1.5707963267948966);
HXLINE( 160)			pitch = ( (Float)(0) );
            		}
HXLINE( 162)		if (::Math_obj::isNaN(roll)) {
HXLINE( 163)			float a = ((2 * this->z) * this->z);
HXLINE( 164)			float b = (this->y * this->y);
HXLINE( 165)			float y = ((2 * this->y) * this->w);
HXDLIN( 165)			roll = ::Math_obj::atan2(( (Float)((y - ((2 * this->x) * this->z))) ),((((Float)1.0) - (2 * b)) - a));
HXLINE( 166)			b = (this->x * this->x);
HXLINE( 167)			float y1 = ((2 * this->x) * this->w);
HXDLIN( 167)			pitch = ::Math_obj::atan2(( (Float)((y1 - ((2 * this->y) * this->z))) ),((((Float)1.0) - (2 * b)) - a));
HXLINE( 168)			yaw = ::Math_obj::asin(( (Float)((2 * test1)) ));
            		}
HXLINE( 170)		return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,pitch,roll,yaw,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Quat_obj,getEuler,return )

 ::iron::math::Quat Quat_obj::fromEuler(float x,float y,float z){
            	HX_STACKFRAME(&_hx_pos_b22ee3d0836f1999_173_fromEuler)
HXLINE( 174)		Float f = (( (Float)(x) ) / ( (Float)(2) ));
HXLINE( 175)		Float c1 = ::Math_obj::cos(f);
HXLINE( 176)		Float s1 = ::Math_obj::sin(f);
HXLINE( 177)		f = (( (Float)(y) ) / ( (Float)(2) ));
HXLINE( 178)		Float c2 = ::Math_obj::cos(f);
HXLINE( 179)		Float s2 = ::Math_obj::sin(f);
HXLINE( 180)		f = (( (Float)(z) ) / ( (Float)(2) ));
HXLINE( 181)		Float c3 = ::Math_obj::cos(f);
HXLINE( 182)		Float s3 = ::Math_obj::sin(f);
HXLINE( 184)		this->x = ( (float)((((s1 * c2) * c3) + ((c1 * s2) * s3))) );
HXLINE( 185)		this->y = ( (float)((((c1 * s2) * c3) + ((s1 * c2) * s3))) );
HXLINE( 186)		this->z = ( (float)((((c1 * c2) * s3) - ((s1 * s2) * c3))) );
HXLINE( 187)		this->w = ( (float)((((c1 * c2) * c3) - ((s1 * s2) * s3))) );
HXLINE( 188)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Quat_obj,fromEuler,return )

 ::iron::math::Quat Quat_obj::lerp( ::iron::math::Quat from, ::iron::math::Quat to,float s){
            	HX_STACKFRAME(&_hx_pos_b22ee3d0836f1999_191_lerp)
HXLINE( 192)		float fromx = from->x;
HXLINE( 193)		float fromy = from->y;
HXLINE( 194)		float fromz = from->z;
HXLINE( 195)		float fromw = from->w;
HXLINE( 196)		float dot = (from->x * to->x);
HXDLIN( 196)		float dot1 = (dot + (from->y * to->y));
HXDLIN( 196)		float dot2 = (dot1 + (from->z * to->z));
HXDLIN( 196)		float dot3 = (dot2 + (from->w * to->w));
HXLINE( 197)		if ((dot3 < ((Float)0.0))) {
HXLINE( 198)			fromx = -(fromx);
HXLINE( 199)			fromy = -(fromy);
HXLINE( 200)			fromz = -(fromz);
HXLINE( 201)			fromw = -(fromw);
            		}
HXLINE( 203)		this->x = (fromx + ((to->x - fromx) * s));
HXLINE( 204)		this->y = (fromy + ((to->y - fromy) * s));
HXLINE( 205)		this->z = (fromz + ((to->z - fromz) * s));
HXLINE( 206)		this->w = (fromw + ((to->w - fromw) * s));
HXLINE( 207)		float v = (this->x * this->x);
HXDLIN( 207)		float v1 = (v + (this->y * this->y));
HXDLIN( 207)		float v2 = (v1 + (this->z * this->z));
HXDLIN( 207)		Float l = ::Math_obj::sqrt(( (Float)((v2 + (this->w * this->w))) ));
HXDLIN( 207)		if ((l == ((Float)0.0))) {
HXLINE( 207)			this->x = ( (float)(0) );
HXDLIN( 207)			this->y = ( (float)(0) );
HXDLIN( 207)			this->z = ( (float)(0) );
HXDLIN( 207)			this->w = ( (float)(0) );
            		}
            		else {
HXLINE( 207)			l = (((Float)1.0) / l);
HXDLIN( 207)			 ::iron::math::Quat _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 207)			_hx_tmp->x = (_hx_tmp->x * l);
HXDLIN( 207)			 ::iron::math::Quat _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 207)			_hx_tmp1->y = (_hx_tmp1->y * l);
HXDLIN( 207)			 ::iron::math::Quat _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 207)			_hx_tmp2->z = (_hx_tmp2->z * l);
HXDLIN( 207)			 ::iron::math::Quat _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 207)			_hx_tmp3->w = (_hx_tmp3->w * l);
            		}
HXDLIN( 207)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Quat_obj,lerp,return )

float Quat_obj::dot( ::iron::math::Quat q){
            	HX_STACKFRAME(&_hx_pos_b22ee3d0836f1999_236_dot)
HXDLIN( 236)		float _hx_tmp = (this->x * q->x);
HXDLIN( 236)		float _hx_tmp1 = (_hx_tmp + (this->y * q->y));
HXDLIN( 236)		float _hx_tmp2 = (_hx_tmp1 + (this->z * q->z));
HXDLIN( 236)		return (_hx_tmp2 + (this->w * q->w));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Quat_obj,dot,return )

 ::iron::math::Quat Quat_obj::fromTo( ::iron::math::Vec4 v1, ::iron::math::Vec4 v2){
            	HX_STACKFRAME(&_hx_pos_b22ee3d0836f1999_239_fromTo)
HXLINE( 242)		 ::iron::math::Vec4 a = ::iron::math::Quat_obj::helpVec0;
HXLINE( 243)		float dot = (v1->x * v2->x);
HXDLIN( 243)		float dot1 = (dot + (v1->y * v2->y));
HXDLIN( 243)		float dot2 = (dot1 + (v1->z * v2->z));
HXLINE( 244)		if ((dot2 < ((Float)-0.999999))) {
HXLINE( 245)			{
HXLINE( 245)				 ::iron::math::Vec4 a1 = ::iron::math::Quat_obj::xAxis;
HXDLIN( 245)				float ax = a1->x;
HXDLIN( 245)				float ay = a1->y;
HXDLIN( 245)				float az = a1->z;
HXDLIN( 245)				float bx = v1->x;
HXDLIN( 245)				float by = v1->y;
HXDLIN( 245)				float bz = v1->z;
HXDLIN( 245)				a->x = ((ay * bz) - (az * by));
HXDLIN( 245)				a->y = ((az * bx) - (ax * bz));
HXDLIN( 245)				a->z = ((ax * by) - (ay * bx));
            			}
HXLINE( 246)			float v = (a->x * a->x);
HXDLIN( 246)			float v3 = (v + (a->y * a->y));
HXDLIN( 246)			if ((( (float)(::Math_obj::sqrt(( (Float)((v3 + (a->z * a->z))) ))) ) < ((Float)0.000001))) {
HXLINE( 246)				 ::iron::math::Vec4 a2 = ::iron::math::Quat_obj::yAxis;
HXDLIN( 246)				float ax1 = a2->x;
HXDLIN( 246)				float ay1 = a2->y;
HXDLIN( 246)				float az1 = a2->z;
HXDLIN( 246)				float bx1 = v1->x;
HXDLIN( 246)				float by1 = v1->y;
HXDLIN( 246)				float bz1 = v1->z;
HXDLIN( 246)				a->x = ((ay1 * bz1) - (az1 * by1));
HXDLIN( 246)				a->y = ((az1 * bx1) - (ax1 * bz1));
HXDLIN( 246)				a->z = ((ax1 * by1) - (ay1 * bx1));
            			}
HXLINE( 247)			{
HXLINE( 247)				float v4 = (a->x * a->x);
HXDLIN( 247)				float v5 = (v4 + (a->y * a->y));
HXDLIN( 247)				float n = ( (float)(::Math_obj::sqrt(( (Float)((v5 + (a->z * a->z))) ))) );
HXDLIN( 247)				if ((n > ((Float)0.0))) {
HXLINE( 247)					Float invN = (((Float)1.0) / ( (Float)(n) ));
HXDLIN( 247)					 ::iron::math::Vec4 a3 = a;
HXDLIN( 247)					a3->x = (a3->x * invN);
HXDLIN( 247)					 ::iron::math::Vec4 a4 = a;
HXDLIN( 247)					a4->y = (a4->y * invN);
HXDLIN( 247)					 ::iron::math::Vec4 a5 = a;
HXDLIN( 247)					a5->z = (a5->z * invN);
            				}
            			}
HXLINE( 248)			{
HXLINE( 248)				float s = ( (float)(::Math_obj::sin(((Float)1.5707963267948966))) );
HXDLIN( 248)				this->x = (a->x * s);
HXDLIN( 248)				this->y = (a->y * s);
HXDLIN( 248)				this->z = (a->z * s);
HXDLIN( 248)				this->w = ( (float)(::Math_obj::cos(((Float)1.5707963267948966))) );
HXDLIN( 248)				{
HXLINE( 248)					float v6 = (this->x * this->x);
HXDLIN( 248)					float v7 = (v6 + (this->y * this->y));
HXDLIN( 248)					float v8 = (v7 + (this->z * this->z));
HXDLIN( 248)					Float l = ::Math_obj::sqrt(( (Float)((v8 + (this->w * this->w))) ));
HXDLIN( 248)					if ((l == ((Float)0.0))) {
HXLINE( 248)						this->x = ( (float)(0) );
HXDLIN( 248)						this->y = ( (float)(0) );
HXDLIN( 248)						this->z = ( (float)(0) );
HXDLIN( 248)						this->w = ( (float)(0) );
            					}
            					else {
HXLINE( 248)						l = (((Float)1.0) / l);
HXDLIN( 248)						 ::iron::math::Quat _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 248)						_hx_tmp->x = (_hx_tmp->x * l);
HXDLIN( 248)						 ::iron::math::Quat _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 248)						_hx_tmp1->y = (_hx_tmp1->y * l);
HXDLIN( 248)						 ::iron::math::Quat _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 248)						_hx_tmp2->z = (_hx_tmp2->z * l);
HXDLIN( 248)						 ::iron::math::Quat _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 248)						_hx_tmp3->w = (_hx_tmp3->w * l);
            					}
            				}
            			}
            		}
            		else {
HXLINE( 250)			if ((dot2 > ((Float)0.999999))) {
HXLINE( 251)				this->x = ( (float)(0) );
HXDLIN( 251)				this->y = ( (float)(0) );
HXDLIN( 251)				this->z = ( (float)(0) );
HXDLIN( 251)				this->w = ( (float)(1) );
            			}
            			else {
HXLINE( 254)				{
HXLINE( 254)					float ax2 = v1->x;
HXDLIN( 254)					float ay2 = v1->y;
HXDLIN( 254)					float az2 = v1->z;
HXDLIN( 254)					float bx2 = v2->x;
HXDLIN( 254)					float by2 = v2->y;
HXDLIN( 254)					float bz2 = v2->z;
HXDLIN( 254)					a->x = ((ay2 * bz2) - (az2 * by2));
HXDLIN( 254)					a->y = ((az2 * bx2) - (ax2 * bz2));
HXDLIN( 254)					a->z = ((ax2 * by2) - (ay2 * bx2));
            				}
HXLINE( 255)				{
HXLINE( 255)					this->x = a->x;
HXDLIN( 255)					this->y = a->y;
HXDLIN( 255)					this->z = a->z;
HXDLIN( 255)					this->w = (1 + dot2);
            				}
HXLINE( 256)				{
HXLINE( 256)					float v9 = (this->x * this->x);
HXDLIN( 256)					float v10 = (v9 + (this->y * this->y));
HXDLIN( 256)					float v11 = (v10 + (this->z * this->z));
HXDLIN( 256)					Float l1 = ::Math_obj::sqrt(( (Float)((v11 + (this->w * this->w))) ));
HXDLIN( 256)					if ((l1 == ((Float)0.0))) {
HXLINE( 256)						this->x = ( (float)(0) );
HXDLIN( 256)						this->y = ( (float)(0) );
HXDLIN( 256)						this->z = ( (float)(0) );
HXDLIN( 256)						this->w = ( (float)(0) );
            					}
            					else {
HXLINE( 256)						l1 = (((Float)1.0) / l1);
HXDLIN( 256)						 ::iron::math::Quat _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 256)						_hx_tmp4->x = (_hx_tmp4->x * l1);
HXDLIN( 256)						 ::iron::math::Quat _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 256)						_hx_tmp5->y = (_hx_tmp5->y * l1);
HXDLIN( 256)						 ::iron::math::Quat _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 256)						_hx_tmp6->z = (_hx_tmp6->z * l1);
HXDLIN( 256)						 ::iron::math::Quat _hx_tmp7 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 256)						_hx_tmp7->w = (_hx_tmp7->w * l1);
            					}
            				}
            			}
            		}
HXLINE( 258)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Quat_obj,fromTo,return )

::String Quat_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_b22ee3d0836f1999_262_toString)
HXDLIN( 262)		::String _hx_tmp = (::Std_obj::string(this->x) + HX_(", ",74,26,00,00));
HXDLIN( 262)		::String _hx_tmp1 = ((_hx_tmp + ::Std_obj::string(this->y)) + HX_(", ",74,26,00,00));
HXDLIN( 262)		::String _hx_tmp2 = ((_hx_tmp1 + ::Std_obj::string(this->z)) + HX_(", ",74,26,00,00));
HXDLIN( 262)		return (_hx_tmp2 + ::Std_obj::string(this->w));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Quat_obj,toString,return )

 ::iron::math::Vec4 Quat_obj::helpVec0;

 ::iron::math::Vec4 Quat_obj::helpVec1;

 ::iron::math::Vec4 Quat_obj::helpVec2;

 ::iron::math::Mat4 Quat_obj::helpMat;

 ::iron::math::Vec4 Quat_obj::xAxis;

 ::iron::math::Vec4 Quat_obj::yAxis;


hx::ObjectPtr< Quat_obj > Quat_obj::__new(hx::Null< float >  __o_x,hx::Null< float >  __o_y,hx::Null< float >  __o_z,hx::Null< float >  __o_w) {
	hx::ObjectPtr< Quat_obj > __this = new Quat_obj();
	__this->__construct(__o_x,__o_y,__o_z,__o_w);
	return __this;
}

hx::ObjectPtr< Quat_obj > Quat_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< float >  __o_x,hx::Null< float >  __o_y,hx::Null< float >  __o_z,hx::Null< float >  __o_w) {
	Quat_obj *__this = (Quat_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Quat_obj), false, "iron.math.Quat"));
	*(void **)__this = Quat_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_z,__o_w);
	return __this;
}

Quat_obj::Quat_obj()
{
}

hx::Val Quat_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		if (HX_FIELD_EQ(inName,"z") ) { return hx::Val( z ); }
		if (HX_FIELD_EQ(inName,"w") ) { return hx::Val( w ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		if (HX_FIELD_EQ(inName,"dot") ) { return hx::Val( dot_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mult") ) { return hx::Val( mult_dyn() ); }
		if (HX_FIELD_EQ(inName,"lerp") ) { return hx::Val( lerp_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"fromTo") ) { return hx::Val( fromTo_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fromMat") ) { return hx::Val( fromMat_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFrom") ) { return hx::Val( setFrom_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getEuler") ) { return hx::Val( getEuler_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multquats") ) { return hx::Val( multquats_dyn() ); }
		if (HX_FIELD_EQ(inName,"normalize") ) { return hx::Val( normalize_dyn() ); }
		if (HX_FIELD_EQ(inName,"fromEuler") ) { return hx::Val( fromEuler_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"toAxisAngle") ) { return hx::Val( toAxisAngle_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fromAxisAngle") ) { return hx::Val( fromAxisAngle_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"fromRotationMat") ) { return hx::Val( fromRotationMat_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Quat_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"xAxis") ) { outValue = ( xAxis ); return true; }
		if (HX_FIELD_EQ(inName,"yAxis") ) { outValue = ( yAxis ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"helpMat") ) { outValue = ( helpMat ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"helpVec0") ) { outValue = ( helpVec0 ); return true; }
		if (HX_FIELD_EQ(inName,"helpVec1") ) { outValue = ( helpVec1 ); return true; }
		if (HX_FIELD_EQ(inName,"helpVec2") ) { outValue = ( helpVec2 ); return true; }
	}
	return false;
}

hx::Val Quat_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"z") ) { z=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"w") ) { w=inValue.Cast< float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Quat_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"xAxis") ) { xAxis=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
		if (HX_FIELD_EQ(inName,"yAxis") ) { yAxis=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"helpMat") ) { helpMat=ioValue.Cast<  ::iron::math::Mat4 >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"helpVec0") ) { helpVec0=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
		if (HX_FIELD_EQ(inName,"helpVec1") ) { helpVec1=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
		if (HX_FIELD_EQ(inName,"helpVec2") ) { helpVec2=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
	}
	return false;
}

void Quat_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("z",7a,00,00,00));
	outFields->push(HX_("w",77,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Quat_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Quat_obj,x),HX_("x",78,00,00,00)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Quat_obj,y),HX_("y",79,00,00,00)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Quat_obj,z),HX_("z",7a,00,00,00)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Quat_obj,w),HX_("w",77,00,00,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Quat_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &Quat_obj::helpVec0,HX_("helpVec0",bd,7a,07,89)},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &Quat_obj::helpVec1,HX_("helpVec1",be,7a,07,89)},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &Quat_obj::helpVec2,HX_("helpVec2",bf,7a,07,89)},
	{hx::fsObject /*::iron::math::Mat4*/ ,(void *) &Quat_obj::helpMat,HX_("helpMat",5f,fe,4c,c0)},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &Quat_obj::xAxis,HX_("xAxis",39,e5,67,43)},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &Quat_obj::yAxis,HX_("yAxis",ba,79,ce,d6)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Quat_obj_sMemberFields[] = {
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("z",7a,00,00,00),
	HX_("w",77,00,00,00),
	HX_("set",a2,9b,57,00),
	HX_("fromAxisAngle",a8,6c,6f,f0),
	HX_("toAxisAngle",77,a2,6b,e3),
	HX_("fromMat",56,db,fd,57),
	HX_("fromRotationMat",b8,56,0f,39),
	HX_("mult",f0,67,65,48),
	HX_("multquats",cc,55,33,3f),
	HX_("normalize",8d,37,a1,ab),
	HX_("setFrom",2c,e6,46,09),
	HX_("getEuler",f3,e8,f7,d4),
	HX_("fromEuler",9f,c3,a9,29),
	HX_("lerp",77,12,b0,47),
	HX_("dot",89,42,4c,00),
	HX_("fromTo",85,9d,c6,b5),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

static void Quat_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Quat_obj::helpVec0,"helpVec0");
	HX_MARK_MEMBER_NAME(Quat_obj::helpVec1,"helpVec1");
	HX_MARK_MEMBER_NAME(Quat_obj::helpVec2,"helpVec2");
	HX_MARK_MEMBER_NAME(Quat_obj::helpMat,"helpMat");
	HX_MARK_MEMBER_NAME(Quat_obj::xAxis,"xAxis");
	HX_MARK_MEMBER_NAME(Quat_obj::yAxis,"yAxis");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Quat_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Quat_obj::helpVec0,"helpVec0");
	HX_VISIT_MEMBER_NAME(Quat_obj::helpVec1,"helpVec1");
	HX_VISIT_MEMBER_NAME(Quat_obj::helpVec2,"helpVec2");
	HX_VISIT_MEMBER_NAME(Quat_obj::helpMat,"helpMat");
	HX_VISIT_MEMBER_NAME(Quat_obj::xAxis,"xAxis");
	HX_VISIT_MEMBER_NAME(Quat_obj::yAxis,"yAxis");
};

#endif

hx::Class Quat_obj::__mClass;

static ::String Quat_obj_sStaticFields[] = {
	HX_("helpVec0",bd,7a,07,89),
	HX_("helpVec1",be,7a,07,89),
	HX_("helpVec2",bf,7a,07,89),
	HX_("helpMat",5f,fe,4c,c0),
	HX_("xAxis",39,e5,67,43),
	HX_("yAxis",ba,79,ce,d6),
	::String(null())
};

void Quat_obj::__register()
{
	Quat_obj _hx_dummy;
	Quat_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.math.Quat",b7,9a,d3,f3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Quat_obj::__GetStatic;
	__mClass->mSetStaticField = &Quat_obj::__SetStatic;
	__mClass->mMarkFunc = Quat_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Quat_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Quat_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Quat_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Quat_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Quat_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Quat_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Quat_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_b22ee3d0836f1999_12_boot)
HXDLIN(  12)		helpVec0 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_b22ee3d0836f1999_13_boot)
HXDLIN(  13)		helpVec1 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_b22ee3d0836f1999_14_boot)
HXDLIN(  14)		helpVec2 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_b22ee3d0836f1999_15_boot)
HXDLIN(  15)		helpMat =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_b22ee3d0836f1999_16_boot)
HXDLIN(  16)		xAxis =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,((Float)1.0),((Float)0.0),((Float)0.0),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_b22ee3d0836f1999_17_boot)
HXDLIN(  17)		yAxis =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,((Float)0.0),((Float)1.0),((Float)0.0),null());
            	}
}

} // end namespace iron
} // end namespace math
