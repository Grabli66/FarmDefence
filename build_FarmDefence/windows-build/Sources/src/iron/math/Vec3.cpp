// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <hxinc/iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Vec3
#include <hxinc/iron/math/Vec3.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_35016255809392ac_10_new,"iron.math.Vec3","new",0xf00835b1,"iron.math.Vec3.new","iron/math/Vec3.hx",10,0x1b00ba7f)
HX_LOCAL_STACK_FRAME(_hx_pos_35016255809392ac_16_cross,"iron.math.Vec3","cross",0xddef7b11,"iron.math.Vec3.cross","iron/math/Vec3.hx",16,0x1b00ba7f)
HX_LOCAL_STACK_FRAME(_hx_pos_35016255809392ac_25_crossvecs,"iron.math.Vec3","crossvecs",0x62e4ff30,"iron.math.Vec3.crossvecs","iron/math/Vec3.hx",25,0x1b00ba7f)
HX_LOCAL_STACK_FRAME(_hx_pos_35016255809392ac_34_set,"iron.math.Vec3","set",0xf00c00f3,"iron.math.Vec3.set","iron/math/Vec3.hx",34,0x1b00ba7f)
HX_LOCAL_STACK_FRAME(_hx_pos_35016255809392ac_41_add,"iron.math.Vec3","add",0xeffe5772,"iron.math.Vec3.add","iron/math/Vec3.hx",41,0x1b00ba7f)
HX_LOCAL_STACK_FRAME(_hx_pos_35016255809392ac_48_addf,"iron.math.Vec3","addf",0x0e8e2cb4,"iron.math.Vec3.addf","iron/math/Vec3.hx",48,0x1b00ba7f)
HX_LOCAL_STACK_FRAME(_hx_pos_35016255809392ac_55_addvecs,"iron.math.Vec3","addvecs",0x95702011,"iron.math.Vec3.addvecs","iron/math/Vec3.hx",55,0x1b00ba7f)
HX_LOCAL_STACK_FRAME(_hx_pos_35016255809392ac_62_subvecs,"iron.math.Vec3","subvecs",0x273672f0,"iron.math.Vec3.subvecs","iron/math/Vec3.hx",62,0x1b00ba7f)
HX_LOCAL_STACK_FRAME(_hx_pos_35016255809392ac_69_normalize,"iron.math.Vec3","normalize",0x7a79ef9e,"iron.math.Vec3.normalize","iron/math/Vec3.hx",69,0x1b00ba7f)
HX_LOCAL_STACK_FRAME(_hx_pos_35016255809392ac_78_mult,"iron.math.Vec3","mult",0x1689a97f,"iron.math.Vec3.mult","iron/math/Vec3.hx",78,0x1b00ba7f)
HX_LOCAL_STACK_FRAME(_hx_pos_35016255809392ac_86_dot,"iron.math.Vec3","dot",0xf000a7da,"iron.math.Vec3.dot","iron/math/Vec3.hx",86,0x1b00ba7f)
HX_LOCAL_STACK_FRAME(_hx_pos_35016255809392ac_89_setFrom,"iron.math.Vec3","setFrom",0xff06c7fd,"iron.math.Vec3.setFrom","iron/math/Vec3.hx",89,0x1b00ba7f)
HX_LOCAL_STACK_FRAME(_hx_pos_35016255809392ac_97_clone,"iron.math.Vec3","clone",0xd9f82eee,"iron.math.Vec3.clone","iron/math/Vec3.hx",97,0x1b00ba7f)
HX_LOCAL_STACK_FRAME(_hx_pos_35016255809392ac_100_lerp,"iron.math.Vec3","lerp",0x15d45406,"iron.math.Vec3.lerp","iron/math/Vec3.hx",100,0x1b00ba7f)
HX_LOCAL_STACK_FRAME(_hx_pos_35016255809392ac_107_applyproj,"iron.math.Vec3","applyproj",0x182d541c,"iron.math.Vec3.applyproj","iron/math/Vec3.hx",107,0x1b00ba7f)
HX_LOCAL_STACK_FRAME(_hx_pos_35016255809392ac_116_applymat,"iron.math.Vec3","applymat",0x3733d301,"iron.math.Vec3.applymat","iron/math/Vec3.hx",116,0x1b00ba7f)
HX_LOCAL_STACK_FRAME(_hx_pos_35016255809392ac_125_equals,"iron.math.Vec3","equals",0x90d5f18e,"iron.math.Vec3.equals","iron/math/Vec3.hx",125,0x1b00ba7f)
HX_LOCAL_STACK_FRAME(_hx_pos_35016255809392ac_129_length,"iron.math.Vec3","length",0x6fea9835,"iron.math.Vec3.length","iron/math/Vec3.hx",129,0x1b00ba7f)
HX_LOCAL_STACK_FRAME(_hx_pos_35016255809392ac_132_sub,"iron.math.Vec3","sub",0xf00c0ed1,"iron.math.Vec3.sub","iron/math/Vec3.hx",132,0x1b00ba7f)
HX_LOCAL_STACK_FRAME(_hx_pos_35016255809392ac_149_distanceTo,"iron.math.Vec3","distanceTo",0xbab52adf,"iron.math.Vec3.distanceTo","iron/math/Vec3.hx",149,0x1b00ba7f)
HX_LOCAL_STACK_FRAME(_hx_pos_35016255809392ac_152_clamp,"iron.math.Vec3","clamp",0xd9ed8e8c,"iron.math.Vec3.clamp","iron/math/Vec3.hx",152,0x1b00ba7f)
HX_LOCAL_STACK_FRAME(_hx_pos_35016255809392ac_164_toString,"iron.math.Vec3","toString",0x4a9485bb,"iron.math.Vec3.toString","iron/math/Vec3.hx",164,0x1b00ba7f)
HX_LOCAL_STACK_FRAME(_hx_pos_35016255809392ac_138_distance,"iron.math.Vec3","distance",0x7e1f4844,"iron.math.Vec3.distance","iron/math/Vec3.hx",138,0x1b00ba7f)
HX_LOCAL_STACK_FRAME(_hx_pos_35016255809392ac_141_distancef,"iron.math.Vec3","distancef",0xdd3ff3a2,"iron.math.Vec3.distancef","iron/math/Vec3.hx",141,0x1b00ba7f)
HX_LOCAL_STACK_FRAME(_hx_pos_35016255809392ac_159_xAxis,"iron.math.Vec3","xAxis",0xd4fd00ca,"iron.math.Vec3.xAxis","iron/math/Vec3.hx",159,0x1b00ba7f)
HX_LOCAL_STACK_FRAME(_hx_pos_35016255809392ac_160_yAxis,"iron.math.Vec3","yAxis",0x6863954b,"iron.math.Vec3.yAxis","iron/math/Vec3.hx",160,0x1b00ba7f)
HX_LOCAL_STACK_FRAME(_hx_pos_35016255809392ac_161_zAxis,"iron.math.Vec3","zAxis",0xfbca29cc,"iron.math.Vec3.zAxis","iron/math/Vec3.hx",161,0x1b00ba7f)
namespace iron{
namespace math{

void Vec3_obj::__construct(hx::Null< float >  __o_x,hx::Null< float >  __o_y,hx::Null< float >  __o_z){
float x = __o_x.Default(((Float)0.0));
float y = __o_y.Default(((Float)0.0));
float z = __o_z.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_35016255809392ac_10_new)
HXLINE(  11)		this->x = x;
HXLINE(  12)		this->y = y;
HXLINE(  13)		this->z = z;
            	}

Dynamic Vec3_obj::__CreateEmpty() { return new Vec3_obj; }

void *Vec3_obj::_hx_vtable = 0;

Dynamic Vec3_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Vec3_obj > _hx_result = new Vec3_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Vec3_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1783ee73;
}

 ::iron::math::Vec3 Vec3_obj::cross( ::iron::math::Vec3 v){
            	HX_STACKFRAME(&_hx_pos_35016255809392ac_16_cross)
HXLINE(  17)		float ax = this->x;
HXDLIN(  17)		float ay = this->y;
HXDLIN(  17)		float az = this->z;
HXLINE(  18)		float vx = v->x;
HXDLIN(  18)		float vy = v->y;
HXDLIN(  18)		float vz = v->z;
HXLINE(  19)		this->x = ((ay * vz) - (az * vy));
HXLINE(  20)		this->y = ((az * vx) - (ax * vz));
HXLINE(  21)		this->z = ((ax * vy) - (ay * vx));
HXLINE(  22)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec3_obj,cross,return )

 ::iron::math::Vec3 Vec3_obj::crossvecs( ::iron::math::Vec3 a, ::iron::math::Vec3 b){
            	HX_STACKFRAME(&_hx_pos_35016255809392ac_25_crossvecs)
HXLINE(  26)		float ax = a->x;
HXDLIN(  26)		float ay = a->y;
HXDLIN(  26)		float az = a->z;
HXLINE(  27)		float bx = b->x;
HXDLIN(  27)		float by = b->y;
HXDLIN(  27)		float bz = b->z;
HXLINE(  28)		this->x = ((ay * bz) - (az * by));
HXLINE(  29)		this->y = ((az * bx) - (ax * bz));
HXLINE(  30)		this->z = ((ax * by) - (ay * bx));
HXLINE(  31)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vec3_obj,crossvecs,return )

 ::iron::math::Vec3 Vec3_obj::set(float x,float y,float z){
            	HX_STACKFRAME(&_hx_pos_35016255809392ac_34_set)
HXLINE(  35)		this->x = x;
HXLINE(  36)		this->y = y;
HXLINE(  37)		this->z = z;
HXLINE(  38)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Vec3_obj,set,return )

 ::iron::math::Vec3 Vec3_obj::add( ::iron::math::Vec3 v){
            	HX_STACKFRAME(&_hx_pos_35016255809392ac_41_add)
HXLINE(  42)		 ::iron::math::Vec3 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  42)		_hx_tmp->x = (_hx_tmp->x + v->x);
HXLINE(  43)		 ::iron::math::Vec3 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  43)		_hx_tmp1->y = (_hx_tmp1->y + v->y);
HXLINE(  44)		 ::iron::math::Vec3 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  44)		_hx_tmp2->z = (_hx_tmp2->z + v->z);
HXLINE(  45)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec3_obj,add,return )

 ::iron::math::Vec3 Vec3_obj::addf(float x,float y,float z){
            	HX_STACKFRAME(&_hx_pos_35016255809392ac_48_addf)
HXLINE(  49)		 ::iron::math::Vec3 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  49)		_hx_tmp->x = (_hx_tmp->x + x);
HXLINE(  50)		 ::iron::math::Vec3 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  50)		_hx_tmp1->y = (_hx_tmp1->y + y);
HXLINE(  51)		 ::iron::math::Vec3 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  51)		_hx_tmp2->z = (_hx_tmp2->z + z);
HXLINE(  52)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Vec3_obj,addf,return )

 ::iron::math::Vec3 Vec3_obj::addvecs( ::iron::math::Vec3 a, ::iron::math::Vec3 b){
            	HX_STACKFRAME(&_hx_pos_35016255809392ac_55_addvecs)
HXLINE(  56)		this->x = (a->x + b->x);
HXLINE(  57)		this->y = (a->y + b->y);
HXLINE(  58)		this->z = (a->z + b->z);
HXLINE(  59)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vec3_obj,addvecs,return )

 ::iron::math::Vec3 Vec3_obj::subvecs( ::iron::math::Vec3 a, ::iron::math::Vec3 b){
            	HX_STACKFRAME(&_hx_pos_35016255809392ac_62_subvecs)
HXLINE(  63)		this->x = (a->x - b->x);
HXLINE(  64)		this->y = (a->y - b->y);
HXLINE(  65)		this->z = (a->z - b->z);
HXLINE(  66)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vec3_obj,subvecs,return )

 ::iron::math::Vec3 Vec3_obj::normalize(){
            	HX_STACKFRAME(&_hx_pos_35016255809392ac_69_normalize)
HXLINE(  70)		float v = (this->x * this->x);
HXDLIN(  70)		float v1 = (v + (this->y * this->y));
HXDLIN(  70)		float n = ( (float)(::Math_obj::sqrt(( (Float)((v1 + (this->z * this->z))) ))) );
HXLINE(  71)		if ((n > ((Float)0.0))) {
HXLINE(  72)			Float invN = (((Float)1.0) / ( (Float)(n) ));
HXLINE(  73)			 ::iron::math::Vec3 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  73)			_hx_tmp->x = (_hx_tmp->x * invN);
HXDLIN(  73)			 ::iron::math::Vec3 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  73)			_hx_tmp1->y = (_hx_tmp1->y * invN);
HXDLIN(  73)			 ::iron::math::Vec3 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  73)			_hx_tmp2->z = (_hx_tmp2->z * invN);
            		}
HXLINE(  75)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec3_obj,normalize,return )

 ::iron::math::Vec3 Vec3_obj::mult(float f){
            	HX_STACKFRAME(&_hx_pos_35016255809392ac_78_mult)
HXLINE(  79)		 ::iron::math::Vec3 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  79)		_hx_tmp->x = (_hx_tmp->x * f);
HXLINE(  80)		 ::iron::math::Vec3 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  80)		_hx_tmp1->y = (_hx_tmp1->y * f);
HXLINE(  81)		 ::iron::math::Vec3 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  81)		_hx_tmp2->z = (_hx_tmp2->z * f);
HXLINE(  82)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec3_obj,mult,return )

float Vec3_obj::dot( ::iron::math::Vec3 v){
            	HX_STACKFRAME(&_hx_pos_35016255809392ac_86_dot)
HXDLIN(  86)		float _hx_tmp = (this->x * v->x);
HXDLIN(  86)		float _hx_tmp1 = (_hx_tmp + (this->y * v->y));
HXDLIN(  86)		return (_hx_tmp1 + (this->z * v->z));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec3_obj,dot,return )

 ::iron::math::Vec3 Vec3_obj::setFrom( ::iron::math::Vec3 v){
            	HX_STACKFRAME(&_hx_pos_35016255809392ac_89_setFrom)
HXLINE(  90)		this->x = v->x;
HXLINE(  91)		this->y = v->y;
HXLINE(  92)		this->z = v->z;
HXLINE(  93)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec3_obj,setFrom,return )

 ::iron::math::Vec3 Vec3_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_35016255809392ac_97_clone)
HXDLIN(  97)		return  ::iron::math::Vec3_obj::__alloc( HX_CTX ,this->x,this->y,this->z);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec3_obj,clone,return )

 ::iron::math::Vec3 Vec3_obj::lerp( ::iron::math::Vec3 from, ::iron::math::Vec3 to,float s){
            	HX_STACKFRAME(&_hx_pos_35016255809392ac_100_lerp)
HXLINE( 101)		float from1 = from->x;
HXDLIN( 101)		this->x = (from1 + ((to->x - from->x) * s));
HXLINE( 102)		float from2 = from->y;
HXDLIN( 102)		this->y = (from2 + ((to->y - from->y) * s));
HXLINE( 103)		float from3 = from->z;
HXDLIN( 103)		this->z = (from3 + ((to->z - from->z) * s));
HXLINE( 104)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Vec3_obj,lerp,return )

 ::iron::math::Vec3 Vec3_obj::applyproj( ::iron::math::Mat4 m){
            	HX_STACKFRAME(&_hx_pos_35016255809392ac_107_applyproj)
HXLINE( 108)		float x = this->x;
HXDLIN( 108)		float y = this->y;
HXDLIN( 108)		float z = this->z;
HXLINE( 109)		float d = (m->self->_03 * x);
HXDLIN( 109)		float d1 = (d + (m->self->_13 * y));
HXDLIN( 109)		Float d2 = (((Float)1.0) / ( (Float)(((d1 + (m->self->_23 * z)) + m->self->_33)) ));
HXLINE( 110)		float _hx_tmp = (m->self->_00 * x);
HXDLIN( 110)		float _hx_tmp1 = (_hx_tmp + (m->self->_10 * y));
HXDLIN( 110)		this->x = ( (float)((((_hx_tmp1 + (m->self->_20 * z)) + m->self->_30) * d2)) );
HXLINE( 111)		float _hx_tmp2 = (m->self->_01 * x);
HXDLIN( 111)		float _hx_tmp3 = (_hx_tmp2 + (m->self->_11 * y));
HXDLIN( 111)		this->y = ( (float)((((_hx_tmp3 + (m->self->_21 * z)) + m->self->_31) * d2)) );
HXLINE( 112)		float _hx_tmp4 = (m->self->_02 * x);
HXDLIN( 112)		float _hx_tmp5 = (_hx_tmp4 + (m->self->_12 * y));
HXDLIN( 112)		this->z = ( (float)((((_hx_tmp5 + (m->self->_22 * z)) + m->self->_32) * d2)) );
HXLINE( 113)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec3_obj,applyproj,return )

 ::iron::math::Vec3 Vec3_obj::applymat( ::iron::math::Mat4 m){
            	HX_STACKFRAME(&_hx_pos_35016255809392ac_116_applymat)
HXLINE( 117)		float x = this->x;
HXDLIN( 117)		float y = this->y;
HXDLIN( 117)		float z = this->z;
HXLINE( 118)		float _hx_tmp = (m->self->_00 * x);
HXDLIN( 118)		float _hx_tmp1 = (_hx_tmp + (m->self->_10 * y));
HXDLIN( 118)		this->x = ((_hx_tmp1 + (m->self->_20 * z)) + m->self->_30);
HXLINE( 119)		float _hx_tmp2 = (m->self->_01 * x);
HXDLIN( 119)		float _hx_tmp3 = (_hx_tmp2 + (m->self->_11 * y));
HXDLIN( 119)		this->y = ((_hx_tmp3 + (m->self->_21 * z)) + m->self->_31);
HXLINE( 120)		float _hx_tmp4 = (m->self->_02 * x);
HXDLIN( 120)		float _hx_tmp5 = (_hx_tmp4 + (m->self->_12 * y));
HXDLIN( 120)		this->z = ((_hx_tmp5 + (m->self->_22 * z)) + m->self->_32);
HXLINE( 121)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec3_obj,applymat,return )

bool Vec3_obj::equals( ::iron::math::Vec3 v){
            	HX_STACKFRAME(&_hx_pos_35016255809392ac_125_equals)
HXDLIN( 125)		bool _hx_tmp;
HXDLIN( 125)		if ((this->x == v->x)) {
HXDLIN( 125)			_hx_tmp = (this->y == v->y);
            		}
            		else {
HXDLIN( 125)			_hx_tmp = false;
            		}
HXDLIN( 125)		if (_hx_tmp) {
HXDLIN( 125)			return (this->z == v->z);
            		}
            		else {
HXDLIN( 125)			return false;
            		}
HXDLIN( 125)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec3_obj,equals,return )

float Vec3_obj::length(){
            	HX_STACKFRAME(&_hx_pos_35016255809392ac_129_length)
HXDLIN( 129)		float v = (this->x * this->x);
HXDLIN( 129)		float v1 = (v + (this->y * this->y));
HXDLIN( 129)		return ( (float)(::Math_obj::sqrt(( (Float)((v1 + (this->z * this->z))) ))) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec3_obj,length,return )

 ::iron::math::Vec3 Vec3_obj::sub( ::iron::math::Vec3 v){
            	HX_STACKFRAME(&_hx_pos_35016255809392ac_132_sub)
HXLINE( 133)		 ::iron::math::Vec3 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 133)		_hx_tmp->x = (_hx_tmp->x - v->x);
HXDLIN( 133)		 ::iron::math::Vec3 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 133)		_hx_tmp1->y = (_hx_tmp1->y - v->y);
HXDLIN( 133)		 ::iron::math::Vec3 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 133)		_hx_tmp2->z = (_hx_tmp2->z - v->z);
HXLINE( 134)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec3_obj,sub,return )

float Vec3_obj::distanceTo( ::iron::math::Vec3 p){
            	HX_STACKFRAME(&_hx_pos_35016255809392ac_149_distanceTo)
HXDLIN( 149)		float v = (p->x - this->x);
HXDLIN( 149)		float v1 = (v * (p->x - this->x));
HXDLIN( 149)		float v2 = (p->y - this->y);
HXDLIN( 149)		float v3 = (v1 + (v2 * (p->y - this->y)));
HXDLIN( 149)		float v4 = (p->z - this->z);
HXDLIN( 149)		return ( (float)(::Math_obj::sqrt(( (Float)((v3 + (v4 * (p->z - this->z)))) ))) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec3_obj,distanceTo,return )

 ::iron::math::Vec3 Vec3_obj::clamp(float min,float max){
            	HX_STACKFRAME(&_hx_pos_35016255809392ac_152_clamp)
HXLINE( 153)		float v = (this->x * this->x);
HXDLIN( 153)		float v1 = (v + (this->y * this->y));
HXDLIN( 153)		float l = ( (float)(::Math_obj::sqrt(( (Float)((v1 + (this->z * this->z))) ))) );
HXLINE( 154)		if ((l < min)) {
HXLINE( 154)			float v2 = (this->x * this->x);
HXDLIN( 154)			float v3 = (v2 + (this->y * this->y));
HXDLIN( 154)			float n = ( (float)(::Math_obj::sqrt(( (Float)((v3 + (this->z * this->z))) ))) );
HXDLIN( 154)			if ((n > ((Float)0.0))) {
HXLINE( 154)				Float invN = (((Float)1.0) / ( (Float)(n) ));
HXDLIN( 154)				 ::iron::math::Vec3 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 154)				_hx_tmp->x = (_hx_tmp->x * invN);
HXDLIN( 154)				 ::iron::math::Vec3 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 154)				_hx_tmp1->y = (_hx_tmp1->y * invN);
HXDLIN( 154)				 ::iron::math::Vec3 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 154)				_hx_tmp2->z = (_hx_tmp2->z * invN);
            			}
HXDLIN( 154)			 ::iron::math::Vec3 _this = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 154)			 ::iron::math::Vec3 _this1 = _this;
HXDLIN( 154)			_this1->x = (_this1->x * min);
HXDLIN( 154)			 ::iron::math::Vec3 _this2 = _this;
HXDLIN( 154)			_this2->y = (_this2->y * min);
HXDLIN( 154)			 ::iron::math::Vec3 _this3 = _this;
HXDLIN( 154)			_this3->z = (_this3->z * min);
            		}
            		else {
HXLINE( 155)			if ((l > max)) {
HXLINE( 155)				float v4 = (this->x * this->x);
HXDLIN( 155)				float v5 = (v4 + (this->y * this->y));
HXDLIN( 155)				float n1 = ( (float)(::Math_obj::sqrt(( (Float)((v5 + (this->z * this->z))) ))) );
HXDLIN( 155)				if ((n1 > ((Float)0.0))) {
HXLINE( 155)					Float invN1 = (((Float)1.0) / ( (Float)(n1) ));
HXDLIN( 155)					 ::iron::math::Vec3 _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 155)					_hx_tmp3->x = (_hx_tmp3->x * invN1);
HXDLIN( 155)					 ::iron::math::Vec3 _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 155)					_hx_tmp4->y = (_hx_tmp4->y * invN1);
HXDLIN( 155)					 ::iron::math::Vec3 _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 155)					_hx_tmp5->z = (_hx_tmp5->z * invN1);
            				}
HXDLIN( 155)				 ::iron::math::Vec3 _this4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 155)				 ::iron::math::Vec3 _this5 = _this4;
HXDLIN( 155)				_this5->x = (_this5->x * max);
HXDLIN( 155)				 ::iron::math::Vec3 _this6 = _this4;
HXDLIN( 155)				_this6->y = (_this6->y * max);
HXDLIN( 155)				 ::iron::math::Vec3 _this7 = _this4;
HXDLIN( 155)				_this7->z = (_this7->z * max);
            			}
            		}
HXLINE( 156)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vec3_obj,clamp,return )

::String Vec3_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_35016255809392ac_164_toString)
HXDLIN( 164)		::String _hx_tmp = ((HX_("(",28,00,00,00) + ::Std_obj::string(this->x)) + HX_(", ",74,26,00,00));
HXDLIN( 164)		::String _hx_tmp1 = ((_hx_tmp + ::Std_obj::string(this->y)) + HX_(", ",74,26,00,00));
HXDLIN( 164)		return ((_hx_tmp1 + ::Std_obj::string(this->z)) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec3_obj,toString,return )

float Vec3_obj::distance( ::iron::math::Vec3 v1, ::iron::math::Vec3 v2){
            	HX_STACKFRAME(&_hx_pos_35016255809392ac_138_distance)
HXDLIN( 138)		float vx = (v1->x - v2->x);
HXDLIN( 138)		float vy = (v1->y - v2->y);
HXDLIN( 138)		float vz = (v1->z - v2->z);
HXDLIN( 138)		return ( (float)(::Math_obj::sqrt(( (Float)((((vx * vx) + (vy * vy)) + (vz * vz))) ))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec3_obj,distance,return )

float Vec3_obj::distancef(float v1x,float v1y,float v1z,float v2x,float v2y,float v2z){
            	HX_STACKFRAME(&_hx_pos_35016255809392ac_141_distancef)
HXLINE( 142)		float vx = (v1x - v2x);
HXLINE( 143)		float vy = (v1y - v2y);
HXLINE( 144)		float vz = (v1z - v2z);
HXLINE( 145)		return ( (float)(::Math_obj::sqrt(( (Float)((((vx * vx) + (vy * vy)) + (vz * vz))) ))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Vec3_obj,distancef,return )

 ::iron::math::Vec3 Vec3_obj::xAxis(){
            	HX_GC_STACKFRAME(&_hx_pos_35016255809392ac_159_xAxis)
HXDLIN( 159)		return  ::iron::math::Vec3_obj::__alloc( HX_CTX ,((Float)1.0),((Float)0.0),((Float)0.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vec3_obj,xAxis,return )

 ::iron::math::Vec3 Vec3_obj::yAxis(){
            	HX_GC_STACKFRAME(&_hx_pos_35016255809392ac_160_yAxis)
HXDLIN( 160)		return  ::iron::math::Vec3_obj::__alloc( HX_CTX ,((Float)0.0),((Float)1.0),((Float)0.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vec3_obj,yAxis,return )

 ::iron::math::Vec3 Vec3_obj::zAxis(){
            	HX_GC_STACKFRAME(&_hx_pos_35016255809392ac_161_zAxis)
HXDLIN( 161)		return  ::iron::math::Vec3_obj::__alloc( HX_CTX ,((Float)0.0),((Float)0.0),((Float)1.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vec3_obj,zAxis,return )


hx::ObjectPtr< Vec3_obj > Vec3_obj::__new(hx::Null< float >  __o_x,hx::Null< float >  __o_y,hx::Null< float >  __o_z) {
	hx::ObjectPtr< Vec3_obj > __this = new Vec3_obj();
	__this->__construct(__o_x,__o_y,__o_z);
	return __this;
}

hx::ObjectPtr< Vec3_obj > Vec3_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< float >  __o_x,hx::Null< float >  __o_y,hx::Null< float >  __o_z) {
	Vec3_obj *__this = (Vec3_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Vec3_obj), false, "iron.math.Vec3"));
	*(void **)__this = Vec3_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_z);
	return __this;
}

Vec3_obj::Vec3_obj()
{
}

hx::Val Vec3_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		if (HX_FIELD_EQ(inName,"z") ) { return hx::Val( z ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"dot") ) { return hx::Val( dot_dyn() ); }
		if (HX_FIELD_EQ(inName,"sub") ) { return hx::Val( sub_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"addf") ) { return hx::Val( addf_dyn() ); }
		if (HX_FIELD_EQ(inName,"mult") ) { return hx::Val( mult_dyn() ); }
		if (HX_FIELD_EQ(inName,"lerp") ) { return hx::Val( lerp_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cross") ) { return hx::Val( cross_dyn() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"clamp") ) { return hx::Val( clamp_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"equals") ) { return hx::Val( equals_dyn() ); }
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addvecs") ) { return hx::Val( addvecs_dyn() ); }
		if (HX_FIELD_EQ(inName,"subvecs") ) { return hx::Val( subvecs_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFrom") ) { return hx::Val( setFrom_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"applymat") ) { return hx::Val( applymat_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"crossvecs") ) { return hx::Val( crossvecs_dyn() ); }
		if (HX_FIELD_EQ(inName,"normalize") ) { return hx::Val( normalize_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyproj") ) { return hx::Val( applyproj_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"distanceTo") ) { return hx::Val( distanceTo_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Vec3_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"xAxis") ) { outValue = xAxis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"yAxis") ) { outValue = yAxis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"zAxis") ) { outValue = zAxis_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { outValue = distance_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"distancef") ) { outValue = distancef_dyn(); return true; }
	}
	return false;
}

hx::Val Vec3_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"z") ) { z=inValue.Cast< float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Vec3_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("z",7a,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Vec3_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Vec3_obj,x),HX_("x",78,00,00,00)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Vec3_obj,y),HX_("y",79,00,00,00)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Vec3_obj,z),HX_("z",7a,00,00,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Vec3_obj_sStaticStorageInfo = 0;
#endif

static ::String Vec3_obj_sMemberFields[] = {
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("z",7a,00,00,00),
	HX_("cross",80,5f,5a,4c),
	HX_("crossvecs",1f,47,0c,94),
	HX_("set",a2,9b,57,00),
	HX_("add",21,f2,49,00),
	HX_("addf",25,eb,69,40),
	HX_("addvecs",40,3e,b0,9f),
	HX_("subvecs",1f,91,76,31),
	HX_("normalize",8d,37,a1,ab),
	HX_("mult",f0,67,65,48),
	HX_("dot",89,42,4c,00),
	HX_("setFrom",2c,e6,46,09),
	HX_("clone",5d,13,63,48),
	HX_("lerp",77,12,b0,47),
	HX_("applyproj",0b,9c,54,49),
	HX_("applymat",f2,1d,0e,25),
	HX_("equals",3f,ee,f2,bf),
	HX_("length",e6,94,07,9f),
	HX_("sub",80,a9,57,00),
	HX_("distanceTo",10,d4,ec,8b),
	HX_("clamp",fb,72,58,48),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class Vec3_obj::__mClass;

static ::String Vec3_obj_sStaticFields[] = {
	HX_("distance",35,93,f9,6b),
	HX_("distancef",91,3b,67,0e),
	HX_("xAxis",39,e5,67,43),
	HX_("yAxis",ba,79,ce,d6),
	HX_("zAxis",3b,0e,35,6a),
	::String(null())
};

void Vec3_obj::__register()
{
	Vec3_obj _hx_dummy;
	Vec3_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.math.Vec3",3f,89,15,f7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Vec3_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Vec3_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Vec3_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Vec3_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Vec3_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Vec3_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace math
