// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <hxinc/iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Quat
#include <hxinc/iron/math/Quat.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <hxinc/iron/math/Vec4.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_12_new,"iron.math.Vec4","new",0x836eca32,"iron.math.Vec4.new","iron/math/Vec4.hx",12,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_19_cross,"iron.math.Vec4","cross",0x0784f1d2,"iron.math.Vec4.cross","iron/math/Vec4.hx",19,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_28_crossvecs,"iron.math.Vec4","crossvecs",0xe3c36a71,"iron.math.Vec4.crossvecs","iron/math/Vec4.hx",28,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_37_set,"iron.math.Vec4","set",0x83729574,"iron.math.Vec4.set","iron/math/Vec4.hx",37,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_45_add,"iron.math.Vec4","add",0x8364ebf3,"iron.math.Vec4.add","iron/math/Vec4.hx",45,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_52_addf,"iron.math.Vec4","addf",0x74e98913,"iron.math.Vec4.addf","iron/math/Vec4.hx",52,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_59_addvecs,"iron.math.Vec4","addvecs",0x68618912,"iron.math.Vec4.addvecs","iron/math/Vec4.hx",59,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_66_subvecs,"iron.math.Vec4","subvecs",0xfa27dbf1,"iron.math.Vec4.subvecs","iron/math/Vec4.hx",66,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_73_normalize,"iron.math.Vec4","normalize",0xfb585adf,"iron.math.Vec4.normalize","iron/math/Vec4.hx",73,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_84_mult,"iron.math.Vec4","mult",0x7ce505de,"iron.math.Vec4.mult","iron/math/Vec4.hx",84,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_92_dot,"iron.math.Vec4","dot",0x83673c5b,"iron.math.Vec4.dot","iron/math/Vec4.hx",92,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_95_setFrom,"iron.math.Vec4","setFrom",0xd1f830fe,"iron.math.Vec4.setFrom","iron/math/Vec4.hx",95,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_103_clone,"iron.math.Vec4","clone",0x038da5af,"iron.math.Vec4.clone","iron/math/Vec4.hx",103,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_106_lerp,"iron.math.Vec4","lerp",0x7c2fb065,"iron.math.Vec4.lerp","iron/math/Vec4.hx",106,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_113_applyproj,"iron.math.Vec4","applyproj",0x990bbf5d,"iron.math.Vec4.applyproj","iron/math/Vec4.hx",113,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_122_applymat,"iron.math.Vec4","applymat",0xf77e4ae0,"iron.math.Vec4.applymat","iron/math/Vec4.hx",122,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_130_applymat4,"iron.math.Vec4","applymat4",0x97033954,"iron.math.Vec4.applymat4","iron/math/Vec4.hx",130,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_139_applyAxisAngle,"iron.math.Vec4","applyAxisAngle",0x0ad1ff92,"iron.math.Vec4.applyAxisAngle","iron/math/Vec4.hx",139,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_145_applyQuat,"iron.math.Vec4","applyQuat",0x84905cb7,"iron.math.Vec4.applyQuat","iron/math/Vec4.hx",145,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_157_equals,"iron.math.Vec4","equals",0xca0863ad,"iron.math.Vec4.equals","iron/math/Vec4.hx",157,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_161_almostEquals,"iron.math.Vec4","almostEquals",0x90fe0bbb,"iron.math.Vec4.almostEquals","iron/math/Vec4.hx",161,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_165_length,"iron.math.Vec4","length",0xa91d0a54,"iron.math.Vec4.length","iron/math/Vec4.hx",165,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_168_sub,"iron.math.Vec4","sub",0x8372a352,"iron.math.Vec4.sub","iron/math/Vec4.hx",168,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_185_distanceTo,"iron.math.Vec4","distanceTo",0xfc74987e,"iron.math.Vec4.distanceTo","iron/math/Vec4.hx",185,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_188_reflect,"iron.math.Vec4","reflect",0xb1dacf0f,"iron.math.Vec4.reflect","iron/math/Vec4.hx",188,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_196_clamp,"iron.math.Vec4","clamp",0x0383054d,"iron.math.Vec4.clamp","iron/math/Vec4.hx",196,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_208_toString,"iron.math.Vec4","toString",0x0adefd9a,"iron.math.Vec4.toString","iron/math/Vec4.hx",208,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_174_distance,"iron.math.Vec4","distance",0x3e69c023,"iron.math.Vec4.distance","iron/math/Vec4.hx",174,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_177_distancef,"iron.math.Vec4","distancef",0x5e1e5ee3,"iron.math.Vec4.distancef","iron/math/Vec4.hx",177,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_203_xAxis,"iron.math.Vec4","xAxis",0xfe92778b,"iron.math.Vec4.xAxis","iron/math/Vec4.hx",203,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_204_yAxis,"iron.math.Vec4","yAxis",0x91f90c0c,"iron.math.Vec4.yAxis","iron/math/Vec4.hx",204,0x1ba9f11e)
HX_LOCAL_STACK_FRAME(_hx_pos_a4ebb82b51b50c55_205_zAxis,"iron.math.Vec4","zAxis",0x255fa08d,"iron.math.Vec4.zAxis","iron/math/Vec4.hx",205,0x1ba9f11e)
namespace iron{
namespace math{

void Vec4_obj::__construct(hx::Null< float >  __o_x,hx::Null< float >  __o_y,hx::Null< float >  __o_z,hx::Null< float >  __o_w){
float x = __o_x.Default(((Float)0.0));
float y = __o_y.Default(((Float)0.0));
float z = __o_z.Default(((Float)0.0));
float w = __o_w.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_12_new)
HXLINE(  13)		this->x = x;
HXLINE(  14)		this->y = y;
HXLINE(  15)		this->z = z;
HXLINE(  16)		this->w = w;
            	}

Dynamic Vec4_obj::__CreateEmpty() { return new Vec4_obj; }

void *Vec4_obj::_hx_vtable = 0;

Dynamic Vec4_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Vec4_obj > _hx_result = new Vec4_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Vec4_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1783ee74;
}

 ::iron::math::Vec4 Vec4_obj::cross( ::iron::math::Vec4 v){
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_19_cross)
HXLINE(  20)		float ax = this->x;
HXDLIN(  20)		float ay = this->y;
HXDLIN(  20)		float az = this->z;
HXLINE(  21)		float vx = v->x;
HXDLIN(  21)		float vy = v->y;
HXDLIN(  21)		float vz = v->z;
HXLINE(  22)		this->x = ((ay * vz) - (az * vy));
HXLINE(  23)		this->y = ((az * vx) - (ax * vz));
HXLINE(  24)		this->z = ((ax * vy) - (ay * vx));
HXLINE(  25)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec4_obj,cross,return )

 ::iron::math::Vec4 Vec4_obj::crossvecs( ::iron::math::Vec4 a, ::iron::math::Vec4 b){
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_28_crossvecs)
HXLINE(  29)		float ax = a->x;
HXDLIN(  29)		float ay = a->y;
HXDLIN(  29)		float az = a->z;
HXLINE(  30)		float bx = b->x;
HXDLIN(  30)		float by = b->y;
HXDLIN(  30)		float bz = b->z;
HXLINE(  31)		this->x = ((ay * bz) - (az * by));
HXLINE(  32)		this->y = ((az * bx) - (ax * bz));
HXLINE(  33)		this->z = ((ax * by) - (ay * bx));
HXLINE(  34)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vec4_obj,crossvecs,return )

 ::iron::math::Vec4 Vec4_obj::set(float x,float y,float z,hx::Null< float >  __o_w){
float w = __o_w.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_37_set)
HXLINE(  38)		this->x = x;
HXLINE(  39)		this->y = y;
HXLINE(  40)		this->z = z;
HXLINE(  41)		this->w = w;
HXLINE(  42)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Vec4_obj,set,return )

 ::iron::math::Vec4 Vec4_obj::add( ::iron::math::Vec4 v){
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_45_add)
HXLINE(  46)		 ::iron::math::Vec4 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  46)		_hx_tmp->x = (_hx_tmp->x + v->x);
HXLINE(  47)		 ::iron::math::Vec4 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  47)		_hx_tmp1->y = (_hx_tmp1->y + v->y);
HXLINE(  48)		 ::iron::math::Vec4 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  48)		_hx_tmp2->z = (_hx_tmp2->z + v->z);
HXLINE(  49)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec4_obj,add,return )

 ::iron::math::Vec4 Vec4_obj::addf(float x,float y,float z){
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_52_addf)
HXLINE(  53)		 ::iron::math::Vec4 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  53)		_hx_tmp->x = (_hx_tmp->x + x);
HXLINE(  54)		 ::iron::math::Vec4 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  54)		_hx_tmp1->y = (_hx_tmp1->y + y);
HXLINE(  55)		 ::iron::math::Vec4 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  55)		_hx_tmp2->z = (_hx_tmp2->z + z);
HXLINE(  56)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Vec4_obj,addf,return )

 ::iron::math::Vec4 Vec4_obj::addvecs( ::iron::math::Vec4 a, ::iron::math::Vec4 b){
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_59_addvecs)
HXLINE(  60)		this->x = (a->x + b->x);
HXLINE(  61)		this->y = (a->y + b->y);
HXLINE(  62)		this->z = (a->z + b->z);
HXLINE(  63)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vec4_obj,addvecs,return )

 ::iron::math::Vec4 Vec4_obj::subvecs( ::iron::math::Vec4 a, ::iron::math::Vec4 b){
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_66_subvecs)
HXLINE(  67)		this->x = (a->x - b->x);
HXLINE(  68)		this->y = (a->y - b->y);
HXLINE(  69)		this->z = (a->z - b->z);
HXLINE(  70)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vec4_obj,subvecs,return )

 ::iron::math::Vec4 Vec4_obj::normalize(){
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_73_normalize)
HXLINE(  74)		float v = (this->x * this->x);
HXDLIN(  74)		float v1 = (v + (this->y * this->y));
HXDLIN(  74)		float n = ( (float)(::Math_obj::sqrt(( (Float)((v1 + (this->z * this->z))) ))) );
HXLINE(  75)		if ((n > ((Float)0.0))) {
HXLINE(  76)			Float invN = (((Float)1.0) / ( (Float)(n) ));
HXLINE(  77)			 ::iron::math::Vec4 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  77)			_hx_tmp->x = (_hx_tmp->x * invN);
HXLINE(  78)			 ::iron::math::Vec4 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  78)			_hx_tmp1->y = (_hx_tmp1->y * invN);
HXLINE(  79)			 ::iron::math::Vec4 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  79)			_hx_tmp2->z = (_hx_tmp2->z * invN);
            		}
HXLINE(  81)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec4_obj,normalize,return )

 ::iron::math::Vec4 Vec4_obj::mult(float f){
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_84_mult)
HXLINE(  85)		 ::iron::math::Vec4 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  85)		_hx_tmp->x = (_hx_tmp->x * f);
HXLINE(  86)		 ::iron::math::Vec4 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  86)		_hx_tmp1->y = (_hx_tmp1->y * f);
HXLINE(  87)		 ::iron::math::Vec4 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  87)		_hx_tmp2->z = (_hx_tmp2->z * f);
HXLINE(  88)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec4_obj,mult,return )

float Vec4_obj::dot( ::iron::math::Vec4 v){
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_92_dot)
HXDLIN(  92)		float _hx_tmp = (this->x * v->x);
HXDLIN(  92)		float _hx_tmp1 = (_hx_tmp + (this->y * v->y));
HXDLIN(  92)		return (_hx_tmp1 + (this->z * v->z));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec4_obj,dot,return )

 ::iron::math::Vec4 Vec4_obj::setFrom( ::iron::math::Vec4 v){
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_95_setFrom)
HXLINE(  96)		this->x = v->x;
HXLINE(  97)		this->y = v->y;
HXLINE(  98)		this->z = v->z;
HXLINE(  99)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec4_obj,setFrom,return )

 ::iron::math::Vec4 Vec4_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_103_clone)
HXDLIN( 103)		return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,this->x,this->y,this->z,this->w);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec4_obj,clone,return )

 ::iron::math::Vec4 Vec4_obj::lerp( ::iron::math::Vec4 from, ::iron::math::Vec4 to,float s){
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_106_lerp)
HXLINE( 107)		float from1 = from->x;
HXDLIN( 107)		this->x = (from1 + ((to->x - from->x) * s));
HXLINE( 108)		float from2 = from->y;
HXDLIN( 108)		this->y = (from2 + ((to->y - from->y) * s));
HXLINE( 109)		float from3 = from->z;
HXDLIN( 109)		this->z = (from3 + ((to->z - from->z) * s));
HXLINE( 110)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Vec4_obj,lerp,return )

 ::iron::math::Vec4 Vec4_obj::applyproj( ::iron::math::Mat4 m){
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_113_applyproj)
HXLINE( 114)		float x = this->x;
HXDLIN( 114)		float y = this->y;
HXDLIN( 114)		float z = this->z;
HXLINE( 115)		float d = (m->self->_03 * x);
HXDLIN( 115)		float d1 = (d + (m->self->_13 * y));
HXDLIN( 115)		Float d2 = (((Float)1.0) / ( (Float)(((d1 + (m->self->_23 * z)) + m->self->_33)) ));
HXLINE( 116)		float _hx_tmp = (m->self->_00 * x);
HXDLIN( 116)		float _hx_tmp1 = (_hx_tmp + (m->self->_10 * y));
HXDLIN( 116)		this->x = ( (float)((((_hx_tmp1 + (m->self->_20 * z)) + m->self->_30) * d2)) );
HXLINE( 117)		float _hx_tmp2 = (m->self->_01 * x);
HXDLIN( 117)		float _hx_tmp3 = (_hx_tmp2 + (m->self->_11 * y));
HXDLIN( 117)		this->y = ( (float)((((_hx_tmp3 + (m->self->_21 * z)) + m->self->_31) * d2)) );
HXLINE( 118)		float _hx_tmp4 = (m->self->_02 * x);
HXDLIN( 118)		float _hx_tmp5 = (_hx_tmp4 + (m->self->_12 * y));
HXDLIN( 118)		this->z = ( (float)((((_hx_tmp5 + (m->self->_22 * z)) + m->self->_32) * d2)) );
HXLINE( 119)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec4_obj,applyproj,return )

 ::iron::math::Vec4 Vec4_obj::applymat( ::iron::math::Mat4 m){
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_122_applymat)
HXLINE( 123)		float x = this->x;
HXDLIN( 123)		float y = this->y;
HXDLIN( 123)		float z = this->z;
HXLINE( 124)		float _hx_tmp = (m->self->_00 * x);
HXDLIN( 124)		float _hx_tmp1 = (_hx_tmp + (m->self->_10 * y));
HXDLIN( 124)		this->x = ((_hx_tmp1 + (m->self->_20 * z)) + m->self->_30);
HXLINE( 125)		float _hx_tmp2 = (m->self->_01 * x);
HXDLIN( 125)		float _hx_tmp3 = (_hx_tmp2 + (m->self->_11 * y));
HXDLIN( 125)		this->y = ((_hx_tmp3 + (m->self->_21 * z)) + m->self->_31);
HXLINE( 126)		float _hx_tmp4 = (m->self->_02 * x);
HXDLIN( 126)		float _hx_tmp5 = (_hx_tmp4 + (m->self->_12 * y));
HXDLIN( 126)		this->z = ((_hx_tmp5 + (m->self->_22 * z)) + m->self->_32);
HXLINE( 127)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec4_obj,applymat,return )

 ::iron::math::Vec4 Vec4_obj::applymat4( ::iron::math::Mat4 m){
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_130_applymat4)
HXLINE( 131)		float x = this->x;
HXDLIN( 131)		float y = this->y;
HXDLIN( 131)		float z = this->z;
HXDLIN( 131)		float w = this->w;
HXLINE( 132)		float _hx_tmp = (m->self->_00 * x);
HXDLIN( 132)		float _hx_tmp1 = (_hx_tmp + (m->self->_10 * y));
HXDLIN( 132)		float _hx_tmp2 = (_hx_tmp1 + (m->self->_20 * z));
HXDLIN( 132)		this->x = (_hx_tmp2 + (m->self->_30 * w));
HXLINE( 133)		float _hx_tmp3 = (m->self->_01 * x);
HXDLIN( 133)		float _hx_tmp4 = (_hx_tmp3 + (m->self->_11 * y));
HXDLIN( 133)		float _hx_tmp5 = (_hx_tmp4 + (m->self->_21 * z));
HXDLIN( 133)		this->y = (_hx_tmp5 + (m->self->_31 * w));
HXLINE( 134)		float _hx_tmp6 = (m->self->_02 * x);
HXDLIN( 134)		float _hx_tmp7 = (_hx_tmp6 + (m->self->_12 * y));
HXDLIN( 134)		float _hx_tmp8 = (_hx_tmp7 + (m->self->_22 * z));
HXDLIN( 134)		this->z = (_hx_tmp8 + (m->self->_32 * w));
HXLINE( 135)		float _hx_tmp9 = (m->self->_03 * x);
HXDLIN( 135)		float _hx_tmp10 = (_hx_tmp9 + (m->self->_13 * y));
HXDLIN( 135)		float _hx_tmp11 = (_hx_tmp10 + (m->self->_23 * z));
HXDLIN( 135)		this->w = (_hx_tmp11 + (m->self->_33 * w));
HXLINE( 136)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec4_obj,applymat4,return )

 ::iron::math::Vec4 Vec4_obj::applyAxisAngle( ::iron::math::Vec4 axis,float angle){
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_139_applyAxisAngle)
HXLINE( 140)		float quat_x = ( (float)(((Float)0.0)) );
HXDLIN( 140)		float quat_y = ( (float)(((Float)0.0)) );
HXDLIN( 140)		float quat_z = ( (float)(((Float)0.0)) );
HXDLIN( 140)		float quat_w = ( (float)(((Float)1.0)) );
HXLINE( 141)		float s = ( (float)(::Math_obj::sin((angle * ((Float)0.5)))) );
HXDLIN( 141)		quat_x = (axis->x * s);
HXDLIN( 141)		quat_y = (axis->y * s);
HXDLIN( 141)		quat_z = (axis->z * s);
HXDLIN( 141)		quat_w = ( (float)(::Math_obj::cos((angle * ((Float)0.5)))) );
HXDLIN( 141)		Float l = ::Math_obj::sqrt(( (Float)(((((quat_x * quat_x) + (quat_y * quat_y)) + (quat_z * quat_z)) + (quat_w * quat_w))) ));
HXDLIN( 141)		if ((l == ((Float)0.0))) {
HXLINE( 141)			quat_x = ( (float)(0) );
HXDLIN( 141)			quat_y = ( (float)(0) );
HXDLIN( 141)			quat_z = ( (float)(0) );
HXDLIN( 141)			quat_w = ( (float)(0) );
            		}
            		else {
HXLINE( 128)			l = (((Float)1.0) / l);
HXLINE( 141)			quat_x = (quat_x * l);
HXDLIN( 141)			quat_y = (quat_y * l);
HXDLIN( 141)			quat_z = (quat_z * l);
HXDLIN( 141)			quat_w = (quat_w * l);
            		}
HXLINE( 142)		float ix = (quat_w * this->x);
HXDLIN( 142)		float ix1 = (ix + (quat_y * this->z));
HXDLIN( 142)		float ix2 = (ix1 - (quat_z * this->y));
HXDLIN( 142)		float iy = (quat_w * this->y);
HXDLIN( 142)		float iy1 = (iy + (quat_z * this->x));
HXDLIN( 142)		float iy2 = (iy1 - (quat_x * this->z));
HXDLIN( 142)		float iz = (quat_w * this->z);
HXDLIN( 142)		float iz1 = (iz + (quat_x * this->y));
HXDLIN( 142)		float iz2 = (iz1 - (quat_y * this->x));
HXDLIN( 142)		float iw = (-(quat_x) * this->x);
HXDLIN( 142)		float iw1 = (iw - (quat_y * this->y));
HXDLIN( 142)		float iw2 = (iw1 - (quat_z * this->z));
HXDLIN( 142)		this->x = ((((ix2 * quat_w) + (iw2 * -(quat_x))) + (iy2 * -(quat_z))) - (iz2 * -(quat_y)));
HXDLIN( 142)		this->y = ((((iy2 * quat_w) + (iw2 * -(quat_y))) + (iz2 * -(quat_x))) - (ix2 * -(quat_z)));
HXDLIN( 142)		this->z = ((((iz2 * quat_w) + (iw2 * -(quat_z))) + (ix2 * -(quat_y))) - (iy2 * -(quat_x)));
HXDLIN( 142)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vec4_obj,applyAxisAngle,return )

 ::iron::math::Vec4 Vec4_obj::applyQuat( ::iron::math::Quat q){
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_145_applyQuat)
HXLINE( 146)		float ix = (q->w * this->x);
HXDLIN( 146)		float ix1 = (ix + (q->y * this->z));
HXDLIN( 146)		float ix2 = (ix1 - (q->z * this->y));
HXLINE( 147)		float iy = (q->w * this->y);
HXDLIN( 147)		float iy1 = (iy + (q->z * this->x));
HXDLIN( 147)		float iy2 = (iy1 - (q->x * this->z));
HXLINE( 148)		float iz = (q->w * this->z);
HXDLIN( 148)		float iz1 = (iz + (q->x * this->y));
HXDLIN( 148)		float iz2 = (iz1 - (q->y * this->x));
HXLINE( 149)		float iw = (-(q->x) * this->x);
HXDLIN( 149)		float iw1 = (iw - (q->y * this->y));
HXDLIN( 149)		float iw2 = (iw1 - (q->z * this->z));
HXLINE( 150)		float _hx_tmp = (ix2 * q->w);
HXDLIN( 150)		float _hx_tmp1 = (_hx_tmp + (iw2 * -(q->x)));
HXDLIN( 150)		float _hx_tmp2 = (_hx_tmp1 + (iy2 * -(q->z)));
HXDLIN( 150)		this->x = (_hx_tmp2 - (iz2 * -(q->y)));
HXLINE( 151)		float _hx_tmp3 = (iy2 * q->w);
HXDLIN( 151)		float _hx_tmp4 = (_hx_tmp3 + (iw2 * -(q->y)));
HXDLIN( 151)		float _hx_tmp5 = (_hx_tmp4 + (iz2 * -(q->x)));
HXDLIN( 151)		this->y = (_hx_tmp5 - (ix2 * -(q->z)));
HXLINE( 152)		float _hx_tmp6 = (iz2 * q->w);
HXDLIN( 152)		float _hx_tmp7 = (_hx_tmp6 + (iw2 * -(q->z)));
HXDLIN( 152)		float _hx_tmp8 = (_hx_tmp7 + (ix2 * -(q->y)));
HXDLIN( 152)		this->z = (_hx_tmp8 - (iy2 * -(q->x)));
HXLINE( 153)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec4_obj,applyQuat,return )

bool Vec4_obj::equals( ::iron::math::Vec4 v){
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_157_equals)
HXDLIN( 157)		bool _hx_tmp;
HXDLIN( 157)		if ((this->x == v->x)) {
HXDLIN( 157)			_hx_tmp = (this->y == v->y);
            		}
            		else {
HXDLIN( 157)			_hx_tmp = false;
            		}
HXDLIN( 157)		if (_hx_tmp) {
HXDLIN( 157)			return (this->z == v->z);
            		}
            		else {
HXDLIN( 157)			return false;
            		}
HXDLIN( 157)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec4_obj,equals,return )

bool Vec4_obj::almostEquals( ::iron::math::Vec4 v,float prec){
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_161_almostEquals)
HXDLIN( 161)		bool _hx_tmp;
HXDLIN( 161)		if ((::Math_obj::abs(( (Float)((this->x - v->x)) )) < prec)) {
HXDLIN( 161)			_hx_tmp = (::Math_obj::abs(( (Float)((this->y - v->y)) )) < prec);
            		}
            		else {
HXDLIN( 161)			_hx_tmp = false;
            		}
HXDLIN( 161)		if (_hx_tmp) {
HXDLIN( 161)			return (::Math_obj::abs(( (Float)((this->z - v->z)) )) < prec);
            		}
            		else {
HXDLIN( 161)			return false;
            		}
HXDLIN( 161)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vec4_obj,almostEquals,return )

float Vec4_obj::length(){
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_165_length)
HXDLIN( 165)		float v = (this->x * this->x);
HXDLIN( 165)		float v1 = (v + (this->y * this->y));
HXDLIN( 165)		return ( (float)(::Math_obj::sqrt(( (Float)((v1 + (this->z * this->z))) ))) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec4_obj,length,return )

 ::iron::math::Vec4 Vec4_obj::sub( ::iron::math::Vec4 v){
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_168_sub)
HXLINE( 169)		 ::iron::math::Vec4 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 169)		_hx_tmp->x = (_hx_tmp->x - v->x);
HXDLIN( 169)		 ::iron::math::Vec4 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 169)		_hx_tmp1->y = (_hx_tmp1->y - v->y);
HXDLIN( 169)		 ::iron::math::Vec4 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 169)		_hx_tmp2->z = (_hx_tmp2->z - v->z);
HXLINE( 170)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec4_obj,sub,return )

float Vec4_obj::distanceTo( ::iron::math::Vec4 p){
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_185_distanceTo)
HXDLIN( 185)		float v = (p->x - this->x);
HXDLIN( 185)		float v1 = (v * (p->x - this->x));
HXDLIN( 185)		float v2 = (p->y - this->y);
HXDLIN( 185)		float v3 = (v1 + (v2 * (p->y - this->y)));
HXDLIN( 185)		float v4 = (p->z - this->z);
HXDLIN( 185)		return ( (float)(::Math_obj::sqrt(( (Float)((v3 + (v4 * (p->z - this->z)))) ))) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec4_obj,distanceTo,return )

 ::iron::math::Vec4 Vec4_obj::reflect( ::iron::math::Vec4 n){
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_188_reflect)
HXLINE( 189)		float d = (this->x * n->x);
HXDLIN( 189)		float d1 = (d + (this->y * n->y));
HXDLIN( 189)		float d2 = (2 * (d1 + (this->z * n->z)));
HXLINE( 190)		float _hx_tmp = this->x;
HXDLIN( 190)		this->x = (_hx_tmp - (d2 * n->x));
HXLINE( 191)		float _hx_tmp1 = this->y;
HXDLIN( 191)		this->y = (_hx_tmp1 - (d2 * n->y));
HXLINE( 192)		float _hx_tmp2 = this->z;
HXDLIN( 192)		this->z = (_hx_tmp2 - (d2 * n->z));
HXLINE( 193)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vec4_obj,reflect,return )

 ::iron::math::Vec4 Vec4_obj::clamp(float min,float max){
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_196_clamp)
HXLINE( 197)		float v = (this->x * this->x);
HXDLIN( 197)		float v1 = (v + (this->y * this->y));
HXDLIN( 197)		float l = ( (float)(::Math_obj::sqrt(( (Float)((v1 + (this->z * this->z))) ))) );
HXLINE( 198)		if ((l < min)) {
HXLINE( 198)			float v2 = (this->x * this->x);
HXDLIN( 198)			float v3 = (v2 + (this->y * this->y));
HXDLIN( 198)			float n = ( (float)(::Math_obj::sqrt(( (Float)((v3 + (this->z * this->z))) ))) );
HXDLIN( 198)			if ((n > ((Float)0.0))) {
HXLINE( 198)				Float invN = (((Float)1.0) / ( (Float)(n) ));
HXDLIN( 198)				 ::iron::math::Vec4 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 198)				_hx_tmp->x = (_hx_tmp->x * invN);
HXDLIN( 198)				 ::iron::math::Vec4 _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 198)				_hx_tmp1->y = (_hx_tmp1->y * invN);
HXDLIN( 198)				 ::iron::math::Vec4 _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 198)				_hx_tmp2->z = (_hx_tmp2->z * invN);
            			}
HXDLIN( 198)			 ::iron::math::Vec4 _this = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 198)			 ::iron::math::Vec4 _this1 = _this;
HXDLIN( 198)			_this1->x = (_this1->x * min);
HXDLIN( 198)			 ::iron::math::Vec4 _this2 = _this;
HXDLIN( 198)			_this2->y = (_this2->y * min);
HXDLIN( 198)			 ::iron::math::Vec4 _this3 = _this;
HXDLIN( 198)			_this3->z = (_this3->z * min);
            		}
            		else {
HXLINE( 199)			if ((l > max)) {
HXLINE( 199)				float v4 = (this->x * this->x);
HXDLIN( 199)				float v5 = (v4 + (this->y * this->y));
HXDLIN( 199)				float n1 = ( (float)(::Math_obj::sqrt(( (Float)((v5 + (this->z * this->z))) ))) );
HXDLIN( 199)				if ((n1 > ((Float)0.0))) {
HXLINE( 199)					Float invN1 = (((Float)1.0) / ( (Float)(n1) ));
HXDLIN( 199)					 ::iron::math::Vec4 _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 199)					_hx_tmp3->x = (_hx_tmp3->x * invN1);
HXDLIN( 199)					 ::iron::math::Vec4 _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 199)					_hx_tmp4->y = (_hx_tmp4->y * invN1);
HXDLIN( 199)					 ::iron::math::Vec4 _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 199)					_hx_tmp5->z = (_hx_tmp5->z * invN1);
            				}
HXDLIN( 199)				 ::iron::math::Vec4 _this4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 199)				 ::iron::math::Vec4 _this5 = _this4;
HXDLIN( 199)				_this5->x = (_this5->x * max);
HXDLIN( 199)				 ::iron::math::Vec4 _this6 = _this4;
HXDLIN( 199)				_this6->y = (_this6->y * max);
HXDLIN( 199)				 ::iron::math::Vec4 _this7 = _this4;
HXDLIN( 199)				_this7->z = (_this7->z * max);
            			}
            		}
HXLINE( 200)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vec4_obj,clamp,return )

::String Vec4_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_208_toString)
HXDLIN( 208)		::String _hx_tmp = ((HX_("(",28,00,00,00) + ::Std_obj::string(this->x)) + HX_(", ",74,26,00,00));
HXDLIN( 208)		::String _hx_tmp1 = ((_hx_tmp + ::Std_obj::string(this->y)) + HX_(", ",74,26,00,00));
HXDLIN( 208)		::String _hx_tmp2 = ((_hx_tmp1 + ::Std_obj::string(this->z)) + HX_(", ",74,26,00,00));
HXDLIN( 208)		return ((_hx_tmp2 + ::Std_obj::string(this->w)) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vec4_obj,toString,return )

float Vec4_obj::distance( ::iron::math::Vec4 v1, ::iron::math::Vec4 v2){
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_174_distance)
HXDLIN( 174)		float vx = (v1->x - v2->x);
HXDLIN( 174)		float vy = (v1->y - v2->y);
HXDLIN( 174)		float vz = (v1->z - v2->z);
HXDLIN( 174)		return ( (float)(::Math_obj::sqrt(( (Float)((((vx * vx) + (vy * vy)) + (vz * vz))) ))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vec4_obj,distance,return )

float Vec4_obj::distancef(float v1x,float v1y,float v1z,float v2x,float v2y,float v2z){
            	HX_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_177_distancef)
HXLINE( 178)		float vx = (v1x - v2x);
HXLINE( 179)		float vy = (v1y - v2y);
HXLINE( 180)		float vz = (v1z - v2z);
HXLINE( 181)		return ( (float)(::Math_obj::sqrt(( (Float)((((vx * vx) + (vy * vy)) + (vz * vz))) ))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Vec4_obj,distancef,return )

 ::iron::math::Vec4 Vec4_obj::xAxis(){
            	HX_GC_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_203_xAxis)
HXDLIN( 203)		return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,((Float)1.0),((Float)0.0),((Float)0.0),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vec4_obj,xAxis,return )

 ::iron::math::Vec4 Vec4_obj::yAxis(){
            	HX_GC_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_204_yAxis)
HXDLIN( 204)		return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,((Float)0.0),((Float)1.0),((Float)0.0),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vec4_obj,yAxis,return )

 ::iron::math::Vec4 Vec4_obj::zAxis(){
            	HX_GC_STACKFRAME(&_hx_pos_a4ebb82b51b50c55_205_zAxis)
HXDLIN( 205)		return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,((Float)0.0),((Float)0.0),((Float)1.0),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vec4_obj,zAxis,return )


hx::ObjectPtr< Vec4_obj > Vec4_obj::__new(hx::Null< float >  __o_x,hx::Null< float >  __o_y,hx::Null< float >  __o_z,hx::Null< float >  __o_w) {
	hx::ObjectPtr< Vec4_obj > __this = new Vec4_obj();
	__this->__construct(__o_x,__o_y,__o_z,__o_w);
	return __this;
}

hx::ObjectPtr< Vec4_obj > Vec4_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< float >  __o_x,hx::Null< float >  __o_y,hx::Null< float >  __o_z,hx::Null< float >  __o_w) {
	Vec4_obj *__this = (Vec4_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Vec4_obj), false, "iron.math.Vec4"));
	*(void **)__this = Vec4_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_z,__o_w);
	return __this;
}

Vec4_obj::Vec4_obj()
{
}

hx::Val Vec4_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		if (HX_FIELD_EQ(inName,"z") ) { return hx::Val( z ); }
		if (HX_FIELD_EQ(inName,"w") ) { return hx::Val( w ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"dot") ) { return hx::Val( dot_dyn() ); }
		if (HX_FIELD_EQ(inName,"sub") ) { return hx::Val( sub_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"addf") ) { return hx::Val( addf_dyn() ); }
		if (HX_FIELD_EQ(inName,"mult") ) { return hx::Val( mult_dyn() ); }
		if (HX_FIELD_EQ(inName,"lerp") ) { return hx::Val( lerp_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cross") ) { return hx::Val( cross_dyn() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"clamp") ) { return hx::Val( clamp_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"equals") ) { return hx::Val( equals_dyn() ); }
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addvecs") ) { return hx::Val( addvecs_dyn() ); }
		if (HX_FIELD_EQ(inName,"subvecs") ) { return hx::Val( subvecs_dyn() ); }
		if (HX_FIELD_EQ(inName,"setFrom") ) { return hx::Val( setFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"reflect") ) { return hx::Val( reflect_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"applymat") ) { return hx::Val( applymat_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"crossvecs") ) { return hx::Val( crossvecs_dyn() ); }
		if (HX_FIELD_EQ(inName,"normalize") ) { return hx::Val( normalize_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyproj") ) { return hx::Val( applyproj_dyn() ); }
		if (HX_FIELD_EQ(inName,"applymat4") ) { return hx::Val( applymat4_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyQuat") ) { return hx::Val( applyQuat_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"distanceTo") ) { return hx::Val( distanceTo_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"almostEquals") ) { return hx::Val( almostEquals_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"applyAxisAngle") ) { return hx::Val( applyAxisAngle_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Vec4_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"xAxis") ) { outValue = xAxis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"yAxis") ) { outValue = yAxis_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"zAxis") ) { outValue = zAxis_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { outValue = distance_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"distancef") ) { outValue = distancef_dyn(); return true; }
	}
	return false;
}

hx::Val Vec4_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"z") ) { z=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"w") ) { w=inValue.Cast< float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Vec4_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("z",7a,00,00,00));
	outFields->push(HX_("w",77,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Vec4_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Vec4_obj,x),HX_("x",78,00,00,00)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Vec4_obj,y),HX_("y",79,00,00,00)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Vec4_obj,z),HX_("z",7a,00,00,00)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Vec4_obj,w),HX_("w",77,00,00,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Vec4_obj_sStaticStorageInfo = 0;
#endif

static ::String Vec4_obj_sMemberFields[] = {
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("z",7a,00,00,00),
	HX_("w",77,00,00,00),
	HX_("cross",80,5f,5a,4c),
	HX_("crossvecs",1f,47,0c,94),
	HX_("set",a2,9b,57,00),
	HX_("add",21,f2,49,00),
	HX_("addf",25,eb,69,40),
	HX_("addvecs",40,3e,b0,9f),
	HX_("subvecs",1f,91,76,31),
	HX_("normalize",8d,37,a1,ab),
	HX_("mult",f0,67,65,48),
	HX_("dot",89,42,4c,00),
	HX_("setFrom",2c,e6,46,09),
	HX_("clone",5d,13,63,48),
	HX_("lerp",77,12,b0,47),
	HX_("applyproj",0b,9c,54,49),
	HX_("applymat",f2,1d,0e,25),
	HX_("applymat4",02,16,4c,47),
	HX_("applyAxisAngle",24,6c,04,6b),
	HX_("applyQuat",65,39,d9,34),
	HX_("equals",3f,ee,f2,bf),
	HX_("almostEquals",cd,cf,a9,1b),
	HX_("length",e6,94,07,9f),
	HX_("sub",80,a9,57,00),
	HX_("distanceTo",10,d4,ec,8b),
	HX_("reflect",3d,84,29,e9),
	HX_("clamp",fb,72,58,48),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class Vec4_obj::__mClass;

static ::String Vec4_obj_sStaticFields[] = {
	HX_("distance",35,93,f9,6b),
	HX_("distancef",91,3b,67,0e),
	HX_("xAxis",39,e5,67,43),
	HX_("yAxis",ba,79,ce,d6),
	HX_("zAxis",3b,0e,35,6a),
	::String(null())
};

void Vec4_obj::__register()
{
	Vec4_obj _hx_dummy;
	Vec4_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.math.Vec4",40,89,15,f7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Vec4_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Vec4_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Vec4_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Vec4_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Vec4_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Vec4_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace math
