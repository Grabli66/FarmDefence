// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_7d028c26efabce49
#define INCLUDED_7d028c26efabce49
#include "cpp_uint32array.h"
#endif
#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <hxinc/haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <hxinc/haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_iron_Scene
#include <hxinc/iron/Scene.h>
#endif
#ifndef INCLUDED_iron_data_Armature
#include <hxinc/iron/data/Armature.h>
#endif
#ifndef INCLUDED_iron_data_TAnimation
#include <hxinc/iron/data/TAnimation.h>
#endif
#ifndef INCLUDED_iron_data_TSceneFormat
#include <hxinc/iron/data/TSceneFormat.h>
#endif
#ifndef INCLUDED_iron_data_TTrack
#include <hxinc/iron/data/TTrack.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <hxinc/iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Quat
#include <hxinc/iron/math/Quat.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <hxinc/iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_object_Animation
#include <hxinc/iron/object/Animation.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_arrays_Uint32ArrayPrivate
#include <hxinc/kha/arrays/Uint32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_11_new,"iron.object.Animation","new",0xd2a848cd,"iron.object.Animation.new","iron/object/Animation.hx",11,0x9bdeb163)
HX_LOCAL_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_53_play,"iron.object.Animation","play",0x81ef14e7,"iron.object.Animation.play","iron/object/Animation.hx",53,0x9bdeb163)
HX_LOCAL_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_67_blend,"iron.object.Animation","blend",0x1faa15fe,"iron.object.Animation.blend","iron/object/Animation.hx",67,0x9bdeb163)
HX_LOCAL_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_73_pause,"iron.object.Animation","pause",0x280d04a3,"iron.object.Animation.pause","iron/object/Animation.hx",73,0x9bdeb163)
HX_LOCAL_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_77_resume,"iron.object.Animation","resume",0xfc573360,"iron.object.Animation.resume","iron/object/Animation.hx",77,0x9bdeb163)
HX_LOCAL_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_81_remove,"iron.object.Animation","remove",0xf85b65f7,"iron.object.Animation.remove","iron/object/Animation.hx",81,0x9bdeb163)
HX_LOCAL_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_84_update,"iron.object.Animation","update",0x7ad84fbc,"iron.object.Animation.update","iron/object/Animation.hx",84,0x9bdeb163)
HX_LOCAL_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_95_isTrackEnd,"iron.object.Animation","isTrackEnd",0xda76c74d,"iron.object.Animation.isTrackEnd","iron/object/Animation.hx",95,0x9bdeb163)
HX_LOCAL_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_101_checkFrameIndex,"iron.object.Animation","checkFrameIndex",0x08b21e7a,"iron.object.Animation.checkFrameIndex","iron/object/Animation.hx",101,0x9bdeb163)
HX_LOCAL_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_106_rewind,"iron.object.Animation","rewind",0xfef2f3ae,"iron.object.Animation.rewind","iron/object/Animation.hx",106,0x9bdeb163)
HX_LOCAL_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_111_updateTrack,"iron.object.Animation","updateTrack",0x3c0e252f,"iron.object.Animation.updateTrack","iron/object/Animation.hx",111,0x9bdeb163)
HX_LOCAL_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_141_updateAnimSampled,"iron.object.Animation","updateAnimSampled",0x28a2e48d,"iron.object.Animation.updateAnimSampled","iron/object/Animation.hx",141,0x9bdeb163)
HX_LOCAL_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_172_notifyOnMarker,"iron.object.Animation","notifyOnMarker",0x708da8d5,"iron.object.Animation.notifyOnMarker","iron/object/Animation.hx",172,0x9bdeb163)
HX_LOCAL_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_180_removeMarker,"iron.object.Animation","removeMarker",0x34afa311,"iron.object.Animation.removeMarker","iron/object/Animation.hx",180,0x9bdeb163)
HX_LOCAL_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_183_currentFrame,"iron.object.Animation","currentFrame",0x58a0ef27,"iron.object.Animation.currentFrame","iron/object/Animation.hx",183,0x9bdeb163)
HX_LOCAL_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_184_totalFrames,"iron.object.Animation","totalFrames",0xb311cff7,"iron.object.Animation.totalFrames","iron/object/Animation.hx",184,0x9bdeb163)
HX_LOCAL_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_19_boot,"iron.object.Animation","boot",0x78b06b25,"iron.object.Animation.boot","iron/object/Animation.hx",19,0x9bdeb163)
HX_LOCAL_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_20_boot,"iron.object.Animation","boot",0x78b06b25,"iron.object.Animation.boot","iron/object/Animation.hx",20,0x9bdeb163)
HX_LOCAL_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_21_boot,"iron.object.Animation","boot",0x78b06b25,"iron.object.Animation.boot","iron/object/Animation.hx",21,0x9bdeb163)
HX_LOCAL_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_22_boot,"iron.object.Animation","boot",0x78b06b25,"iron.object.Animation.boot","iron/object/Animation.hx",22,0x9bdeb163)
HX_LOCAL_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_23_boot,"iron.object.Animation","boot",0x78b06b25,"iron.object.Animation.boot","iron/object/Animation.hx",23,0x9bdeb163)
HX_LOCAL_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_24_boot,"iron.object.Animation","boot",0x78b06b25,"iron.object.Animation.boot","iron/object/Animation.hx",24,0x9bdeb163)
HX_LOCAL_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_25_boot,"iron.object.Animation","boot",0x78b06b25,"iron.object.Animation.boot","iron/object/Animation.hx",25,0x9bdeb163)
HX_LOCAL_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_26_boot,"iron.object.Animation","boot",0x78b06b25,"iron.object.Animation.boot","iron/object/Animation.hx",26,0x9bdeb163)
HX_LOCAL_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_27_boot,"iron.object.Animation","boot",0x78b06b25,"iron.object.Animation.boot","iron/object/Animation.hx",27,0x9bdeb163)
HX_LOCAL_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_28_boot,"iron.object.Animation","boot",0x78b06b25,"iron.object.Animation.boot","iron/object/Animation.hx",28,0x9bdeb163)
HX_LOCAL_STACK_FRAME(_hx_pos_a72200f6c6c62f0b_29_boot,"iron.object.Animation","boot",0x78b06b25,"iron.object.Animation.boot","iron/object/Animation.hx",29,0x9bdeb163)
namespace iron{
namespace object{

void Animation_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_11_new)
HXLINE(  45)		this->markerEvents = null();
HXLINE(  44)		this->lastFrameIndex = -1;
HXLINE(  42)		this->blendFactor = ( (float)(((Float)0.0)) );
HXLINE(  41)		this->blendAction = HX_("",00,00,00,00);
HXLINE(  40)		this->blendCurrent = ( (float)(((Float)0.0)) );
HXLINE(  39)		this->blendTime = ( (float)(((Float)0.0)) );
HXLINE(  36)		this->paused = false;
HXLINE(  35)		this->onComplete = null();
HXLINE(  34)		this->frameIndex = 0;
HXLINE(  33)		this->loop = true;
HXLINE(  32)		this->speed = ( (float)(((Float)1.0)) );
HXLINE(  31)		this->time = ( (float)(((Float)0.0)) );
HXLINE(  15)		this->action = HX_("",00,00,00,00);
HXLINE(  48)		::iron::Scene_obj::active->animations->push(hx::ObjectPtr<OBJ_>(this));
HXLINE(  49)		this->frameTime = ( (float)(::iron::Scene_obj::active->raw->frame_time) );
HXLINE(  50)		this->play(null(),null(),null(),null(),null());
            	}

Dynamic Animation_obj::__CreateEmpty() { return new Animation_obj; }

void *Animation_obj::_hx_vtable = 0;

Dynamic Animation_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Animation_obj > _hx_result = new Animation_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Animation_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1ad734d9;
}

void Animation_obj::play(::String __o_action, ::Dynamic onComplete,hx::Null< Float >  __o_blendTime,hx::Null< Float >  __o_speed,hx::Null< bool >  __o_loop){
::String action = __o_action.Default(HX_("",00,00,00,00));
Float blendTime = __o_blendTime.Default(((Float)0.0));
Float speed = __o_speed.Default(((Float)1.0));
bool loop = __o_loop.Default(true);
            	HX_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_53_play)
HXLINE(  54)		if ((blendTime > 0)) {
HXLINE(  55)			this->blendTime = ( (float)(blendTime) );
HXLINE(  56)			this->blendCurrent = ( (float)(((Float)0.0)) );
HXLINE(  57)			this->blendAction = this->action;
            		}
            		else {
HXLINE(  59)			this->frameIndex = -1;
            		}
HXLINE(  60)		this->action = action;
HXLINE(  61)		this->onComplete = onComplete;
HXLINE(  62)		this->speed = ( (float)(speed) );
HXLINE(  63)		this->loop = loop;
HXLINE(  64)		this->paused = false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Animation_obj,play,(void))

void Animation_obj::blend(::String action1,::String action2,float factor){
            	HX_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_67_blend)
HXLINE(  68)		this->blendTime = ( (float)(((Float)1.0)) );
HXLINE(  69)		this->blendFactor = factor;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Animation_obj,blend,(void))

void Animation_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_73_pause)
HXDLIN(  73)		this->paused = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Animation_obj,pause,(void))

void Animation_obj::resume(){
            	HX_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_77_resume)
HXDLIN(  77)		this->paused = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Animation_obj,resume,(void))

void Animation_obj::remove(){
            	HX_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_81_remove)
HXDLIN(  81)		::iron::Scene_obj::active->animations->remove(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Animation_obj,remove,(void))

void Animation_obj::update(float delta){
            	HX_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_84_update)
HXLINE(  85)		bool _hx_tmp;
HXDLIN(  85)		if (!(this->paused)) {
HXLINE(  85)			_hx_tmp = (this->speed == ((Float)0.0));
            		}
            		else {
HXLINE(  85)			_hx_tmp = true;
            		}
HXDLIN(  85)		if (_hx_tmp) {
HXLINE(  85)			return;
            		}
HXLINE(  86)		 ::iron::object::Animation _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  86)		_hx_tmp1->time = (_hx_tmp1->time + (delta * this->speed));
HXLINE(  88)		bool _hx_tmp2;
HXDLIN(  88)		if ((this->blendTime > 0)) {
HXLINE(  88)			_hx_tmp2 = (this->blendFactor == 0);
            		}
            		else {
HXLINE(  88)			_hx_tmp2 = false;
            		}
HXDLIN(  88)		if (_hx_tmp2) {
HXLINE(  89)			 ::iron::object::Animation _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  89)			_hx_tmp3->blendCurrent = (_hx_tmp3->blendCurrent + delta);
HXLINE(  90)			if ((this->blendCurrent >= this->blendTime)) {
HXLINE(  90)				this->blendTime = ( (float)(((Float)0.0)) );
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Animation_obj,update,(void))

bool Animation_obj::isTrackEnd( ::iron::data::TTrack track){
            	HX_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_95_isTrackEnd)
HXDLIN(  95)		if ((this->speed > 0)) {
HXLINE(  96)			int _hx_tmp = this->frameIndex;
HXDLIN(  96)			return (_hx_tmp >= (track->frames->self.length() - 1));
            		}
            		else {
HXLINE(  97)			return (this->frameIndex <= 0);
            		}
HXLINE(  95)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Animation_obj,isTrackEnd,return )

bool Animation_obj::checkFrameIndex( ::kha::arrays::Uint32ArrayPrivate frameValues){
            	HX_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_101_checkFrameIndex)
HXDLIN( 101)		if ((this->speed > 0)) {
HXLINE( 102)			int _hx_tmp = (this->frameIndex + 1);
HXDLIN( 102)			if ((_hx_tmp < frameValues->self.length())) {
HXLINE( 102)				float _hx_tmp1 = this->time;
HXDLIN( 102)				int _hx_tmp2 = frameValues->self.get((this->frameIndex + 1));
HXDLIN( 102)				return (_hx_tmp1 > (_hx_tmp2 * this->frameTime));
            			}
            			else {
HXLINE( 102)				return false;
            			}
            		}
            		else {
HXLINE( 103)			if (((this->frameIndex - 1) > -1)) {
HXLINE( 103)				float _hx_tmp3 = this->time;
HXDLIN( 103)				int _hx_tmp4 = frameValues->self.get((this->frameIndex - 1));
HXDLIN( 103)				return (_hx_tmp3 < (_hx_tmp4 * this->frameTime));
            			}
            			else {
HXLINE( 103)				return false;
            			}
            		}
HXLINE( 101)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Animation_obj,checkFrameIndex,return )

void Animation_obj::rewind( ::iron::data::TTrack track){
            	HX_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_106_rewind)
HXLINE( 107)		int _hx_tmp;
HXDLIN( 107)		if ((this->speed > 0)) {
HXLINE( 107)			_hx_tmp = 0;
            		}
            		else {
HXLINE( 107)			_hx_tmp = (track->frames->self.length() - 1);
            		}
HXDLIN( 107)		this->frameIndex = _hx_tmp;
HXLINE( 108)		int _hx_tmp1 = track->frames->self.get(this->frameIndex);
HXDLIN( 108)		this->time = (_hx_tmp1 * this->frameTime);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Animation_obj,rewind,(void))

void Animation_obj::updateTrack( ::iron::data::TAnimation anim){
            	HX_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_111_updateTrack)
HXLINE( 112)		if (hx::IsNull( anim )) {
HXLINE( 112)			return;
            		}
HXLINE( 114)		 ::iron::data::TTrack track = anim->tracks->__get(0).StaticCast<  ::iron::data::TTrack >();
HXLINE( 116)		if ((this->frameIndex == -1)) {
HXLINE( 116)			this->rewind(track);
            		}
HXLINE( 119)		int sign;
HXDLIN( 119)		if ((this->speed > 0)) {
HXLINE( 119)			sign = 1;
            		}
            		else {
HXLINE( 119)			sign = -1;
            		}
HXLINE( 120)		while(true){
HXLINE( 120)			 ::kha::arrays::Uint32ArrayPrivate frameValues = track->frames;
HXDLIN( 120)			bool _hx_tmp;
HXDLIN( 120)			if ((this->speed > 0)) {
HXLINE( 120)				int _hx_tmp1 = (this->frameIndex + 1);
HXDLIN( 120)				if ((_hx_tmp1 < frameValues->self.length())) {
HXLINE( 120)					float _hx_tmp2 = this->time;
HXDLIN( 120)					int _hx_tmp3 = frameValues->self.get((this->frameIndex + 1));
HXDLIN( 120)					_hx_tmp = (_hx_tmp2 > (_hx_tmp3 * this->frameTime));
            				}
            				else {
HXLINE( 120)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 120)				if (((this->frameIndex - 1) > -1)) {
HXLINE( 120)					float _hx_tmp4 = this->time;
HXDLIN( 120)					int _hx_tmp5 = frameValues->self.get((this->frameIndex - 1));
HXDLIN( 120)					_hx_tmp = (_hx_tmp4 < (_hx_tmp5 * this->frameTime));
            				}
            				else {
HXLINE( 120)					_hx_tmp = false;
            				}
            			}
HXDLIN( 120)			if (!(_hx_tmp)) {
HXLINE( 120)				goto _hx_goto_10;
            			}
HXDLIN( 120)			 ::iron::object::Animation _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 120)			_hx_tmp6->frameIndex = (_hx_tmp6->frameIndex + sign);
            		}
            		_hx_goto_10:;
HXLINE( 123)		bool _hx_tmp7;
HXDLIN( 123)		bool _hx_tmp8;
HXDLIN( 123)		if (hx::IsNotNull( this->markerEvents )) {
HXLINE( 123)			_hx_tmp8 = hx::IsNotNull( anim->marker_names );
            		}
            		else {
HXLINE( 123)			_hx_tmp8 = false;
            		}
HXDLIN( 123)		if (_hx_tmp8) {
HXLINE( 123)			_hx_tmp7 = (this->frameIndex != this->lastFrameIndex);
            		}
            		else {
HXLINE( 123)			_hx_tmp7 = false;
            		}
HXDLIN( 123)		if (_hx_tmp7) {
HXLINE( 124)			{
HXLINE( 124)				int _g1 = 0;
HXDLIN( 124)				int _g = anim->marker_frames->self.length();
HXDLIN( 124)				while((_g1 < _g)){
HXLINE( 124)					_g1 = (_g1 + 1);
HXDLIN( 124)					int i = (_g1 - 1);
HXLINE( 125)					int _hx_tmp9 = this->frameIndex;
HXDLIN( 125)					if ((_hx_tmp9 == anim->marker_frames->self.get(i))) {
HXLINE( 126)						::Array< ::Dynamic> ar = ( (::Array< ::Dynamic>)(this->markerEvents->get(anim->marker_names->__get(i))) );
HXLINE( 127)						{
HXLINE( 127)							int _g2 = 0;
HXDLIN( 127)							while((_g2 < ar->length)){
HXLINE( 127)								 ::Dynamic f = ar->__get(_g2);
HXDLIN( 127)								_g2 = (_g2 + 1);
HXDLIN( 127)								f();
            							}
            						}
            					}
            				}
            			}
HXLINE( 130)			this->lastFrameIndex = this->frameIndex;
            		}
HXLINE( 134)		if (this->isTrackEnd(track)) {
HXLINE( 135)			bool _hx_tmp10;
HXDLIN( 135)			if (!(this->loop)) {
HXLINE( 135)				_hx_tmp10 = (this->blendTime > 0);
            			}
            			else {
HXLINE( 135)				_hx_tmp10 = true;
            			}
HXDLIN( 135)			if (_hx_tmp10) {
HXLINE( 135)				this->rewind(track);
            			}
            			else {
HXLINE( 136)				 ::iron::object::Animation _hx_tmp11 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 136)				_hx_tmp11->frameIndex = (_hx_tmp11->frameIndex - sign);
HXDLIN( 136)				this->paused = true;
            			}
HXLINE( 137)			bool _hx_tmp12;
HXDLIN( 137)			if (hx::IsNotNull( this->onComplete )) {
HXLINE( 137)				_hx_tmp12 = (this->blendTime == 0);
            			}
            			else {
HXLINE( 137)				_hx_tmp12 = false;
            			}
HXDLIN( 137)			if (_hx_tmp12) {
HXLINE( 137)				this->onComplete();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Animation_obj,updateTrack,(void))

void Animation_obj::updateAnimSampled( ::iron::data::TAnimation anim, ::iron::math::Mat4 m){
            	HX_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_141_updateAnimSampled)
HXLINE( 142)		if (hx::IsNull( anim )) {
HXLINE( 142)			return;
            		}
HXLINE( 143)		 ::iron::data::TTrack track = anim->tracks->__get(0).StaticCast<  ::iron::data::TTrack >();
HXLINE( 144)		int sign;
HXDLIN( 144)		if ((this->speed > 0)) {
HXLINE( 144)			sign = 1;
            		}
            		else {
HXLINE( 144)			sign = -1;
            		}
HXLINE( 146)		float t = this->time;
HXLINE( 147)		int ti = this->frameIndex;
HXLINE( 148)		int t1 = track->frames->self.get(ti);
HXDLIN( 148)		float t11 = (t1 * this->frameTime);
HXLINE( 149)		 uint32array this1 = track->frames->self;
HXDLIN( 149)		int t2 = this1.get((ti + sign));
HXDLIN( 149)		float t21 = (t2 * this->frameTime);
HXLINE( 150)		float s = ( (float)((( (Float)((t - t11)) ) / ( (Float)((t21 - t11)) ))) );
HXLINE( 152)		{
HXLINE( 152)			 ::iron::math::Mat4 _this = ::iron::object::Animation_obj::m1;
HXDLIN( 152)			 ::kha::arrays::Float32ArrayPrivate a = track->values;
HXDLIN( 152)			int offset = (ti * 16);
HXDLIN( 152)			{
HXLINE( 152)				float f = a->self.get(offset);
HXDLIN( 152)				_this->self->_00 = f;
            			}
HXDLIN( 152)			{
HXLINE( 152)				 float32array a1 = a->self;
HXDLIN( 152)				float f1 = a1.get((1 + offset));
HXDLIN( 152)				_this->self->_10 = f1;
            			}
HXDLIN( 152)			{
HXLINE( 152)				 float32array a2 = a->self;
HXDLIN( 152)				float f2 = a2.get((2 + offset));
HXDLIN( 152)				_this->self->_20 = f2;
            			}
HXDLIN( 152)			{
HXLINE( 152)				 float32array a3 = a->self;
HXDLIN( 152)				float f3 = a3.get((3 + offset));
HXDLIN( 152)				_this->self->_30 = f3;
            			}
HXDLIN( 152)			{
HXLINE( 152)				 float32array a4 = a->self;
HXDLIN( 152)				float f4 = a4.get((4 + offset));
HXDLIN( 152)				_this->self->_01 = f4;
            			}
HXDLIN( 152)			{
HXLINE( 152)				 float32array a5 = a->self;
HXDLIN( 152)				float f5 = a5.get((5 + offset));
HXDLIN( 152)				_this->self->_11 = f5;
            			}
HXDLIN( 152)			{
HXLINE( 152)				 float32array a6 = a->self;
HXDLIN( 152)				float f6 = a6.get((6 + offset));
HXDLIN( 152)				_this->self->_21 = f6;
            			}
HXDLIN( 152)			{
HXLINE( 152)				 float32array a7 = a->self;
HXDLIN( 152)				float f7 = a7.get((7 + offset));
HXDLIN( 152)				_this->self->_31 = f7;
            			}
HXDLIN( 152)			{
HXLINE( 152)				 float32array a8 = a->self;
HXDLIN( 152)				float f8 = a8.get((8 + offset));
HXDLIN( 152)				_this->self->_02 = f8;
            			}
HXDLIN( 152)			{
HXLINE( 152)				 float32array a9 = a->self;
HXDLIN( 152)				float f9 = a9.get((9 + offset));
HXDLIN( 152)				_this->self->_12 = f9;
            			}
HXDLIN( 152)			{
HXLINE( 152)				 float32array a10 = a->self;
HXDLIN( 152)				float f10 = a10.get((10 + offset));
HXDLIN( 152)				_this->self->_22 = f10;
            			}
HXDLIN( 152)			{
HXLINE( 152)				 float32array a11 = a->self;
HXDLIN( 152)				float f11 = a11.get((11 + offset));
HXDLIN( 152)				_this->self->_32 = f11;
            			}
HXDLIN( 152)			{
HXLINE( 152)				 float32array a12 = a->self;
HXDLIN( 152)				float f12 = a12.get((12 + offset));
HXDLIN( 152)				_this->self->_03 = f12;
            			}
HXDLIN( 152)			{
HXLINE( 152)				 float32array a13 = a->self;
HXDLIN( 152)				float f13 = a13.get((13 + offset));
HXDLIN( 152)				_this->self->_13 = f13;
            			}
HXDLIN( 152)			{
HXLINE( 152)				 float32array a14 = a->self;
HXDLIN( 152)				float f14 = a14.get((14 + offset));
HXDLIN( 152)				_this->self->_23 = f14;
            			}
HXDLIN( 152)			{
HXLINE( 152)				 float32array a15 = a->self;
HXDLIN( 152)				float f15 = a15.get((15 + offset));
HXDLIN( 152)				_this->self->_33 = f15;
            			}
            		}
HXLINE( 153)		{
HXLINE( 153)			 ::iron::math::Mat4 _this1 = ::iron::object::Animation_obj::m2;
HXDLIN( 153)			 ::kha::arrays::Float32ArrayPrivate a16 = track->values;
HXDLIN( 153)			int offset1 = ((ti + sign) * 16);
HXDLIN( 153)			{
HXLINE( 153)				float f16 = a16->self.get(offset1);
HXDLIN( 153)				_this1->self->_00 = f16;
            			}
HXDLIN( 153)			{
HXLINE( 153)				 float32array a17 = a16->self;
HXDLIN( 153)				float f17 = a17.get((1 + offset1));
HXDLIN( 153)				_this1->self->_10 = f17;
            			}
HXDLIN( 153)			{
HXLINE( 153)				 float32array a18 = a16->self;
HXDLIN( 153)				float f18 = a18.get((2 + offset1));
HXDLIN( 153)				_this1->self->_20 = f18;
            			}
HXDLIN( 153)			{
HXLINE( 153)				 float32array a19 = a16->self;
HXDLIN( 153)				float f19 = a19.get((3 + offset1));
HXDLIN( 153)				_this1->self->_30 = f19;
            			}
HXDLIN( 153)			{
HXLINE( 153)				 float32array a20 = a16->self;
HXDLIN( 153)				float f20 = a20.get((4 + offset1));
HXDLIN( 153)				_this1->self->_01 = f20;
            			}
HXDLIN( 153)			{
HXLINE( 153)				 float32array a21 = a16->self;
HXDLIN( 153)				float f21 = a21.get((5 + offset1));
HXDLIN( 153)				_this1->self->_11 = f21;
            			}
HXDLIN( 153)			{
HXLINE( 153)				 float32array a22 = a16->self;
HXDLIN( 153)				float f22 = a22.get((6 + offset1));
HXDLIN( 153)				_this1->self->_21 = f22;
            			}
HXDLIN( 153)			{
HXLINE( 153)				 float32array a23 = a16->self;
HXDLIN( 153)				float f23 = a23.get((7 + offset1));
HXDLIN( 153)				_this1->self->_31 = f23;
            			}
HXDLIN( 153)			{
HXLINE( 153)				 float32array a24 = a16->self;
HXDLIN( 153)				float f24 = a24.get((8 + offset1));
HXDLIN( 153)				_this1->self->_02 = f24;
            			}
HXDLIN( 153)			{
HXLINE( 153)				 float32array a25 = a16->self;
HXDLIN( 153)				float f25 = a25.get((9 + offset1));
HXDLIN( 153)				_this1->self->_12 = f25;
            			}
HXDLIN( 153)			{
HXLINE( 153)				 float32array a26 = a16->self;
HXDLIN( 153)				float f26 = a26.get((10 + offset1));
HXDLIN( 153)				_this1->self->_22 = f26;
            			}
HXDLIN( 153)			{
HXLINE( 153)				 float32array a27 = a16->self;
HXDLIN( 153)				float f27 = a27.get((11 + offset1));
HXDLIN( 153)				_this1->self->_32 = f27;
            			}
HXDLIN( 153)			{
HXLINE( 153)				 float32array a28 = a16->self;
HXDLIN( 153)				float f28 = a28.get((12 + offset1));
HXDLIN( 153)				_this1->self->_03 = f28;
            			}
HXDLIN( 153)			{
HXLINE( 153)				 float32array a29 = a16->self;
HXDLIN( 153)				float f29 = a29.get((13 + offset1));
HXDLIN( 153)				_this1->self->_13 = f29;
            			}
HXDLIN( 153)			{
HXLINE( 153)				 float32array a30 = a16->self;
HXDLIN( 153)				float f30 = a30.get((14 + offset1));
HXDLIN( 153)				_this1->self->_23 = f30;
            			}
HXDLIN( 153)			{
HXLINE( 153)				 float32array a31 = a16->self;
HXDLIN( 153)				float f31 = a31.get((15 + offset1));
HXDLIN( 153)				_this1->self->_33 = f31;
            			}
            		}
HXLINE( 156)		{
HXLINE( 156)			 ::iron::math::Mat4 _this2 = ::iron::object::Animation_obj::m1;
HXDLIN( 156)			 ::iron::math::Vec4 loc = ::iron::object::Animation_obj::vpos;
HXDLIN( 156)			 ::iron::math::Quat quat = ::iron::object::Animation_obj::q1;
HXDLIN( 156)			 ::iron::math::Vec4 scale = ::iron::object::Animation_obj::vscl;
HXDLIN( 156)			loc->x = _this2->self->_30;
HXDLIN( 156)			loc->y = _this2->self->_31;
HXDLIN( 156)			loc->z = _this2->self->_32;
HXDLIN( 156)			 ::iron::math::Vec4 _this3 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 156)			_this3->x = _this2->self->_00;
HXDLIN( 156)			_this3->y = _this2->self->_01;
HXDLIN( 156)			_this3->z = _this2->self->_02;
HXDLIN( 156)			_this3->w = ( (float)(((Float)1.0)) );
HXDLIN( 156)			 ::iron::math::Vec4 _this4 = _this3;
HXDLIN( 156)			float v = (_this4->x * _this4->x);
HXDLIN( 156)			float v1 = (v + (_this4->y * _this4->y));
HXDLIN( 156)			scale->x = ( (float)(::Math_obj::sqrt(( (Float)((v1 + (_this4->z * _this4->z))) ))) );
HXDLIN( 156)			 ::iron::math::Vec4 _this5 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 156)			_this5->x = _this2->self->_10;
HXDLIN( 156)			_this5->y = _this2->self->_11;
HXDLIN( 156)			_this5->z = _this2->self->_12;
HXDLIN( 156)			_this5->w = ( (float)(((Float)1.0)) );
HXDLIN( 156)			 ::iron::math::Vec4 _this6 = _this5;
HXDLIN( 156)			float v2 = (_this6->x * _this6->x);
HXDLIN( 156)			float v3 = (v2 + (_this6->y * _this6->y));
HXDLIN( 156)			scale->y = ( (float)(::Math_obj::sqrt(( (Float)((v3 + (_this6->z * _this6->z))) ))) );
HXDLIN( 156)			 ::iron::math::Vec4 _this7 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 156)			_this7->x = _this2->self->_20;
HXDLIN( 156)			_this7->y = _this2->self->_21;
HXDLIN( 156)			_this7->z = _this2->self->_22;
HXDLIN( 156)			_this7->w = ( (float)(((Float)1.0)) );
HXDLIN( 156)			 ::iron::math::Vec4 _this8 = _this7;
HXDLIN( 156)			float v4 = (_this8->x * _this8->x);
HXDLIN( 156)			float v5 = (v4 + (_this8->y * _this8->y));
HXDLIN( 156)			scale->z = ( (float)(::Math_obj::sqrt(( (Float)((v5 + (_this8->z * _this8->z))) ))) );
HXDLIN( 156)			 ::kha::math::FastMatrix4 _this9 = _this2->self;
HXDLIN( 156)			float m3 = _this9->_12;
HXDLIN( 156)			float m4 = _this9->_22;
HXDLIN( 156)			float m5 = _this9->_32;
HXDLIN( 156)			float m6 = _this9->_13;
HXDLIN( 156)			float m7 = _this9->_23;
HXDLIN( 156)			float m8 = _this9->_33;
HXDLIN( 156)			float _this10 = _this9->_11;
HXDLIN( 156)			float c00 = (_this10 * ((m4 * m8) - (m5 * m7)));
HXDLIN( 156)			float _this11 = _this9->_21;
HXDLIN( 156)			float c001 = (c00 - (_this11 * ((m3 * m8) - (m5 * m6))));
HXDLIN( 156)			float _this12 = _this9->_31;
HXDLIN( 156)			float c002 = (c001 + (_this12 * ((m3 * m7) - (m4 * m6))));
HXDLIN( 156)			float m31 = _this9->_12;
HXDLIN( 156)			float m41 = _this9->_22;
HXDLIN( 156)			float m51 = _this9->_32;
HXDLIN( 156)			float m61 = _this9->_13;
HXDLIN( 156)			float m71 = _this9->_23;
HXDLIN( 156)			float m81 = _this9->_33;
HXDLIN( 156)			float _this13 = _this9->_10;
HXDLIN( 156)			float c01 = (_this13 * ((m41 * m81) - (m51 * m71)));
HXDLIN( 156)			float _this14 = _this9->_20;
HXDLIN( 156)			float c011 = (c01 - (_this14 * ((m31 * m81) - (m51 * m61))));
HXDLIN( 156)			float _this15 = _this9->_30;
HXDLIN( 156)			float c012 = (c011 + (_this15 * ((m31 * m71) - (m41 * m61))));
HXDLIN( 156)			float m32 = _this9->_11;
HXDLIN( 156)			float m42 = _this9->_21;
HXDLIN( 156)			float m52 = _this9->_31;
HXDLIN( 156)			float m62 = _this9->_13;
HXDLIN( 156)			float m72 = _this9->_23;
HXDLIN( 156)			float m82 = _this9->_33;
HXDLIN( 156)			float _this16 = _this9->_10;
HXDLIN( 156)			float c02 = (_this16 * ((m42 * m82) - (m52 * m72)));
HXDLIN( 156)			float _this17 = _this9->_20;
HXDLIN( 156)			float c021 = (c02 - (_this17 * ((m32 * m82) - (m52 * m62))));
HXDLIN( 156)			float _this18 = _this9->_30;
HXDLIN( 156)			float c022 = (c021 + (_this18 * ((m32 * m72) - (m42 * m62))));
HXDLIN( 156)			float m33 = _this9->_11;
HXDLIN( 156)			float m43 = _this9->_21;
HXDLIN( 156)			float m53 = _this9->_31;
HXDLIN( 156)			float m63 = _this9->_12;
HXDLIN( 156)			float m73 = _this9->_22;
HXDLIN( 156)			float m83 = _this9->_32;
HXDLIN( 156)			float _this19 = _this9->_10;
HXDLIN( 156)			float c03 = (_this19 * ((m43 * m83) - (m53 * m73)));
HXDLIN( 156)			float _this20 = _this9->_20;
HXDLIN( 156)			float c031 = (c03 - (_this20 * ((m33 * m83) - (m53 * m63))));
HXDLIN( 156)			float _this21 = _this9->_30;
HXDLIN( 156)			float c032 = (c031 + (_this21 * ((m33 * m73) - (m43 * m63))));
HXDLIN( 156)			float _hx_tmp = (_this9->_00 * c002);
HXDLIN( 156)			float _hx_tmp1 = (_hx_tmp - (_this9->_01 * c012));
HXDLIN( 156)			float _hx_tmp2 = (_hx_tmp1 + (_this9->_02 * c022));
HXDLIN( 156)			if (((_hx_tmp2 - (_this9->_03 * c032)) < ((Float)0.0))) {
HXLINE( 156)				scale->x = -(scale->x);
            			}
HXDLIN( 156)			Float invs = (((Float)1.0) / ( (Float)(scale->x) ));
HXDLIN( 156)			::iron::math::Mat4_obj::helpMat->self->_00 = ( (float)((_this2->self->_00 * invs)) );
HXDLIN( 156)			::iron::math::Mat4_obj::helpMat->self->_01 = ( (float)((_this2->self->_01 * invs)) );
HXDLIN( 156)			::iron::math::Mat4_obj::helpMat->self->_02 = ( (float)((_this2->self->_02 * invs)) );
HXDLIN( 156)			invs = (((Float)1.0) / ( (Float)(scale->y) ));
HXDLIN( 156)			::iron::math::Mat4_obj::helpMat->self->_10 = ( (float)((_this2->self->_10 * invs)) );
HXDLIN( 156)			::iron::math::Mat4_obj::helpMat->self->_11 = ( (float)((_this2->self->_11 * invs)) );
HXDLIN( 156)			::iron::math::Mat4_obj::helpMat->self->_12 = ( (float)((_this2->self->_12 * invs)) );
HXDLIN( 156)			invs = (((Float)1.0) / ( (Float)(scale->z) ));
HXDLIN( 156)			::iron::math::Mat4_obj::helpMat->self->_20 = ( (float)((_this2->self->_20 * invs)) );
HXDLIN( 156)			::iron::math::Mat4_obj::helpMat->self->_21 = ( (float)((_this2->self->_21 * invs)) );
HXDLIN( 156)			::iron::math::Mat4_obj::helpMat->self->_22 = ( (float)((_this2->self->_22 * invs)) );
HXDLIN( 156)			{
HXLINE( 156)				 ::iron::math::Mat4 m1 = ::iron::math::Mat4_obj::helpMat;
HXDLIN( 156)				float m11 = m1->self->_00;
HXDLIN( 156)				float m12 = m1->self->_10;
HXDLIN( 156)				float m13 = m1->self->_20;
HXDLIN( 156)				float m21 = m1->self->_01;
HXDLIN( 156)				float m22 = m1->self->_11;
HXDLIN( 156)				float m23 = m1->self->_21;
HXDLIN( 156)				float m311 = m1->self->_02;
HXDLIN( 156)				float m321 = m1->self->_12;
HXDLIN( 156)				float m331 = m1->self->_22;
HXDLIN( 156)				float tr = ((m11 + m22) + m331);
HXDLIN( 156)				Float s1 = ((Float)0.0);
HXDLIN( 156)				if ((tr > 0)) {
HXLINE( 156)					s1 = (((Float)0.5) / ::Math_obj::sqrt((tr + ((Float)1.0))));
HXDLIN( 156)					quat->w = ( (float)((((Float)0.25) / s1)) );
HXDLIN( 156)					quat->x = ( (float)(((m321 - m23) * s1)) );
HXDLIN( 156)					quat->y = ( (float)(((m13 - m311) * s1)) );
HXDLIN( 156)					quat->z = ( (float)(((m21 - m12) * s1)) );
            				}
            				else {
HXLINE( 156)					bool _hx_tmp3;
HXDLIN( 156)					if ((m11 > m22)) {
HXLINE( 156)						_hx_tmp3 = (m11 > m331);
            					}
            					else {
HXLINE( 156)						_hx_tmp3 = false;
            					}
HXDLIN( 156)					if (_hx_tmp3) {
HXLINE( 156)						s1 = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m11) - m22) - m331)));
HXDLIN( 156)						quat->w = ( (float)((( (Float)((m321 - m23)) ) / s1)) );
HXDLIN( 156)						quat->x = ( (float)((((Float)0.25) * s1)) );
HXDLIN( 156)						quat->y = ( (float)((( (Float)((m12 + m21)) ) / s1)) );
HXDLIN( 156)						quat->z = ( (float)((( (Float)((m13 + m311)) ) / s1)) );
            					}
            					else {
HXLINE( 156)						if ((m22 > m331)) {
HXLINE( 156)							s1 = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m22) - m11) - m331)));
HXDLIN( 156)							quat->w = ( (float)((( (Float)((m13 - m311)) ) / s1)) );
HXDLIN( 156)							quat->x = ( (float)((( (Float)((m12 + m21)) ) / s1)) );
HXDLIN( 156)							quat->y = ( (float)((((Float)0.25) * s1)) );
HXDLIN( 156)							quat->z = ( (float)((( (Float)((m23 + m321)) ) / s1)) );
            						}
            						else {
HXLINE( 156)							s1 = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m331) - m11) - m22)));
HXDLIN( 156)							quat->w = ( (float)((( (Float)((m21 - m12)) ) / s1)) );
HXDLIN( 156)							quat->x = ( (float)((( (Float)((m13 + m311)) ) / s1)) );
HXDLIN( 156)							quat->y = ( (float)((( (Float)((m23 + m321)) ) / s1)) );
HXDLIN( 156)							quat->z = ( (float)((((Float)0.25) * s1)) );
            						}
            					}
            				}
            			}
            		}
HXLINE( 157)		{
HXLINE( 157)			 ::iron::math::Mat4 _this22 = ::iron::object::Animation_obj::m2;
HXDLIN( 157)			 ::iron::math::Vec4 loc1 = ::iron::object::Animation_obj::vpos2;
HXDLIN( 157)			 ::iron::math::Quat quat1 = ::iron::object::Animation_obj::q2;
HXDLIN( 157)			 ::iron::math::Vec4 scale1 = ::iron::object::Animation_obj::vscl2;
HXDLIN( 157)			loc1->x = _this22->self->_30;
HXDLIN( 157)			loc1->y = _this22->self->_31;
HXDLIN( 157)			loc1->z = _this22->self->_32;
HXDLIN( 157)			 ::iron::math::Vec4 _this23 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 157)			_this23->x = _this22->self->_00;
HXDLIN( 157)			_this23->y = _this22->self->_01;
HXDLIN( 157)			_this23->z = _this22->self->_02;
HXDLIN( 157)			_this23->w = ( (float)(((Float)1.0)) );
HXDLIN( 157)			 ::iron::math::Vec4 _this24 = _this23;
HXDLIN( 157)			float v6 = (_this24->x * _this24->x);
HXDLIN( 157)			float v7 = (v6 + (_this24->y * _this24->y));
HXDLIN( 157)			scale1->x = ( (float)(::Math_obj::sqrt(( (Float)((v7 + (_this24->z * _this24->z))) ))) );
HXDLIN( 157)			 ::iron::math::Vec4 _this25 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 157)			_this25->x = _this22->self->_10;
HXDLIN( 157)			_this25->y = _this22->self->_11;
HXDLIN( 157)			_this25->z = _this22->self->_12;
HXDLIN( 157)			_this25->w = ( (float)(((Float)1.0)) );
HXDLIN( 157)			 ::iron::math::Vec4 _this26 = _this25;
HXDLIN( 157)			float v8 = (_this26->x * _this26->x);
HXDLIN( 157)			float v9 = (v8 + (_this26->y * _this26->y));
HXDLIN( 157)			scale1->y = ( (float)(::Math_obj::sqrt(( (Float)((v9 + (_this26->z * _this26->z))) ))) );
HXDLIN( 157)			 ::iron::math::Vec4 _this27 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 157)			_this27->x = _this22->self->_20;
HXDLIN( 157)			_this27->y = _this22->self->_21;
HXDLIN( 157)			_this27->z = _this22->self->_22;
HXDLIN( 157)			_this27->w = ( (float)(((Float)1.0)) );
HXDLIN( 157)			 ::iron::math::Vec4 _this28 = _this27;
HXDLIN( 157)			float v10 = (_this28->x * _this28->x);
HXDLIN( 157)			float v11 = (v10 + (_this28->y * _this28->y));
HXDLIN( 157)			scale1->z = ( (float)(::Math_obj::sqrt(( (Float)((v11 + (_this28->z * _this28->z))) ))) );
HXDLIN( 157)			 ::kha::math::FastMatrix4 _this29 = _this22->self;
HXDLIN( 157)			float m34 = _this29->_12;
HXDLIN( 157)			float m44 = _this29->_22;
HXDLIN( 157)			float m54 = _this29->_32;
HXDLIN( 157)			float m64 = _this29->_13;
HXDLIN( 157)			float m74 = _this29->_23;
HXDLIN( 157)			float m84 = _this29->_33;
HXDLIN( 157)			float _this30 = _this29->_11;
HXDLIN( 157)			float c003 = (_this30 * ((m44 * m84) - (m54 * m74)));
HXDLIN( 157)			float _this31 = _this29->_21;
HXDLIN( 157)			float c004 = (c003 - (_this31 * ((m34 * m84) - (m54 * m64))));
HXDLIN( 157)			float _this32 = _this29->_31;
HXDLIN( 157)			float c005 = (c004 + (_this32 * ((m34 * m74) - (m44 * m64))));
HXDLIN( 157)			float m35 = _this29->_12;
HXDLIN( 157)			float m45 = _this29->_22;
HXDLIN( 157)			float m55 = _this29->_32;
HXDLIN( 157)			float m65 = _this29->_13;
HXDLIN( 157)			float m75 = _this29->_23;
HXDLIN( 157)			float m85 = _this29->_33;
HXDLIN( 157)			float _this33 = _this29->_10;
HXDLIN( 157)			float c013 = (_this33 * ((m45 * m85) - (m55 * m75)));
HXDLIN( 157)			float _this34 = _this29->_20;
HXDLIN( 157)			float c014 = (c013 - (_this34 * ((m35 * m85) - (m55 * m65))));
HXDLIN( 157)			float _this35 = _this29->_30;
HXDLIN( 157)			float c015 = (c014 + (_this35 * ((m35 * m75) - (m45 * m65))));
HXDLIN( 157)			float m36 = _this29->_11;
HXDLIN( 157)			float m46 = _this29->_21;
HXDLIN( 157)			float m56 = _this29->_31;
HXDLIN( 157)			float m66 = _this29->_13;
HXDLIN( 157)			float m76 = _this29->_23;
HXDLIN( 157)			float m86 = _this29->_33;
HXDLIN( 157)			float _this36 = _this29->_10;
HXDLIN( 157)			float c023 = (_this36 * ((m46 * m86) - (m56 * m76)));
HXDLIN( 157)			float _this37 = _this29->_20;
HXDLIN( 157)			float c024 = (c023 - (_this37 * ((m36 * m86) - (m56 * m66))));
HXDLIN( 157)			float _this38 = _this29->_30;
HXDLIN( 157)			float c025 = (c024 + (_this38 * ((m36 * m76) - (m46 * m66))));
HXDLIN( 157)			float m37 = _this29->_11;
HXDLIN( 157)			float m47 = _this29->_21;
HXDLIN( 157)			float m57 = _this29->_31;
HXDLIN( 157)			float m67 = _this29->_12;
HXDLIN( 157)			float m77 = _this29->_22;
HXDLIN( 157)			float m87 = _this29->_32;
HXDLIN( 157)			float _this39 = _this29->_10;
HXDLIN( 157)			float c033 = (_this39 * ((m47 * m87) - (m57 * m77)));
HXDLIN( 157)			float _this40 = _this29->_20;
HXDLIN( 157)			float c034 = (c033 - (_this40 * ((m37 * m87) - (m57 * m67))));
HXDLIN( 157)			float _this41 = _this29->_30;
HXDLIN( 157)			float c035 = (c034 + (_this41 * ((m37 * m77) - (m47 * m67))));
HXDLIN( 157)			float _hx_tmp4 = (_this29->_00 * c005);
HXDLIN( 157)			float _hx_tmp5 = (_hx_tmp4 - (_this29->_01 * c015));
HXDLIN( 157)			float _hx_tmp6 = (_hx_tmp5 + (_this29->_02 * c025));
HXDLIN( 157)			if (((_hx_tmp6 - (_this29->_03 * c035)) < ((Float)0.0))) {
HXLINE( 157)				scale1->x = -(scale1->x);
            			}
HXDLIN( 157)			Float invs1 = (((Float)1.0) / ( (Float)(scale1->x) ));
HXDLIN( 157)			::iron::math::Mat4_obj::helpMat->self->_00 = ( (float)((_this22->self->_00 * invs1)) );
HXDLIN( 157)			::iron::math::Mat4_obj::helpMat->self->_01 = ( (float)((_this22->self->_01 * invs1)) );
HXDLIN( 157)			::iron::math::Mat4_obj::helpMat->self->_02 = ( (float)((_this22->self->_02 * invs1)) );
HXDLIN( 157)			invs1 = (((Float)1.0) / ( (Float)(scale1->y) ));
HXDLIN( 157)			::iron::math::Mat4_obj::helpMat->self->_10 = ( (float)((_this22->self->_10 * invs1)) );
HXDLIN( 157)			::iron::math::Mat4_obj::helpMat->self->_11 = ( (float)((_this22->self->_11 * invs1)) );
HXDLIN( 157)			::iron::math::Mat4_obj::helpMat->self->_12 = ( (float)((_this22->self->_12 * invs1)) );
HXDLIN( 157)			invs1 = (((Float)1.0) / ( (Float)(scale1->z) ));
HXDLIN( 157)			::iron::math::Mat4_obj::helpMat->self->_20 = ( (float)((_this22->self->_20 * invs1)) );
HXDLIN( 157)			::iron::math::Mat4_obj::helpMat->self->_21 = ( (float)((_this22->self->_21 * invs1)) );
HXDLIN( 157)			::iron::math::Mat4_obj::helpMat->self->_22 = ( (float)((_this22->self->_22 * invs1)) );
HXDLIN( 157)			{
HXLINE( 157)				 ::iron::math::Mat4 m2 = ::iron::math::Mat4_obj::helpMat;
HXDLIN( 157)				float m111 = m2->self->_00;
HXDLIN( 157)				float m121 = m2->self->_10;
HXDLIN( 157)				float m131 = m2->self->_20;
HXDLIN( 157)				float m211 = m2->self->_01;
HXDLIN( 157)				float m221 = m2->self->_11;
HXDLIN( 157)				float m231 = m2->self->_21;
HXDLIN( 157)				float m312 = m2->self->_02;
HXDLIN( 157)				float m322 = m2->self->_12;
HXDLIN( 157)				float m332 = m2->self->_22;
HXDLIN( 157)				float tr1 = ((m111 + m221) + m332);
HXDLIN( 157)				Float s2 = ((Float)0.0);
HXDLIN( 157)				if ((tr1 > 0)) {
HXLINE( 157)					s2 = (((Float)0.5) / ::Math_obj::sqrt((tr1 + ((Float)1.0))));
HXDLIN( 157)					quat1->w = ( (float)((((Float)0.25) / s2)) );
HXDLIN( 157)					quat1->x = ( (float)(((m322 - m231) * s2)) );
HXDLIN( 157)					quat1->y = ( (float)(((m131 - m312) * s2)) );
HXDLIN( 157)					quat1->z = ( (float)(((m211 - m121) * s2)) );
            				}
            				else {
HXLINE( 157)					bool _hx_tmp7;
HXDLIN( 157)					if ((m111 > m221)) {
HXLINE( 157)						_hx_tmp7 = (m111 > m332);
            					}
            					else {
HXLINE( 157)						_hx_tmp7 = false;
            					}
HXDLIN( 157)					if (_hx_tmp7) {
HXLINE( 157)						s2 = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m111) - m221) - m332)));
HXDLIN( 157)						quat1->w = ( (float)((( (Float)((m322 - m231)) ) / s2)) );
HXDLIN( 157)						quat1->x = ( (float)((((Float)0.25) * s2)) );
HXDLIN( 157)						quat1->y = ( (float)((( (Float)((m121 + m211)) ) / s2)) );
HXDLIN( 157)						quat1->z = ( (float)((( (Float)((m131 + m312)) ) / s2)) );
            					}
            					else {
HXLINE( 157)						if ((m221 > m332)) {
HXLINE( 157)							s2 = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m221) - m111) - m332)));
HXDLIN( 157)							quat1->w = ( (float)((( (Float)((m131 - m312)) ) / s2)) );
HXDLIN( 157)							quat1->x = ( (float)((( (Float)((m121 + m211)) ) / s2)) );
HXDLIN( 157)							quat1->y = ( (float)((((Float)0.25) * s2)) );
HXDLIN( 157)							quat1->z = ( (float)((( (Float)((m231 + m322)) ) / s2)) );
            						}
            						else {
HXLINE( 157)							s2 = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m332) - m111) - m221)));
HXDLIN( 157)							quat1->w = ( (float)((( (Float)((m211 - m121)) ) / s2)) );
HXDLIN( 157)							quat1->x = ( (float)((( (Float)((m131 + m312)) ) / s2)) );
HXDLIN( 157)							quat1->y = ( (float)((( (Float)((m231 + m322)) ) / s2)) );
HXDLIN( 157)							quat1->z = ( (float)((((Float)0.25) * s2)) );
            						}
            					}
            				}
            			}
            		}
HXLINE( 160)		{
HXLINE( 160)			 ::iron::math::Vec4 _this42 = ::iron::object::Animation_obj::vp;
HXDLIN( 160)			 ::iron::math::Vec4 from = ::iron::object::Animation_obj::vpos;
HXDLIN( 160)			 ::iron::math::Vec4 to = ::iron::object::Animation_obj::vpos2;
HXDLIN( 160)			float from1 = from->x;
HXDLIN( 160)			_this42->x = (from1 + ((to->x - from->x) * s));
HXDLIN( 160)			float from2 = from->y;
HXDLIN( 160)			_this42->y = (from2 + ((to->y - from->y) * s));
HXDLIN( 160)			float from3 = from->z;
HXDLIN( 160)			_this42->z = (from3 + ((to->z - from->z) * s));
            		}
HXLINE( 161)		{
HXLINE( 161)			 ::iron::math::Vec4 _this43 = ::iron::object::Animation_obj::vs;
HXDLIN( 161)			 ::iron::math::Vec4 from4 = ::iron::object::Animation_obj::vscl;
HXDLIN( 161)			 ::iron::math::Vec4 to1 = ::iron::object::Animation_obj::vscl2;
HXDLIN( 161)			float from5 = from4->x;
HXDLIN( 161)			_this43->x = (from5 + ((to1->x - from4->x) * s));
HXDLIN( 161)			float from6 = from4->y;
HXDLIN( 161)			_this43->y = (from6 + ((to1->y - from4->y) * s));
HXDLIN( 161)			float from7 = from4->z;
HXDLIN( 161)			_this43->z = (from7 + ((to1->z - from4->z) * s));
            		}
HXLINE( 162)		{
HXLINE( 162)			 ::iron::math::Quat _this44 = ::iron::object::Animation_obj::q3;
HXDLIN( 162)			 ::iron::math::Quat from8 = ::iron::object::Animation_obj::q1;
HXDLIN( 162)			 ::iron::math::Quat to2 = ::iron::object::Animation_obj::q2;
HXDLIN( 162)			float fromx = from8->x;
HXDLIN( 162)			float fromy = from8->y;
HXDLIN( 162)			float fromz = from8->z;
HXDLIN( 162)			float fromw = from8->w;
HXDLIN( 162)			float dot = (from8->x * to2->x);
HXDLIN( 162)			float dot1 = (dot + (from8->y * to2->y));
HXDLIN( 162)			float dot2 = (dot1 + (from8->z * to2->z));
HXDLIN( 162)			float dot3 = (dot2 + (from8->w * to2->w));
HXDLIN( 162)			if ((dot3 < ((Float)0.0))) {
HXLINE( 162)				fromx = -(fromx);
HXDLIN( 162)				fromy = -(fromy);
HXDLIN( 162)				fromz = -(fromz);
HXDLIN( 162)				fromw = -(fromw);
            			}
HXDLIN( 162)			_this44->x = (fromx + ((to2->x - fromx) * s));
HXDLIN( 162)			_this44->y = (fromy + ((to2->y - fromy) * s));
HXDLIN( 162)			_this44->z = (fromz + ((to2->z - fromz) * s));
HXDLIN( 162)			_this44->w = (fromw + ((to2->w - fromw) * s));
HXDLIN( 162)			{
HXLINE( 162)				float v12 = (_this44->x * _this44->x);
HXDLIN( 162)				float v13 = (v12 + (_this44->y * _this44->y));
HXDLIN( 162)				float v14 = (v13 + (_this44->z * _this44->z));
HXDLIN( 162)				Float l = ::Math_obj::sqrt(( (Float)((v14 + (_this44->w * _this44->w))) ));
HXDLIN( 162)				if ((l == ((Float)0.0))) {
HXLINE( 162)					_this44->x = ( (float)(0) );
HXDLIN( 162)					_this44->y = ( (float)(0) );
HXDLIN( 162)					_this44->z = ( (float)(0) );
HXDLIN( 162)					_this44->w = ( (float)(0) );
            				}
            				else {
HXLINE( 162)					l = (((Float)1.0) / l);
HXDLIN( 162)					 ::iron::math::Quat _this45 = _this44;
HXDLIN( 162)					_this45->x = (_this45->x * l);
HXDLIN( 162)					 ::iron::math::Quat _this46 = _this44;
HXDLIN( 162)					_this46->y = (_this46->y * l);
HXDLIN( 162)					 ::iron::math::Quat _this47 = _this44;
HXDLIN( 162)					_this47->z = (_this47->z * l);
HXDLIN( 162)					 ::iron::math::Quat _this48 = _this44;
HXDLIN( 162)					_this48->w = (_this48->w * l);
            				}
            			}
            		}
HXLINE( 165)		{
HXLINE( 165)			 ::iron::math::Quat q = ::iron::object::Animation_obj::q3;
HXDLIN( 165)			float x = q->x;
HXDLIN( 165)			float y = q->y;
HXDLIN( 165)			float z = q->z;
HXDLIN( 165)			float w = q->w;
HXDLIN( 165)			float x2 = (x + x);
HXDLIN( 165)			float y2 = (y + y);
HXDLIN( 165)			float z2 = (z + z);
HXDLIN( 165)			float xx = (x * x2);
HXDLIN( 165)			float xy = (x * y2);
HXDLIN( 165)			float xz = (x * z2);
HXDLIN( 165)			float yy = (y * y2);
HXDLIN( 165)			float yz = (y * z2);
HXDLIN( 165)			float zz = (z * z2);
HXDLIN( 165)			float wx = (w * x2);
HXDLIN( 165)			float wy = (w * y2);
HXDLIN( 165)			float wz = (w * z2);
HXDLIN( 165)			m->self->_00 = ( (float)((((Float)1.0) - (yy + zz))) );
HXDLIN( 165)			m->self->_10 = (xy - wz);
HXDLIN( 165)			m->self->_20 = (xz + wy);
HXDLIN( 165)			m->self->_01 = (xy + wz);
HXDLIN( 165)			m->self->_11 = ( (float)((((Float)1.0) - (xx + zz))) );
HXDLIN( 165)			m->self->_21 = (yz - wx);
HXDLIN( 165)			m->self->_02 = (xz - wy);
HXDLIN( 165)			m->self->_12 = (yz + wx);
HXDLIN( 165)			m->self->_22 = ( (float)((((Float)1.0) - (xx + yy))) );
HXDLIN( 165)			m->self->_03 = ( (float)(((Float)0.0)) );
HXDLIN( 165)			m->self->_13 = ( (float)(((Float)0.0)) );
HXDLIN( 165)			m->self->_23 = ( (float)(((Float)0.0)) );
HXDLIN( 165)			m->self->_30 = ( (float)(((Float)0.0)) );
HXDLIN( 165)			m->self->_31 = ( (float)(((Float)0.0)) );
HXDLIN( 165)			m->self->_32 = ( (float)(((Float)0.0)) );
HXDLIN( 165)			m->self->_33 = ( (float)(((Float)1.0)) );
            		}
HXLINE( 166)		{
HXLINE( 166)			 ::iron::math::Vec4 v15 = ::iron::object::Animation_obj::vs;
HXDLIN( 166)			float x1 = v15->x;
HXDLIN( 166)			float y1 = v15->y;
HXDLIN( 166)			float z1 = v15->z;
HXDLIN( 166)			{
HXLINE( 166)				 ::iron::math::Mat4 _g = m;
HXDLIN( 166)				_g->self->_00 = (_g->self->_00 * x1);
            			}
HXDLIN( 166)			{
HXLINE( 166)				 ::iron::math::Mat4 _g1 = m;
HXDLIN( 166)				_g1->self->_01 = (_g1->self->_01 * x1);
            			}
HXDLIN( 166)			{
HXLINE( 166)				 ::iron::math::Mat4 _g2 = m;
HXDLIN( 166)				_g2->self->_02 = (_g2->self->_02 * x1);
            			}
HXDLIN( 166)			{
HXLINE( 166)				 ::iron::math::Mat4 _g3 = m;
HXDLIN( 166)				_g3->self->_03 = (_g3->self->_03 * x1);
            			}
HXDLIN( 166)			{
HXLINE( 166)				 ::iron::math::Mat4 _g4 = m;
HXDLIN( 166)				_g4->self->_10 = (_g4->self->_10 * y1);
            			}
HXDLIN( 166)			{
HXLINE( 166)				 ::iron::math::Mat4 _g5 = m;
HXDLIN( 166)				_g5->self->_11 = (_g5->self->_11 * y1);
            			}
HXDLIN( 166)			{
HXLINE( 166)				 ::iron::math::Mat4 _g6 = m;
HXDLIN( 166)				_g6->self->_12 = (_g6->self->_12 * y1);
            			}
HXDLIN( 166)			{
HXLINE( 166)				 ::iron::math::Mat4 _g7 = m;
HXDLIN( 166)				_g7->self->_13 = (_g7->self->_13 * y1);
            			}
HXDLIN( 166)			{
HXLINE( 166)				 ::iron::math::Mat4 _g8 = m;
HXDLIN( 166)				_g8->self->_20 = (_g8->self->_20 * z1);
            			}
HXDLIN( 166)			{
HXLINE( 166)				 ::iron::math::Mat4 _g9 = m;
HXDLIN( 166)				_g9->self->_21 = (_g9->self->_21 * z1);
            			}
HXDLIN( 166)			{
HXLINE( 166)				 ::iron::math::Mat4 _g10 = m;
HXDLIN( 166)				_g10->self->_22 = (_g10->self->_22 * z1);
            			}
HXDLIN( 166)			{
HXLINE( 166)				 ::iron::math::Mat4 _g11 = m;
HXDLIN( 166)				_g11->self->_23 = (_g11->self->_23 * z1);
            			}
            		}
HXLINE( 167)		m->self->_30 = ::iron::object::Animation_obj::vp->x;
HXLINE( 168)		m->self->_31 = ::iron::object::Animation_obj::vp->y;
HXLINE( 169)		m->self->_32 = ::iron::object::Animation_obj::vp->z;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Animation_obj,updateAnimSampled,(void))

void Animation_obj::notifyOnMarker(::String name, ::Dynamic onMarker){
            	HX_GC_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_172_notifyOnMarker)
HXLINE( 173)		if (hx::IsNull( this->markerEvents )) {
HXLINE( 173)			this->markerEvents =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            		}
HXLINE( 174)		::Array< ::Dynamic> ar = ( (::Array< ::Dynamic>)(this->markerEvents->get(name)) );
HXLINE( 175)		if (hx::IsNull( ar )) {
HXLINE( 175)			ar = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 175)			this->markerEvents->set(name,ar);
            		}
HXLINE( 176)		ar->push(onMarker);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Animation_obj,notifyOnMarker,(void))

void Animation_obj::removeMarker(::String name, ::Dynamic onMarker){
            	HX_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_180_removeMarker)
HXDLIN( 180)		( (::Array< ::Dynamic>)(this->markerEvents->get(name)) )->remove(onMarker);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Animation_obj,removeMarker,(void))

int Animation_obj::currentFrame(){
            	HX_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_183_currentFrame)
HXDLIN( 183)		return ::Std_obj::_hx_int((( (Float)(this->time) ) / ( (Float)(this->frameTime) )));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Animation_obj,currentFrame,return )

int Animation_obj::totalFrames(){
            	HX_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_184_totalFrames)
HXDLIN( 184)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Animation_obj,totalFrames,return )

 ::iron::math::Mat4 Animation_obj::m1;

 ::iron::math::Mat4 Animation_obj::m2;

 ::iron::math::Vec4 Animation_obj::vpos;

 ::iron::math::Vec4 Animation_obj::vpos2;

 ::iron::math::Vec4 Animation_obj::vscl;

 ::iron::math::Vec4 Animation_obj::vscl2;

 ::iron::math::Quat Animation_obj::q1;

 ::iron::math::Quat Animation_obj::q2;

 ::iron::math::Quat Animation_obj::q3;

 ::iron::math::Vec4 Animation_obj::vp;

 ::iron::math::Vec4 Animation_obj::vs;


hx::ObjectPtr< Animation_obj > Animation_obj::__new() {
	hx::ObjectPtr< Animation_obj > __this = new Animation_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Animation_obj > Animation_obj::__alloc(hx::Ctx *_hx_ctx) {
	Animation_obj *__this = (Animation_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Animation_obj), true, "iron.object.Animation"));
	*(void **)__this = Animation_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Animation_obj::Animation_obj()
{
}

void Animation_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Animation);
	HX_MARK_MEMBER_NAME(isSkinned,"isSkinned");
	HX_MARK_MEMBER_NAME(isSampled,"isSampled");
	HX_MARK_MEMBER_NAME(action,"action");
	HX_MARK_MEMBER_NAME(armature,"armature");
	HX_MARK_MEMBER_NAME(time,"time");
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(loop,"loop");
	HX_MARK_MEMBER_NAME(frameIndex,"frameIndex");
	HX_MARK_MEMBER_NAME(onComplete,"onComplete");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(frameTime,"frameTime");
	HX_MARK_MEMBER_NAME(blendTime,"blendTime");
	HX_MARK_MEMBER_NAME(blendCurrent,"blendCurrent");
	HX_MARK_MEMBER_NAME(blendAction,"blendAction");
	HX_MARK_MEMBER_NAME(blendFactor,"blendFactor");
	HX_MARK_MEMBER_NAME(lastFrameIndex,"lastFrameIndex");
	HX_MARK_MEMBER_NAME(markerEvents,"markerEvents");
	HX_MARK_END_CLASS();
}

void Animation_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(isSkinned,"isSkinned");
	HX_VISIT_MEMBER_NAME(isSampled,"isSampled");
	HX_VISIT_MEMBER_NAME(action,"action");
	HX_VISIT_MEMBER_NAME(armature,"armature");
	HX_VISIT_MEMBER_NAME(time,"time");
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(loop,"loop");
	HX_VISIT_MEMBER_NAME(frameIndex,"frameIndex");
	HX_VISIT_MEMBER_NAME(onComplete,"onComplete");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(frameTime,"frameTime");
	HX_VISIT_MEMBER_NAME(blendTime,"blendTime");
	HX_VISIT_MEMBER_NAME(blendCurrent,"blendCurrent");
	HX_VISIT_MEMBER_NAME(blendAction,"blendAction");
	HX_VISIT_MEMBER_NAME(blendFactor,"blendFactor");
	HX_VISIT_MEMBER_NAME(lastFrameIndex,"lastFrameIndex");
	HX_VISIT_MEMBER_NAME(markerEvents,"markerEvents");
}

hx::Val Animation_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { return hx::Val( time ); }
		if (HX_FIELD_EQ(inName,"loop") ) { return hx::Val( loop ); }
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed ); }
		if (HX_FIELD_EQ(inName,"blend") ) { return hx::Val( blend_dyn() ); }
		if (HX_FIELD_EQ(inName,"pause") ) { return hx::Val( pause_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"action") ) { return hx::Val( action ); }
		if (HX_FIELD_EQ(inName,"paused") ) { return hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"resume") ) { return hx::Val( resume_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"rewind") ) { return hx::Val( rewind_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"armature") ) { return hx::Val( armature ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isSkinned") ) { return hx::Val( isSkinned ); }
		if (HX_FIELD_EQ(inName,"isSampled") ) { return hx::Val( isSampled ); }
		if (HX_FIELD_EQ(inName,"frameTime") ) { return hx::Val( frameTime ); }
		if (HX_FIELD_EQ(inName,"blendTime") ) { return hx::Val( blendTime ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"frameIndex") ) { return hx::Val( frameIndex ); }
		if (HX_FIELD_EQ(inName,"onComplete") ) { return hx::Val( onComplete ); }
		if (HX_FIELD_EQ(inName,"isTrackEnd") ) { return hx::Val( isTrackEnd_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"blendAction") ) { return hx::Val( blendAction ); }
		if (HX_FIELD_EQ(inName,"blendFactor") ) { return hx::Val( blendFactor ); }
		if (HX_FIELD_EQ(inName,"updateTrack") ) { return hx::Val( updateTrack_dyn() ); }
		if (HX_FIELD_EQ(inName,"totalFrames") ) { return hx::Val( totalFrames_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"blendCurrent") ) { return hx::Val( blendCurrent ); }
		if (HX_FIELD_EQ(inName,"markerEvents") ) { return hx::Val( markerEvents ); }
		if (HX_FIELD_EQ(inName,"removeMarker") ) { return hx::Val( removeMarker_dyn() ); }
		if (HX_FIELD_EQ(inName,"currentFrame") ) { return hx::Val( currentFrame_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"lastFrameIndex") ) { return hx::Val( lastFrameIndex ); }
		if (HX_FIELD_EQ(inName,"notifyOnMarker") ) { return hx::Val( notifyOnMarker_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"checkFrameIndex") ) { return hx::Val( checkFrameIndex_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"updateAnimSampled") ) { return hx::Val( updateAnimSampled_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Animation_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"m1") ) { outValue = ( m1 ); return true; }
		if (HX_FIELD_EQ(inName,"m2") ) { outValue = ( m2 ); return true; }
		if (HX_FIELD_EQ(inName,"q1") ) { outValue = ( q1 ); return true; }
		if (HX_FIELD_EQ(inName,"q2") ) { outValue = ( q2 ); return true; }
		if (HX_FIELD_EQ(inName,"q3") ) { outValue = ( q3 ); return true; }
		if (HX_FIELD_EQ(inName,"vp") ) { outValue = ( vp ); return true; }
		if (HX_FIELD_EQ(inName,"vs") ) { outValue = ( vs ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"vpos") ) { outValue = ( vpos ); return true; }
		if (HX_FIELD_EQ(inName,"vscl") ) { outValue = ( vscl ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"vpos2") ) { outValue = ( vpos2 ); return true; }
		if (HX_FIELD_EQ(inName,"vscl2") ) { outValue = ( vscl2 ); return true; }
	}
	return false;
}

hx::Val Animation_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { time=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"loop") ) { loop=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"action") ) { action=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"armature") ) { armature=inValue.Cast<  ::iron::data::Armature >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isSkinned") ) { isSkinned=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isSampled") ) { isSampled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frameTime") ) { frameTime=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blendTime") ) { blendTime=inValue.Cast< float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"frameIndex") ) { frameIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onComplete") ) { onComplete=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"blendAction") ) { blendAction=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blendFactor") ) { blendFactor=inValue.Cast< float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"blendCurrent") ) { blendCurrent=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"markerEvents") ) { markerEvents=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"lastFrameIndex") ) { lastFrameIndex=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Animation_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"m1") ) { m1=ioValue.Cast<  ::iron::math::Mat4 >(); return true; }
		if (HX_FIELD_EQ(inName,"m2") ) { m2=ioValue.Cast<  ::iron::math::Mat4 >(); return true; }
		if (HX_FIELD_EQ(inName,"q1") ) { q1=ioValue.Cast<  ::iron::math::Quat >(); return true; }
		if (HX_FIELD_EQ(inName,"q2") ) { q2=ioValue.Cast<  ::iron::math::Quat >(); return true; }
		if (HX_FIELD_EQ(inName,"q3") ) { q3=ioValue.Cast<  ::iron::math::Quat >(); return true; }
		if (HX_FIELD_EQ(inName,"vp") ) { vp=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
		if (HX_FIELD_EQ(inName,"vs") ) { vs=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"vpos") ) { vpos=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
		if (HX_FIELD_EQ(inName,"vscl") ) { vscl=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"vpos2") ) { vpos2=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
		if (HX_FIELD_EQ(inName,"vscl2") ) { vscl2=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
	}
	return false;
}

void Animation_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("isSkinned",26,a3,6e,38));
	outFields->push(HX_("isSampled",30,42,c8,87));
	outFields->push(HX_("action",b6,3b,46,16));
	outFields->push(HX_("armature",79,a4,76,ec));
	outFields->push(HX_("time",0d,cc,fc,4c));
	outFields->push(HX_("speed",87,97,69,81));
	outFields->push(HX_("loop",64,a6,b7,47));
	outFields->push(HX_("frameIndex",a5,cf,3a,a1));
	outFields->push(HX_("paused",ae,40,84,ef));
	outFields->push(HX_("frameTime",da,8a,7d,3a));
	outFields->push(HX_("blendTime",fe,dc,d3,10));
	outFields->push(HX_("blendCurrent",e8,f7,22,fb));
	outFields->push(HX_("blendAction",e7,2a,b8,ca));
	outFields->push(HX_("blendFactor",00,88,7f,98));
	outFields->push(HX_("lastFrameIndex",9b,65,c1,14));
	outFields->push(HX_("markerEvents",73,40,4d,7f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Animation_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(Animation_obj,isSkinned),HX_("isSkinned",26,a3,6e,38)},
	{hx::fsBool,(int)offsetof(Animation_obj,isSampled),HX_("isSampled",30,42,c8,87)},
	{hx::fsString,(int)offsetof(Animation_obj,action),HX_("action",b6,3b,46,16)},
	{hx::fsObject /*::iron::data::Armature*/ ,(int)offsetof(Animation_obj,armature),HX_("armature",79,a4,76,ec)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Animation_obj,time),HX_("time",0d,cc,fc,4c)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Animation_obj,speed),HX_("speed",87,97,69,81)},
	{hx::fsBool,(int)offsetof(Animation_obj,loop),HX_("loop",64,a6,b7,47)},
	{hx::fsInt,(int)offsetof(Animation_obj,frameIndex),HX_("frameIndex",a5,cf,3a,a1)},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Animation_obj,onComplete),HX_("onComplete",f8,d4,7e,5d)},
	{hx::fsBool,(int)offsetof(Animation_obj,paused),HX_("paused",ae,40,84,ef)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Animation_obj,frameTime),HX_("frameTime",da,8a,7d,3a)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Animation_obj,blendTime),HX_("blendTime",fe,dc,d3,10)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Animation_obj,blendCurrent),HX_("blendCurrent",e8,f7,22,fb)},
	{hx::fsString,(int)offsetof(Animation_obj,blendAction),HX_("blendAction",e7,2a,b8,ca)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Animation_obj,blendFactor),HX_("blendFactor",00,88,7f,98)},
	{hx::fsInt,(int)offsetof(Animation_obj,lastFrameIndex),HX_("lastFrameIndex",9b,65,c1,14)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Animation_obj,markerEvents),HX_("markerEvents",73,40,4d,7f)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Animation_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::iron::math::Mat4*/ ,(void *) &Animation_obj::m1,HX_("m1",24,5f,00,00)},
	{hx::fsObject /*::iron::math::Mat4*/ ,(void *) &Animation_obj::m2,HX_("m2",25,5f,00,00)},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &Animation_obj::vpos,HX_("vpos",de,8a,54,4e)},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &Animation_obj::vpos2,HX_("vpos2",94,f7,a4,3b)},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &Animation_obj::vscl,HX_("vscl",26,c7,56,4e)},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &Animation_obj::vscl2,HX_("vscl2",4c,7a,97,3d)},
	{hx::fsObject /*::iron::math::Quat*/ ,(void *) &Animation_obj::q1,HX_("q1",a0,62,00,00)},
	{hx::fsObject /*::iron::math::Quat*/ ,(void *) &Animation_obj::q2,HX_("q2",a1,62,00,00)},
	{hx::fsObject /*::iron::math::Quat*/ ,(void *) &Animation_obj::q3,HX_("q3",a2,62,00,00)},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &Animation_obj::vp,HX_("vp",3a,67,00,00)},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &Animation_obj::vs,HX_("vs",3d,67,00,00)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Animation_obj_sMemberFields[] = {
	HX_("isSkinned",26,a3,6e,38),
	HX_("isSampled",30,42,c8,87),
	HX_("action",b6,3b,46,16),
	HX_("armature",79,a4,76,ec),
	HX_("time",0d,cc,fc,4c),
	HX_("speed",87,97,69,81),
	HX_("loop",64,a6,b7,47),
	HX_("frameIndex",a5,cf,3a,a1),
	HX_("onComplete",f8,d4,7e,5d),
	HX_("paused",ae,40,84,ef),
	HX_("frameTime",da,8a,7d,3a),
	HX_("blendTime",fe,dc,d3,10),
	HX_("blendCurrent",e8,f7,22,fb),
	HX_("blendAction",e7,2a,b8,ca),
	HX_("blendFactor",00,88,7f,98),
	HX_("lastFrameIndex",9b,65,c1,14),
	HX_("markerEvents",73,40,4d,7f),
	HX_("play",f4,2d,5a,4a),
	HX_("blend",51,e8,f4,b4),
	HX_("pause",f6,d6,57,bd),
	HX_("resume",ad,69,84,08),
	HX_("remove",44,9c,88,04),
	HX_("update",09,86,05,87),
	HX_("isTrackEnd",1a,a8,51,fa),
	HX_("checkFrameIndex",8d,36,94,1a),
	HX_("rewind",fb,29,20,0b),
	HX_("updateTrack",c2,f7,b7,fb),
	HX_("updateAnimSampled",60,67,49,09),
	HX_("notifyOnMarker",22,74,7d,50),
	HX_("removeMarker",1e,11,9e,29),
	HX_("currentFrame",34,5d,8f,4d),
	HX_("totalFrames",8a,a2,bb,72),
	::String(null()) };

static void Animation_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Animation_obj::m1,"m1");
	HX_MARK_MEMBER_NAME(Animation_obj::m2,"m2");
	HX_MARK_MEMBER_NAME(Animation_obj::vpos,"vpos");
	HX_MARK_MEMBER_NAME(Animation_obj::vpos2,"vpos2");
	HX_MARK_MEMBER_NAME(Animation_obj::vscl,"vscl");
	HX_MARK_MEMBER_NAME(Animation_obj::vscl2,"vscl2");
	HX_MARK_MEMBER_NAME(Animation_obj::q1,"q1");
	HX_MARK_MEMBER_NAME(Animation_obj::q2,"q2");
	HX_MARK_MEMBER_NAME(Animation_obj::q3,"q3");
	HX_MARK_MEMBER_NAME(Animation_obj::vp,"vp");
	HX_MARK_MEMBER_NAME(Animation_obj::vs,"vs");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Animation_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Animation_obj::m1,"m1");
	HX_VISIT_MEMBER_NAME(Animation_obj::m2,"m2");
	HX_VISIT_MEMBER_NAME(Animation_obj::vpos,"vpos");
	HX_VISIT_MEMBER_NAME(Animation_obj::vpos2,"vpos2");
	HX_VISIT_MEMBER_NAME(Animation_obj::vscl,"vscl");
	HX_VISIT_MEMBER_NAME(Animation_obj::vscl2,"vscl2");
	HX_VISIT_MEMBER_NAME(Animation_obj::q1,"q1");
	HX_VISIT_MEMBER_NAME(Animation_obj::q2,"q2");
	HX_VISIT_MEMBER_NAME(Animation_obj::q3,"q3");
	HX_VISIT_MEMBER_NAME(Animation_obj::vp,"vp");
	HX_VISIT_MEMBER_NAME(Animation_obj::vs,"vs");
};

#endif

hx::Class Animation_obj::__mClass;

static ::String Animation_obj_sStaticFields[] = {
	HX_("m1",24,5f,00,00),
	HX_("m2",25,5f,00,00),
	HX_("vpos",de,8a,54,4e),
	HX_("vpos2",94,f7,a4,3b),
	HX_("vscl",26,c7,56,4e),
	HX_("vscl2",4c,7a,97,3d),
	HX_("q1",a0,62,00,00),
	HX_("q2",a1,62,00,00),
	HX_("q3",a2,62,00,00),
	HX_("vp",3a,67,00,00),
	HX_("vs",3d,67,00,00),
	::String(null())
};

void Animation_obj::__register()
{
	Animation_obj _hx_dummy;
	Animation_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.object.Animation",5b,de,ae,6a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Animation_obj::__GetStatic;
	__mClass->mSetStaticField = &Animation_obj::__SetStatic;
	__mClass->mMarkFunc = Animation_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Animation_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Animation_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Animation_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Animation_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Animation_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Animation_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Animation_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_19_boot)
HXDLIN(  19)		m1 =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_20_boot)
HXDLIN(  20)		m2 =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_21_boot)
HXDLIN(  21)		vpos =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_22_boot)
HXDLIN(  22)		vpos2 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_23_boot)
HXDLIN(  23)		vscl =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_24_boot)
HXDLIN(  24)		vscl2 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_25_boot)
HXDLIN(  25)		q1 =  ::iron::math::Quat_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_26_boot)
HXDLIN(  26)		q2 =  ::iron::math::Quat_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_27_boot)
HXDLIN(  27)		q3 =  ::iron::math::Quat_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_28_boot)
HXDLIN(  28)		vp =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_a72200f6c6c62f0b_29_boot)
HXDLIN(  29)		vs =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
}

} // end namespace iron
} // end namespace object
