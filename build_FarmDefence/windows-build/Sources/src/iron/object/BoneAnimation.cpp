// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_7d028c26efabce49
#define INCLUDED_7d028c26efabce49
#include "cpp_uint32array.h"
#endif
#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <hxinc/haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <hxinc/haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <hxinc/haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_iron_Scene
#include <hxinc/iron/Scene.h>
#endif
#ifndef INCLUDED_iron_data_Armature
#include <hxinc/iron/data/Armature.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <hxinc/iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_data_Geometry
#include <hxinc/iron/data/Geometry.h>
#endif
#ifndef INCLUDED_iron_data_MeshData
#include <hxinc/iron/data/MeshData.h>
#endif
#ifndef INCLUDED_iron_data_TAnimation
#include <hxinc/iron/data/TAnimation.h>
#endif
#ifndef INCLUDED_iron_data_TConstraint
#include <hxinc/iron/data/TConstraint.h>
#endif
#ifndef INCLUDED_iron_data_TMeshData
#include <hxinc/iron/data/TMeshData.h>
#endif
#ifndef INCLUDED_iron_data_TObj
#include <hxinc/iron/data/TObj.h>
#endif
#ifndef INCLUDED_iron_data_TSceneFormat
#include <hxinc/iron/data/TSceneFormat.h>
#endif
#ifndef INCLUDED_iron_data_TSkin
#include <hxinc/iron/data/TSkin.h>
#endif
#ifndef INCLUDED_iron_data_TTrack
#include <hxinc/iron/data/TTrack.h>
#endif
#ifndef INCLUDED_iron_data_TTransform
#include <hxinc/iron/data/TTransform.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <hxinc/iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Quat
#include <hxinc/iron/math/Quat.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <hxinc/iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_object_Animation
#include <hxinc/iron/object/Animation.h>
#endif
#ifndef INCLUDED_iron_object_BoneAnimation
#include <hxinc/iron/object/BoneAnimation.h>
#endif
#ifndef INCLUDED_iron_object_MeshObject
#include <hxinc/iron/object/MeshObject.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <hxinc/iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <hxinc/iron/object/Transform.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_arrays_Uint32ArrayPrivate
#include <hxinc/kha/arrays/Uint32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_511999cb334fbc62_13_new,"iron.object.BoneAnimation","new",0x91631269,"iron.object.BoneAnimation.new","iron/object/BoneAnimation.hx",13,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_69_setSkin,"iron.object.BoneAnimation","setSkin",0x774cd1c8,"iron.object.BoneAnimation.setSkin","iron/object/BoneAnimation.hx",69,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_88_setSkin,"iron.object.BoneAnimation","setSkin",0x774cd1c8,"iron.object.BoneAnimation.setSkin","iron/object/BoneAnimation.hx",88,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_93_addBoneChild,"iron.object.BoneAnimation","addBoneChild",0xf060162e,"iron.object.BoneAnimation.addBoneChild","iron/object/BoneAnimation.hx",93,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_100_updateBoneChildren,"iron.object.BoneAnimation","updateBoneChildren",0x0a3be863,"iron.object.BoneAnimation.updateBoneChildren","iron/object/BoneAnimation.hx",100,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_123_numParents,"iron.object.BoneAnimation","numParents",0x53e9bf7a,"iron.object.BoneAnimation.numParents","iron/object/BoneAnimation.hx",123,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_136_setMats,"iron.object.BoneAnimation","setMats",0x734dfd1e,"iron.object.BoneAnimation.setMats","iron/object/BoneAnimation.hx",136,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_130_setMats,"iron.object.BoneAnimation","setMats",0x734dfd1e,"iron.object.BoneAnimation.setMats","iron/object/BoneAnimation.hx",130,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_147_setMats,"iron.object.BoneAnimation","setMats",0x734dfd1e,"iron.object.BoneAnimation.setMats","iron/object/BoneAnimation.hx",147,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_155_setAction,"iron.object.BoneAnimation","setAction",0xbb1b9fc1,"iron.object.BoneAnimation.setAction","iron/object/BoneAnimation.hx",155,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_171_setActionBlend,"iron.object.BoneAnimation","setActionBlend",0x5466fcd0,"iron.object.BoneAnimation.setActionBlend","iron/object/BoneAnimation.hx",171,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_187_play,"iron.object.BoneAnimation","play",0xa6a4b3cb,"iron.object.BoneAnimation.play","iron/object/BoneAnimation.hx",187,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_195_blend,"iron.object.BoneAnimation","blend",0x19df7e9a,"iron.object.BoneAnimation.blend","iron/object/BoneAnimation.hx",195,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_205_update,"iron.object.BoneAnimation","update",0x6f5e6fa0,"iron.object.BoneAnimation.update","iron/object/BoneAnimation.hx",205,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_270_multParent,"iron.object.BoneAnimation","multParent",0xa6217651,"iron.object.BoneAnimation.multParent","iron/object/BoneAnimation.hx",270,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_278_multParents,"iron.object.BoneAnimation","multParents",0xb7261102,"iron.object.BoneAnimation.multParents","iron/object/BoneAnimation.hx",278,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_289_updateConstraints,"iron.object.BoneAnimation","updateConstraints",0x45755db6,"iron.object.BoneAnimation.updateConstraints","iron/object/BoneAnimation.hx",289,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_330_notifyOnUpdate,"iron.object.BoneAnimation","notifyOnUpdate",0x42615d08,"iron.object.BoneAnimation.notifyOnUpdate","iron/object/BoneAnimation.hx",330,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_336_removeUpdate,"iron.object.BoneAnimation","removeUpdate",0x40c9d644,"iron.object.BoneAnimation.removeUpdate","iron/object/BoneAnimation.hx",336,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_340_updateBonesOnly,"iron.object.BoneAnimation","updateBonesOnly",0x086809fb,"iron.object.BoneAnimation.updateBonesOnly","iron/object/BoneAnimation.hx",340,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_351_updateSkinGpu,"iron.object.BoneAnimation","updateSkinGpu",0xf90883ef,"iron.object.BoneAnimation.updateSkinGpu","iron/object/BoneAnimation.hx",351,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_395_updateSkinBuffer,"iron.object.BoneAnimation","updateSkinBuffer",0x6880ff1d,"iron.object.BoneAnimation.updateSkinBuffer","iron/object/BoneAnimation.hx",395,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_526_totalFrames,"iron.object.BoneAnimation","totalFrames",0xd2599593,"iron.object.BoneAnimation.totalFrames","iron/object/BoneAnimation.hx",526,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_532_getBone,"iron.object.BoneAnimation","getBone",0x7911ad83,"iron.object.BoneAnimation.getBone","iron/object/BoneAnimation.hx",532,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_538_getBoneIndex,"iron.object.BoneAnimation","getBoneIndex",0x78bd828f,"iron.object.BoneAnimation.getBoneIndex","iron/object/BoneAnimation.hx",538,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_545_getBoneMat,"iron.object.BoneAnimation","getBoneMat",0x784a28dd,"iron.object.BoneAnimation.getBoneMat","iron/object/BoneAnimation.hx",545,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_549_getBoneMatBlend,"iron.object.BoneAnimation","getBoneMatBlend",0x26e5ee34,"iron.object.BoneAnimation.getBoneMatBlend","iron/object/BoneAnimation.hx",549,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_552_getAbsMat,"iron.object.BoneAnimation","getAbsMat",0x43a59d4d,"iron.object.BoneAnimation.getAbsMat","iron/object/BoneAnimation.hx",552,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_562_getWorldMat,"iron.object.BoneAnimation","getWorldMat",0x2a1d212d,"iron.object.BoneAnimation.getWorldMat","iron/object/BoneAnimation.hx",562,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_572_getBoneLen,"iron.object.BoneAnimation","getBoneLen",0x78496a12,"iron.object.BoneAnimation.getBoneLen","iron/object/BoneAnimation.hx",572,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_579_solveIK,"iron.object.BoneAnimation","solveIK",0xf2c797aa,"iron.object.BoneAnimation.solveIK","iron/object/BoneAnimation.hx",579,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_15_boot,"iron.object.BoneAnimation","boot",0x9d660a09,"iron.object.BoneAnimation.boot","iron/object/BoneAnimation.hx",15,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_39_boot,"iron.object.BoneAnimation","boot",0x9d660a09,"iron.object.BoneAnimation.boot","iron/object/BoneAnimation.hx",39,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_40_boot,"iron.object.BoneAnimation","boot",0x9d660a09,"iron.object.BoneAnimation.boot","iron/object/BoneAnimation.hx",40,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_41_boot,"iron.object.BoneAnimation","boot",0x9d660a09,"iron.object.BoneAnimation.boot","iron/object/BoneAnimation.hx",41,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_42_boot,"iron.object.BoneAnimation","boot",0x9d660a09,"iron.object.BoneAnimation.boot","iron/object/BoneAnimation.hx",42,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_43_boot,"iron.object.BoneAnimation","boot",0x9d660a09,"iron.object.BoneAnimation.boot","iron/object/BoneAnimation.hx",43,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_44_boot,"iron.object.BoneAnimation","boot",0x9d660a09,"iron.object.BoneAnimation.boot","iron/object/BoneAnimation.hx",44,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_45_boot,"iron.object.BoneAnimation","boot",0x9d660a09,"iron.object.BoneAnimation.boot","iron/object/BoneAnimation.hx",45,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_46_boot,"iron.object.BoneAnimation","boot",0x9d660a09,"iron.object.BoneAnimation.boot","iron/object/BoneAnimation.hx",46,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_47_boot,"iron.object.BoneAnimation","boot",0x9d660a09,"iron.object.BoneAnimation.boot","iron/object/BoneAnimation.hx",47,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_48_boot,"iron.object.BoneAnimation","boot",0x9d660a09,"iron.object.BoneAnimation.boot","iron/object/BoneAnimation.hx",48,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_49_boot,"iron.object.BoneAnimation","boot",0x9d660a09,"iron.object.BoneAnimation.boot","iron/object/BoneAnimation.hx",49,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_50_boot,"iron.object.BoneAnimation","boot",0x9d660a09,"iron.object.BoneAnimation.boot","iron/object/BoneAnimation.hx",50,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_51_boot,"iron.object.BoneAnimation","boot",0x9d660a09,"iron.object.BoneAnimation.boot","iron/object/BoneAnimation.hx",51,0xe0a19f47)
HX_LOCAL_STACK_FRAME(_hx_pos_511999cb334fbc62_52_boot,"iron.object.BoneAnimation","boot",0x9d660a09,"iron.object.BoneAnimation.boot","iron/object/BoneAnimation.hx",52,0xe0a19f47)
namespace iron{
namespace object{

void BoneAnimation_obj::__construct(::String __o_armatureName){
::String armatureName = __o_armatureName.Default(HX_("",00,00,00,00));
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_13_new)
HXLINE( 329)		this->onUpdates = null();
HXLINE(  37)		this->constraintMats = null();
HXLINE(  36)		this->constraintTargetsI = null();
HXLINE(  35)		this->constraintTargets = null();
HXLINE(  33)		this->boneChildren = null();
HXLINE(  31)		this->matsFastBlendSort = ::Array_obj< int >::__new(0);
HXLINE(  30)		this->matsFastBlend = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  29)		this->matsFastSort = ::Array_obj< int >::__new(0);
HXLINE(  28)		this->matsFast = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  27)		this->applyParent = null();
HXLINE(  26)		this->absMats = null();
HXLINE(  25)		this->skeletonMatsBlend = null();
HXLINE(  24)		this->skeletonBonesBlend = null();
HXLINE(  23)		this->skeletonMats = null();
HXLINE(  22)		this->skeletonBones = null();
HXLINE(  59)		super::__construct();
HXLINE(  60)		this->isSampled = false;
HXLINE(  61)		{
HXLINE(  61)			int _g = 0;
HXDLIN(  61)			::Array< ::Dynamic> _g1 = ::iron::Scene_obj::active->armatures;
HXDLIN(  61)			while((_g < _g1->length)){
HXLINE(  61)				 ::iron::data::Armature a = _g1->__get(_g).StaticCast<  ::iron::data::Armature >();
HXDLIN(  61)				_g = (_g + 1);
HXLINE(  62)				if ((a->name == armatureName)) {
HXLINE(  63)					this->armature = a;
HXLINE(  64)					goto _hx_goto_0;
            				}
            			}
            			_hx_goto_0:;
            		}
            	}

Dynamic BoneAnimation_obj::__CreateEmpty() { return new BoneAnimation_obj; }

void *BoneAnimation_obj::_hx_vtable = 0;

Dynamic BoneAnimation_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BoneAnimation_obj > _hx_result = new BoneAnimation_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool BoneAnimation_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1ad734d9) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1ad734d9;
	} else {
		return inClassId==(int)0x6263e191;
	}
}

void BoneAnimation_obj::setSkin( ::iron::object::MeshObject mo){
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_69_setSkin)
HXDLIN(  69)		 ::iron::object::BoneAnimation _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  70)		this->object = mo;
HXLINE(  71)		 ::iron::data::MeshData _hx_tmp;
HXDLIN(  71)		if (hx::IsNotNull( mo )) {
HXLINE(  71)			_hx_tmp = mo->data;
            		}
            		else {
HXLINE(  71)			_hx_tmp = null();
            		}
HXDLIN(  71)		this->data = _hx_tmp;
HXLINE(  72)		bool _hx_tmp1;
HXDLIN(  72)		if (hx::IsNotNull( this->data )) {
HXLINE(  72)			_hx_tmp1 = this->data->isSkinned;
            		}
            		else {
HXLINE(  72)			_hx_tmp1 = false;
            		}
HXDLIN(  72)		this->isSkinned = _hx_tmp1;
HXLINE(  73)		if (this->isSkinned) {
HXLINE(  78)			int boneSize = 8;
HXLINE(  80)			 ::kha::arrays::Float32ArrayPrivate this1 =  ::kha::arrays::Float32ArrayPrivate_obj::__alloc( HX_CTX ,(::iron::object::BoneAnimation_obj::skinMaxBones * boneSize));
HXDLIN(  80)			this->skinBuffer = this1;
HXLINE(  81)			{
HXLINE(  81)				int _g1 = 0;
HXDLIN(  81)				int _g = this->skinBuffer->self.length();
HXDLIN(  81)				while((_g1 < _g)){
HXLINE(  81)					_g1 = (_g1 + 1);
HXDLIN(  81)					int i = (_g1 - 1);
HXDLIN(  81)					this->skinBuffer->self.set(i,( (float)(0) ));
            				}
            			}
HXLINE(  83)			{
HXLINE(  83)				 ::iron::math::Quat _this = this->object->transform->rot;
HXDLIN(  83)				_this->x = ( (float)(0) );
HXDLIN(  83)				_this->y = ( (float)(0) );
HXDLIN(  83)				_this->z = ( (float)(0) );
HXDLIN(  83)				_this->w = ( (float)(1) );
            			}
HXLINE(  84)			this->object->transform->buildMatrix();
HXLINE(  86)			::Array< ::String > refs = mo->parent->raw->bone_actions;
HXLINE(  87)			bool _hx_tmp2;
HXDLIN(  87)			if (hx::IsNotNull( refs )) {
HXLINE(  87)				_hx_tmp2 = (refs->length > 0);
            			}
            			else {
HXLINE(  87)				_hx_tmp2 = false;
            			}
HXDLIN(  87)			if (_hx_tmp2) {
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::iron::object::BoneAnimation,_gthis) HXARGC(1)
            				void _hx_run( ::iron::data::TSceneFormat action){
            					HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_88_setSkin)
HXLINE(  88)					_gthis->play(action->name,null(),null(),null(),null());
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(  88)				::iron::data::Data_obj::getSceneRaw(refs->__get(0), ::Dynamic(new _hx_Closure_0(_gthis)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BoneAnimation_obj,setSkin,(void))

void BoneAnimation_obj::addBoneChild(::String bone, ::iron::object::Object o){
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_93_addBoneChild)
HXLINE(  94)		if (hx::IsNull( this->boneChildren )) {
HXLINE(  94)			this->boneChildren =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            		}
HXLINE(  95)		::Array< ::Dynamic> ar = ( (::Array< ::Dynamic>)(this->boneChildren->get(bone)) );
HXLINE(  96)		if (hx::IsNull( ar )) {
HXLINE(  96)			ar = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  96)			this->boneChildren->set(bone,ar);
            		}
HXLINE(  97)		ar->push(o);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BoneAnimation_obj,addBoneChild,(void))

void BoneAnimation_obj::updateBoneChildren( ::iron::data::TObj bone, ::iron::math::Mat4 bm){
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_100_updateBoneChildren)
HXLINE( 101)		::Array< ::Dynamic> ar = ( (::Array< ::Dynamic>)(this->boneChildren->get(bone->name)) );
HXLINE( 102)		if (hx::IsNull( ar )) {
HXLINE( 102)			return;
            		}
HXLINE( 103)		{
HXLINE( 103)			int _g = 0;
HXDLIN( 103)			while((_g < ar->length)){
HXLINE( 103)				 ::iron::object::Object o = ar->__get(_g).StaticCast<  ::iron::object::Object >();
HXDLIN( 103)				_g = (_g + 1);
HXLINE( 104)				 ::iron::object::Transform t = o->transform;
HXLINE( 105)				if (hx::IsNull( t->boneParent )) {
HXLINE( 105)					t->boneParent =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ));
            				}
HXLINE( 106)				if (hx::IsNotNull( o->raw->parent_bone_tail )) {
HXLINE( 107)					bool _hx_tmp;
HXDLIN( 107)					if (!(( (bool)(o->raw->parent_bone_connected) ))) {
HXLINE( 107)						_hx_tmp = this->isSkinned;
            					}
            					else {
HXLINE( 107)						_hx_tmp = true;
            					}
HXDLIN( 107)					if (_hx_tmp) {
HXLINE( 108)						 ::kha::arrays::Float32ArrayPrivate v = o->raw->parent_bone_tail;
HXLINE( 109)						{
HXLINE( 109)							 ::iron::math::Mat4 _this = t->boneParent;
HXDLIN( 109)							float x = v->self.get(0);
HXDLIN( 109)							float y = v->self.get(1);
HXDLIN( 109)							float z = v->self.get(2);
HXDLIN( 109)							_this->self->_00 = ( (float)(((Float)1.0)) );
HXDLIN( 109)							_this->self->_01 = ( (float)(((Float)0.0)) );
HXDLIN( 109)							_this->self->_02 = ( (float)(((Float)0.0)) );
HXDLIN( 109)							_this->self->_03 = ( (float)(((Float)0.0)) );
HXDLIN( 109)							_this->self->_10 = ( (float)(((Float)0.0)) );
HXDLIN( 109)							_this->self->_11 = ( (float)(((Float)1.0)) );
HXDLIN( 109)							_this->self->_12 = ( (float)(((Float)0.0)) );
HXDLIN( 109)							_this->self->_13 = ( (float)(((Float)0.0)) );
HXDLIN( 109)							_this->self->_20 = ( (float)(((Float)0.0)) );
HXDLIN( 109)							_this->self->_21 = ( (float)(((Float)0.0)) );
HXDLIN( 109)							_this->self->_22 = ( (float)(((Float)1.0)) );
HXDLIN( 109)							_this->self->_23 = ( (float)(((Float)0.0)) );
HXDLIN( 109)							_this->self->_30 = x;
HXDLIN( 109)							_this->self->_31 = y;
HXDLIN( 109)							_this->self->_32 = z;
HXDLIN( 109)							_this->self->_33 = ( (float)(((Float)1.0)) );
            						}
HXLINE( 110)						{
HXLINE( 110)							 ::iron::math::Mat4 _this1 = t->boneParent;
HXDLIN( 110)							float a00 = _this1->self->_00;
HXDLIN( 110)							float a01 = _this1->self->_01;
HXDLIN( 110)							float a02 = _this1->self->_02;
HXDLIN( 110)							float a03 = _this1->self->_03;
HXDLIN( 110)							float a10 = _this1->self->_10;
HXDLIN( 110)							float a11 = _this1->self->_11;
HXDLIN( 110)							float a12 = _this1->self->_12;
HXDLIN( 110)							float a13 = _this1->self->_13;
HXDLIN( 110)							float a20 = _this1->self->_20;
HXDLIN( 110)							float a21 = _this1->self->_21;
HXDLIN( 110)							float a22 = _this1->self->_22;
HXDLIN( 110)							float a23 = _this1->self->_23;
HXDLIN( 110)							float a30 = _this1->self->_30;
HXDLIN( 110)							float a31 = _this1->self->_31;
HXDLIN( 110)							float a32 = _this1->self->_32;
HXDLIN( 110)							float a33 = _this1->self->_33;
HXDLIN( 110)							float b0 = bm->self->_00;
HXDLIN( 110)							float b1 = bm->self->_10;
HXDLIN( 110)							float b2 = bm->self->_20;
HXDLIN( 110)							float b3 = bm->self->_30;
HXDLIN( 110)							_this1->self->_00 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 110)							_this1->self->_10 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 110)							_this1->self->_20 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 110)							_this1->self->_30 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN( 110)							b0 = bm->self->_01;
HXDLIN( 110)							b1 = bm->self->_11;
HXDLIN( 110)							b2 = bm->self->_21;
HXDLIN( 110)							b3 = bm->self->_31;
HXDLIN( 110)							_this1->self->_01 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 110)							_this1->self->_11 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 110)							_this1->self->_21 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 110)							_this1->self->_31 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN( 110)							b0 = bm->self->_02;
HXDLIN( 110)							b1 = bm->self->_12;
HXDLIN( 110)							b2 = bm->self->_22;
HXDLIN( 110)							b3 = bm->self->_32;
HXDLIN( 110)							_this1->self->_02 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 110)							_this1->self->_12 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 110)							_this1->self->_22 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 110)							_this1->self->_32 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN( 110)							b0 = bm->self->_03;
HXDLIN( 110)							b1 = bm->self->_13;
HXDLIN( 110)							b2 = bm->self->_23;
HXDLIN( 110)							b3 = bm->self->_33;
HXDLIN( 110)							_this1->self->_03 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 110)							_this1->self->_13 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 110)							_this1->self->_23 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 110)							_this1->self->_33 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
            						}
            					}
            					else {
HXLINE( 113)						 ::kha::arrays::Float32ArrayPrivate v1 = o->raw->parent_bone_tail_pose;
HXLINE( 114)						{
HXLINE( 114)							 ::iron::math::Mat4 _this2 = t->boneParent;
HXDLIN( 114)							_this2->self->_00 = bm->self->_00;
HXDLIN( 114)							_this2->self->_01 = bm->self->_01;
HXDLIN( 114)							_this2->self->_02 = bm->self->_02;
HXDLIN( 114)							_this2->self->_03 = bm->self->_03;
HXDLIN( 114)							_this2->self->_10 = bm->self->_10;
HXDLIN( 114)							_this2->self->_11 = bm->self->_11;
HXDLIN( 114)							_this2->self->_12 = bm->self->_12;
HXDLIN( 114)							_this2->self->_13 = bm->self->_13;
HXDLIN( 114)							_this2->self->_20 = bm->self->_20;
HXDLIN( 114)							_this2->self->_21 = bm->self->_21;
HXDLIN( 114)							_this2->self->_22 = bm->self->_22;
HXDLIN( 114)							_this2->self->_23 = bm->self->_23;
HXDLIN( 114)							_this2->self->_30 = bm->self->_30;
HXDLIN( 114)							_this2->self->_31 = bm->self->_31;
HXDLIN( 114)							_this2->self->_32 = bm->self->_32;
HXDLIN( 114)							_this2->self->_33 = bm->self->_33;
            						}
HXLINE( 115)						{
HXLINE( 115)							 ::iron::math::Mat4 _this3 = t->boneParent;
HXDLIN( 115)							float x1 = v1->self.get(0);
HXDLIN( 115)							float y1 = v1->self.get(1);
HXDLIN( 115)							float z1 = v1->self.get(2);
HXDLIN( 115)							{
HXLINE( 115)								 ::iron::math::Mat4 _g1 = _this3;
HXDLIN( 115)								{
HXLINE( 115)									float _g2 = _g1->self->_00;
HXDLIN( 115)									_g1->self->_00 = (_g2 + (x1 * _this3->self->_03));
            								}
            							}
HXDLIN( 115)							{
HXLINE( 115)								 ::iron::math::Mat4 _g3 = _this3;
HXDLIN( 115)								{
HXLINE( 115)									float _g4 = _g3->self->_01;
HXDLIN( 115)									_g3->self->_01 = (_g4 + (y1 * _this3->self->_03));
            								}
            							}
HXDLIN( 115)							{
HXLINE( 115)								 ::iron::math::Mat4 _g5 = _this3;
HXDLIN( 115)								{
HXLINE( 115)									float _g6 = _g5->self->_02;
HXDLIN( 115)									_g5->self->_02 = (_g6 + (z1 * _this3->self->_03));
            								}
            							}
HXDLIN( 115)							{
HXLINE( 115)								 ::iron::math::Mat4 _g7 = _this3;
HXDLIN( 115)								{
HXLINE( 115)									float _g8 = _g7->self->_10;
HXDLIN( 115)									_g7->self->_10 = (_g8 + (x1 * _this3->self->_13));
            								}
            							}
HXDLIN( 115)							{
HXLINE( 115)								 ::iron::math::Mat4 _g9 = _this3;
HXDLIN( 115)								{
HXLINE( 115)									float _g10 = _g9->self->_11;
HXDLIN( 115)									_g9->self->_11 = (_g10 + (y1 * _this3->self->_13));
            								}
            							}
HXDLIN( 115)							{
HXLINE( 115)								 ::iron::math::Mat4 _g11 = _this3;
HXDLIN( 115)								{
HXLINE( 115)									float _g12 = _g11->self->_12;
HXDLIN( 115)									_g11->self->_12 = (_g12 + (z1 * _this3->self->_13));
            								}
            							}
HXDLIN( 115)							{
HXLINE( 115)								 ::iron::math::Mat4 _g13 = _this3;
HXDLIN( 115)								{
HXLINE( 115)									float _g14 = _g13->self->_20;
HXDLIN( 115)									_g13->self->_20 = (_g14 + (x1 * _this3->self->_23));
            								}
            							}
HXDLIN( 115)							{
HXLINE( 115)								 ::iron::math::Mat4 _g15 = _this3;
HXDLIN( 115)								{
HXLINE( 115)									float _g16 = _g15->self->_21;
HXDLIN( 115)									_g15->self->_21 = (_g16 + (y1 * _this3->self->_23));
            								}
            							}
HXDLIN( 115)							{
HXLINE( 115)								 ::iron::math::Mat4 _g17 = _this3;
HXDLIN( 115)								{
HXLINE( 115)									float _g18 = _g17->self->_22;
HXDLIN( 115)									_g17->self->_22 = (_g18 + (z1 * _this3->self->_23));
            								}
            							}
HXDLIN( 115)							{
HXLINE( 115)								 ::iron::math::Mat4 _g19 = _this3;
HXDLIN( 115)								{
HXLINE( 115)									float _g20 = _g19->self->_30;
HXDLIN( 115)									_g19->self->_30 = (_g20 + (x1 * _this3->self->_33));
            								}
            							}
HXDLIN( 115)							{
HXLINE( 115)								 ::iron::math::Mat4 _g21 = _this3;
HXDLIN( 115)								{
HXLINE( 115)									float _g22 = _g21->self->_31;
HXDLIN( 115)									_g21->self->_31 = (_g22 + (y1 * _this3->self->_33));
            								}
            							}
HXDLIN( 115)							{
HXLINE( 115)								 ::iron::math::Mat4 _g23 = _this3;
HXDLIN( 115)								{
HXLINE( 115)									float _g24 = _g23->self->_32;
HXDLIN( 115)									_g23->self->_32 = (_g24 + (z1 * _this3->self->_33));
            								}
            							}
            						}
            					}
            				}
            				else {
HXLINE( 118)					 ::iron::math::Mat4 _this4 = t->boneParent;
HXDLIN( 118)					_this4->self->_00 = bm->self->_00;
HXDLIN( 118)					_this4->self->_01 = bm->self->_01;
HXDLIN( 118)					_this4->self->_02 = bm->self->_02;
HXDLIN( 118)					_this4->self->_03 = bm->self->_03;
HXDLIN( 118)					_this4->self->_10 = bm->self->_10;
HXDLIN( 118)					_this4->self->_11 = bm->self->_11;
HXDLIN( 118)					_this4->self->_12 = bm->self->_12;
HXDLIN( 118)					_this4->self->_13 = bm->self->_13;
HXDLIN( 118)					_this4->self->_20 = bm->self->_20;
HXDLIN( 118)					_this4->self->_21 = bm->self->_21;
HXDLIN( 118)					_this4->self->_22 = bm->self->_22;
HXDLIN( 118)					_this4->self->_23 = bm->self->_23;
HXDLIN( 118)					_this4->self->_30 = bm->self->_30;
HXDLIN( 118)					_this4->self->_31 = bm->self->_31;
HXDLIN( 118)					_this4->self->_32 = bm->self->_32;
HXDLIN( 118)					_this4->self->_33 = bm->self->_33;
            				}
HXLINE( 119)				t->buildMatrix();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BoneAnimation_obj,updateBoneChildren,(void))

int BoneAnimation_obj::numParents( ::iron::data::TObj b){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_123_numParents)
HXLINE( 124)		int i = 0;
HXLINE( 125)		 ::iron::data::TObj p = b->parent;
HXLINE( 126)		while(hx::IsNotNull( p )){
HXLINE( 126)			i = (i + 1);
HXDLIN( 126)			p = p->parent;
            		}
HXLINE( 127)		return i;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BoneAnimation_obj,numParents,return )

void BoneAnimation_obj::setMats(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::iron::object::BoneAnimation,_gthis) HXARGC(2)
            		int _hx_run(int a,int b){
            			HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_136_setMats)
HXLINE( 137)			int i = _gthis->numParents(_gthis->skeletonBones->__get(a).StaticCast<  ::iron::data::TObj >());
HXLINE( 138)			int j = _gthis->numParents(_gthis->skeletonBones->__get(b).StaticCast<  ::iron::data::TObj >());
HXLINE( 139)			if ((i < j)) {
HXLINE( 139)				return -1;
            			}
            			else {
HXLINE( 139)				if ((i > j)) {
HXLINE( 139)					return 1;
            				}
            				else {
HXLINE( 139)					return 0;
            				}
            			}
HXDLIN( 139)			return 0;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_130_setMats)
HXDLIN( 130)		 ::iron::object::BoneAnimation _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 131)		while((this->matsFast->length < this->skeletonBones->length)){
HXLINE( 132)			::Array< ::Dynamic> _hx_tmp = this->matsFast;
HXDLIN( 132)			_hx_tmp->push( ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) )));
HXLINE( 133)			this->matsFastSort->push(this->matsFastSort->length);
            		}
HXLINE( 136)		this->matsFastSort->sort( ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE( 142)		if (hx::IsNotNull( this->skeletonBonesBlend )) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::iron::object::BoneAnimation,_gthis) HXARGC(2)
            			int _hx_run(int a1,int b1){
            				HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_147_setMats)
HXLINE( 148)				int i1 = _gthis->numParents(_gthis->skeletonBonesBlend->__get(a1).StaticCast<  ::iron::data::TObj >());
HXLINE( 149)				int j1 = _gthis->numParents(_gthis->skeletonBonesBlend->__get(b1).StaticCast<  ::iron::data::TObj >());
HXLINE( 150)				if ((i1 < j1)) {
HXLINE( 150)					return -1;
            				}
            				else {
HXLINE( 150)					if ((i1 > j1)) {
HXLINE( 150)						return 1;
            					}
            					else {
HXLINE( 150)						return 0;
            					}
            				}
HXDLIN( 150)				return 0;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 143)			while((this->matsFastBlend->length < this->skeletonBonesBlend->length)){
HXLINE( 144)				::Array< ::Dynamic> _hx_tmp1 = this->matsFastBlend;
HXDLIN( 144)				_hx_tmp1->push( ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) )));
HXLINE( 145)				this->matsFastBlendSort->push(this->matsFastBlendSort->length);
            			}
HXLINE( 147)			this->matsFastBlendSort->sort( ::Dynamic(new _hx_Closure_1(_gthis)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BoneAnimation_obj,setMats,(void))

void BoneAnimation_obj::setAction(::String action){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_155_setAction)
HXLINE( 156)		if (this->isSkinned) {
HXLINE( 157)			this->skeletonBones = ( (::Array< ::Dynamic>)(this->data->geom->actions->get(action)) );
HXLINE( 158)			this->skeletonMats = ( (::Array< ::Dynamic>)(this->data->geom->mats->get(action)) );
HXLINE( 159)			this->skeletonBonesBlend = null();
HXLINE( 160)			this->skeletonMatsBlend = null();
            		}
            		else {
HXLINE( 163)			this->armature->initMats();
HXLINE( 164)			 ::Dynamic a = this->armature->getAction(action);
HXLINE( 165)			this->skeletonBones = ( (::Array< ::Dynamic>)(a->__Field(HX_("bones",af,58,f7,b6),hx::paccDynamic)) );
HXLINE( 166)			this->skeletonMats = ( (::Array< ::Dynamic>)(a->__Field(HX_("mats",d3,41,56,48),hx::paccDynamic)) );
            		}
HXLINE( 168)		this->setMats();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BoneAnimation_obj,setAction,(void))

void BoneAnimation_obj::setActionBlend(::String action){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_171_setActionBlend)
HXLINE( 172)		if (this->isSkinned) {
HXLINE( 173)			this->skeletonBonesBlend = this->skeletonBones;
HXLINE( 174)			this->skeletonMatsBlend = this->skeletonMats;
HXLINE( 175)			this->skeletonBones = ( (::Array< ::Dynamic>)(this->data->geom->actions->get(action)) );
HXLINE( 176)			this->skeletonMats = ( (::Array< ::Dynamic>)(this->data->geom->mats->get(action)) );
            		}
            		else {
HXLINE( 179)			this->armature->initMats();
HXLINE( 180)			 ::Dynamic a = this->armature->getAction(action);
HXLINE( 181)			this->skeletonBones = ( (::Array< ::Dynamic>)(a->__Field(HX_("bones",af,58,f7,b6),hx::paccDynamic)) );
HXLINE( 182)			this->skeletonMats = ( (::Array< ::Dynamic>)(a->__Field(HX_("mats",d3,41,56,48),hx::paccDynamic)) );
            		}
HXLINE( 184)		this->setMats();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BoneAnimation_obj,setActionBlend,(void))

void BoneAnimation_obj::play(::String __o_action, ::Dynamic onComplete,hx::Null< Float >  __o_blendTime,hx::Null< Float >  __o_speed,hx::Null< bool >  __o_loop){
::String action = __o_action.Default(HX_("",00,00,00,00));
Float blendTime = __o_blendTime.Default(((Float)0.2));
Float speed = __o_speed.Default(((Float)1.0));
bool loop = __o_loop.Default(true);
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_187_play)
HXLINE( 188)		this->super::play(action,onComplete,blendTime,speed,loop);
HXLINE( 189)		if ((action != HX_("",00,00,00,00))) {
HXLINE( 190)			if ((blendTime > 0)) {
HXLINE( 190)				this->setActionBlend(action);
            			}
            			else {
HXLINE( 190)				this->setAction(action);
            			}
            		}
HXLINE( 192)		this->blendFactor = ( (float)(((Float)0.0)) );
            	}


void BoneAnimation_obj::blend(::String action1,::String action2,float factor){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_195_blend)
HXLINE( 196)		if ((factor == ((Float)0.0))) {
HXLINE( 197)			this->setAction(action1);
HXLINE( 198)			return;
            		}
HXLINE( 200)		this->setAction(action2);
HXLINE( 201)		this->setActionBlend(action1);
HXLINE( 202)		this->super::blend(action1,action2,factor);
            	}


void BoneAnimation_obj::update(float delta){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_205_update)
HXLINE( 206)		bool _hx_tmp;
HXDLIN( 206)		if (!(this->isSkinned)) {
HXLINE( 206)			_hx_tmp = hx::IsNull( this->skeletonBones );
            		}
            		else {
HXLINE( 206)			_hx_tmp = false;
            		}
HXDLIN( 206)		if (_hx_tmp) {
HXLINE( 206)			this->setAction(( (::String)(this->armature->actions->__get(0)->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) ));
            		}
HXLINE( 207)		bool _hx_tmp1;
HXDLIN( 207)		if (hx::IsNotNull( this->object )) {
HXLINE( 207)			if (!(!(this->object->visible))) {
HXLINE( 207)				_hx_tmp1 = this->object->culled;
            			}
            			else {
HXLINE( 207)				_hx_tmp1 = true;
            			}
            		}
            		else {
HXLINE( 207)			_hx_tmp1 = false;
            		}
HXDLIN( 207)		if (_hx_tmp1) {
HXLINE( 207)			return;
            		}
HXLINE( 208)		bool _hx_tmp2;
HXDLIN( 208)		if (hx::IsNotNull( this->skeletonBones )) {
HXLINE( 208)			_hx_tmp2 = (this->skeletonBones->length == 0);
            		}
            		else {
HXLINE( 208)			_hx_tmp2 = true;
            		}
HXDLIN( 208)		if (_hx_tmp2) {
HXLINE( 208)			return;
            		}
HXLINE( 218)		this->super::update(delta);
HXLINE( 219)		bool _hx_tmp3;
HXDLIN( 219)		if (!(this->paused)) {
HXLINE( 219)			_hx_tmp3 = (this->speed == ((Float)0.0));
            		}
            		else {
HXLINE( 219)			_hx_tmp3 = true;
            		}
HXDLIN( 219)		if (_hx_tmp3) {
HXLINE( 219)			return;
            		}
HXLINE( 221)		::Array< ::Dynamic> lastBones = this->skeletonBones;
HXLINE( 222)		{
HXLINE( 222)			int _g = 0;
HXDLIN( 222)			::Array< ::Dynamic> _g1 = this->skeletonBones;
HXDLIN( 222)			while((_g < _g1->length)){
HXLINE( 222)				 ::iron::data::TObj b = _g1->__get(_g).StaticCast<  ::iron::data::TObj >();
HXDLIN( 222)				_g = (_g + 1);
HXLINE( 223)				if (hx::IsNotNull( b->anim )) {
HXLINE( 223)					this->updateTrack(b->anim);
HXDLIN( 223)					goto _hx_goto_19;
            				}
            			}
            			_hx_goto_19:;
            		}
HXLINE( 226)		if (hx::IsNotEq( lastBones,this->skeletonBones )) {
HXLINE( 226)			return;
            		}
HXLINE( 228)		{
HXLINE( 228)			int _g11 = 0;
HXDLIN( 228)			int _g2 = this->skeletonBones->length;
HXDLIN( 228)			while((_g11 < _g2)){
HXLINE( 228)				_g11 = (_g11 + 1);
HXDLIN( 228)				int i = (_g11 - 1);
HXLINE( 229)				 ::iron::data::TAnimation _hx_tmp4 = this->skeletonBones->__get(i).StaticCast<  ::iron::data::TObj >()->anim;
HXDLIN( 229)				this->updateAnimSampled(_hx_tmp4,this->skeletonMats->__get(i).StaticCast<  ::iron::math::Mat4 >());
            			}
            		}
HXLINE( 231)		bool _hx_tmp5;
HXDLIN( 231)		if ((this->blendTime > 0)) {
HXLINE( 231)			_hx_tmp5 = hx::IsNotNull( this->skeletonBonesBlend );
            		}
            		else {
HXLINE( 231)			_hx_tmp5 = false;
            		}
HXDLIN( 231)		if (_hx_tmp5) {
HXLINE( 232)			{
HXLINE( 232)				int _g3 = 0;
HXDLIN( 232)				::Array< ::Dynamic> _g12 = this->skeletonBonesBlend;
HXDLIN( 232)				while((_g3 < _g12->length)){
HXLINE( 232)					 ::iron::data::TObj b1 = _g12->__get(_g3).StaticCast<  ::iron::data::TObj >();
HXDLIN( 232)					_g3 = (_g3 + 1);
HXLINE( 233)					if (hx::IsNotNull( b1->anim )) {
HXLINE( 233)						this->updateTrack(b1->anim);
HXDLIN( 233)						goto _hx_goto_21;
            					}
            				}
            				_hx_goto_21:;
            			}
HXLINE( 235)			{
HXLINE( 235)				int _g13 = 0;
HXDLIN( 235)				int _g4 = this->skeletonBonesBlend->length;
HXDLIN( 235)				while((_g13 < _g4)){
HXLINE( 235)					_g13 = (_g13 + 1);
HXDLIN( 235)					int i1 = (_g13 - 1);
HXLINE( 236)					 ::iron::data::TAnimation _hx_tmp6 = this->skeletonBonesBlend->__get(i1).StaticCast<  ::iron::data::TObj >()->anim;
HXDLIN( 236)					this->updateAnimSampled(_hx_tmp6,this->skeletonMatsBlend->__get(i1).StaticCast<  ::iron::math::Mat4 >());
            				}
            			}
            		}
HXLINE( 240)		this->updateConstraints();
HXLINE( 243)		if (hx::IsNotNull( this->onUpdates )) {
HXLINE( 243)			int _g5 = 0;
HXDLIN( 243)			::Array< ::Dynamic> _g14 = this->onUpdates;
HXDLIN( 243)			while((_g5 < _g14->length)){
HXLINE( 243)				 ::Dynamic f = _g14->__get(_g5);
HXDLIN( 243)				_g5 = (_g5 + 1);
HXDLIN( 243)				f();
            			}
            		}
HXLINE( 246)		{
HXLINE( 246)			int _g15 = 0;
HXDLIN( 246)			int _g6 = this->skeletonBones->length;
HXDLIN( 246)			while((_g15 < _g6)){
HXLINE( 246)				_g15 = (_g15 + 1);
HXDLIN( 246)				int i2 = (_g15 - 1);
HXLINE( 248)				this->multParent(this->matsFastSort->__get(i2),this->matsFast,this->skeletonBones,this->skeletonMats);
            			}
            		}
HXLINE( 250)		if (hx::IsNotNull( this->skeletonBonesBlend )) {
HXLINE( 251)			int _g16 = 0;
HXDLIN( 251)			int _g7 = this->skeletonBonesBlend->length;
HXDLIN( 251)			while((_g16 < _g7)){
HXLINE( 251)				_g16 = (_g16 + 1);
HXDLIN( 251)				int i3 = (_g16 - 1);
HXLINE( 252)				this->multParent(this->matsFastBlendSort->__get(i3),this->matsFastBlend,this->skeletonBonesBlend,this->skeletonMatsBlend);
            			}
            		}
HXLINE( 256)		if (this->isSkinned) {
HXLINE( 260)			this->updateSkinGpu();
            		}
            		else {
HXLINE( 263)			this->updateBonesOnly();
            		}
            	}


void BoneAnimation_obj::multParent(int i,::Array< ::Dynamic> fasts,::Array< ::Dynamic> bones,::Array< ::Dynamic> mats){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_270_multParent)
HXLINE( 271)		 ::iron::math::Mat4 f = fasts->__get(i).StaticCast<  ::iron::math::Mat4 >();
HXLINE( 272)		bool _hx_tmp;
HXDLIN( 272)		if (hx::IsNotNull( this->applyParent )) {
HXLINE( 272)			_hx_tmp = !(this->applyParent->__get(i));
            		}
            		else {
HXLINE( 272)			_hx_tmp = false;
            		}
HXDLIN( 272)		if (_hx_tmp) {
HXLINE( 272)			{
HXLINE( 272)				 ::iron::math::Mat4 m = mats->__get(i).StaticCast<  ::iron::math::Mat4 >();
HXDLIN( 272)				f->self->_00 = m->self->_00;
HXDLIN( 272)				f->self->_01 = m->self->_01;
HXDLIN( 272)				f->self->_02 = m->self->_02;
HXDLIN( 272)				f->self->_03 = m->self->_03;
HXDLIN( 272)				f->self->_10 = m->self->_10;
HXDLIN( 272)				f->self->_11 = m->self->_11;
HXDLIN( 272)				f->self->_12 = m->self->_12;
HXDLIN( 272)				f->self->_13 = m->self->_13;
HXDLIN( 272)				f->self->_20 = m->self->_20;
HXDLIN( 272)				f->self->_21 = m->self->_21;
HXDLIN( 272)				f->self->_22 = m->self->_22;
HXDLIN( 272)				f->self->_23 = m->self->_23;
HXDLIN( 272)				f->self->_30 = m->self->_30;
HXDLIN( 272)				f->self->_31 = m->self->_31;
HXDLIN( 272)				f->self->_32 = m->self->_32;
HXDLIN( 272)				f->self->_33 = m->self->_33;
            			}
HXDLIN( 272)			return;
            		}
HXLINE( 273)		 ::iron::data::TObj p = bones->__get(i).StaticCast<  ::iron::data::TObj >()->parent;
HXLINE( 274)		int bi = this->getBoneIndex(p,bones);
HXLINE( 275)		bool _hx_tmp1;
HXDLIN( 275)		if (hx::IsNotNull( p )) {
HXLINE( 275)			_hx_tmp1 = (bi == -1);
            		}
            		else {
HXLINE( 275)			_hx_tmp1 = true;
            		}
HXDLIN( 275)		if (_hx_tmp1) {
HXLINE( 275)			 ::iron::math::Mat4 m1 = mats->__get(i).StaticCast<  ::iron::math::Mat4 >();
HXDLIN( 275)			f->self->_00 = m1->self->_00;
HXDLIN( 275)			f->self->_01 = m1->self->_01;
HXDLIN( 275)			f->self->_02 = m1->self->_02;
HXDLIN( 275)			f->self->_03 = m1->self->_03;
HXDLIN( 275)			f->self->_10 = m1->self->_10;
HXDLIN( 275)			f->self->_11 = m1->self->_11;
HXDLIN( 275)			f->self->_12 = m1->self->_12;
HXDLIN( 275)			f->self->_13 = m1->self->_13;
HXDLIN( 275)			f->self->_20 = m1->self->_20;
HXDLIN( 275)			f->self->_21 = m1->self->_21;
HXDLIN( 275)			f->self->_22 = m1->self->_22;
HXDLIN( 275)			f->self->_23 = m1->self->_23;
HXDLIN( 275)			f->self->_30 = m1->self->_30;
HXDLIN( 275)			f->self->_31 = m1->self->_31;
HXDLIN( 275)			f->self->_32 = m1->self->_32;
HXDLIN( 275)			f->self->_33 = m1->self->_33;
            		}
            		else {
HXLINE( 275)			 ::iron::math::Mat4 b = fasts->__get(bi).StaticCast<  ::iron::math::Mat4 >();
HXDLIN( 275)			 ::iron::math::Mat4 a = mats->__get(i).StaticCast<  ::iron::math::Mat4 >();
HXDLIN( 275)			float a00 = a->self->_00;
HXDLIN( 275)			float a01 = a->self->_01;
HXDLIN( 275)			float a02 = a->self->_02;
HXDLIN( 275)			float a03 = a->self->_03;
HXDLIN( 275)			float a10 = a->self->_10;
HXDLIN( 275)			float a11 = a->self->_11;
HXDLIN( 275)			float a12 = a->self->_12;
HXDLIN( 275)			float a13 = a->self->_13;
HXDLIN( 275)			float a20 = a->self->_20;
HXDLIN( 275)			float a21 = a->self->_21;
HXDLIN( 275)			float a22 = a->self->_22;
HXDLIN( 275)			float a23 = a->self->_23;
HXDLIN( 275)			float a30 = a->self->_30;
HXDLIN( 275)			float a31 = a->self->_31;
HXDLIN( 275)			float a32 = a->self->_32;
HXDLIN( 275)			float a33 = a->self->_33;
HXDLIN( 275)			float b0 = b->self->_00;
HXDLIN( 275)			float b1 = b->self->_10;
HXDLIN( 275)			float b2 = b->self->_20;
HXDLIN( 275)			float b3 = b->self->_30;
HXDLIN( 275)			f->self->_00 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 275)			f->self->_10 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 275)			f->self->_20 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 275)			f->self->_30 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN( 275)			b0 = b->self->_01;
HXDLIN( 275)			b1 = b->self->_11;
HXDLIN( 275)			b2 = b->self->_21;
HXDLIN( 275)			b3 = b->self->_31;
HXDLIN( 275)			f->self->_01 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 275)			f->self->_11 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 275)			f->self->_21 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 275)			f->self->_31 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN( 275)			b0 = b->self->_02;
HXDLIN( 275)			b1 = b->self->_12;
HXDLIN( 275)			b2 = b->self->_22;
HXDLIN( 275)			b3 = b->self->_32;
HXDLIN( 275)			f->self->_02 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 275)			f->self->_12 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 275)			f->self->_22 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 275)			f->self->_32 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN( 275)			b0 = b->self->_03;
HXDLIN( 275)			b1 = b->self->_13;
HXDLIN( 275)			b2 = b->self->_23;
HXDLIN( 275)			b3 = b->self->_33;
HXDLIN( 275)			f->self->_03 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 275)			f->self->_13 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 275)			f->self->_23 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 275)			f->self->_33 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(BoneAnimation_obj,multParent,(void))

void BoneAnimation_obj::multParents( ::iron::math::Mat4 m,int i,::Array< ::Dynamic> bones,::Array< ::Dynamic> mats){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_278_multParents)
HXLINE( 279)		 ::iron::data::TObj bone = bones->__get(i).StaticCast<  ::iron::data::TObj >();
HXLINE( 280)		 ::iron::data::TObj p = bone->parent;
HXLINE( 281)		while(hx::IsNotNull( p )){
HXLINE( 282)			int i1 = this->getBoneIndex(p,bones);
HXLINE( 283)			if ((i1 == -1)) {
HXLINE( 283)				continue;
            			}
HXLINE( 284)			{
HXLINE( 284)				 ::iron::math::Mat4 m1 = mats->__get(i1).StaticCast<  ::iron::math::Mat4 >();
HXDLIN( 284)				float a00 = m->self->_00;
HXDLIN( 284)				float a01 = m->self->_01;
HXDLIN( 284)				float a02 = m->self->_02;
HXDLIN( 284)				float a03 = m->self->_03;
HXDLIN( 284)				float a10 = m->self->_10;
HXDLIN( 284)				float a11 = m->self->_11;
HXDLIN( 284)				float a12 = m->self->_12;
HXDLIN( 284)				float a13 = m->self->_13;
HXDLIN( 284)				float a20 = m->self->_20;
HXDLIN( 284)				float a21 = m->self->_21;
HXDLIN( 284)				float a22 = m->self->_22;
HXDLIN( 284)				float a23 = m->self->_23;
HXDLIN( 284)				float a30 = m->self->_30;
HXDLIN( 284)				float a31 = m->self->_31;
HXDLIN( 284)				float a32 = m->self->_32;
HXDLIN( 284)				float a33 = m->self->_33;
HXDLIN( 284)				float b0 = m1->self->_00;
HXDLIN( 284)				float b1 = m1->self->_10;
HXDLIN( 284)				float b2 = m1->self->_20;
HXDLIN( 284)				float b3 = m1->self->_30;
HXDLIN( 284)				m->self->_00 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 284)				m->self->_10 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 284)				m->self->_20 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 284)				m->self->_30 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN( 284)				b0 = m1->self->_01;
HXDLIN( 284)				b1 = m1->self->_11;
HXDLIN( 284)				b2 = m1->self->_21;
HXDLIN( 284)				b3 = m1->self->_31;
HXDLIN( 284)				m->self->_01 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 284)				m->self->_11 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 284)				m->self->_21 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 284)				m->self->_31 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN( 284)				b0 = m1->self->_02;
HXDLIN( 284)				b1 = m1->self->_12;
HXDLIN( 284)				b2 = m1->self->_22;
HXDLIN( 284)				b3 = m1->self->_32;
HXDLIN( 284)				m->self->_02 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 284)				m->self->_12 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 284)				m->self->_22 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 284)				m->self->_32 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN( 284)				b0 = m1->self->_03;
HXDLIN( 284)				b1 = m1->self->_13;
HXDLIN( 284)				b2 = m1->self->_23;
HXDLIN( 284)				b3 = m1->self->_33;
HXDLIN( 284)				m->self->_03 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 284)				m->self->_13 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 284)				m->self->_23 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 284)				m->self->_33 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
            			}
HXLINE( 285)			p = p->parent;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(BoneAnimation_obj,multParents,(void))

void BoneAnimation_obj::updateConstraints(){
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_289_updateConstraints)
HXLINE( 290)		if (hx::IsNull( this->data )) {
HXLINE( 290)			return;
            		}
HXLINE( 291)		::Array< ::Dynamic> cs = this->data->raw->skin->constraints;
HXLINE( 292)		if (hx::IsNull( cs )) {
HXLINE( 292)			return;
            		}
HXLINE( 294)		if (hx::IsNull( this->constraintTargets )) {
HXLINE( 295)			this->constraintTargets = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 296)			this->constraintTargetsI = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 297)			{
HXLINE( 297)				int _g = 0;
HXDLIN( 297)				while((_g < cs->length)){
HXLINE( 297)					 ::iron::data::TConstraint c = cs->__get(_g).StaticCast<  ::iron::data::TConstraint >();
HXDLIN( 297)					_g = (_g + 1);
HXLINE( 298)					 ::iron::object::Object o = ::iron::Scene_obj::active->getChild(c->target);
HXLINE( 299)					this->constraintTargets->push(o);
HXLINE( 300)					 ::iron::math::Mat4 m = null();
HXLINE( 301)					if (hx::IsNotNull( o )) {
HXLINE( 302)						 ::kha::arrays::Float32ArrayPrivate a = o->raw->transform->values;
HXDLIN( 302)						int offset = 0;
HXDLIN( 302)						float m1 = a->self.get(offset);
HXDLIN( 302)						 float32array a1 = a->self;
HXDLIN( 302)						float m2 = a1.get((1 + offset));
HXDLIN( 302)						 float32array a2 = a->self;
HXDLIN( 302)						float m3 = a2.get((2 + offset));
HXDLIN( 302)						 float32array a3 = a->self;
HXDLIN( 302)						float m4 = a3.get((3 + offset));
HXDLIN( 302)						 float32array a4 = a->self;
HXDLIN( 302)						float m5 = a4.get((4 + offset));
HXDLIN( 302)						 float32array a5 = a->self;
HXDLIN( 302)						float m6 = a5.get((5 + offset));
HXDLIN( 302)						 float32array a6 = a->self;
HXDLIN( 302)						float m7 = a6.get((6 + offset));
HXDLIN( 302)						 float32array a7 = a->self;
HXDLIN( 302)						float m8 = a7.get((7 + offset));
HXDLIN( 302)						 float32array a8 = a->self;
HXDLIN( 302)						float m9 = a8.get((8 + offset));
HXDLIN( 302)						 float32array a9 = a->self;
HXDLIN( 302)						float m10 = a9.get((9 + offset));
HXDLIN( 302)						 float32array a10 = a->self;
HXDLIN( 302)						float m11 = a10.get((10 + offset));
HXDLIN( 302)						 float32array a11 = a->self;
HXDLIN( 302)						float m12 = a11.get((11 + offset));
HXDLIN( 302)						 float32array a12 = a->self;
HXDLIN( 302)						float m13 = a12.get((12 + offset));
HXDLIN( 302)						 float32array a13 = a->self;
HXDLIN( 302)						float m14 = a13.get((13 + offset));
HXDLIN( 302)						 float32array a14 = a->self;
HXDLIN( 302)						float m15 = a14.get((14 + offset));
HXDLIN( 302)						 float32array a15 = a->self;
HXDLIN( 302)						m =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,m13,m14,m15,a15.get((15 + offset)));
HXLINE( 303)						{
HXLINE( 303)							float a00 = m->self->_00;
HXDLIN( 303)							float a01 = m->self->_01;
HXDLIN( 303)							float a02 = m->self->_02;
HXDLIN( 303)							float a03 = m->self->_03;
HXDLIN( 303)							float a101 = m->self->_10;
HXDLIN( 303)							float a111 = m->self->_11;
HXDLIN( 303)							float a121 = m->self->_12;
HXDLIN( 303)							float a131 = m->self->_13;
HXDLIN( 303)							float a20 = m->self->_20;
HXDLIN( 303)							float a21 = m->self->_21;
HXDLIN( 303)							float a22 = m->self->_22;
HXDLIN( 303)							float a23 = m->self->_23;
HXDLIN( 303)							float a30 = m->self->_30;
HXDLIN( 303)							float a31 = m->self->_31;
HXDLIN( 303)							float a32 = m->self->_32;
HXDLIN( 303)							float a33 = m->self->_33;
HXDLIN( 303)							float b00 = ((a00 * a111) - (a01 * a101));
HXDLIN( 303)							float b01 = ((a00 * a121) - (a02 * a101));
HXDLIN( 303)							float b02 = ((a00 * a131) - (a03 * a101));
HXDLIN( 303)							float b03 = ((a01 * a121) - (a02 * a111));
HXDLIN( 303)							float b04 = ((a01 * a131) - (a03 * a111));
HXDLIN( 303)							float b05 = ((a02 * a131) - (a03 * a121));
HXDLIN( 303)							float b06 = ((a20 * a31) - (a21 * a30));
HXDLIN( 303)							float b07 = ((a20 * a32) - (a22 * a30));
HXDLIN( 303)							float b08 = ((a20 * a33) - (a23 * a30));
HXDLIN( 303)							float b09 = ((a21 * a32) - (a22 * a31));
HXDLIN( 303)							float b10 = ((a21 * a33) - (a23 * a31));
HXDLIN( 303)							float b11 = ((a22 * a33) - (a23 * a32));
HXDLIN( 303)							float det = ((((((b00 * b11) - (b01 * b10)) + (b02 * b09)) + (b03 * b08)) - (b04 * b07)) + (b05 * b06));
HXDLIN( 303)							if ((det == ((Float)0.0))) {
HXLINE( 303)								m->self->_00 = ( (float)(((Float)1.0)) );
HXDLIN( 303)								m->self->_01 = ( (float)(((Float)0.0)) );
HXDLIN( 303)								m->self->_02 = ( (float)(((Float)0.0)) );
HXDLIN( 303)								m->self->_03 = ( (float)(((Float)0.0)) );
HXDLIN( 303)								m->self->_10 = ( (float)(((Float)0.0)) );
HXDLIN( 303)								m->self->_11 = ( (float)(((Float)1.0)) );
HXDLIN( 303)								m->self->_12 = ( (float)(((Float)0.0)) );
HXDLIN( 303)								m->self->_13 = ( (float)(((Float)0.0)) );
HXDLIN( 303)								m->self->_20 = ( (float)(((Float)0.0)) );
HXDLIN( 303)								m->self->_21 = ( (float)(((Float)0.0)) );
HXDLIN( 303)								m->self->_22 = ( (float)(((Float)1.0)) );
HXDLIN( 303)								m->self->_23 = ( (float)(((Float)0.0)) );
HXDLIN( 303)								m->self->_30 = ( (float)(((Float)0.0)) );
HXDLIN( 303)								m->self->_31 = ( (float)(((Float)0.0)) );
HXDLIN( 303)								m->self->_32 = ( (float)(((Float)0.0)) );
HXDLIN( 303)								m->self->_33 = ( (float)(((Float)1.0)) );
            							}
            							else {
HXLINE( 303)								det = ( (float)((((Float)1.0) / ( (Float)(det) ))) );
HXDLIN( 303)								m->self->_00 = ((((a111 * b11) - (a121 * b10)) + (a131 * b09)) * det);
HXDLIN( 303)								m->self->_01 = ((((a02 * b10) - (a01 * b11)) - (a03 * b09)) * det);
HXDLIN( 303)								m->self->_02 = ((((a31 * b05) - (a32 * b04)) + (a33 * b03)) * det);
HXDLIN( 303)								m->self->_03 = ((((a22 * b04) - (a21 * b05)) - (a23 * b03)) * det);
HXDLIN( 303)								m->self->_10 = ((((a121 * b08) - (a101 * b11)) - (a131 * b07)) * det);
HXDLIN( 303)								m->self->_11 = ((((a00 * b11) - (a02 * b08)) + (a03 * b07)) * det);
HXDLIN( 303)								m->self->_12 = ((((a32 * b02) - (a30 * b05)) - (a33 * b01)) * det);
HXDLIN( 303)								m->self->_13 = ((((a20 * b05) - (a22 * b02)) + (a23 * b01)) * det);
HXDLIN( 303)								m->self->_20 = ((((a101 * b10) - (a111 * b08)) + (a131 * b06)) * det);
HXDLIN( 303)								m->self->_21 = ((((a01 * b08) - (a00 * b10)) - (a03 * b06)) * det);
HXDLIN( 303)								m->self->_22 = ((((a30 * b04) - (a31 * b02)) + (a33 * b00)) * det);
HXDLIN( 303)								m->self->_23 = ((((a21 * b02) - (a20 * b04)) - (a23 * b00)) * det);
HXDLIN( 303)								m->self->_30 = ((((a111 * b07) - (a101 * b09)) - (a121 * b06)) * det);
HXDLIN( 303)								m->self->_31 = ((((a00 * b09) - (a01 * b07)) + (a02 * b06)) * det);
HXDLIN( 303)								m->self->_32 = ((((a31 * b01) - (a30 * b03)) - (a32 * b00)) * det);
HXDLIN( 303)								m->self->_33 = ((((a20 * b03) - (a21 * b01)) + (a22 * b00)) * det);
            							}
            						}
            					}
HXLINE( 305)					this->constraintTargetsI->push(m);
            				}
            			}
HXLINE( 307)			this->constraintMats =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
            		}
HXLINE( 310)		{
HXLINE( 310)			int _g1 = 0;
HXDLIN( 310)			int _g2 = cs->length;
HXDLIN( 310)			while((_g1 < _g2)){
HXLINE( 310)				_g1 = (_g1 + 1);
HXDLIN( 310)				int i = (_g1 - 1);
HXLINE( 311)				 ::iron::data::TConstraint c1 = cs->__get(i).StaticCast<  ::iron::data::TConstraint >();
HXLINE( 312)				 ::iron::data::TObj bone = this->getBone(c1->bone);
HXLINE( 313)				if (hx::IsNull( bone )) {
HXLINE( 313)					continue;
            				}
HXLINE( 314)				 ::iron::object::Object o1 = this->constraintTargets->__get(i).StaticCast<  ::iron::object::Object >();
HXLINE( 315)				if (hx::IsNull( o1 )) {
HXLINE( 315)					continue;
            				}
HXLINE( 316)				if ((c1->type == HX_("CHILD_OF",3a,8f,f9,c9))) {
HXLINE( 317)					 ::iron::math::Mat4 m16 = ( ( ::iron::math::Mat4)(this->constraintMats->get(bone)) );
HXLINE( 318)					if (hx::IsNull( m16 )) {
HXLINE( 318)						m16 =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ));
HXDLIN( 318)						this->constraintMats->set(bone,m16);
            					}
HXLINE( 319)					{
HXLINE( 319)						 ::iron::math::Mat4 m17 = this->object->parent->transform->world;
HXDLIN( 319)						m16->self->_00 = m17->self->_00;
HXDLIN( 319)						m16->self->_01 = m17->self->_01;
HXDLIN( 319)						m16->self->_02 = m17->self->_02;
HXDLIN( 319)						m16->self->_03 = m17->self->_03;
HXDLIN( 319)						m16->self->_10 = m17->self->_10;
HXDLIN( 319)						m16->self->_11 = m17->self->_11;
HXDLIN( 319)						m16->self->_12 = m17->self->_12;
HXDLIN( 319)						m16->self->_13 = m17->self->_13;
HXDLIN( 319)						m16->self->_20 = m17->self->_20;
HXDLIN( 319)						m16->self->_21 = m17->self->_21;
HXDLIN( 319)						m16->self->_22 = m17->self->_22;
HXDLIN( 319)						m16->self->_23 = m17->self->_23;
HXDLIN( 319)						m16->self->_30 = m17->self->_30;
HXDLIN( 319)						m16->self->_31 = m17->self->_31;
HXDLIN( 319)						m16->self->_32 = m17->self->_32;
HXDLIN( 319)						m16->self->_33 = m17->self->_33;
            					}
HXLINE( 320)					{
HXLINE( 320)						 ::iron::math::Mat4 m18 = this->constraintTargetsI->__get(i).StaticCast<  ::iron::math::Mat4 >();
HXDLIN( 320)						float a001 = m16->self->_00;
HXDLIN( 320)						float a011 = m16->self->_01;
HXDLIN( 320)						float a021 = m16->self->_02;
HXDLIN( 320)						float a031 = m16->self->_03;
HXDLIN( 320)						float a102 = m16->self->_10;
HXDLIN( 320)						float a112 = m16->self->_11;
HXDLIN( 320)						float a122 = m16->self->_12;
HXDLIN( 320)						float a132 = m16->self->_13;
HXDLIN( 320)						float a201 = m16->self->_20;
HXDLIN( 320)						float a211 = m16->self->_21;
HXDLIN( 320)						float a221 = m16->self->_22;
HXDLIN( 320)						float a231 = m16->self->_23;
HXDLIN( 320)						float a301 = m16->self->_30;
HXDLIN( 320)						float a311 = m16->self->_31;
HXDLIN( 320)						float a321 = m16->self->_32;
HXDLIN( 320)						float a331 = m16->self->_33;
HXDLIN( 320)						float b0 = m18->self->_00;
HXDLIN( 320)						float b1 = m18->self->_10;
HXDLIN( 320)						float b2 = m18->self->_20;
HXDLIN( 320)						float b3 = m18->self->_30;
HXDLIN( 320)						m16->self->_00 = ((((a001 * b0) + (a011 * b1)) + (a021 * b2)) + (a031 * b3));
HXDLIN( 320)						m16->self->_10 = ((((a102 * b0) + (a112 * b1)) + (a122 * b2)) + (a132 * b3));
HXDLIN( 320)						m16->self->_20 = ((((a201 * b0) + (a211 * b1)) + (a221 * b2)) + (a231 * b3));
HXDLIN( 320)						m16->self->_30 = ((((a301 * b0) + (a311 * b1)) + (a321 * b2)) + (a331 * b3));
HXDLIN( 320)						b0 = m18->self->_01;
HXDLIN( 320)						b1 = m18->self->_11;
HXDLIN( 320)						b2 = m18->self->_21;
HXDLIN( 320)						b3 = m18->self->_31;
HXDLIN( 320)						m16->self->_01 = ((((a001 * b0) + (a011 * b1)) + (a021 * b2)) + (a031 * b3));
HXDLIN( 320)						m16->self->_11 = ((((a102 * b0) + (a112 * b1)) + (a122 * b2)) + (a132 * b3));
HXDLIN( 320)						m16->self->_21 = ((((a201 * b0) + (a211 * b1)) + (a221 * b2)) + (a231 * b3));
HXDLIN( 320)						m16->self->_31 = ((((a301 * b0) + (a311 * b1)) + (a321 * b2)) + (a331 * b3));
HXDLIN( 320)						b0 = m18->self->_02;
HXDLIN( 320)						b1 = m18->self->_12;
HXDLIN( 320)						b2 = m18->self->_22;
HXDLIN( 320)						b3 = m18->self->_32;
HXDLIN( 320)						m16->self->_02 = ((((a001 * b0) + (a011 * b1)) + (a021 * b2)) + (a031 * b3));
HXDLIN( 320)						m16->self->_12 = ((((a102 * b0) + (a112 * b1)) + (a122 * b2)) + (a132 * b3));
HXDLIN( 320)						m16->self->_22 = ((((a201 * b0) + (a211 * b1)) + (a221 * b2)) + (a231 * b3));
HXDLIN( 320)						m16->self->_32 = ((((a301 * b0) + (a311 * b1)) + (a321 * b2)) + (a331 * b3));
HXDLIN( 320)						b0 = m18->self->_03;
HXDLIN( 320)						b1 = m18->self->_13;
HXDLIN( 320)						b2 = m18->self->_23;
HXDLIN( 320)						b3 = m18->self->_33;
HXDLIN( 320)						m16->self->_03 = ((((a001 * b0) + (a011 * b1)) + (a021 * b2)) + (a031 * b3));
HXDLIN( 320)						m16->self->_13 = ((((a102 * b0) + (a112 * b1)) + (a122 * b2)) + (a132 * b3));
HXDLIN( 320)						m16->self->_23 = ((((a201 * b0) + (a211 * b1)) + (a221 * b2)) + (a231 * b3));
HXDLIN( 320)						m16->self->_33 = ((((a301 * b0) + (a311 * b1)) + (a321 * b2)) + (a331 * b3));
            					}
HXLINE( 321)					{
HXLINE( 321)						 ::iron::math::Mat4 m19 = o1->transform->world;
HXDLIN( 321)						float a002 = m16->self->_00;
HXDLIN( 321)						float a012 = m16->self->_01;
HXDLIN( 321)						float a022 = m16->self->_02;
HXDLIN( 321)						float a032 = m16->self->_03;
HXDLIN( 321)						float a103 = m16->self->_10;
HXDLIN( 321)						float a113 = m16->self->_11;
HXDLIN( 321)						float a123 = m16->self->_12;
HXDLIN( 321)						float a133 = m16->self->_13;
HXDLIN( 321)						float a202 = m16->self->_20;
HXDLIN( 321)						float a212 = m16->self->_21;
HXDLIN( 321)						float a222 = m16->self->_22;
HXDLIN( 321)						float a232 = m16->self->_23;
HXDLIN( 321)						float a302 = m16->self->_30;
HXDLIN( 321)						float a312 = m16->self->_31;
HXDLIN( 321)						float a322 = m16->self->_32;
HXDLIN( 321)						float a332 = m16->self->_33;
HXDLIN( 321)						float b010 = m19->self->_00;
HXDLIN( 321)						float b12 = m19->self->_10;
HXDLIN( 321)						float b21 = m19->self->_20;
HXDLIN( 321)						float b31 = m19->self->_30;
HXDLIN( 321)						m16->self->_00 = ((((a002 * b010) + (a012 * b12)) + (a022 * b21)) + (a032 * b31));
HXDLIN( 321)						m16->self->_10 = ((((a103 * b010) + (a113 * b12)) + (a123 * b21)) + (a133 * b31));
HXDLIN( 321)						m16->self->_20 = ((((a202 * b010) + (a212 * b12)) + (a222 * b21)) + (a232 * b31));
HXDLIN( 321)						m16->self->_30 = ((((a302 * b010) + (a312 * b12)) + (a322 * b21)) + (a332 * b31));
HXDLIN( 321)						b010 = m19->self->_01;
HXDLIN( 321)						b12 = m19->self->_11;
HXDLIN( 321)						b21 = m19->self->_21;
HXDLIN( 321)						b31 = m19->self->_31;
HXDLIN( 321)						m16->self->_01 = ((((a002 * b010) + (a012 * b12)) + (a022 * b21)) + (a032 * b31));
HXDLIN( 321)						m16->self->_11 = ((((a103 * b010) + (a113 * b12)) + (a123 * b21)) + (a133 * b31));
HXDLIN( 321)						m16->self->_21 = ((((a202 * b010) + (a212 * b12)) + (a222 * b21)) + (a232 * b31));
HXDLIN( 321)						m16->self->_31 = ((((a302 * b010) + (a312 * b12)) + (a322 * b21)) + (a332 * b31));
HXDLIN( 321)						b010 = m19->self->_02;
HXDLIN( 321)						b12 = m19->self->_12;
HXDLIN( 321)						b21 = m19->self->_22;
HXDLIN( 321)						b31 = m19->self->_32;
HXDLIN( 321)						m16->self->_02 = ((((a002 * b010) + (a012 * b12)) + (a022 * b21)) + (a032 * b31));
HXDLIN( 321)						m16->self->_12 = ((((a103 * b010) + (a113 * b12)) + (a123 * b21)) + (a133 * b31));
HXDLIN( 321)						m16->self->_22 = ((((a202 * b010) + (a212 * b12)) + (a222 * b21)) + (a232 * b31));
HXDLIN( 321)						m16->self->_32 = ((((a302 * b010) + (a312 * b12)) + (a322 * b21)) + (a332 * b31));
HXDLIN( 321)						b010 = m19->self->_03;
HXDLIN( 321)						b12 = m19->self->_13;
HXDLIN( 321)						b21 = m19->self->_23;
HXDLIN( 321)						b31 = m19->self->_33;
HXDLIN( 321)						m16->self->_03 = ((((a002 * b010) + (a012 * b12)) + (a022 * b21)) + (a032 * b31));
HXDLIN( 321)						m16->self->_13 = ((((a103 * b010) + (a113 * b12)) + (a123 * b21)) + (a133 * b31));
HXDLIN( 321)						m16->self->_23 = ((((a202 * b010) + (a212 * b12)) + (a222 * b21)) + (a232 * b31));
HXDLIN( 321)						m16->self->_33 = ((((a302 * b010) + (a312 * b12)) + (a322 * b21)) + (a332 * b31));
            					}
HXLINE( 322)					{
HXLINE( 322)						 ::iron::math::Mat4 _this = ::iron::object::BoneAnimation_obj::m1;
HXDLIN( 322)						 ::iron::math::Mat4 m20 = this->object->parent->transform->world;
HXDLIN( 322)						float a003 = m20->self->_00;
HXDLIN( 322)						float a013 = m20->self->_01;
HXDLIN( 322)						float a023 = m20->self->_02;
HXDLIN( 322)						float a033 = m20->self->_03;
HXDLIN( 322)						float a104 = m20->self->_10;
HXDLIN( 322)						float a114 = m20->self->_11;
HXDLIN( 322)						float a124 = m20->self->_12;
HXDLIN( 322)						float a134 = m20->self->_13;
HXDLIN( 322)						float a203 = m20->self->_20;
HXDLIN( 322)						float a213 = m20->self->_21;
HXDLIN( 322)						float a223 = m20->self->_22;
HXDLIN( 322)						float a233 = m20->self->_23;
HXDLIN( 322)						float a303 = m20->self->_30;
HXDLIN( 322)						float a313 = m20->self->_31;
HXDLIN( 322)						float a323 = m20->self->_32;
HXDLIN( 322)						float a333 = m20->self->_33;
HXDLIN( 322)						float b001 = ((a003 * a114) - (a013 * a104));
HXDLIN( 322)						float b011 = ((a003 * a124) - (a023 * a104));
HXDLIN( 322)						float b021 = ((a003 * a134) - (a033 * a104));
HXDLIN( 322)						float b031 = ((a013 * a124) - (a023 * a114));
HXDLIN( 322)						float b041 = ((a013 * a134) - (a033 * a114));
HXDLIN( 322)						float b051 = ((a023 * a134) - (a033 * a124));
HXDLIN( 322)						float b061 = ((a203 * a313) - (a213 * a303));
HXDLIN( 322)						float b071 = ((a203 * a323) - (a223 * a303));
HXDLIN( 322)						float b081 = ((a203 * a333) - (a233 * a303));
HXDLIN( 322)						float b091 = ((a213 * a323) - (a223 * a313));
HXDLIN( 322)						float b101 = ((a213 * a333) - (a233 * a313));
HXDLIN( 322)						float b111 = ((a223 * a333) - (a233 * a323));
HXDLIN( 322)						float det1 = ((((((b001 * b111) - (b011 * b101)) + (b021 * b091)) + (b031 * b081)) - (b041 * b071)) + (b051 * b061));
HXDLIN( 322)						if ((det1 == ((Float)0.0))) {
HXLINE( 322)							_this->self->_00 = ( (float)(((Float)1.0)) );
HXDLIN( 322)							_this->self->_01 = ( (float)(((Float)0.0)) );
HXDLIN( 322)							_this->self->_02 = ( (float)(((Float)0.0)) );
HXDLIN( 322)							_this->self->_03 = ( (float)(((Float)0.0)) );
HXDLIN( 322)							_this->self->_10 = ( (float)(((Float)0.0)) );
HXDLIN( 322)							_this->self->_11 = ( (float)(((Float)1.0)) );
HXDLIN( 322)							_this->self->_12 = ( (float)(((Float)0.0)) );
HXDLIN( 322)							_this->self->_13 = ( (float)(((Float)0.0)) );
HXDLIN( 322)							_this->self->_20 = ( (float)(((Float)0.0)) );
HXDLIN( 322)							_this->self->_21 = ( (float)(((Float)0.0)) );
HXDLIN( 322)							_this->self->_22 = ( (float)(((Float)1.0)) );
HXDLIN( 322)							_this->self->_23 = ( (float)(((Float)0.0)) );
HXDLIN( 322)							_this->self->_30 = ( (float)(((Float)0.0)) );
HXDLIN( 322)							_this->self->_31 = ( (float)(((Float)0.0)) );
HXDLIN( 322)							_this->self->_32 = ( (float)(((Float)0.0)) );
HXDLIN( 322)							_this->self->_33 = ( (float)(((Float)1.0)) );
            						}
            						else {
HXLINE( 322)							det1 = ( (float)((((Float)1.0) / ( (Float)(det1) ))) );
HXDLIN( 322)							_this->self->_00 = ((((a114 * b111) - (a124 * b101)) + (a134 * b091)) * det1);
HXDLIN( 322)							_this->self->_01 = ((((a023 * b101) - (a013 * b111)) - (a033 * b091)) * det1);
HXDLIN( 322)							_this->self->_02 = ((((a313 * b051) - (a323 * b041)) + (a333 * b031)) * det1);
HXDLIN( 322)							_this->self->_03 = ((((a223 * b041) - (a213 * b051)) - (a233 * b031)) * det1);
HXDLIN( 322)							_this->self->_10 = ((((a124 * b081) - (a104 * b111)) - (a134 * b071)) * det1);
HXDLIN( 322)							_this->self->_11 = ((((a003 * b111) - (a023 * b081)) + (a033 * b071)) * det1);
HXDLIN( 322)							_this->self->_12 = ((((a323 * b021) - (a303 * b051)) - (a333 * b011)) * det1);
HXDLIN( 322)							_this->self->_13 = ((((a203 * b051) - (a223 * b021)) + (a233 * b011)) * det1);
HXDLIN( 322)							_this->self->_20 = ((((a104 * b101) - (a114 * b081)) + (a134 * b061)) * det1);
HXDLIN( 322)							_this->self->_21 = ((((a013 * b081) - (a003 * b101)) - (a033 * b061)) * det1);
HXDLIN( 322)							_this->self->_22 = ((((a303 * b041) - (a313 * b021)) + (a333 * b001)) * det1);
HXDLIN( 322)							_this->self->_23 = ((((a213 * b021) - (a203 * b041)) - (a233 * b001)) * det1);
HXDLIN( 322)							_this->self->_30 = ((((a114 * b071) - (a104 * b091)) - (a124 * b061)) * det1);
HXDLIN( 322)							_this->self->_31 = ((((a003 * b091) - (a013 * b071)) + (a023 * b061)) * det1);
HXDLIN( 322)							_this->self->_32 = ((((a313 * b011) - (a303 * b031)) - (a323 * b001)) * det1);
HXDLIN( 322)							_this->self->_33 = ((((a203 * b031) - (a213 * b011)) + (a223 * b001)) * det1);
            						}
            					}
HXLINE( 323)					{
HXLINE( 323)						 ::iron::math::Mat4 m21 = ::iron::object::BoneAnimation_obj::m1;
HXDLIN( 323)						float a004 = m16->self->_00;
HXDLIN( 323)						float a014 = m16->self->_01;
HXDLIN( 323)						float a024 = m16->self->_02;
HXDLIN( 323)						float a034 = m16->self->_03;
HXDLIN( 323)						float a105 = m16->self->_10;
HXDLIN( 323)						float a115 = m16->self->_11;
HXDLIN( 323)						float a125 = m16->self->_12;
HXDLIN( 323)						float a135 = m16->self->_13;
HXDLIN( 323)						float a204 = m16->self->_20;
HXDLIN( 323)						float a214 = m16->self->_21;
HXDLIN( 323)						float a224 = m16->self->_22;
HXDLIN( 323)						float a234 = m16->self->_23;
HXDLIN( 323)						float a304 = m16->self->_30;
HXDLIN( 323)						float a314 = m16->self->_31;
HXDLIN( 323)						float a324 = m16->self->_32;
HXDLIN( 323)						float a334 = m16->self->_33;
HXDLIN( 323)						float b012 = m21->self->_00;
HXDLIN( 323)						float b13 = m21->self->_10;
HXDLIN( 323)						float b22 = m21->self->_20;
HXDLIN( 323)						float b32 = m21->self->_30;
HXDLIN( 323)						m16->self->_00 = ((((a004 * b012) + (a014 * b13)) + (a024 * b22)) + (a034 * b32));
HXDLIN( 323)						m16->self->_10 = ((((a105 * b012) + (a115 * b13)) + (a125 * b22)) + (a135 * b32));
HXDLIN( 323)						m16->self->_20 = ((((a204 * b012) + (a214 * b13)) + (a224 * b22)) + (a234 * b32));
HXDLIN( 323)						m16->self->_30 = ((((a304 * b012) + (a314 * b13)) + (a324 * b22)) + (a334 * b32));
HXDLIN( 323)						b012 = m21->self->_01;
HXDLIN( 323)						b13 = m21->self->_11;
HXDLIN( 323)						b22 = m21->self->_21;
HXDLIN( 323)						b32 = m21->self->_31;
HXDLIN( 323)						m16->self->_01 = ((((a004 * b012) + (a014 * b13)) + (a024 * b22)) + (a034 * b32));
HXDLIN( 323)						m16->self->_11 = ((((a105 * b012) + (a115 * b13)) + (a125 * b22)) + (a135 * b32));
HXDLIN( 323)						m16->self->_21 = ((((a204 * b012) + (a214 * b13)) + (a224 * b22)) + (a234 * b32));
HXDLIN( 323)						m16->self->_31 = ((((a304 * b012) + (a314 * b13)) + (a324 * b22)) + (a334 * b32));
HXDLIN( 323)						b012 = m21->self->_02;
HXDLIN( 323)						b13 = m21->self->_12;
HXDLIN( 323)						b22 = m21->self->_22;
HXDLIN( 323)						b32 = m21->self->_32;
HXDLIN( 323)						m16->self->_02 = ((((a004 * b012) + (a014 * b13)) + (a024 * b22)) + (a034 * b32));
HXDLIN( 323)						m16->self->_12 = ((((a105 * b012) + (a115 * b13)) + (a125 * b22)) + (a135 * b32));
HXDLIN( 323)						m16->self->_22 = ((((a204 * b012) + (a214 * b13)) + (a224 * b22)) + (a234 * b32));
HXDLIN( 323)						m16->self->_32 = ((((a304 * b012) + (a314 * b13)) + (a324 * b22)) + (a334 * b32));
HXDLIN( 323)						b012 = m21->self->_03;
HXDLIN( 323)						b13 = m21->self->_13;
HXDLIN( 323)						b22 = m21->self->_23;
HXDLIN( 323)						b32 = m21->self->_33;
HXDLIN( 323)						m16->self->_03 = ((((a004 * b012) + (a014 * b13)) + (a024 * b22)) + (a034 * b32));
HXDLIN( 323)						m16->self->_13 = ((((a105 * b012) + (a115 * b13)) + (a125 * b22)) + (a135 * b32));
HXDLIN( 323)						m16->self->_23 = ((((a204 * b012) + (a214 * b13)) + (a224 * b22)) + (a234 * b32));
HXDLIN( 323)						m16->self->_33 = ((((a304 * b012) + (a314 * b13)) + (a324 * b22)) + (a334 * b32));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BoneAnimation_obj,updateConstraints,(void))

void BoneAnimation_obj::notifyOnUpdate( ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_330_notifyOnUpdate)
HXLINE( 331)		if (hx::IsNull( this->onUpdates )) {
HXLINE( 331)			this->onUpdates = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE( 332)		this->onUpdates->push(f);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BoneAnimation_obj,notifyOnUpdate,(void))

void BoneAnimation_obj::removeUpdate( ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_336_removeUpdate)
HXDLIN( 336)		this->onUpdates->remove(f);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BoneAnimation_obj,removeUpdate,(void))

void BoneAnimation_obj::updateBonesOnly(){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_340_updateBonesOnly)
HXDLIN( 340)		if (hx::IsNotNull( this->boneChildren )) {
HXLINE( 341)			int _g1 = 0;
HXDLIN( 341)			int _g = this->skeletonBones->length;
HXDLIN( 341)			while((_g1 < _g)){
HXLINE( 341)				_g1 = (_g1 + 1);
HXDLIN( 341)				int i = (_g1 - 1);
HXLINE( 342)				 ::iron::data::TObj b = this->skeletonBones->__get(i).StaticCast<  ::iron::data::TObj >();
HXLINE( 343)				{
HXLINE( 343)					 ::iron::math::Mat4 _this = ::iron::object::BoneAnimation_obj::m;
HXDLIN( 343)					 ::iron::math::Mat4 m = this->matsFast->__get(i).StaticCast<  ::iron::math::Mat4 >();
HXDLIN( 343)					_this->self->_00 = m->self->_00;
HXDLIN( 343)					_this->self->_01 = m->self->_01;
HXDLIN( 343)					_this->self->_02 = m->self->_02;
HXDLIN( 343)					_this->self->_03 = m->self->_03;
HXDLIN( 343)					_this->self->_10 = m->self->_10;
HXDLIN( 343)					_this->self->_11 = m->self->_11;
HXDLIN( 343)					_this->self->_12 = m->self->_12;
HXDLIN( 343)					_this->self->_13 = m->self->_13;
HXDLIN( 343)					_this->self->_20 = m->self->_20;
HXDLIN( 343)					_this->self->_21 = m->self->_21;
HXDLIN( 343)					_this->self->_22 = m->self->_22;
HXDLIN( 343)					_this->self->_23 = m->self->_23;
HXDLIN( 343)					_this->self->_30 = m->self->_30;
HXDLIN( 343)					_this->self->_31 = m->self->_31;
HXDLIN( 343)					_this->self->_32 = m->self->_32;
HXDLIN( 343)					_this->self->_33 = m->self->_33;
            				}
HXLINE( 344)				this->updateBoneChildren(b,::iron::object::BoneAnimation_obj::m);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BoneAnimation_obj,updateBonesOnly,(void))

void BoneAnimation_obj::updateSkinGpu(){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_351_updateSkinGpu)
HXLINE( 352)		::Array< ::Dynamic> bones = this->skeletonBones;
HXLINE( 354)		float s = ( (float)((( (Float)(this->blendCurrent) ) / ( (Float)(this->blendTime) ))) );
HXLINE( 355)		s = ( (float)(((s * s) * (((Float)3.0) - (((Float)2.0) * s)))) );
HXLINE( 356)		if ((this->blendFactor != ((Float)0.0))) {
HXLINE( 356)			s = ( (float)((((Float)1.0) - this->blendFactor)) );
            		}
HXLINE( 359)		{
HXLINE( 359)			int _g1 = 0;
HXDLIN( 359)			int _g = bones->length;
HXDLIN( 359)			while((_g1 < _g)){
HXLINE( 359)				_g1 = (_g1 + 1);
HXDLIN( 359)				int i = (_g1 - 1);
HXLINE( 361)				if (hx::IsNotNull( this->constraintMats )) {
HXLINE( 362)					 ::iron::math::Mat4 m = ( ( ::iron::math::Mat4)(this->constraintMats->get(bones->__get(i).StaticCast<  ::iron::data::TObj >())) );
HXLINE( 363)					if (hx::IsNotNull( m )) {
HXLINE( 363)						this->updateSkinBuffer(m,i);
HXDLIN( 363)						continue;
            					}
            				}
HXLINE( 366)				{
HXLINE( 366)					 ::iron::math::Mat4 _this = ::iron::object::BoneAnimation_obj::m;
HXDLIN( 366)					 ::iron::math::Mat4 m1 = this->matsFast->__get(i).StaticCast<  ::iron::math::Mat4 >();
HXDLIN( 366)					_this->self->_00 = m1->self->_00;
HXDLIN( 366)					_this->self->_01 = m1->self->_01;
HXDLIN( 366)					_this->self->_02 = m1->self->_02;
HXDLIN( 366)					_this->self->_03 = m1->self->_03;
HXDLIN( 366)					_this->self->_10 = m1->self->_10;
HXDLIN( 366)					_this->self->_11 = m1->self->_11;
HXDLIN( 366)					_this->self->_12 = m1->self->_12;
HXDLIN( 366)					_this->self->_13 = m1->self->_13;
HXDLIN( 366)					_this->self->_20 = m1->self->_20;
HXDLIN( 366)					_this->self->_21 = m1->self->_21;
HXDLIN( 366)					_this->self->_22 = m1->self->_22;
HXDLIN( 366)					_this->self->_23 = m1->self->_23;
HXDLIN( 366)					_this->self->_30 = m1->self->_30;
HXDLIN( 366)					_this->self->_31 = m1->self->_31;
HXDLIN( 366)					_this->self->_32 = m1->self->_32;
HXDLIN( 366)					_this->self->_33 = m1->self->_33;
            				}
HXLINE( 368)				bool _hx_tmp;
HXDLIN( 368)				if ((this->blendTime > 0)) {
HXLINE( 368)					_hx_tmp = hx::IsNotNull( this->skeletonBonesBlend );
            				}
            				else {
HXLINE( 368)					_hx_tmp = false;
            				}
HXDLIN( 368)				if (_hx_tmp) {
HXLINE( 370)					{
HXLINE( 370)						 ::iron::math::Mat4 _this1 = ::iron::object::BoneAnimation_obj::m1;
HXDLIN( 370)						 ::iron::math::Mat4 m2 = this->matsFastBlend->__get(i).StaticCast<  ::iron::math::Mat4 >();
HXDLIN( 370)						_this1->self->_00 = m2->self->_00;
HXDLIN( 370)						_this1->self->_01 = m2->self->_01;
HXDLIN( 370)						_this1->self->_02 = m2->self->_02;
HXDLIN( 370)						_this1->self->_03 = m2->self->_03;
HXDLIN( 370)						_this1->self->_10 = m2->self->_10;
HXDLIN( 370)						_this1->self->_11 = m2->self->_11;
HXDLIN( 370)						_this1->self->_12 = m2->self->_12;
HXDLIN( 370)						_this1->self->_13 = m2->self->_13;
HXDLIN( 370)						_this1->self->_20 = m2->self->_20;
HXDLIN( 370)						_this1->self->_21 = m2->self->_21;
HXDLIN( 370)						_this1->self->_22 = m2->self->_22;
HXDLIN( 370)						_this1->self->_23 = m2->self->_23;
HXDLIN( 370)						_this1->self->_30 = m2->self->_30;
HXDLIN( 370)						_this1->self->_31 = m2->self->_31;
HXDLIN( 370)						_this1->self->_32 = m2->self->_32;
HXDLIN( 370)						_this1->self->_33 = m2->self->_33;
            					}
HXLINE( 371)					{
HXLINE( 371)						 ::iron::math::Mat4 _this2 = ::iron::object::BoneAnimation_obj::m1;
HXDLIN( 371)						 ::iron::math::Vec4 loc = ::iron::object::BoneAnimation_obj::vpos;
HXDLIN( 371)						 ::iron::math::Quat quat = ::iron::object::BoneAnimation_obj::q1;
HXDLIN( 371)						 ::iron::math::Vec4 scale = ::iron::object::BoneAnimation_obj::vscl;
HXDLIN( 371)						loc->x = _this2->self->_30;
HXDLIN( 371)						loc->y = _this2->self->_31;
HXDLIN( 371)						loc->z = _this2->self->_32;
HXDLIN( 371)						 ::iron::math::Vec4 _this3 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 371)						_this3->x = _this2->self->_00;
HXDLIN( 371)						_this3->y = _this2->self->_01;
HXDLIN( 371)						_this3->z = _this2->self->_02;
HXDLIN( 371)						_this3->w = ( (float)(((Float)1.0)) );
HXDLIN( 371)						 ::iron::math::Vec4 _this4 = _this3;
HXDLIN( 371)						float v = (_this4->x * _this4->x);
HXDLIN( 371)						float v1 = (v + (_this4->y * _this4->y));
HXDLIN( 371)						scale->x = ( (float)(::Math_obj::sqrt(( (Float)((v1 + (_this4->z * _this4->z))) ))) );
HXDLIN( 371)						 ::iron::math::Vec4 _this5 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 371)						_this5->x = _this2->self->_10;
HXDLIN( 371)						_this5->y = _this2->self->_11;
HXDLIN( 371)						_this5->z = _this2->self->_12;
HXDLIN( 371)						_this5->w = ( (float)(((Float)1.0)) );
HXDLIN( 371)						 ::iron::math::Vec4 _this6 = _this5;
HXDLIN( 371)						float v2 = (_this6->x * _this6->x);
HXDLIN( 371)						float v3 = (v2 + (_this6->y * _this6->y));
HXDLIN( 371)						scale->y = ( (float)(::Math_obj::sqrt(( (Float)((v3 + (_this6->z * _this6->z))) ))) );
HXDLIN( 371)						 ::iron::math::Vec4 _this7 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 371)						_this7->x = _this2->self->_20;
HXDLIN( 371)						_this7->y = _this2->self->_21;
HXDLIN( 371)						_this7->z = _this2->self->_22;
HXDLIN( 371)						_this7->w = ( (float)(((Float)1.0)) );
HXDLIN( 371)						 ::iron::math::Vec4 _this8 = _this7;
HXDLIN( 371)						float v4 = (_this8->x * _this8->x);
HXDLIN( 371)						float v5 = (v4 + (_this8->y * _this8->y));
HXDLIN( 371)						scale->z = ( (float)(::Math_obj::sqrt(( (Float)((v5 + (_this8->z * _this8->z))) ))) );
HXDLIN( 371)						 ::kha::math::FastMatrix4 _this9 = _this2->self;
HXDLIN( 371)						float m3 = _this9->_12;
HXDLIN( 371)						float m4 = _this9->_22;
HXDLIN( 371)						float m5 = _this9->_32;
HXDLIN( 371)						float m6 = _this9->_13;
HXDLIN( 371)						float m7 = _this9->_23;
HXDLIN( 371)						float m8 = _this9->_33;
HXDLIN( 371)						float _this10 = _this9->_11;
HXDLIN( 371)						float c00 = (_this10 * ((m4 * m8) - (m5 * m7)));
HXDLIN( 371)						float _this11 = _this9->_21;
HXDLIN( 371)						float c001 = (c00 - (_this11 * ((m3 * m8) - (m5 * m6))));
HXDLIN( 371)						float _this12 = _this9->_31;
HXDLIN( 371)						float c002 = (c001 + (_this12 * ((m3 * m7) - (m4 * m6))));
HXDLIN( 371)						float m31 = _this9->_12;
HXDLIN( 371)						float m41 = _this9->_22;
HXDLIN( 371)						float m51 = _this9->_32;
HXDLIN( 371)						float m61 = _this9->_13;
HXDLIN( 371)						float m71 = _this9->_23;
HXDLIN( 371)						float m81 = _this9->_33;
HXDLIN( 371)						float _this13 = _this9->_10;
HXDLIN( 371)						float c01 = (_this13 * ((m41 * m81) - (m51 * m71)));
HXDLIN( 371)						float _this14 = _this9->_20;
HXDLIN( 371)						float c011 = (c01 - (_this14 * ((m31 * m81) - (m51 * m61))));
HXDLIN( 371)						float _this15 = _this9->_30;
HXDLIN( 371)						float c012 = (c011 + (_this15 * ((m31 * m71) - (m41 * m61))));
HXDLIN( 371)						float m32 = _this9->_11;
HXDLIN( 371)						float m42 = _this9->_21;
HXDLIN( 371)						float m52 = _this9->_31;
HXDLIN( 371)						float m62 = _this9->_13;
HXDLIN( 371)						float m72 = _this9->_23;
HXDLIN( 371)						float m82 = _this9->_33;
HXDLIN( 371)						float _this16 = _this9->_10;
HXDLIN( 371)						float c02 = (_this16 * ((m42 * m82) - (m52 * m72)));
HXDLIN( 371)						float _this17 = _this9->_20;
HXDLIN( 371)						float c021 = (c02 - (_this17 * ((m32 * m82) - (m52 * m62))));
HXDLIN( 371)						float _this18 = _this9->_30;
HXDLIN( 371)						float c022 = (c021 + (_this18 * ((m32 * m72) - (m42 * m62))));
HXDLIN( 371)						float m33 = _this9->_11;
HXDLIN( 371)						float m43 = _this9->_21;
HXDLIN( 371)						float m53 = _this9->_31;
HXDLIN( 371)						float m63 = _this9->_12;
HXDLIN( 371)						float m73 = _this9->_22;
HXDLIN( 371)						float m83 = _this9->_32;
HXDLIN( 371)						float _this19 = _this9->_10;
HXDLIN( 371)						float c03 = (_this19 * ((m43 * m83) - (m53 * m73)));
HXDLIN( 371)						float _this20 = _this9->_20;
HXDLIN( 371)						float c031 = (c03 - (_this20 * ((m33 * m83) - (m53 * m63))));
HXDLIN( 371)						float _this21 = _this9->_30;
HXDLIN( 371)						float c032 = (c031 + (_this21 * ((m33 * m73) - (m43 * m63))));
HXDLIN( 371)						float _hx_tmp1 = (_this9->_00 * c002);
HXDLIN( 371)						float _hx_tmp2 = (_hx_tmp1 - (_this9->_01 * c012));
HXDLIN( 371)						float _hx_tmp3 = (_hx_tmp2 + (_this9->_02 * c022));
HXDLIN( 371)						if (((_hx_tmp3 - (_this9->_03 * c032)) < ((Float)0.0))) {
HXLINE( 371)							scale->x = -(scale->x);
            						}
HXDLIN( 371)						Float invs = (((Float)1.0) / ( (Float)(scale->x) ));
HXDLIN( 371)						::iron::math::Mat4_obj::helpMat->self->_00 = ( (float)((_this2->self->_00 * invs)) );
HXDLIN( 371)						::iron::math::Mat4_obj::helpMat->self->_01 = ( (float)((_this2->self->_01 * invs)) );
HXDLIN( 371)						::iron::math::Mat4_obj::helpMat->self->_02 = ( (float)((_this2->self->_02 * invs)) );
HXDLIN( 371)						invs = (((Float)1.0) / ( (Float)(scale->y) ));
HXDLIN( 371)						::iron::math::Mat4_obj::helpMat->self->_10 = ( (float)((_this2->self->_10 * invs)) );
HXDLIN( 371)						::iron::math::Mat4_obj::helpMat->self->_11 = ( (float)((_this2->self->_11 * invs)) );
HXDLIN( 371)						::iron::math::Mat4_obj::helpMat->self->_12 = ( (float)((_this2->self->_12 * invs)) );
HXDLIN( 371)						invs = (((Float)1.0) / ( (Float)(scale->z) ));
HXDLIN( 371)						::iron::math::Mat4_obj::helpMat->self->_20 = ( (float)((_this2->self->_20 * invs)) );
HXDLIN( 371)						::iron::math::Mat4_obj::helpMat->self->_21 = ( (float)((_this2->self->_21 * invs)) );
HXDLIN( 371)						::iron::math::Mat4_obj::helpMat->self->_22 = ( (float)((_this2->self->_22 * invs)) );
HXDLIN( 371)						{
HXLINE( 371)							 ::iron::math::Mat4 m9 = ::iron::math::Mat4_obj::helpMat;
HXDLIN( 371)							float m11 = m9->self->_00;
HXDLIN( 371)							float m12 = m9->self->_10;
HXDLIN( 371)							float m13 = m9->self->_20;
HXDLIN( 371)							float m21 = m9->self->_01;
HXDLIN( 371)							float m22 = m9->self->_11;
HXDLIN( 371)							float m23 = m9->self->_21;
HXDLIN( 371)							float m311 = m9->self->_02;
HXDLIN( 371)							float m321 = m9->self->_12;
HXDLIN( 371)							float m331 = m9->self->_22;
HXDLIN( 371)							float tr = ((m11 + m22) + m331);
HXDLIN( 371)							Float s1 = ((Float)0.0);
HXDLIN( 371)							if ((tr > 0)) {
HXLINE( 371)								s1 = (((Float)0.5) / ::Math_obj::sqrt((tr + ((Float)1.0))));
HXDLIN( 371)								quat->w = ( (float)((((Float)0.25) / s1)) );
HXDLIN( 371)								quat->x = ( (float)(((m321 - m23) * s1)) );
HXDLIN( 371)								quat->y = ( (float)(((m13 - m311) * s1)) );
HXDLIN( 371)								quat->z = ( (float)(((m21 - m12) * s1)) );
            							}
            							else {
HXLINE( 371)								bool _hx_tmp4;
HXDLIN( 371)								if ((m11 > m22)) {
HXLINE( 371)									_hx_tmp4 = (m11 > m331);
            								}
            								else {
HXLINE( 371)									_hx_tmp4 = false;
            								}
HXDLIN( 371)								if (_hx_tmp4) {
HXLINE( 371)									s1 = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m11) - m22) - m331)));
HXDLIN( 371)									quat->w = ( (float)((( (Float)((m321 - m23)) ) / s1)) );
HXDLIN( 371)									quat->x = ( (float)((((Float)0.25) * s1)) );
HXDLIN( 371)									quat->y = ( (float)((( (Float)((m12 + m21)) ) / s1)) );
HXDLIN( 371)									quat->z = ( (float)((( (Float)((m13 + m311)) ) / s1)) );
            								}
            								else {
HXLINE( 371)									if ((m22 > m331)) {
HXLINE( 371)										s1 = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m22) - m11) - m331)));
HXDLIN( 371)										quat->w = ( (float)((( (Float)((m13 - m311)) ) / s1)) );
HXDLIN( 371)										quat->x = ( (float)((( (Float)((m12 + m21)) ) / s1)) );
HXDLIN( 371)										quat->y = ( (float)((((Float)0.25) * s1)) );
HXDLIN( 371)										quat->z = ( (float)((( (Float)((m23 + m321)) ) / s1)) );
            									}
            									else {
HXLINE( 371)										s1 = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m331) - m11) - m22)));
HXDLIN( 371)										quat->w = ( (float)((( (Float)((m21 - m12)) ) / s1)) );
HXDLIN( 371)										quat->x = ( (float)((( (Float)((m13 + m311)) ) / s1)) );
HXDLIN( 371)										quat->y = ( (float)((( (Float)((m23 + m321)) ) / s1)) );
HXDLIN( 371)										quat->z = ( (float)((((Float)0.25) * s1)) );
            									}
            								}
            							}
            						}
            					}
HXLINE( 372)					{
HXLINE( 372)						 ::iron::math::Mat4 _this22 = ::iron::object::BoneAnimation_obj::m;
HXDLIN( 372)						 ::iron::math::Vec4 loc1 = ::iron::object::BoneAnimation_obj::vpos2;
HXDLIN( 372)						 ::iron::math::Quat quat1 = ::iron::object::BoneAnimation_obj::q2;
HXDLIN( 372)						 ::iron::math::Vec4 scale1 = ::iron::object::BoneAnimation_obj::vscl2;
HXDLIN( 372)						loc1->x = _this22->self->_30;
HXDLIN( 372)						loc1->y = _this22->self->_31;
HXDLIN( 372)						loc1->z = _this22->self->_32;
HXDLIN( 372)						 ::iron::math::Vec4 _this23 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 372)						_this23->x = _this22->self->_00;
HXDLIN( 372)						_this23->y = _this22->self->_01;
HXDLIN( 372)						_this23->z = _this22->self->_02;
HXDLIN( 372)						_this23->w = ( (float)(((Float)1.0)) );
HXDLIN( 372)						 ::iron::math::Vec4 _this24 = _this23;
HXDLIN( 372)						float v6 = (_this24->x * _this24->x);
HXDLIN( 372)						float v7 = (v6 + (_this24->y * _this24->y));
HXDLIN( 372)						scale1->x = ( (float)(::Math_obj::sqrt(( (Float)((v7 + (_this24->z * _this24->z))) ))) );
HXDLIN( 372)						 ::iron::math::Vec4 _this25 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 372)						_this25->x = _this22->self->_10;
HXDLIN( 372)						_this25->y = _this22->self->_11;
HXDLIN( 372)						_this25->z = _this22->self->_12;
HXDLIN( 372)						_this25->w = ( (float)(((Float)1.0)) );
HXDLIN( 372)						 ::iron::math::Vec4 _this26 = _this25;
HXDLIN( 372)						float v8 = (_this26->x * _this26->x);
HXDLIN( 372)						float v9 = (v8 + (_this26->y * _this26->y));
HXDLIN( 372)						scale1->y = ( (float)(::Math_obj::sqrt(( (Float)((v9 + (_this26->z * _this26->z))) ))) );
HXDLIN( 372)						 ::iron::math::Vec4 _this27 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 372)						_this27->x = _this22->self->_20;
HXDLIN( 372)						_this27->y = _this22->self->_21;
HXDLIN( 372)						_this27->z = _this22->self->_22;
HXDLIN( 372)						_this27->w = ( (float)(((Float)1.0)) );
HXDLIN( 372)						 ::iron::math::Vec4 _this28 = _this27;
HXDLIN( 372)						float v10 = (_this28->x * _this28->x);
HXDLIN( 372)						float v11 = (v10 + (_this28->y * _this28->y));
HXDLIN( 372)						scale1->z = ( (float)(::Math_obj::sqrt(( (Float)((v11 + (_this28->z * _this28->z))) ))) );
HXDLIN( 372)						 ::kha::math::FastMatrix4 _this29 = _this22->self;
HXDLIN( 372)						float m34 = _this29->_12;
HXDLIN( 372)						float m44 = _this29->_22;
HXDLIN( 372)						float m54 = _this29->_32;
HXDLIN( 372)						float m64 = _this29->_13;
HXDLIN( 372)						float m74 = _this29->_23;
HXDLIN( 372)						float m84 = _this29->_33;
HXDLIN( 372)						float _this30 = _this29->_11;
HXDLIN( 372)						float c003 = (_this30 * ((m44 * m84) - (m54 * m74)));
HXDLIN( 372)						float _this31 = _this29->_21;
HXDLIN( 372)						float c004 = (c003 - (_this31 * ((m34 * m84) - (m54 * m64))));
HXDLIN( 372)						float _this32 = _this29->_31;
HXDLIN( 372)						float c005 = (c004 + (_this32 * ((m34 * m74) - (m44 * m64))));
HXDLIN( 372)						float m35 = _this29->_12;
HXDLIN( 372)						float m45 = _this29->_22;
HXDLIN( 372)						float m55 = _this29->_32;
HXDLIN( 372)						float m65 = _this29->_13;
HXDLIN( 372)						float m75 = _this29->_23;
HXDLIN( 372)						float m85 = _this29->_33;
HXDLIN( 372)						float _this33 = _this29->_10;
HXDLIN( 372)						float c013 = (_this33 * ((m45 * m85) - (m55 * m75)));
HXDLIN( 372)						float _this34 = _this29->_20;
HXDLIN( 372)						float c014 = (c013 - (_this34 * ((m35 * m85) - (m55 * m65))));
HXDLIN( 372)						float _this35 = _this29->_30;
HXDLIN( 372)						float c015 = (c014 + (_this35 * ((m35 * m75) - (m45 * m65))));
HXDLIN( 372)						float m36 = _this29->_11;
HXDLIN( 372)						float m46 = _this29->_21;
HXDLIN( 372)						float m56 = _this29->_31;
HXDLIN( 372)						float m66 = _this29->_13;
HXDLIN( 372)						float m76 = _this29->_23;
HXDLIN( 372)						float m86 = _this29->_33;
HXDLIN( 372)						float _this36 = _this29->_10;
HXDLIN( 372)						float c023 = (_this36 * ((m46 * m86) - (m56 * m76)));
HXDLIN( 372)						float _this37 = _this29->_20;
HXDLIN( 372)						float c024 = (c023 - (_this37 * ((m36 * m86) - (m56 * m66))));
HXDLIN( 372)						float _this38 = _this29->_30;
HXDLIN( 372)						float c025 = (c024 + (_this38 * ((m36 * m76) - (m46 * m66))));
HXDLIN( 372)						float m37 = _this29->_11;
HXDLIN( 372)						float m47 = _this29->_21;
HXDLIN( 372)						float m57 = _this29->_31;
HXDLIN( 372)						float m67 = _this29->_12;
HXDLIN( 372)						float m77 = _this29->_22;
HXDLIN( 372)						float m87 = _this29->_32;
HXDLIN( 372)						float _this39 = _this29->_10;
HXDLIN( 372)						float c033 = (_this39 * ((m47 * m87) - (m57 * m77)));
HXDLIN( 372)						float _this40 = _this29->_20;
HXDLIN( 372)						float c034 = (c033 - (_this40 * ((m37 * m87) - (m57 * m67))));
HXDLIN( 372)						float _this41 = _this29->_30;
HXDLIN( 372)						float c035 = (c034 + (_this41 * ((m37 * m77) - (m47 * m67))));
HXDLIN( 372)						float _hx_tmp5 = (_this29->_00 * c005);
HXDLIN( 372)						float _hx_tmp6 = (_hx_tmp5 - (_this29->_01 * c015));
HXDLIN( 372)						float _hx_tmp7 = (_hx_tmp6 + (_this29->_02 * c025));
HXDLIN( 372)						if (((_hx_tmp7 - (_this29->_03 * c035)) < ((Float)0.0))) {
HXLINE( 372)							scale1->x = -(scale1->x);
            						}
HXDLIN( 372)						Float invs1 = (((Float)1.0) / ( (Float)(scale1->x) ));
HXDLIN( 372)						::iron::math::Mat4_obj::helpMat->self->_00 = ( (float)((_this22->self->_00 * invs1)) );
HXDLIN( 372)						::iron::math::Mat4_obj::helpMat->self->_01 = ( (float)((_this22->self->_01 * invs1)) );
HXDLIN( 372)						::iron::math::Mat4_obj::helpMat->self->_02 = ( (float)((_this22->self->_02 * invs1)) );
HXDLIN( 372)						invs1 = (((Float)1.0) / ( (Float)(scale1->y) ));
HXDLIN( 372)						::iron::math::Mat4_obj::helpMat->self->_10 = ( (float)((_this22->self->_10 * invs1)) );
HXDLIN( 372)						::iron::math::Mat4_obj::helpMat->self->_11 = ( (float)((_this22->self->_11 * invs1)) );
HXDLIN( 372)						::iron::math::Mat4_obj::helpMat->self->_12 = ( (float)((_this22->self->_12 * invs1)) );
HXDLIN( 372)						invs1 = (((Float)1.0) / ( (Float)(scale1->z) ));
HXDLIN( 372)						::iron::math::Mat4_obj::helpMat->self->_20 = ( (float)((_this22->self->_20 * invs1)) );
HXDLIN( 372)						::iron::math::Mat4_obj::helpMat->self->_21 = ( (float)((_this22->self->_21 * invs1)) );
HXDLIN( 372)						::iron::math::Mat4_obj::helpMat->self->_22 = ( (float)((_this22->self->_22 * invs1)) );
HXDLIN( 372)						{
HXLINE( 372)							 ::iron::math::Mat4 m10 = ::iron::math::Mat4_obj::helpMat;
HXDLIN( 372)							float m111 = m10->self->_00;
HXDLIN( 372)							float m121 = m10->self->_10;
HXDLIN( 372)							float m131 = m10->self->_20;
HXDLIN( 372)							float m211 = m10->self->_01;
HXDLIN( 372)							float m221 = m10->self->_11;
HXDLIN( 372)							float m231 = m10->self->_21;
HXDLIN( 372)							float m312 = m10->self->_02;
HXDLIN( 372)							float m322 = m10->self->_12;
HXDLIN( 372)							float m332 = m10->self->_22;
HXDLIN( 372)							float tr1 = ((m111 + m221) + m332);
HXDLIN( 372)							Float s2 = ((Float)0.0);
HXDLIN( 372)							if ((tr1 > 0)) {
HXLINE( 372)								s2 = (((Float)0.5) / ::Math_obj::sqrt((tr1 + ((Float)1.0))));
HXDLIN( 372)								quat1->w = ( (float)((((Float)0.25) / s2)) );
HXDLIN( 372)								quat1->x = ( (float)(((m322 - m231) * s2)) );
HXDLIN( 372)								quat1->y = ( (float)(((m131 - m312) * s2)) );
HXDLIN( 372)								quat1->z = ( (float)(((m211 - m121) * s2)) );
            							}
            							else {
HXLINE( 372)								bool _hx_tmp8;
HXDLIN( 372)								if ((m111 > m221)) {
HXLINE( 372)									_hx_tmp8 = (m111 > m332);
            								}
            								else {
HXLINE( 372)									_hx_tmp8 = false;
            								}
HXDLIN( 372)								if (_hx_tmp8) {
HXLINE( 372)									s2 = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m111) - m221) - m332)));
HXDLIN( 372)									quat1->w = ( (float)((( (Float)((m322 - m231)) ) / s2)) );
HXDLIN( 372)									quat1->x = ( (float)((((Float)0.25) * s2)) );
HXDLIN( 372)									quat1->y = ( (float)((( (Float)((m121 + m211)) ) / s2)) );
HXDLIN( 372)									quat1->z = ( (float)((( (Float)((m131 + m312)) ) / s2)) );
            								}
            								else {
HXLINE( 372)									if ((m221 > m332)) {
HXLINE( 372)										s2 = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m221) - m111) - m332)));
HXDLIN( 372)										quat1->w = ( (float)((( (Float)((m131 - m312)) ) / s2)) );
HXDLIN( 372)										quat1->x = ( (float)((( (Float)((m121 + m211)) ) / s2)) );
HXDLIN( 372)										quat1->y = ( (float)((((Float)0.25) * s2)) );
HXDLIN( 372)										quat1->z = ( (float)((( (Float)((m231 + m322)) ) / s2)) );
            									}
            									else {
HXLINE( 372)										s2 = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m332) - m111) - m221)));
HXDLIN( 372)										quat1->w = ( (float)((( (Float)((m211 - m121)) ) / s2)) );
HXDLIN( 372)										quat1->x = ( (float)((( (Float)((m131 + m312)) ) / s2)) );
HXDLIN( 372)										quat1->y = ( (float)((( (Float)((m231 + m322)) ) / s2)) );
HXDLIN( 372)										quat1->z = ( (float)((((Float)0.25) * s2)) );
            									}
            								}
            							}
            						}
            					}
HXLINE( 375)					{
HXLINE( 375)						 ::iron::math::Vec4 _this42 = ::iron::object::BoneAnimation_obj::v1;
HXDLIN( 375)						 ::iron::math::Vec4 from = ::iron::object::BoneAnimation_obj::vpos;
HXDLIN( 375)						 ::iron::math::Vec4 to = ::iron::object::BoneAnimation_obj::vpos2;
HXDLIN( 375)						float from1 = from->x;
HXDLIN( 375)						_this42->x = (from1 + ((to->x - from->x) * s));
HXDLIN( 375)						float from2 = from->y;
HXDLIN( 375)						_this42->y = (from2 + ((to->y - from->y) * s));
HXDLIN( 375)						float from3 = from->z;
HXDLIN( 375)						_this42->z = (from3 + ((to->z - from->z) * s));
            					}
HXLINE( 376)					{
HXLINE( 376)						 ::iron::math::Vec4 _this43 = ::iron::object::BoneAnimation_obj::v2;
HXDLIN( 376)						 ::iron::math::Vec4 from4 = ::iron::object::BoneAnimation_obj::vscl;
HXDLIN( 376)						 ::iron::math::Vec4 to1 = ::iron::object::BoneAnimation_obj::vscl2;
HXDLIN( 376)						float from5 = from4->x;
HXDLIN( 376)						_this43->x = (from5 + ((to1->x - from4->x) * s));
HXDLIN( 376)						float from6 = from4->y;
HXDLIN( 376)						_this43->y = (from6 + ((to1->y - from4->y) * s));
HXDLIN( 376)						float from7 = from4->z;
HXDLIN( 376)						_this43->z = (from7 + ((to1->z - from4->z) * s));
            					}
HXLINE( 377)					{
HXLINE( 377)						 ::iron::math::Quat _this44 = ::iron::object::BoneAnimation_obj::q3;
HXDLIN( 377)						 ::iron::math::Quat from8 = ::iron::object::BoneAnimation_obj::q1;
HXDLIN( 377)						 ::iron::math::Quat to2 = ::iron::object::BoneAnimation_obj::q2;
HXDLIN( 377)						float fromx = from8->x;
HXDLIN( 377)						float fromy = from8->y;
HXDLIN( 377)						float fromz = from8->z;
HXDLIN( 377)						float fromw = from8->w;
HXDLIN( 377)						float dot = (from8->x * to2->x);
HXDLIN( 377)						float dot1 = (dot + (from8->y * to2->y));
HXDLIN( 377)						float dot2 = (dot1 + (from8->z * to2->z));
HXDLIN( 377)						float dot3 = (dot2 + (from8->w * to2->w));
HXDLIN( 377)						if ((dot3 < ((Float)0.0))) {
HXLINE( 377)							fromx = -(fromx);
HXDLIN( 377)							fromy = -(fromy);
HXDLIN( 377)							fromz = -(fromz);
HXDLIN( 377)							fromw = -(fromw);
            						}
HXDLIN( 377)						_this44->x = (fromx + ((to2->x - fromx) * s));
HXDLIN( 377)						_this44->y = (fromy + ((to2->y - fromy) * s));
HXDLIN( 377)						_this44->z = (fromz + ((to2->z - fromz) * s));
HXDLIN( 377)						_this44->w = (fromw + ((to2->w - fromw) * s));
HXDLIN( 377)						{
HXLINE( 377)							float v12 = (_this44->x * _this44->x);
HXDLIN( 377)							float v13 = (v12 + (_this44->y * _this44->y));
HXDLIN( 377)							float v14 = (v13 + (_this44->z * _this44->z));
HXDLIN( 377)							Float l = ::Math_obj::sqrt(( (Float)((v14 + (_this44->w * _this44->w))) ));
HXDLIN( 377)							if ((l == ((Float)0.0))) {
HXLINE( 377)								_this44->x = ( (float)(0) );
HXDLIN( 377)								_this44->y = ( (float)(0) );
HXDLIN( 377)								_this44->z = ( (float)(0) );
HXDLIN( 377)								_this44->w = ( (float)(0) );
            							}
            							else {
HXLINE( 377)								l = (((Float)1.0) / l);
HXDLIN( 377)								 ::iron::math::Quat _this45 = _this44;
HXDLIN( 377)								_this45->x = (_this45->x * l);
HXDLIN( 377)								 ::iron::math::Quat _this46 = _this44;
HXDLIN( 377)								_this46->y = (_this46->y * l);
HXDLIN( 377)								 ::iron::math::Quat _this47 = _this44;
HXDLIN( 377)								_this47->z = (_this47->z * l);
HXDLIN( 377)								 ::iron::math::Quat _this48 = _this44;
HXDLIN( 377)								_this48->w = (_this48->w * l);
            							}
            						}
            					}
HXLINE( 380)					{
HXLINE( 380)						 ::iron::math::Mat4 _this49 = ::iron::object::BoneAnimation_obj::m;
HXDLIN( 380)						 ::iron::math::Quat q = ::iron::object::BoneAnimation_obj::q3;
HXDLIN( 380)						float x = q->x;
HXDLIN( 380)						float y = q->y;
HXDLIN( 380)						float z = q->z;
HXDLIN( 380)						float w = q->w;
HXDLIN( 380)						float x2 = (x + x);
HXDLIN( 380)						float y2 = (y + y);
HXDLIN( 380)						float z2 = (z + z);
HXDLIN( 380)						float xx = (x * x2);
HXDLIN( 380)						float xy = (x * y2);
HXDLIN( 380)						float xz = (x * z2);
HXDLIN( 380)						float yy = (y * y2);
HXDLIN( 380)						float yz = (y * z2);
HXDLIN( 380)						float zz = (z * z2);
HXDLIN( 380)						float wx = (w * x2);
HXDLIN( 380)						float wy = (w * y2);
HXDLIN( 380)						float wz = (w * z2);
HXDLIN( 380)						_this49->self->_00 = ( (float)((((Float)1.0) - (yy + zz))) );
HXDLIN( 380)						_this49->self->_10 = (xy - wz);
HXDLIN( 380)						_this49->self->_20 = (xz + wy);
HXDLIN( 380)						_this49->self->_01 = (xy + wz);
HXDLIN( 380)						_this49->self->_11 = ( (float)((((Float)1.0) - (xx + zz))) );
HXDLIN( 380)						_this49->self->_21 = (yz - wx);
HXDLIN( 380)						_this49->self->_02 = (xz - wy);
HXDLIN( 380)						_this49->self->_12 = (yz + wx);
HXDLIN( 380)						_this49->self->_22 = ( (float)((((Float)1.0) - (xx + yy))) );
HXDLIN( 380)						_this49->self->_03 = ( (float)(((Float)0.0)) );
HXDLIN( 380)						_this49->self->_13 = ( (float)(((Float)0.0)) );
HXDLIN( 380)						_this49->self->_23 = ( (float)(((Float)0.0)) );
HXDLIN( 380)						_this49->self->_30 = ( (float)(((Float)0.0)) );
HXDLIN( 380)						_this49->self->_31 = ( (float)(((Float)0.0)) );
HXDLIN( 380)						_this49->self->_32 = ( (float)(((Float)0.0)) );
HXDLIN( 380)						_this49->self->_33 = ( (float)(((Float)1.0)) );
            					}
HXLINE( 381)					{
HXLINE( 381)						 ::iron::math::Mat4 _this50 = ::iron::object::BoneAnimation_obj::m;
HXDLIN( 381)						 ::iron::math::Vec4 v15 = ::iron::object::BoneAnimation_obj::v2;
HXDLIN( 381)						float x1 = v15->x;
HXDLIN( 381)						float y1 = v15->y;
HXDLIN( 381)						float z1 = v15->z;
HXDLIN( 381)						{
HXLINE( 381)							 ::iron::math::Mat4 _g2 = _this50;
HXDLIN( 381)							_g2->self->_00 = (_g2->self->_00 * x1);
            						}
HXDLIN( 381)						{
HXLINE( 381)							 ::iron::math::Mat4 _g3 = _this50;
HXDLIN( 381)							_g3->self->_01 = (_g3->self->_01 * x1);
            						}
HXDLIN( 381)						{
HXLINE( 381)							 ::iron::math::Mat4 _g4 = _this50;
HXDLIN( 381)							_g4->self->_02 = (_g4->self->_02 * x1);
            						}
HXDLIN( 381)						{
HXLINE( 381)							 ::iron::math::Mat4 _g5 = _this50;
HXDLIN( 381)							_g5->self->_03 = (_g5->self->_03 * x1);
            						}
HXDLIN( 381)						{
HXLINE( 381)							 ::iron::math::Mat4 _g6 = _this50;
HXDLIN( 381)							_g6->self->_10 = (_g6->self->_10 * y1);
            						}
HXDLIN( 381)						{
HXLINE( 381)							 ::iron::math::Mat4 _g7 = _this50;
HXDLIN( 381)							_g7->self->_11 = (_g7->self->_11 * y1);
            						}
HXDLIN( 381)						{
HXLINE( 381)							 ::iron::math::Mat4 _g8 = _this50;
HXDLIN( 381)							_g8->self->_12 = (_g8->self->_12 * y1);
            						}
HXDLIN( 381)						{
HXLINE( 381)							 ::iron::math::Mat4 _g9 = _this50;
HXDLIN( 381)							_g9->self->_13 = (_g9->self->_13 * y1);
            						}
HXDLIN( 381)						{
HXLINE( 381)							 ::iron::math::Mat4 _g10 = _this50;
HXDLIN( 381)							_g10->self->_20 = (_g10->self->_20 * z1);
            						}
HXDLIN( 381)						{
HXLINE( 381)							 ::iron::math::Mat4 _g11 = _this50;
HXDLIN( 381)							_g11->self->_21 = (_g11->self->_21 * z1);
            						}
HXDLIN( 381)						{
HXLINE( 381)							 ::iron::math::Mat4 _g12 = _this50;
HXDLIN( 381)							_g12->self->_22 = (_g12->self->_22 * z1);
            						}
HXDLIN( 381)						{
HXLINE( 381)							 ::iron::math::Mat4 _g13 = _this50;
HXDLIN( 381)							_g13->self->_23 = (_g13->self->_23 * z1);
            						}
            					}
HXLINE( 382)					::iron::object::BoneAnimation_obj::m->self->_30 = ::iron::object::BoneAnimation_obj::v1->x;
HXLINE( 383)					::iron::object::BoneAnimation_obj::m->self->_31 = ::iron::object::BoneAnimation_obj::v1->y;
HXLINE( 384)					::iron::object::BoneAnimation_obj::m->self->_32 = ::iron::object::BoneAnimation_obj::v1->z;
            				}
HXLINE( 387)				bool _hx_tmp9;
HXDLIN( 387)				if (hx::IsNotNull( this->absMats )) {
HXLINE( 387)					_hx_tmp9 = (i < this->absMats->length);
            				}
            				else {
HXLINE( 387)					_hx_tmp9 = false;
            				}
HXDLIN( 387)				if (_hx_tmp9) {
HXLINE( 387)					 ::iron::math::Mat4 _this51 = this->absMats->__get(i).StaticCast<  ::iron::math::Mat4 >();
HXDLIN( 387)					 ::iron::math::Mat4 m14 = ::iron::object::BoneAnimation_obj::m;
HXDLIN( 387)					_this51->self->_00 = m14->self->_00;
HXDLIN( 387)					_this51->self->_01 = m14->self->_01;
HXDLIN( 387)					_this51->self->_02 = m14->self->_02;
HXDLIN( 387)					_this51->self->_03 = m14->self->_03;
HXDLIN( 387)					_this51->self->_10 = m14->self->_10;
HXDLIN( 387)					_this51->self->_11 = m14->self->_11;
HXDLIN( 387)					_this51->self->_12 = m14->self->_12;
HXDLIN( 387)					_this51->self->_13 = m14->self->_13;
HXDLIN( 387)					_this51->self->_20 = m14->self->_20;
HXDLIN( 387)					_this51->self->_21 = m14->self->_21;
HXDLIN( 387)					_this51->self->_22 = m14->self->_22;
HXDLIN( 387)					_this51->self->_23 = m14->self->_23;
HXDLIN( 387)					_this51->self->_30 = m14->self->_30;
HXDLIN( 387)					_this51->self->_31 = m14->self->_31;
HXDLIN( 387)					_this51->self->_32 = m14->self->_32;
HXDLIN( 387)					_this51->self->_33 = m14->self->_33;
            				}
HXLINE( 388)				if (hx::IsNotNull( this->boneChildren )) {
HXLINE( 388)					this->updateBoneChildren(bones->__get(i).StaticCast<  ::iron::data::TObj >(),::iron::object::BoneAnimation_obj::m);
            				}
HXLINE( 390)				{
HXLINE( 390)					 ::iron::math::Mat4 _this52 = ::iron::object::BoneAnimation_obj::m;
HXDLIN( 390)					 ::iron::math::Mat4 b = ::iron::object::BoneAnimation_obj::m;
HXDLIN( 390)					 ::iron::math::Mat4 a = this->data->geom->skeletonTransformsI->__get(i).StaticCast<  ::iron::math::Mat4 >();
HXDLIN( 390)					float a00 = a->self->_00;
HXDLIN( 390)					float a01 = a->self->_01;
HXDLIN( 390)					float a02 = a->self->_02;
HXDLIN( 390)					float a03 = a->self->_03;
HXDLIN( 390)					float a10 = a->self->_10;
HXDLIN( 390)					float a11 = a->self->_11;
HXDLIN( 390)					float a12 = a->self->_12;
HXDLIN( 390)					float a13 = a->self->_13;
HXDLIN( 390)					float a20 = a->self->_20;
HXDLIN( 390)					float a21 = a->self->_21;
HXDLIN( 390)					float a22 = a->self->_22;
HXDLIN( 390)					float a23 = a->self->_23;
HXDLIN( 390)					float a30 = a->self->_30;
HXDLIN( 390)					float a31 = a->self->_31;
HXDLIN( 390)					float a32 = a->self->_32;
HXDLIN( 390)					float a33 = a->self->_33;
HXDLIN( 390)					float b0 = b->self->_00;
HXDLIN( 390)					float b1 = b->self->_10;
HXDLIN( 390)					float b2 = b->self->_20;
HXDLIN( 390)					float b3 = b->self->_30;
HXDLIN( 390)					_this52->self->_00 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 390)					_this52->self->_10 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 390)					_this52->self->_20 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 390)					_this52->self->_30 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN( 390)					b0 = b->self->_01;
HXDLIN( 390)					b1 = b->self->_11;
HXDLIN( 390)					b2 = b->self->_21;
HXDLIN( 390)					b3 = b->self->_31;
HXDLIN( 390)					_this52->self->_01 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 390)					_this52->self->_11 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 390)					_this52->self->_21 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 390)					_this52->self->_31 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN( 390)					b0 = b->self->_02;
HXDLIN( 390)					b1 = b->self->_12;
HXDLIN( 390)					b2 = b->self->_22;
HXDLIN( 390)					b3 = b->self->_32;
HXDLIN( 390)					_this52->self->_02 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 390)					_this52->self->_12 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 390)					_this52->self->_22 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 390)					_this52->self->_32 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN( 390)					b0 = b->self->_03;
HXDLIN( 390)					b1 = b->self->_13;
HXDLIN( 390)					b2 = b->self->_23;
HXDLIN( 390)					b3 = b->self->_33;
HXDLIN( 390)					_this52->self->_03 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 390)					_this52->self->_13 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 390)					_this52->self->_23 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 390)					_this52->self->_33 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
            				}
HXLINE( 391)				this->updateSkinBuffer(::iron::object::BoneAnimation_obj::m,i);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BoneAnimation_obj,updateSkinGpu,(void))

void BoneAnimation_obj::updateSkinBuffer( ::iron::math::Mat4 m,int i){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_395_updateSkinBuffer)
HXLINE( 415)		{
HXLINE( 415)			 ::iron::math::Vec4 loc = ::iron::object::BoneAnimation_obj::vpos;
HXDLIN( 415)			 ::iron::math::Quat quat = ::iron::object::BoneAnimation_obj::q1;
HXDLIN( 415)			 ::iron::math::Vec4 scale = ::iron::object::BoneAnimation_obj::vscl;
HXDLIN( 415)			loc->x = m->self->_30;
HXDLIN( 415)			loc->y = m->self->_31;
HXDLIN( 415)			loc->z = m->self->_32;
HXDLIN( 415)			 ::iron::math::Vec4 _this = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 415)			_this->x = m->self->_00;
HXDLIN( 415)			_this->y = m->self->_01;
HXDLIN( 415)			_this->z = m->self->_02;
HXDLIN( 415)			_this->w = ( (float)(((Float)1.0)) );
HXDLIN( 415)			 ::iron::math::Vec4 _this1 = _this;
HXDLIN( 415)			float v = (_this1->x * _this1->x);
HXDLIN( 415)			float v1 = (v + (_this1->y * _this1->y));
HXDLIN( 415)			scale->x = ( (float)(::Math_obj::sqrt(( (Float)((v1 + (_this1->z * _this1->z))) ))) );
HXDLIN( 415)			 ::iron::math::Vec4 _this2 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 415)			_this2->x = m->self->_10;
HXDLIN( 415)			_this2->y = m->self->_11;
HXDLIN( 415)			_this2->z = m->self->_12;
HXDLIN( 415)			_this2->w = ( (float)(((Float)1.0)) );
HXDLIN( 415)			 ::iron::math::Vec4 _this3 = _this2;
HXDLIN( 415)			float v2 = (_this3->x * _this3->x);
HXDLIN( 415)			float v3 = (v2 + (_this3->y * _this3->y));
HXDLIN( 415)			scale->y = ( (float)(::Math_obj::sqrt(( (Float)((v3 + (_this3->z * _this3->z))) ))) );
HXDLIN( 415)			 ::iron::math::Vec4 _this4 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 415)			_this4->x = m->self->_20;
HXDLIN( 415)			_this4->y = m->self->_21;
HXDLIN( 415)			_this4->z = m->self->_22;
HXDLIN( 415)			_this4->w = ( (float)(((Float)1.0)) );
HXDLIN( 415)			 ::iron::math::Vec4 _this5 = _this4;
HXDLIN( 415)			float v4 = (_this5->x * _this5->x);
HXDLIN( 415)			float v5 = (v4 + (_this5->y * _this5->y));
HXDLIN( 415)			scale->z = ( (float)(::Math_obj::sqrt(( (Float)((v5 + (_this5->z * _this5->z))) ))) );
HXDLIN( 415)			 ::kha::math::FastMatrix4 _this6 = m->self;
HXDLIN( 415)			float m3 = _this6->_12;
HXDLIN( 415)			float m4 = _this6->_22;
HXDLIN( 415)			float m5 = _this6->_32;
HXDLIN( 415)			float m6 = _this6->_13;
HXDLIN( 415)			float m7 = _this6->_23;
HXDLIN( 415)			float m8 = _this6->_33;
HXDLIN( 415)			float _this7 = _this6->_11;
HXDLIN( 415)			float c00 = (_this7 * ((m4 * m8) - (m5 * m7)));
HXDLIN( 415)			float _this8 = _this6->_21;
HXDLIN( 415)			float c001 = (c00 - (_this8 * ((m3 * m8) - (m5 * m6))));
HXDLIN( 415)			float _this9 = _this6->_31;
HXDLIN( 415)			float c002 = (c001 + (_this9 * ((m3 * m7) - (m4 * m6))));
HXDLIN( 415)			float m31 = _this6->_12;
HXDLIN( 415)			float m41 = _this6->_22;
HXDLIN( 415)			float m51 = _this6->_32;
HXDLIN( 415)			float m61 = _this6->_13;
HXDLIN( 415)			float m71 = _this6->_23;
HXDLIN( 415)			float m81 = _this6->_33;
HXDLIN( 415)			float _this10 = _this6->_10;
HXDLIN( 415)			float c01 = (_this10 * ((m41 * m81) - (m51 * m71)));
HXDLIN( 415)			float _this11 = _this6->_20;
HXDLIN( 415)			float c011 = (c01 - (_this11 * ((m31 * m81) - (m51 * m61))));
HXDLIN( 415)			float _this12 = _this6->_30;
HXDLIN( 415)			float c012 = (c011 + (_this12 * ((m31 * m71) - (m41 * m61))));
HXDLIN( 415)			float m32 = _this6->_11;
HXDLIN( 415)			float m42 = _this6->_21;
HXDLIN( 415)			float m52 = _this6->_31;
HXDLIN( 415)			float m62 = _this6->_13;
HXDLIN( 415)			float m72 = _this6->_23;
HXDLIN( 415)			float m82 = _this6->_33;
HXDLIN( 415)			float _this13 = _this6->_10;
HXDLIN( 415)			float c02 = (_this13 * ((m42 * m82) - (m52 * m72)));
HXDLIN( 415)			float _this14 = _this6->_20;
HXDLIN( 415)			float c021 = (c02 - (_this14 * ((m32 * m82) - (m52 * m62))));
HXDLIN( 415)			float _this15 = _this6->_30;
HXDLIN( 415)			float c022 = (c021 + (_this15 * ((m32 * m72) - (m42 * m62))));
HXDLIN( 415)			float m33 = _this6->_11;
HXDLIN( 415)			float m43 = _this6->_21;
HXDLIN( 415)			float m53 = _this6->_31;
HXDLIN( 415)			float m63 = _this6->_12;
HXDLIN( 415)			float m73 = _this6->_22;
HXDLIN( 415)			float m83 = _this6->_32;
HXDLIN( 415)			float _this16 = _this6->_10;
HXDLIN( 415)			float c03 = (_this16 * ((m43 * m83) - (m53 * m73)));
HXDLIN( 415)			float _this17 = _this6->_20;
HXDLIN( 415)			float c031 = (c03 - (_this17 * ((m33 * m83) - (m53 * m63))));
HXDLIN( 415)			float _this18 = _this6->_30;
HXDLIN( 415)			float c032 = (c031 + (_this18 * ((m33 * m73) - (m43 * m63))));
HXDLIN( 415)			float _hx_tmp = (_this6->_00 * c002);
HXDLIN( 415)			float _hx_tmp1 = (_hx_tmp - (_this6->_01 * c012));
HXDLIN( 415)			float _hx_tmp2 = (_hx_tmp1 + (_this6->_02 * c022));
HXDLIN( 415)			if (((_hx_tmp2 - (_this6->_03 * c032)) < ((Float)0.0))) {
HXLINE( 415)				scale->x = -(scale->x);
            			}
HXDLIN( 415)			Float invs = (((Float)1.0) / ( (Float)(scale->x) ));
HXDLIN( 415)			::iron::math::Mat4_obj::helpMat->self->_00 = ( (float)((m->self->_00 * invs)) );
HXDLIN( 415)			::iron::math::Mat4_obj::helpMat->self->_01 = ( (float)((m->self->_01 * invs)) );
HXDLIN( 415)			::iron::math::Mat4_obj::helpMat->self->_02 = ( (float)((m->self->_02 * invs)) );
HXDLIN( 415)			invs = (((Float)1.0) / ( (Float)(scale->y) ));
HXDLIN( 415)			::iron::math::Mat4_obj::helpMat->self->_10 = ( (float)((m->self->_10 * invs)) );
HXDLIN( 415)			::iron::math::Mat4_obj::helpMat->self->_11 = ( (float)((m->self->_11 * invs)) );
HXDLIN( 415)			::iron::math::Mat4_obj::helpMat->self->_12 = ( (float)((m->self->_12 * invs)) );
HXDLIN( 415)			invs = (((Float)1.0) / ( (Float)(scale->z) ));
HXDLIN( 415)			::iron::math::Mat4_obj::helpMat->self->_20 = ( (float)((m->self->_20 * invs)) );
HXDLIN( 415)			::iron::math::Mat4_obj::helpMat->self->_21 = ( (float)((m->self->_21 * invs)) );
HXDLIN( 415)			::iron::math::Mat4_obj::helpMat->self->_22 = ( (float)((m->self->_22 * invs)) );
HXDLIN( 415)			{
HXLINE( 415)				 ::iron::math::Mat4 m1 = ::iron::math::Mat4_obj::helpMat;
HXDLIN( 415)				float m11 = m1->self->_00;
HXDLIN( 415)				float m12 = m1->self->_10;
HXDLIN( 415)				float m13 = m1->self->_20;
HXDLIN( 415)				float m21 = m1->self->_01;
HXDLIN( 415)				float m22 = m1->self->_11;
HXDLIN( 415)				float m23 = m1->self->_21;
HXDLIN( 415)				float m311 = m1->self->_02;
HXDLIN( 415)				float m321 = m1->self->_12;
HXDLIN( 415)				float m331 = m1->self->_22;
HXDLIN( 415)				float tr = ((m11 + m22) + m331);
HXDLIN( 415)				Float s = ((Float)0.0);
HXDLIN( 415)				if ((tr > 0)) {
HXLINE( 415)					s = (((Float)0.5) / ::Math_obj::sqrt((tr + ((Float)1.0))));
HXDLIN( 415)					quat->w = ( (float)((((Float)0.25) / s)) );
HXDLIN( 415)					quat->x = ( (float)(((m321 - m23) * s)) );
HXDLIN( 415)					quat->y = ( (float)(((m13 - m311) * s)) );
HXDLIN( 415)					quat->z = ( (float)(((m21 - m12) * s)) );
            				}
            				else {
HXLINE( 415)					bool _hx_tmp3;
HXDLIN( 415)					if ((m11 > m22)) {
HXLINE( 415)						_hx_tmp3 = (m11 > m331);
            					}
            					else {
HXLINE( 415)						_hx_tmp3 = false;
            					}
HXDLIN( 415)					if (_hx_tmp3) {
HXLINE( 415)						s = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m11) - m22) - m331)));
HXDLIN( 415)						quat->w = ( (float)((( (Float)((m321 - m23)) ) / s)) );
HXDLIN( 415)						quat->x = ( (float)((((Float)0.25) * s)) );
HXDLIN( 415)						quat->y = ( (float)((( (Float)((m12 + m21)) ) / s)) );
HXDLIN( 415)						quat->z = ( (float)((( (Float)((m13 + m311)) ) / s)) );
            					}
            					else {
HXLINE( 415)						if ((m22 > m331)) {
HXLINE( 415)							s = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m22) - m11) - m331)));
HXDLIN( 415)							quat->w = ( (float)((( (Float)((m13 - m311)) ) / s)) );
HXDLIN( 415)							quat->x = ( (float)((( (Float)((m12 + m21)) ) / s)) );
HXDLIN( 415)							quat->y = ( (float)((((Float)0.25) * s)) );
HXDLIN( 415)							quat->z = ( (float)((( (Float)((m23 + m321)) ) / s)) );
            						}
            						else {
HXLINE( 415)							s = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m331) - m11) - m22)));
HXDLIN( 415)							quat->w = ( (float)((( (Float)((m21 - m12)) ) / s)) );
HXDLIN( 415)							quat->x = ( (float)((( (Float)((m13 + m311)) ) / s)) );
HXDLIN( 415)							quat->y = ( (float)((( (Float)((m23 + m321)) ) / s)) );
HXDLIN( 415)							quat->z = ( (float)((((Float)0.25) * s)) );
            						}
            					}
            				}
            			}
            		}
HXLINE( 416)		{
HXLINE( 416)			 ::iron::math::Quat _this19 = ::iron::object::BoneAnimation_obj::q1;
HXDLIN( 416)			float v6 = (_this19->x * _this19->x);
HXDLIN( 416)			float v7 = (v6 + (_this19->y * _this19->y));
HXDLIN( 416)			float v8 = (v7 + (_this19->z * _this19->z));
HXDLIN( 416)			Float l = ::Math_obj::sqrt(( (Float)((v8 + (_this19->w * _this19->w))) ));
HXDLIN( 416)			if ((l == ((Float)0.0))) {
HXLINE( 416)				_this19->x = ( (float)(0) );
HXDLIN( 416)				_this19->y = ( (float)(0) );
HXDLIN( 416)				_this19->z = ( (float)(0) );
HXDLIN( 416)				_this19->w = ( (float)(0) );
            			}
            			else {
HXLINE( 416)				l = (((Float)1.0) / l);
HXDLIN( 416)				 ::iron::math::Quat _this20 = _this19;
HXDLIN( 416)				_this20->x = (_this20->x * l);
HXDLIN( 416)				 ::iron::math::Quat _this21 = _this19;
HXDLIN( 416)				_this21->y = (_this21->y * l);
HXDLIN( 416)				 ::iron::math::Quat _this22 = _this19;
HXDLIN( 416)				_this22->z = (_this22->z * l);
HXDLIN( 416)				 ::iron::math::Quat _this23 = _this19;
HXDLIN( 416)				_this23->w = (_this23->w * l);
            			}
            		}
HXLINE( 417)		{
HXLINE( 417)			 ::iron::math::Quat _this24 = ::iron::object::BoneAnimation_obj::q2;
HXDLIN( 417)			_this24->x = ::iron::object::BoneAnimation_obj::vpos->x;
HXDLIN( 417)			_this24->y = ::iron::object::BoneAnimation_obj::vpos->y;
HXDLIN( 417)			_this24->z = ::iron::object::BoneAnimation_obj::vpos->z;
HXDLIN( 417)			_this24->w = ( (float)(((Float)0.0)) );
            		}
HXLINE( 418)		{
HXLINE( 418)			 ::iron::math::Quat _this25 = ::iron::object::BoneAnimation_obj::q2;
HXDLIN( 418)			 ::iron::math::Quat q1 = ::iron::object::BoneAnimation_obj::q2;
HXDLIN( 418)			 ::iron::math::Quat q2 = ::iron::object::BoneAnimation_obj::q1;
HXDLIN( 418)			float q1x = q1->x;
HXDLIN( 418)			float q1y = q1->y;
HXDLIN( 418)			float q1z = q1->z;
HXDLIN( 418)			float q1w = q1->w;
HXDLIN( 418)			float q2x = q2->x;
HXDLIN( 418)			float q2y = q2->y;
HXDLIN( 418)			float q2z = q2->z;
HXDLIN( 418)			float q2w = q2->w;
HXDLIN( 418)			_this25->x = ((((q1x * q2w) + (q1w * q2x)) + (q1y * q2z)) - (q1z * q2y));
HXDLIN( 418)			_this25->y = ((((q1w * q2y) - (q1x * q2z)) + (q1y * q2w)) + (q1z * q2x));
HXDLIN( 418)			_this25->z = ((((q1w * q2z) + (q1x * q2y)) - (q1y * q2x)) + (q1z * q2w));
HXDLIN( 418)			_this25->w = ((((q1w * q2w) - (q1x * q2x)) - (q1y * q2y)) - (q1z * q2z));
            		}
HXLINE( 421)		{
HXLINE( 421)			 float32array this1 = this->skinBuffer->self;
HXDLIN( 421)			this1.set((i * 8),::iron::object::BoneAnimation_obj::q1->x);
            		}
HXLINE( 422)		{
HXLINE( 422)			 float32array this2 = this->skinBuffer->self;
HXDLIN( 422)			this2.set(((i * 8) + 1),::iron::object::BoneAnimation_obj::q1->y);
            		}
HXLINE( 423)		{
HXLINE( 423)			 float32array this3 = this->skinBuffer->self;
HXDLIN( 423)			this3.set(((i * 8) + 2),::iron::object::BoneAnimation_obj::q1->z);
            		}
HXLINE( 424)		{
HXLINE( 424)			 float32array this4 = this->skinBuffer->self;
HXDLIN( 424)			this4.set(((i * 8) + 3),::iron::object::BoneAnimation_obj::q1->w);
            		}
HXLINE( 425)		{
HXLINE( 425)			 float32array this5 = this->skinBuffer->self;
HXDLIN( 425)			this5.set(((i * 8) + 4),( (float)((::iron::object::BoneAnimation_obj::q2->x * ((Float)0.5))) ));
            		}
HXLINE( 426)		{
HXLINE( 426)			 float32array this6 = this->skinBuffer->self;
HXDLIN( 426)			this6.set(((i * 8) + 5),( (float)((::iron::object::BoneAnimation_obj::q2->y * ((Float)0.5))) ));
            		}
HXLINE( 427)		{
HXLINE( 427)			 float32array this7 = this->skinBuffer->self;
HXDLIN( 427)			this7.set(((i * 8) + 6),( (float)((::iron::object::BoneAnimation_obj::q2->z * ((Float)0.5))) ));
            		}
HXLINE( 428)		{
HXLINE( 428)			 float32array this8 = this->skinBuffer->self;
HXDLIN( 428)			this8.set(((i * 8) + 7),( (float)((::iron::object::BoneAnimation_obj::q2->w * ((Float)0.5))) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BoneAnimation_obj,updateSkinBuffer,(void))

int BoneAnimation_obj::totalFrames(){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_526_totalFrames)
HXLINE( 527)		if (hx::IsNull( this->skeletonBones )) {
HXLINE( 527)			return 0;
            		}
HXLINE( 528)		 ::iron::data::TTrack track = this->skeletonBones->__get(0).StaticCast<  ::iron::data::TObj >()->anim->tracks->__get(0).StaticCast<  ::iron::data::TTrack >();
HXLINE( 529)		 ::kha::arrays::Uint32ArrayPrivate this1 = track->frames;
HXDLIN( 529)		int index = (track->frames->self.length() - 1);
HXDLIN( 529)		int _hx_tmp = this1->self.get(index);
HXDLIN( 529)		return ::Std_obj::_hx_int(( (Float)((_hx_tmp - track->frames->self.get(0))) ));
            	}


 ::iron::data::TObj BoneAnimation_obj::getBone(::String name){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_532_getBone)
HXLINE( 533)		if (hx::IsNull( this->skeletonBones )) {
HXLINE( 533)			return null();
            		}
HXLINE( 534)		{
HXLINE( 534)			int _g = 0;
HXDLIN( 534)			::Array< ::Dynamic> _g1 = this->skeletonBones;
HXDLIN( 534)			while((_g < _g1->length)){
HXLINE( 534)				 ::iron::data::TObj b = _g1->__get(_g).StaticCast<  ::iron::data::TObj >();
HXDLIN( 534)				_g = (_g + 1);
HXDLIN( 534)				if ((b->name == name)) {
HXLINE( 534)					return b;
            				}
            			}
            		}
HXLINE( 535)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BoneAnimation_obj,getBone,return )

int BoneAnimation_obj::getBoneIndex( ::iron::data::TObj bone,::Array< ::Dynamic> bones){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_538_getBoneIndex)
HXLINE( 539)		if (hx::IsNull( bones )) {
HXLINE( 539)			bones = this->skeletonBones;
            		}
HXLINE( 540)		if (hx::IsNotNull( bones )) {
HXLINE( 540)			int _g1 = 0;
HXDLIN( 540)			int _g = bones->length;
HXDLIN( 540)			while((_g1 < _g)){
HXLINE( 540)				_g1 = (_g1 + 1);
HXDLIN( 540)				int i = (_g1 - 1);
HXDLIN( 540)				if (hx::IsEq( bones->__get(i).StaticCast<  ::iron::data::TObj >(),bone )) {
HXLINE( 540)					return i;
            				}
            			}
            		}
HXLINE( 541)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BoneAnimation_obj,getBoneIndex,return )

 ::iron::math::Mat4 BoneAnimation_obj::getBoneMat( ::iron::data::TObj bone){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_545_getBoneMat)
HXDLIN( 545)		if (hx::IsNotNull( this->skeletonMats )) {
HXDLIN( 545)			::Array< ::Dynamic> _hx_tmp = this->skeletonMats;
HXDLIN( 545)			return _hx_tmp->__get(this->getBoneIndex(bone,null())).StaticCast<  ::iron::math::Mat4 >();
            		}
            		else {
HXDLIN( 545)			return null();
            		}
HXDLIN( 545)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BoneAnimation_obj,getBoneMat,return )

 ::iron::math::Mat4 BoneAnimation_obj::getBoneMatBlend( ::iron::data::TObj bone){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_549_getBoneMatBlend)
HXDLIN( 549)		if (hx::IsNotNull( this->skeletonMatsBlend )) {
HXDLIN( 549)			::Array< ::Dynamic> _hx_tmp = this->skeletonMatsBlend;
HXDLIN( 549)			return _hx_tmp->__get(this->getBoneIndex(bone,null())).StaticCast<  ::iron::math::Mat4 >();
            		}
            		else {
HXDLIN( 549)			return null();
            		}
HXDLIN( 549)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BoneAnimation_obj,getBoneMatBlend,return )

 ::iron::math::Mat4 BoneAnimation_obj::getAbsMat( ::iron::data::TObj bone){
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_552_getAbsMat)
HXLINE( 554)		if (hx::IsNull( this->skeletonMats )) {
HXLINE( 554)			return null();
            		}
HXLINE( 555)		if (hx::IsNull( this->absMats )) {
HXLINE( 556)			this->absMats = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 557)			while((this->absMats->length < this->skeletonMats->length)){
HXLINE( 557)				::Array< ::Dynamic> _hx_tmp = this->absMats;
HXDLIN( 557)				_hx_tmp->push( ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) )));
            			}
            		}
HXLINE( 559)		::Array< ::Dynamic> _hx_tmp1 = this->absMats;
HXDLIN( 559)		return _hx_tmp1->__get(this->getBoneIndex(bone,null())).StaticCast<  ::iron::math::Mat4 >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BoneAnimation_obj,getAbsMat,return )

 ::iron::math::Mat4 BoneAnimation_obj::getWorldMat( ::iron::data::TObj bone){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_562_getWorldMat)
HXLINE( 563)		if (hx::IsNull( this->skeletonMats )) {
HXLINE( 563)			return null();
            		}
HXLINE( 564)		if (hx::IsNull( this->applyParent )) {
HXLINE( 564)			this->applyParent = ::Array_obj< bool >::__new(0);
HXDLIN( 564)			{
HXLINE( 564)				int _g = 0;
HXDLIN( 564)				::Array< ::Dynamic> _g1 = this->skeletonMats;
HXDLIN( 564)				while((_g < _g1->length)){
HXLINE( 564)					 ::iron::math::Mat4 m = _g1->__get(_g).StaticCast<  ::iron::math::Mat4 >();
HXDLIN( 564)					_g = (_g + 1);
HXDLIN( 564)					this->applyParent->push(true);
            				}
            			}
            		}
HXLINE( 565)		int i = this->getBoneIndex(bone,null());
HXLINE( 566)		{
HXLINE( 566)			 ::iron::math::Mat4 _this = ::iron::object::BoneAnimation_obj::wm;
HXDLIN( 566)			 ::iron::math::Mat4 m1 = this->skeletonMats->__get(i).StaticCast<  ::iron::math::Mat4 >();
HXDLIN( 566)			_this->self->_00 = m1->self->_00;
HXDLIN( 566)			_this->self->_01 = m1->self->_01;
HXDLIN( 566)			_this->self->_02 = m1->self->_02;
HXDLIN( 566)			_this->self->_03 = m1->self->_03;
HXDLIN( 566)			_this->self->_10 = m1->self->_10;
HXDLIN( 566)			_this->self->_11 = m1->self->_11;
HXDLIN( 566)			_this->self->_12 = m1->self->_12;
HXDLIN( 566)			_this->self->_13 = m1->self->_13;
HXDLIN( 566)			_this->self->_20 = m1->self->_20;
HXDLIN( 566)			_this->self->_21 = m1->self->_21;
HXDLIN( 566)			_this->self->_22 = m1->self->_22;
HXDLIN( 566)			_this->self->_23 = m1->self->_23;
HXDLIN( 566)			_this->self->_30 = m1->self->_30;
HXDLIN( 566)			_this->self->_31 = m1->self->_31;
HXDLIN( 566)			_this->self->_32 = m1->self->_32;
HXDLIN( 566)			_this->self->_33 = m1->self->_33;
            		}
HXLINE( 567)		this->multParents(::iron::object::BoneAnimation_obj::wm,i,this->skeletonBones,this->skeletonMats);
HXLINE( 569)		return ::iron::object::BoneAnimation_obj::wm;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BoneAnimation_obj,getWorldMat,return )

float BoneAnimation_obj::getBoneLen( ::iron::data::TObj bone){
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_572_getBoneLen)
HXLINE( 573)		::Array< ::String > refs = this->data->geom->skeletonBoneRefs;
HXLINE( 574)		 ::kha::arrays::Float32ArrayPrivate lens = this->data->geom->skeletonBoneLens;
HXLINE( 575)		{
HXLINE( 575)			int _g1 = 0;
HXDLIN( 575)			int _g = refs->length;
HXDLIN( 575)			while((_g1 < _g)){
HXLINE( 575)				_g1 = (_g1 + 1);
HXDLIN( 575)				int i = (_g1 - 1);
HXDLIN( 575)				if ((refs->__get(i) == bone->name)) {
HXLINE( 575)					return lens->self.get(i);
            				}
            			}
            		}
HXLINE( 576)		return ( (float)(((Float)0.0)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(BoneAnimation_obj,getBoneLen,return )

void BoneAnimation_obj::solveIK( ::iron::data::TObj effector, ::iron::math::Vec4 goal,hx::Null< Float >  __o_precission,hx::Null< int >  __o_maxIterations){
Float precission = __o_precission.Default(((Float)0.1));
int maxIterations = __o_maxIterations.Default(6);
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_579_solveIK)
HXLINE( 581)		::Array< ::Dynamic> bones = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 582)		::Array< float > lengths = ::Array_obj< float >::__new(0);
HXLINE( 583)		 ::iron::data::TObj start = effector;
HXLINE( 584)		while(hx::IsNotNull( start->parent )){
HXLINE( 585)			bones->push(start);
HXLINE( 586)			lengths->push(this->getBoneLen(start));
HXLINE( 587)			start = start->parent;
            		}
HXLINE( 589)		start = bones->__get((bones->length - 1)).StaticCast<  ::iron::data::TObj >();
HXLINE( 592)		 ::iron::math::Vec4 armsc = this->object->parent->transform->scale;
HXLINE( 593)		 ::iron::math::Vec4 goal1 = goal;
HXDLIN( 593)		goal1->x = (goal1->x * (( (Float)(1) ) / ( (Float)(armsc->x) )));
HXDLIN( 593)		 ::iron::math::Vec4 goal2 = goal;
HXDLIN( 593)		goal2->y = (goal2->y * (( (Float)(1) ) / ( (Float)(armsc->y) )));
HXDLIN( 593)		 ::iron::math::Vec4 goal3 = goal;
HXDLIN( 593)		goal3->z = (goal3->z * (( (Float)(1) ) / ( (Float)(armsc->z) )));
HXLINE( 594)		 ::iron::math::Mat4 _this = this->getWorldMat(start);
HXDLIN( 594)		float startLoc_x = _this->self->_30;
HXDLIN( 594)		float startLoc_y = _this->self->_31;
HXDLIN( 594)		float startLoc_z = _this->self->_32;
HXDLIN( 594)		float startLoc_w = _this->self->_33;
HXLINE( 595)		startLoc_z = (startLoc_z - this->getBoneLen(start->parent));
HXLINE( 596)		float vx = (goal->x - startLoc_x);
HXDLIN( 596)		float vy = (goal->y - startLoc_y);
HXDLIN( 596)		float vz = (goal->z - startLoc_z);
HXDLIN( 596)		float dist = ( (float)(::Math_obj::sqrt(( (Float)((((vx * vx) + (vy * vy)) + (vz * vz))) ))) );
HXLINE( 599)		float x = ( (float)(((Float)0.0)) );
HXLINE( 600)		{
HXLINE( 600)			int _g = 0;
HXDLIN( 600)			while((_g < lengths->length)){
HXLINE( 600)				float l = lengths->__get(_g);
HXDLIN( 600)				_g = (_g + 1);
HXDLIN( 600)				x = (x + l);
            			}
            		}
HXLINE( 602)		{
HXLINE( 602)			 ::iron::math::Vec4 _this1 = ::iron::object::BoneAnimation_obj::v1;
HXDLIN( 602)			_this1->x = ( (float)(0) );
HXDLIN( 602)			_this1->y = ( (float)(1) );
HXDLIN( 602)			_this1->z = ( (float)(0) );
HXDLIN( 602)			_this1->w = ( (float)(((Float)1.0)) );
            		}
HXLINE( 605)		if ((dist > x)) {
HXLINE( 607)			 ::iron::math::Mat4 m = this->getBoneMat(start);
HXLINE( 608)			 ::iron::math::Mat4 w = this->getWorldMat(start);
HXLINE( 609)			 ::iron::math::Mat4 iw =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ));
HXLINE( 610)			{
HXLINE( 610)				float a00 = w->self->_00;
HXDLIN( 610)				float a01 = w->self->_01;
HXDLIN( 610)				float a02 = w->self->_02;
HXDLIN( 610)				float a03 = w->self->_03;
HXDLIN( 610)				float a10 = w->self->_10;
HXDLIN( 610)				float a11 = w->self->_11;
HXDLIN( 610)				float a12 = w->self->_12;
HXDLIN( 610)				float a13 = w->self->_13;
HXDLIN( 610)				float a20 = w->self->_20;
HXDLIN( 610)				float a21 = w->self->_21;
HXDLIN( 610)				float a22 = w->self->_22;
HXDLIN( 610)				float a23 = w->self->_23;
HXDLIN( 610)				float a30 = w->self->_30;
HXDLIN( 610)				float a31 = w->self->_31;
HXDLIN( 610)				float a32 = w->self->_32;
HXDLIN( 610)				float a33 = w->self->_33;
HXDLIN( 610)				float b00 = ((a00 * a11) - (a01 * a10));
HXDLIN( 610)				float b01 = ((a00 * a12) - (a02 * a10));
HXDLIN( 610)				float b02 = ((a00 * a13) - (a03 * a10));
HXDLIN( 610)				float b03 = ((a01 * a12) - (a02 * a11));
HXDLIN( 610)				float b04 = ((a01 * a13) - (a03 * a11));
HXDLIN( 610)				float b05 = ((a02 * a13) - (a03 * a12));
HXDLIN( 610)				float b06 = ((a20 * a31) - (a21 * a30));
HXDLIN( 610)				float b07 = ((a20 * a32) - (a22 * a30));
HXDLIN( 610)				float b08 = ((a20 * a33) - (a23 * a30));
HXDLIN( 610)				float b09 = ((a21 * a32) - (a22 * a31));
HXDLIN( 610)				float b10 = ((a21 * a33) - (a23 * a31));
HXDLIN( 610)				float b11 = ((a22 * a33) - (a23 * a32));
HXDLIN( 610)				float det = ((((((b00 * b11) - (b01 * b10)) + (b02 * b09)) + (b03 * b08)) - (b04 * b07)) + (b05 * b06));
HXDLIN( 610)				if ((det == ((Float)0.0))) {
HXLINE( 610)					iw->self->_00 = ( (float)(((Float)1.0)) );
HXDLIN( 610)					iw->self->_01 = ( (float)(((Float)0.0)) );
HXDLIN( 610)					iw->self->_02 = ( (float)(((Float)0.0)) );
HXDLIN( 610)					iw->self->_03 = ( (float)(((Float)0.0)) );
HXDLIN( 610)					iw->self->_10 = ( (float)(((Float)0.0)) );
HXDLIN( 610)					iw->self->_11 = ( (float)(((Float)1.0)) );
HXDLIN( 610)					iw->self->_12 = ( (float)(((Float)0.0)) );
HXDLIN( 610)					iw->self->_13 = ( (float)(((Float)0.0)) );
HXDLIN( 610)					iw->self->_20 = ( (float)(((Float)0.0)) );
HXDLIN( 610)					iw->self->_21 = ( (float)(((Float)0.0)) );
HXDLIN( 610)					iw->self->_22 = ( (float)(((Float)1.0)) );
HXDLIN( 610)					iw->self->_23 = ( (float)(((Float)0.0)) );
HXDLIN( 610)					iw->self->_30 = ( (float)(((Float)0.0)) );
HXDLIN( 610)					iw->self->_31 = ( (float)(((Float)0.0)) );
HXDLIN( 610)					iw->self->_32 = ( (float)(((Float)0.0)) );
HXDLIN( 610)					iw->self->_33 = ( (float)(((Float)1.0)) );
            				}
            				else {
HXLINE( 262)					det = ( (float)((((Float)1.0) / ( (Float)(det) ))) );
HXLINE( 610)					iw->self->_00 = ((((a11 * b11) - (a12 * b10)) + (a13 * b09)) * det);
HXDLIN( 610)					iw->self->_01 = ((((a02 * b10) - (a01 * b11)) - (a03 * b09)) * det);
HXDLIN( 610)					iw->self->_02 = ((((a31 * b05) - (a32 * b04)) + (a33 * b03)) * det);
HXDLIN( 610)					iw->self->_03 = ((((a22 * b04) - (a21 * b05)) - (a23 * b03)) * det);
HXDLIN( 610)					iw->self->_10 = ((((a12 * b08) - (a10 * b11)) - (a13 * b07)) * det);
HXDLIN( 610)					iw->self->_11 = ((((a00 * b11) - (a02 * b08)) + (a03 * b07)) * det);
HXDLIN( 610)					iw->self->_12 = ((((a32 * b02) - (a30 * b05)) - (a33 * b01)) * det);
HXDLIN( 610)					iw->self->_13 = ((((a20 * b05) - (a22 * b02)) + (a23 * b01)) * det);
HXDLIN( 610)					iw->self->_20 = ((((a10 * b10) - (a11 * b08)) + (a13 * b06)) * det);
HXDLIN( 610)					iw->self->_21 = ((((a01 * b08) - (a00 * b10)) - (a03 * b06)) * det);
HXDLIN( 610)					iw->self->_22 = ((((a30 * b04) - (a31 * b02)) + (a33 * b00)) * det);
HXDLIN( 610)					iw->self->_23 = ((((a21 * b02) - (a20 * b04)) - (a23 * b00)) * det);
HXDLIN( 610)					iw->self->_30 = ((((a11 * b07) - (a10 * b09)) - (a12 * b06)) * det);
HXDLIN( 610)					iw->self->_31 = ((((a00 * b09) - (a01 * b07)) + (a02 * b06)) * det);
HXDLIN( 610)					iw->self->_32 = ((((a31 * b01) - (a30 * b03)) - (a32 * b00)) * det);
HXDLIN( 610)					iw->self->_33 = ((((a20 * b03) - (a21 * b01)) + (a22 * b00)) * det);
            				}
            			}
HXLINE( 612)			{
HXLINE( 612)				m->self->_00 = w->self->_00;
HXDLIN( 612)				m->self->_01 = w->self->_01;
HXDLIN( 612)				m->self->_02 = w->self->_02;
HXDLIN( 612)				m->self->_03 = w->self->_03;
HXDLIN( 612)				m->self->_10 = w->self->_10;
HXDLIN( 612)				m->self->_11 = w->self->_11;
HXDLIN( 612)				m->self->_12 = w->self->_12;
HXDLIN( 612)				m->self->_13 = w->self->_13;
HXDLIN( 612)				m->self->_20 = w->self->_20;
HXDLIN( 612)				m->self->_21 = w->self->_21;
HXDLIN( 612)				m->self->_22 = w->self->_22;
HXDLIN( 612)				m->self->_23 = w->self->_23;
HXDLIN( 612)				m->self->_30 = w->self->_30;
HXDLIN( 612)				m->self->_31 = w->self->_31;
HXDLIN( 612)				m->self->_32 = w->self->_32;
HXDLIN( 612)				m->self->_33 = w->self->_33;
            			}
HXLINE( 613)			{
HXLINE( 613)				 ::iron::math::Vec4 loc = ::iron::object::BoneAnimation_obj::vpos;
HXDLIN( 613)				 ::iron::math::Quat quat = ::iron::object::BoneAnimation_obj::q1;
HXDLIN( 613)				 ::iron::math::Vec4 scale = ::iron::object::BoneAnimation_obj::vscl;
HXDLIN( 613)				loc->x = m->self->_30;
HXDLIN( 613)				loc->y = m->self->_31;
HXDLIN( 613)				loc->z = m->self->_32;
HXDLIN( 613)				 ::iron::math::Vec4 _this2 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 613)				_this2->x = m->self->_00;
HXDLIN( 613)				_this2->y = m->self->_01;
HXDLIN( 613)				_this2->z = m->self->_02;
HXDLIN( 613)				_this2->w = ( (float)(((Float)1.0)) );
HXDLIN( 613)				 ::iron::math::Vec4 _this3 = _this2;
HXDLIN( 613)				float v = (_this3->x * _this3->x);
HXDLIN( 613)				float v1 = (v + (_this3->y * _this3->y));
HXDLIN( 613)				scale->x = ( (float)(::Math_obj::sqrt(( (Float)((v1 + (_this3->z * _this3->z))) ))) );
HXDLIN( 613)				 ::iron::math::Vec4 _this4 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 613)				_this4->x = m->self->_10;
HXDLIN( 613)				_this4->y = m->self->_11;
HXDLIN( 613)				_this4->z = m->self->_12;
HXDLIN( 613)				_this4->w = ( (float)(((Float)1.0)) );
HXDLIN( 613)				 ::iron::math::Vec4 _this5 = _this4;
HXDLIN( 613)				float v2 = (_this5->x * _this5->x);
HXDLIN( 613)				float v3 = (v2 + (_this5->y * _this5->y));
HXDLIN( 613)				scale->y = ( (float)(::Math_obj::sqrt(( (Float)((v3 + (_this5->z * _this5->z))) ))) );
HXDLIN( 613)				 ::iron::math::Vec4 _this6 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 613)				_this6->x = m->self->_20;
HXDLIN( 613)				_this6->y = m->self->_21;
HXDLIN( 613)				_this6->z = m->self->_22;
HXDLIN( 613)				_this6->w = ( (float)(((Float)1.0)) );
HXDLIN( 613)				 ::iron::math::Vec4 _this7 = _this6;
HXDLIN( 613)				float v4 = (_this7->x * _this7->x);
HXDLIN( 613)				float v5 = (v4 + (_this7->y * _this7->y));
HXDLIN( 613)				scale->z = ( (float)(::Math_obj::sqrt(( (Float)((v5 + (_this7->z * _this7->z))) ))) );
HXDLIN( 613)				 ::kha::math::FastMatrix4 _this8 = m->self;
HXDLIN( 613)				float m3 = _this8->_12;
HXDLIN( 613)				float m4 = _this8->_22;
HXDLIN( 613)				float m5 = _this8->_32;
HXDLIN( 613)				float m6 = _this8->_13;
HXDLIN( 613)				float m7 = _this8->_23;
HXDLIN( 613)				float m8 = _this8->_33;
HXDLIN( 613)				float _this9 = _this8->_11;
HXDLIN( 613)				float c00 = (_this9 * ((m4 * m8) - (m5 * m7)));
HXDLIN( 613)				float _this10 = _this8->_21;
HXDLIN( 613)				float c001 = (c00 - (_this10 * ((m3 * m8) - (m5 * m6))));
HXDLIN( 613)				float _this11 = _this8->_31;
HXDLIN( 613)				float c002 = (c001 + (_this11 * ((m3 * m7) - (m4 * m6))));
HXDLIN( 613)				float m31 = _this8->_12;
HXDLIN( 613)				float m41 = _this8->_22;
HXDLIN( 613)				float m51 = _this8->_32;
HXDLIN( 613)				float m61 = _this8->_13;
HXDLIN( 613)				float m71 = _this8->_23;
HXDLIN( 613)				float m81 = _this8->_33;
HXDLIN( 613)				float _this12 = _this8->_10;
HXDLIN( 613)				float c01 = (_this12 * ((m41 * m81) - (m51 * m71)));
HXDLIN( 613)				float _this13 = _this8->_20;
HXDLIN( 613)				float c011 = (c01 - (_this13 * ((m31 * m81) - (m51 * m61))));
HXDLIN( 613)				float _this14 = _this8->_30;
HXDLIN( 613)				float c012 = (c011 + (_this14 * ((m31 * m71) - (m41 * m61))));
HXDLIN( 613)				float m32 = _this8->_11;
HXDLIN( 613)				float m42 = _this8->_21;
HXDLIN( 613)				float m52 = _this8->_31;
HXDLIN( 613)				float m62 = _this8->_13;
HXDLIN( 613)				float m72 = _this8->_23;
HXDLIN( 613)				float m82 = _this8->_33;
HXDLIN( 613)				float _this15 = _this8->_10;
HXDLIN( 613)				float c02 = (_this15 * ((m42 * m82) - (m52 * m72)));
HXDLIN( 613)				float _this16 = _this8->_20;
HXDLIN( 613)				float c021 = (c02 - (_this16 * ((m32 * m82) - (m52 * m62))));
HXDLIN( 613)				float _this17 = _this8->_30;
HXDLIN( 613)				float c022 = (c021 + (_this17 * ((m32 * m72) - (m42 * m62))));
HXDLIN( 613)				float m33 = _this8->_11;
HXDLIN( 613)				float m43 = _this8->_21;
HXDLIN( 613)				float m53 = _this8->_31;
HXDLIN( 613)				float m63 = _this8->_12;
HXDLIN( 613)				float m73 = _this8->_22;
HXDLIN( 613)				float m83 = _this8->_32;
HXDLIN( 613)				float _this18 = _this8->_10;
HXDLIN( 613)				float c03 = (_this18 * ((m43 * m83) - (m53 * m73)));
HXDLIN( 613)				float _this19 = _this8->_20;
HXDLIN( 613)				float c031 = (c03 - (_this19 * ((m33 * m83) - (m53 * m63))));
HXDLIN( 613)				float _this20 = _this8->_30;
HXDLIN( 613)				float c032 = (c031 + (_this20 * ((m33 * m73) - (m43 * m63))));
HXDLIN( 613)				float _hx_tmp = (_this8->_00 * c002);
HXDLIN( 613)				float _hx_tmp1 = (_hx_tmp - (_this8->_01 * c012));
HXDLIN( 613)				float _hx_tmp2 = (_hx_tmp1 + (_this8->_02 * c022));
HXDLIN( 613)				if (((_hx_tmp2 - (_this8->_03 * c032)) < ((Float)0.0))) {
HXLINE( 613)					scale->x = -(scale->x);
            				}
HXDLIN( 613)				Float invs = (((Float)1.0) / ( (Float)(scale->x) ));
HXDLIN( 613)				::iron::math::Mat4_obj::helpMat->self->_00 = ( (float)((m->self->_00 * invs)) );
HXDLIN( 613)				::iron::math::Mat4_obj::helpMat->self->_01 = ( (float)((m->self->_01 * invs)) );
HXDLIN( 613)				::iron::math::Mat4_obj::helpMat->self->_02 = ( (float)((m->self->_02 * invs)) );
HXLINE(  35)				invs = (((Float)1.0) / ( (Float)(scale->y) ));
HXLINE( 613)				::iron::math::Mat4_obj::helpMat->self->_10 = ( (float)((m->self->_10 * invs)) );
HXDLIN( 613)				::iron::math::Mat4_obj::helpMat->self->_11 = ( (float)((m->self->_11 * invs)) );
HXDLIN( 613)				::iron::math::Mat4_obj::helpMat->self->_12 = ( (float)((m->self->_12 * invs)) );
HXLINE(  39)				invs = (((Float)1.0) / ( (Float)(scale->z) ));
HXLINE( 613)				::iron::math::Mat4_obj::helpMat->self->_20 = ( (float)((m->self->_20 * invs)) );
HXDLIN( 613)				::iron::math::Mat4_obj::helpMat->self->_21 = ( (float)((m->self->_21 * invs)) );
HXDLIN( 613)				::iron::math::Mat4_obj::helpMat->self->_22 = ( (float)((m->self->_22 * invs)) );
HXDLIN( 613)				{
HXLINE( 613)					 ::iron::math::Mat4 m1 = ::iron::math::Mat4_obj::helpMat;
HXDLIN( 613)					float m11 = m1->self->_00;
HXDLIN( 613)					float m12 = m1->self->_10;
HXDLIN( 613)					float m13 = m1->self->_20;
HXDLIN( 613)					float m21 = m1->self->_01;
HXDLIN( 613)					float m22 = m1->self->_11;
HXDLIN( 613)					float m23 = m1->self->_21;
HXDLIN( 613)					float m311 = m1->self->_02;
HXDLIN( 613)					float m321 = m1->self->_12;
HXDLIN( 613)					float m331 = m1->self->_22;
HXDLIN( 613)					float tr = ((m11 + m22) + m331);
HXDLIN( 613)					Float s = ((Float)0.0);
HXDLIN( 613)					if ((tr > 0)) {
HXLINE(  75)						s = (((Float)0.5) / ::Math_obj::sqrt((tr + ((Float)1.0))));
HXLINE( 613)						quat->w = ( (float)((((Float)0.25) / s)) );
HXDLIN( 613)						quat->x = ( (float)(((m321 - m23) * s)) );
HXDLIN( 613)						quat->y = ( (float)(((m13 - m311) * s)) );
HXDLIN( 613)						quat->z = ( (float)(((m21 - m12) * s)) );
            					}
            					else {
HXLINE( 613)						bool _hx_tmp3;
HXDLIN( 613)						if ((m11 > m22)) {
HXLINE( 613)							_hx_tmp3 = (m11 > m331);
            						}
            						else {
HXLINE( 613)							_hx_tmp3 = false;
            						}
HXDLIN( 613)						if (_hx_tmp3) {
HXLINE(  82)							s = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m11) - m22) - m331)));
HXLINE( 613)							quat->w = ( (float)((( (Float)((m321 - m23)) ) / s)) );
HXDLIN( 613)							quat->x = ( (float)((((Float)0.25) * s)) );
HXDLIN( 613)							quat->y = ( (float)((( (Float)((m12 + m21)) ) / s)) );
HXDLIN( 613)							quat->z = ( (float)((( (Float)((m13 + m311)) ) / s)) );
            						}
            						else {
HXLINE( 613)							if ((m22 > m331)) {
HXLINE(  89)								s = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m22) - m11) - m331)));
HXLINE( 613)								quat->w = ( (float)((( (Float)((m13 - m311)) ) / s)) );
HXDLIN( 613)								quat->x = ( (float)((( (Float)((m12 + m21)) ) / s)) );
HXDLIN( 613)								quat->y = ( (float)((((Float)0.25) * s)) );
HXDLIN( 613)								quat->z = ( (float)((( (Float)((m23 + m321)) ) / s)) );
            							}
            							else {
HXLINE(  96)								s = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m331) - m11) - m22)));
HXLINE( 613)								quat->w = ( (float)((( (Float)((m21 - m12)) ) / s)) );
HXDLIN( 613)								quat->x = ( (float)((( (Float)((m13 + m311)) ) / s)) );
HXDLIN( 613)								quat->y = ( (float)((( (Float)((m23 + m321)) ) / s)) );
HXDLIN( 613)								quat->z = ( (float)((((Float)0.25) * s)) );
            							}
            						}
            					}
            				}
            			}
HXLINE( 614)			{
HXLINE( 614)				 ::iron::math::Vec4 _this21 = ::iron::object::BoneAnimation_obj::v2;
HXDLIN( 614)				_this21->x = goal->x;
HXDLIN( 614)				_this21->y = goal->y;
HXDLIN( 614)				_this21->z = goal->z;
HXDLIN( 614)				 ::iron::math::Vec4 _this22 = _this21;
HXDLIN( 614)				 ::iron::math::Vec4 _this23 = _this22;
HXDLIN( 614)				_this23->x = (_this23->x - startLoc_x);
HXDLIN( 614)				 ::iron::math::Vec4 _this24 = _this22;
HXDLIN( 614)				_this24->y = (_this24->y - startLoc_y);
HXDLIN( 614)				 ::iron::math::Vec4 _this25 = _this22;
HXDLIN( 614)				_this25->z = (_this25->z - startLoc_z);
HXDLIN( 614)				 ::iron::math::Vec4 _this26 = _this22;
HXDLIN( 614)				float v6 = (_this26->x * _this26->x);
HXDLIN( 614)				float v7 = (v6 + (_this26->y * _this26->y));
HXDLIN( 614)				float n = ( (float)(::Math_obj::sqrt(( (Float)((v7 + (_this26->z * _this26->z))) ))) );
HXDLIN( 614)				if ((n > ((Float)0.0))) {
HXLINE( 614)					Float invN = (((Float)1.0) / ( (Float)(n) ));
HXDLIN( 614)					 ::iron::math::Vec4 _this27 = _this26;
HXDLIN( 614)					_this27->x = (_this27->x * invN);
HXDLIN( 614)					 ::iron::math::Vec4 _this28 = _this26;
HXDLIN( 614)					_this28->y = (_this28->y * invN);
HXDLIN( 614)					 ::iron::math::Vec4 _this29 = _this26;
HXDLIN( 614)					_this29->z = (_this29->z * invN);
            				}
            			}
HXLINE( 615)			{
HXLINE( 615)				 ::iron::math::Quat _this30 = ::iron::object::BoneAnimation_obj::q1;
HXDLIN( 615)				 ::iron::math::Vec4 v11 = ::iron::object::BoneAnimation_obj::v1;
HXDLIN( 615)				 ::iron::math::Vec4 v21 = ::iron::object::BoneAnimation_obj::v2;
HXDLIN( 615)				 ::iron::math::Vec4 a = ::iron::math::Quat_obj::helpVec0;
HXDLIN( 615)				float dot = (v11->x * v21->x);
HXDLIN( 615)				float dot1 = (dot + (v11->y * v21->y));
HXDLIN( 615)				float dot2 = (dot1 + (v11->z * v21->z));
HXDLIN( 615)				if ((dot2 < ((Float)-0.999999))) {
HXLINE( 615)					{
HXLINE( 615)						 ::iron::math::Vec4 a1 = ::iron::math::Quat_obj::xAxis;
HXDLIN( 615)						float ax = a1->x;
HXDLIN( 615)						float ay = a1->y;
HXDLIN( 615)						float az = a1->z;
HXDLIN( 615)						float bx = v11->x;
HXDLIN( 615)						float by = v11->y;
HXDLIN( 615)						float bz = v11->z;
HXDLIN( 615)						a->x = ((ay * bz) - (az * by));
HXDLIN( 615)						a->y = ((az * bx) - (ax * bz));
HXDLIN( 615)						a->z = ((ax * by) - (ay * bx));
            					}
HXDLIN( 615)					float v8 = (a->x * a->x);
HXDLIN( 615)					float v9 = (v8 + (a->y * a->y));
HXDLIN( 615)					if ((( (float)(::Math_obj::sqrt(( (Float)((v9 + (a->z * a->z))) ))) ) < ((Float)0.000001))) {
HXLINE( 615)						 ::iron::math::Vec4 a2 = ::iron::math::Quat_obj::yAxis;
HXDLIN( 615)						float ax1 = a2->x;
HXDLIN( 615)						float ay1 = a2->y;
HXDLIN( 615)						float az1 = a2->z;
HXDLIN( 615)						float bx1 = v11->x;
HXDLIN( 615)						float by1 = v11->y;
HXDLIN( 615)						float bz1 = v11->z;
HXDLIN( 615)						a->x = ((ay1 * bz1) - (az1 * by1));
HXDLIN( 615)						a->y = ((az1 * bx1) - (ax1 * bz1));
HXDLIN( 615)						a->z = ((ax1 * by1) - (ay1 * bx1));
            					}
HXDLIN( 615)					{
HXLINE( 615)						float v10 = (a->x * a->x);
HXDLIN( 615)						float v12 = (v10 + (a->y * a->y));
HXDLIN( 615)						float n1 = ( (float)(::Math_obj::sqrt(( (Float)((v12 + (a->z * a->z))) ))) );
HXDLIN( 615)						if ((n1 > ((Float)0.0))) {
HXLINE( 615)							Float invN1 = (((Float)1.0) / ( (Float)(n1) ));
HXDLIN( 615)							 ::iron::math::Vec4 a3 = a;
HXDLIN( 615)							a3->x = (a3->x * invN1);
HXDLIN( 615)							 ::iron::math::Vec4 a4 = a;
HXDLIN( 615)							a4->y = (a4->y * invN1);
HXDLIN( 615)							 ::iron::math::Vec4 a5 = a;
HXDLIN( 615)							a5->z = (a5->z * invN1);
            						}
            					}
HXDLIN( 615)					{
HXLINE( 615)						float s1 = ( (float)(::Math_obj::sin(((Float)1.5707963267948966))) );
HXDLIN( 615)						_this30->x = (a->x * s1);
HXDLIN( 615)						_this30->y = (a->y * s1);
HXDLIN( 615)						_this30->z = (a->z * s1);
HXDLIN( 615)						_this30->w = ( (float)(::Math_obj::cos(((Float)1.5707963267948966))) );
HXDLIN( 615)						{
HXLINE( 615)							float v13 = (_this30->x * _this30->x);
HXDLIN( 615)							float v14 = (v13 + (_this30->y * _this30->y));
HXDLIN( 615)							float v15 = (v14 + (_this30->z * _this30->z));
HXDLIN( 615)							Float l1 = ::Math_obj::sqrt(( (Float)((v15 + (_this30->w * _this30->w))) ));
HXDLIN( 615)							if ((l1 == ((Float)0.0))) {
HXLINE( 615)								_this30->x = ( (float)(0) );
HXDLIN( 615)								_this30->y = ( (float)(0) );
HXDLIN( 615)								_this30->z = ( (float)(0) );
HXDLIN( 615)								_this30->w = ( (float)(0) );
            							}
            							else {
HXLINE( 128)								l1 = (((Float)1.0) / l1);
HXLINE( 615)								 ::iron::math::Quat _this31 = _this30;
HXDLIN( 615)								_this31->x = (_this31->x * l1);
HXDLIN( 615)								 ::iron::math::Quat _this32 = _this30;
HXDLIN( 615)								_this32->y = (_this32->y * l1);
HXDLIN( 615)								 ::iron::math::Quat _this33 = _this30;
HXDLIN( 615)								_this33->z = (_this33->z * l1);
HXDLIN( 615)								 ::iron::math::Quat _this34 = _this30;
HXDLIN( 615)								_this34->w = (_this34->w * l1);
            							}
            						}
            					}
            				}
            				else {
HXLINE( 615)					if ((dot2 > ((Float)0.999999))) {
HXLINE( 615)						_this30->x = ( (float)(0) );
HXDLIN( 615)						_this30->y = ( (float)(0) );
HXDLIN( 615)						_this30->z = ( (float)(0) );
HXDLIN( 615)						_this30->w = ( (float)(1) );
            					}
            					else {
HXLINE( 615)						{
HXLINE( 615)							float ax2 = v11->x;
HXDLIN( 615)							float ay2 = v11->y;
HXDLIN( 615)							float az2 = v11->z;
HXDLIN( 615)							float bx2 = v21->x;
HXDLIN( 615)							float by2 = v21->y;
HXDLIN( 615)							float bz2 = v21->z;
HXDLIN( 615)							a->x = ((ay2 * bz2) - (az2 * by2));
HXDLIN( 615)							a->y = ((az2 * bx2) - (ax2 * bz2));
HXDLIN( 615)							a->z = ((ax2 * by2) - (ay2 * bx2));
            						}
HXDLIN( 615)						{
HXLINE( 615)							_this30->x = a->x;
HXDLIN( 615)							_this30->y = a->y;
HXDLIN( 615)							_this30->z = a->z;
HXDLIN( 615)							_this30->w = (1 + dot2);
            						}
HXDLIN( 615)						{
HXLINE( 615)							float v16 = (_this30->x * _this30->x);
HXDLIN( 615)							float v17 = (v16 + (_this30->y * _this30->y));
HXDLIN( 615)							float v18 = (v17 + (_this30->z * _this30->z));
HXDLIN( 615)							Float l2 = ::Math_obj::sqrt(( (Float)((v18 + (_this30->w * _this30->w))) ));
HXDLIN( 615)							if ((l2 == ((Float)0.0))) {
HXLINE( 615)								_this30->x = ( (float)(0) );
HXDLIN( 615)								_this30->y = ( (float)(0) );
HXDLIN( 615)								_this30->z = ( (float)(0) );
HXDLIN( 615)								_this30->w = ( (float)(0) );
            							}
            							else {
HXLINE( 128)								l2 = (((Float)1.0) / l2);
HXLINE( 615)								 ::iron::math::Quat _this35 = _this30;
HXDLIN( 615)								_this35->x = (_this35->x * l2);
HXDLIN( 615)								 ::iron::math::Quat _this36 = _this30;
HXDLIN( 615)								_this36->y = (_this36->y * l2);
HXDLIN( 615)								 ::iron::math::Quat _this37 = _this30;
HXDLIN( 615)								_this37->z = (_this37->z * l2);
HXDLIN( 615)								 ::iron::math::Quat _this38 = _this30;
HXDLIN( 615)								_this38->w = (_this38->w * l2);
            							}
            						}
            					}
            				}
            			}
HXLINE( 616)			{
HXLINE( 616)				 ::iron::math::Vec4 loc1 = ::iron::object::BoneAnimation_obj::vpos;
HXDLIN( 616)				 ::iron::math::Quat quat1 = ::iron::object::BoneAnimation_obj::q1;
HXDLIN( 616)				 ::iron::math::Vec4 sc = ::iron::object::BoneAnimation_obj::vscl;
HXDLIN( 616)				{
HXLINE( 616)					float x1 = quat1->x;
HXDLIN( 616)					float y = quat1->y;
HXDLIN( 616)					float z = quat1->z;
HXDLIN( 616)					float w1 = quat1->w;
HXDLIN( 616)					float x2 = (x1 + x1);
HXDLIN( 616)					float y2 = (y + y);
HXDLIN( 616)					float z2 = (z + z);
HXDLIN( 616)					float xx = (x1 * x2);
HXDLIN( 616)					float xy = (x1 * y2);
HXDLIN( 616)					float xz = (x1 * z2);
HXDLIN( 616)					float yy = (y * y2);
HXDLIN( 616)					float yz = (y * z2);
HXDLIN( 616)					float zz = (z * z2);
HXDLIN( 616)					float wx = (w1 * x2);
HXDLIN( 616)					float wy = (w1 * y2);
HXDLIN( 616)					float wz = (w1 * z2);
HXDLIN( 616)					m->self->_00 = ( (float)((((Float)1.0) - (yy + zz))) );
HXDLIN( 616)					m->self->_10 = (xy - wz);
HXDLIN( 616)					m->self->_20 = (xz + wy);
HXDLIN( 616)					m->self->_01 = (xy + wz);
HXDLIN( 616)					m->self->_11 = ( (float)((((Float)1.0) - (xx + zz))) );
HXDLIN( 616)					m->self->_21 = (yz - wx);
HXDLIN( 616)					m->self->_02 = (xz - wy);
HXDLIN( 616)					m->self->_12 = (yz + wx);
HXDLIN( 616)					m->self->_22 = ( (float)((((Float)1.0) - (xx + yy))) );
HXDLIN( 616)					m->self->_03 = ( (float)(((Float)0.0)) );
HXDLIN( 616)					m->self->_13 = ( (float)(((Float)0.0)) );
HXDLIN( 616)					m->self->_23 = ( (float)(((Float)0.0)) );
HXDLIN( 616)					m->self->_30 = ( (float)(((Float)0.0)) );
HXDLIN( 616)					m->self->_31 = ( (float)(((Float)0.0)) );
HXDLIN( 616)					m->self->_32 = ( (float)(((Float)0.0)) );
HXDLIN( 616)					m->self->_33 = ( (float)(((Float)1.0)) );
            				}
HXDLIN( 616)				{
HXLINE( 616)					float x3 = sc->x;
HXDLIN( 616)					float y1 = sc->y;
HXDLIN( 616)					float z1 = sc->z;
HXDLIN( 616)					{
HXLINE( 616)						 ::iron::math::Mat4 _g1 = m;
HXDLIN( 616)						_g1->self->_00 = (_g1->self->_00 * x3);
            					}
HXDLIN( 616)					{
HXLINE( 616)						 ::iron::math::Mat4 _g2 = m;
HXDLIN( 616)						_g2->self->_01 = (_g2->self->_01 * x3);
            					}
HXDLIN( 616)					{
HXLINE( 616)						 ::iron::math::Mat4 _g3 = m;
HXDLIN( 616)						_g3->self->_02 = (_g3->self->_02 * x3);
            					}
HXDLIN( 616)					{
HXLINE( 616)						 ::iron::math::Mat4 _g4 = m;
HXDLIN( 616)						_g4->self->_03 = (_g4->self->_03 * x3);
            					}
HXDLIN( 616)					{
HXLINE( 616)						 ::iron::math::Mat4 _g5 = m;
HXDLIN( 616)						_g5->self->_10 = (_g5->self->_10 * y1);
            					}
HXDLIN( 616)					{
HXLINE( 616)						 ::iron::math::Mat4 _g6 = m;
HXDLIN( 616)						_g6->self->_11 = (_g6->self->_11 * y1);
            					}
HXDLIN( 616)					{
HXLINE( 616)						 ::iron::math::Mat4 _g7 = m;
HXDLIN( 616)						_g7->self->_12 = (_g7->self->_12 * y1);
            					}
HXDLIN( 616)					{
HXLINE( 616)						 ::iron::math::Mat4 _g8 = m;
HXDLIN( 616)						_g8->self->_13 = (_g8->self->_13 * y1);
            					}
HXDLIN( 616)					{
HXLINE( 616)						 ::iron::math::Mat4 _g9 = m;
HXDLIN( 616)						_g9->self->_20 = (_g9->self->_20 * z1);
            					}
HXDLIN( 616)					{
HXLINE( 616)						 ::iron::math::Mat4 _g10 = m;
HXDLIN( 616)						_g10->self->_21 = (_g10->self->_21 * z1);
            					}
HXDLIN( 616)					{
HXLINE( 616)						 ::iron::math::Mat4 _g11 = m;
HXDLIN( 616)						_g11->self->_22 = (_g11->self->_22 * z1);
            					}
HXDLIN( 616)					{
HXLINE( 616)						 ::iron::math::Mat4 _g12 = m;
HXDLIN( 616)						_g12->self->_23 = (_g12->self->_23 * z1);
            					}
            				}
HXDLIN( 616)				{
HXLINE( 616)					m->self->_30 = loc1->x;
HXDLIN( 616)					m->self->_31 = loc1->y;
HXDLIN( 616)					m->self->_32 = loc1->z;
            				}
            			}
HXLINE( 617)			{
HXLINE( 617)				float a001 = m->self->_00;
HXDLIN( 617)				float a011 = m->self->_01;
HXDLIN( 617)				float a021 = m->self->_02;
HXDLIN( 617)				float a031 = m->self->_03;
HXDLIN( 617)				float a101 = m->self->_10;
HXDLIN( 617)				float a111 = m->self->_11;
HXDLIN( 617)				float a121 = m->self->_12;
HXDLIN( 617)				float a131 = m->self->_13;
HXDLIN( 617)				float a201 = m->self->_20;
HXDLIN( 617)				float a211 = m->self->_21;
HXDLIN( 617)				float a221 = m->self->_22;
HXDLIN( 617)				float a231 = m->self->_23;
HXDLIN( 617)				float a301 = m->self->_30;
HXDLIN( 617)				float a311 = m->self->_31;
HXDLIN( 617)				float a321 = m->self->_32;
HXDLIN( 617)				float a331 = m->self->_33;
HXDLIN( 617)				float b0 = iw->self->_00;
HXDLIN( 617)				float b1 = iw->self->_10;
HXDLIN( 617)				float b2 = iw->self->_20;
HXDLIN( 617)				float b3 = iw->self->_30;
HXDLIN( 617)				m->self->_00 = ((((a001 * b0) + (a011 * b1)) + (a021 * b2)) + (a031 * b3));
HXDLIN( 617)				m->self->_10 = ((((a101 * b0) + (a111 * b1)) + (a121 * b2)) + (a131 * b3));
HXDLIN( 617)				m->self->_20 = ((((a201 * b0) + (a211 * b1)) + (a221 * b2)) + (a231 * b3));
HXDLIN( 617)				m->self->_30 = ((((a301 * b0) + (a311 * b1)) + (a321 * b2)) + (a331 * b3));
HXLINE( 221)				b0 = iw->self->_01;
HXDLIN( 221)				b1 = iw->self->_11;
HXDLIN( 221)				b2 = iw->self->_21;
HXDLIN( 221)				b3 = iw->self->_31;
HXLINE( 617)				m->self->_01 = ((((a001 * b0) + (a011 * b1)) + (a021 * b2)) + (a031 * b3));
HXDLIN( 617)				m->self->_11 = ((((a101 * b0) + (a111 * b1)) + (a121 * b2)) + (a131 * b3));
HXDLIN( 617)				m->self->_21 = ((((a201 * b0) + (a211 * b1)) + (a221 * b2)) + (a231 * b3));
HXDLIN( 617)				m->self->_31 = ((((a301 * b0) + (a311 * b1)) + (a321 * b2)) + (a331 * b3));
HXLINE( 227)				b0 = iw->self->_02;
HXDLIN( 227)				b1 = iw->self->_12;
HXDLIN( 227)				b2 = iw->self->_22;
HXDLIN( 227)				b3 = iw->self->_32;
HXLINE( 617)				m->self->_02 = ((((a001 * b0) + (a011 * b1)) + (a021 * b2)) + (a031 * b3));
HXDLIN( 617)				m->self->_12 = ((((a101 * b0) + (a111 * b1)) + (a121 * b2)) + (a131 * b3));
HXDLIN( 617)				m->self->_22 = ((((a201 * b0) + (a211 * b1)) + (a221 * b2)) + (a231 * b3));
HXDLIN( 617)				m->self->_32 = ((((a301 * b0) + (a311 * b1)) + (a321 * b2)) + (a331 * b3));
HXLINE( 233)				b0 = iw->self->_03;
HXDLIN( 233)				b1 = iw->self->_13;
HXDLIN( 233)				b2 = iw->self->_23;
HXDLIN( 233)				b3 = iw->self->_33;
HXLINE( 617)				m->self->_03 = ((((a001 * b0) + (a011 * b1)) + (a021 * b2)) + (a031 * b3));
HXDLIN( 617)				m->self->_13 = ((((a101 * b0) + (a111 * b1)) + (a121 * b2)) + (a131 * b3));
HXDLIN( 617)				m->self->_23 = ((((a201 * b0) + (a211 * b1)) + (a221 * b2)) + (a231 * b3));
HXDLIN( 617)				m->self->_33 = ((((a301 * b0) + (a311 * b1)) + (a321 * b2)) + (a331 * b3));
            			}
HXLINE( 619)			{
HXLINE( 619)				int _g13 = 0;
HXDLIN( 619)				int _g14 = (bones->length - 1);
HXDLIN( 619)				while((_g13 < _g14)){
HXLINE( 619)					_g13 = (_g13 + 1);
HXDLIN( 619)					int i = (_g13 - 1);
HXLINE( 621)					 ::iron::data::TObj b = bones->__get(i).StaticCast<  ::iron::data::TObj >();
HXLINE( 622)					::Array< ::Dynamic> m2 = this->skeletonMats;
HXDLIN( 622)					 ::iron::math::Mat4 m9 = m2->__get(this->getBoneIndex(b,null())).StaticCast<  ::iron::math::Mat4 >();
HXLINE( 623)					{
HXLINE( 623)						 ::iron::math::Vec4 loc2 = ::iron::object::BoneAnimation_obj::vpos;
HXDLIN( 623)						 ::iron::math::Quat quat2 = ::iron::object::BoneAnimation_obj::q1;
HXDLIN( 623)						 ::iron::math::Vec4 scale1 = ::iron::object::BoneAnimation_obj::vscl;
HXDLIN( 623)						loc2->x = m9->self->_30;
HXDLIN( 623)						loc2->y = m9->self->_31;
HXDLIN( 623)						loc2->z = m9->self->_32;
HXDLIN( 623)						 ::iron::math::Vec4 _this39 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 623)						_this39->x = m9->self->_00;
HXDLIN( 623)						_this39->y = m9->self->_01;
HXDLIN( 623)						_this39->z = m9->self->_02;
HXDLIN( 623)						_this39->w = ( (float)(((Float)1.0)) );
HXDLIN( 623)						 ::iron::math::Vec4 _this40 = _this39;
HXDLIN( 623)						float v19 = (_this40->x * _this40->x);
HXDLIN( 623)						float v20 = (v19 + (_this40->y * _this40->y));
HXDLIN( 623)						scale1->x = ( (float)(::Math_obj::sqrt(( (Float)((v20 + (_this40->z * _this40->z))) ))) );
HXDLIN( 623)						 ::iron::math::Vec4 _this41 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 623)						_this41->x = m9->self->_10;
HXDLIN( 623)						_this41->y = m9->self->_11;
HXDLIN( 623)						_this41->z = m9->self->_12;
HXDLIN( 623)						_this41->w = ( (float)(((Float)1.0)) );
HXDLIN( 623)						 ::iron::math::Vec4 _this42 = _this41;
HXDLIN( 623)						float v22 = (_this42->x * _this42->x);
HXDLIN( 623)						float v23 = (v22 + (_this42->y * _this42->y));
HXDLIN( 623)						scale1->y = ( (float)(::Math_obj::sqrt(( (Float)((v23 + (_this42->z * _this42->z))) ))) );
HXDLIN( 623)						 ::iron::math::Vec4 _this43 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 623)						_this43->x = m9->self->_20;
HXDLIN( 623)						_this43->y = m9->self->_21;
HXDLIN( 623)						_this43->z = m9->self->_22;
HXDLIN( 623)						_this43->w = ( (float)(((Float)1.0)) );
HXDLIN( 623)						 ::iron::math::Vec4 _this44 = _this43;
HXDLIN( 623)						float v24 = (_this44->x * _this44->x);
HXDLIN( 623)						float v25 = (v24 + (_this44->y * _this44->y));
HXDLIN( 623)						scale1->z = ( (float)(::Math_obj::sqrt(( (Float)((v25 + (_this44->z * _this44->z))) ))) );
HXDLIN( 623)						 ::kha::math::FastMatrix4 _this45 = m9->self;
HXDLIN( 623)						float m34 = _this45->_12;
HXDLIN( 623)						float m44 = _this45->_22;
HXDLIN( 623)						float m54 = _this45->_32;
HXDLIN( 623)						float m64 = _this45->_13;
HXDLIN( 623)						float m74 = _this45->_23;
HXDLIN( 623)						float m84 = _this45->_33;
HXDLIN( 623)						float _this46 = _this45->_11;
HXDLIN( 623)						float c003 = (_this46 * ((m44 * m84) - (m54 * m74)));
HXDLIN( 623)						float _this47 = _this45->_21;
HXDLIN( 623)						float c004 = (c003 - (_this47 * ((m34 * m84) - (m54 * m64))));
HXDLIN( 623)						float _this48 = _this45->_31;
HXDLIN( 623)						float c005 = (c004 + (_this48 * ((m34 * m74) - (m44 * m64))));
HXDLIN( 623)						float m35 = _this45->_12;
HXDLIN( 623)						float m45 = _this45->_22;
HXDLIN( 623)						float m55 = _this45->_32;
HXDLIN( 623)						float m65 = _this45->_13;
HXDLIN( 623)						float m75 = _this45->_23;
HXDLIN( 623)						float m85 = _this45->_33;
HXDLIN( 623)						float _this49 = _this45->_10;
HXDLIN( 623)						float c013 = (_this49 * ((m45 * m85) - (m55 * m75)));
HXDLIN( 623)						float _this50 = _this45->_20;
HXDLIN( 623)						float c014 = (c013 - (_this50 * ((m35 * m85) - (m55 * m65))));
HXDLIN( 623)						float _this51 = _this45->_30;
HXDLIN( 623)						float c015 = (c014 + (_this51 * ((m35 * m75) - (m45 * m65))));
HXDLIN( 623)						float m36 = _this45->_11;
HXDLIN( 623)						float m46 = _this45->_21;
HXDLIN( 623)						float m56 = _this45->_31;
HXDLIN( 623)						float m66 = _this45->_13;
HXDLIN( 623)						float m76 = _this45->_23;
HXDLIN( 623)						float m86 = _this45->_33;
HXDLIN( 623)						float _this52 = _this45->_10;
HXDLIN( 623)						float c023 = (_this52 * ((m46 * m86) - (m56 * m76)));
HXDLIN( 623)						float _this53 = _this45->_20;
HXDLIN( 623)						float c024 = (c023 - (_this53 * ((m36 * m86) - (m56 * m66))));
HXDLIN( 623)						float _this54 = _this45->_30;
HXDLIN( 623)						float c025 = (c024 + (_this54 * ((m36 * m76) - (m46 * m66))));
HXDLIN( 623)						float m37 = _this45->_11;
HXDLIN( 623)						float m47 = _this45->_21;
HXDLIN( 623)						float m57 = _this45->_31;
HXDLIN( 623)						float m67 = _this45->_12;
HXDLIN( 623)						float m77 = _this45->_22;
HXDLIN( 623)						float m87 = _this45->_32;
HXDLIN( 623)						float _this55 = _this45->_10;
HXDLIN( 623)						float c033 = (_this55 * ((m47 * m87) - (m57 * m77)));
HXDLIN( 623)						float _this56 = _this45->_20;
HXDLIN( 623)						float c034 = (c033 - (_this56 * ((m37 * m87) - (m57 * m67))));
HXDLIN( 623)						float _this57 = _this45->_30;
HXDLIN( 623)						float c035 = (c034 + (_this57 * ((m37 * m77) - (m47 * m67))));
HXDLIN( 623)						float _hx_tmp4 = (_this45->_00 * c005);
HXDLIN( 623)						float _hx_tmp5 = (_hx_tmp4 - (_this45->_01 * c015));
HXDLIN( 623)						float _hx_tmp6 = (_hx_tmp5 + (_this45->_02 * c025));
HXDLIN( 623)						if (((_hx_tmp6 - (_this45->_03 * c035)) < ((Float)0.0))) {
HXLINE( 623)							scale1->x = -(scale1->x);
            						}
HXDLIN( 623)						Float invs1 = (((Float)1.0) / ( (Float)(scale1->x) ));
HXDLIN( 623)						::iron::math::Mat4_obj::helpMat->self->_00 = ( (float)((m9->self->_00 * invs1)) );
HXDLIN( 623)						::iron::math::Mat4_obj::helpMat->self->_01 = ( (float)((m9->self->_01 * invs1)) );
HXDLIN( 623)						::iron::math::Mat4_obj::helpMat->self->_02 = ( (float)((m9->self->_02 * invs1)) );
HXLINE(  35)						invs1 = (((Float)1.0) / ( (Float)(scale1->y) ));
HXLINE( 623)						::iron::math::Mat4_obj::helpMat->self->_10 = ( (float)((m9->self->_10 * invs1)) );
HXDLIN( 623)						::iron::math::Mat4_obj::helpMat->self->_11 = ( (float)((m9->self->_11 * invs1)) );
HXDLIN( 623)						::iron::math::Mat4_obj::helpMat->self->_12 = ( (float)((m9->self->_12 * invs1)) );
HXLINE(  39)						invs1 = (((Float)1.0) / ( (Float)(scale1->z) ));
HXLINE( 623)						::iron::math::Mat4_obj::helpMat->self->_20 = ( (float)((m9->self->_20 * invs1)) );
HXDLIN( 623)						::iron::math::Mat4_obj::helpMat->self->_21 = ( (float)((m9->self->_21 * invs1)) );
HXDLIN( 623)						::iron::math::Mat4_obj::helpMat->self->_22 = ( (float)((m9->self->_22 * invs1)) );
HXDLIN( 623)						{
HXLINE( 623)							 ::iron::math::Mat4 m10 = ::iron::math::Mat4_obj::helpMat;
HXDLIN( 623)							float m111 = m10->self->_00;
HXDLIN( 623)							float m121 = m10->self->_10;
HXDLIN( 623)							float m131 = m10->self->_20;
HXDLIN( 623)							float m211 = m10->self->_01;
HXDLIN( 623)							float m221 = m10->self->_11;
HXDLIN( 623)							float m231 = m10->self->_21;
HXDLIN( 623)							float m312 = m10->self->_02;
HXDLIN( 623)							float m322 = m10->self->_12;
HXDLIN( 623)							float m332 = m10->self->_22;
HXDLIN( 623)							float tr1 = ((m111 + m221) + m332);
HXDLIN( 623)							Float s2 = ((Float)0.0);
HXDLIN( 623)							if ((tr1 > 0)) {
HXLINE(  75)								s2 = (((Float)0.5) / ::Math_obj::sqrt((tr1 + ((Float)1.0))));
HXLINE( 623)								quat2->w = ( (float)((((Float)0.25) / s2)) );
HXDLIN( 623)								quat2->x = ( (float)(((m322 - m231) * s2)) );
HXDLIN( 623)								quat2->y = ( (float)(((m131 - m312) * s2)) );
HXDLIN( 623)								quat2->z = ( (float)(((m211 - m121) * s2)) );
            							}
            							else {
HXLINE( 623)								bool _hx_tmp7;
HXDLIN( 623)								if ((m111 > m221)) {
HXLINE( 623)									_hx_tmp7 = (m111 > m332);
            								}
            								else {
HXLINE( 623)									_hx_tmp7 = false;
            								}
HXDLIN( 623)								if (_hx_tmp7) {
HXLINE(  82)									s2 = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m111) - m221) - m332)));
HXLINE( 623)									quat2->w = ( (float)((( (Float)((m322 - m231)) ) / s2)) );
HXDLIN( 623)									quat2->x = ( (float)((((Float)0.25) * s2)) );
HXDLIN( 623)									quat2->y = ( (float)((( (Float)((m121 + m211)) ) / s2)) );
HXDLIN( 623)									quat2->z = ( (float)((( (Float)((m131 + m312)) ) / s2)) );
            								}
            								else {
HXLINE( 623)									if ((m221 > m332)) {
HXLINE(  89)										s2 = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m221) - m111) - m332)));
HXLINE( 623)										quat2->w = ( (float)((( (Float)((m131 - m312)) ) / s2)) );
HXDLIN( 623)										quat2->x = ( (float)((( (Float)((m121 + m211)) ) / s2)) );
HXDLIN( 623)										quat2->y = ( (float)((((Float)0.25) * s2)) );
HXDLIN( 623)										quat2->z = ( (float)((( (Float)((m231 + m322)) ) / s2)) );
            									}
            									else {
HXLINE(  96)										s2 = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m332) - m111) - m221)));
HXLINE( 623)										quat2->w = ( (float)((( (Float)((m211 - m121)) ) / s2)) );
HXDLIN( 623)										quat2->x = ( (float)((( (Float)((m131 + m312)) ) / s2)) );
HXDLIN( 623)										quat2->y = ( (float)((( (Float)((m231 + m322)) ) / s2)) );
HXDLIN( 623)										quat2->z = ( (float)((((Float)0.25) * s2)) );
            									}
            								}
            							}
            						}
            					}
HXLINE( 624)					{
HXLINE( 624)						 ::iron::math::Vec4 loc3 = ::iron::object::BoneAnimation_obj::vpos;
HXDLIN( 624)						float quat_x = ( (float)(((Float)0.0)) );
HXDLIN( 624)						float quat_y = ( (float)(((Float)0.0)) );
HXDLIN( 624)						float quat_z = ( (float)(((Float)0.0)) );
HXDLIN( 624)						float quat_w = ( (float)(((Float)1.0)) );
HXDLIN( 624)						 ::iron::math::Vec4 sc1 = ::iron::object::BoneAnimation_obj::vscl;
HXDLIN( 624)						{
HXLINE( 624)							float x4 = quat_x;
HXDLIN( 624)							float y3 = quat_y;
HXDLIN( 624)							float z3 = quat_z;
HXDLIN( 624)							float w2 = quat_w;
HXDLIN( 624)							float x21 = (x4 + x4);
HXDLIN( 624)							float y21 = (y3 + y3);
HXDLIN( 624)							float z21 = (z3 + z3);
HXDLIN( 624)							float xx1 = (x4 * x21);
HXDLIN( 624)							float xy1 = (x4 * y21);
HXDLIN( 624)							float xz1 = (x4 * z21);
HXDLIN( 624)							float yy1 = (y3 * y21);
HXDLIN( 624)							float yz1 = (y3 * z21);
HXDLIN( 624)							float zz1 = (z3 * z21);
HXDLIN( 624)							float wx1 = (w2 * x21);
HXDLIN( 624)							float wy1 = (w2 * y21);
HXDLIN( 624)							float wz1 = (w2 * z21);
HXDLIN( 624)							m9->self->_00 = ( (float)((((Float)1.0) - (yy1 + zz1))) );
HXDLIN( 624)							m9->self->_10 = (xy1 - wz1);
HXDLIN( 624)							m9->self->_20 = (xz1 + wy1);
HXDLIN( 624)							m9->self->_01 = (xy1 + wz1);
HXDLIN( 624)							m9->self->_11 = ( (float)((((Float)1.0) - (xx1 + zz1))) );
HXDLIN( 624)							m9->self->_21 = (yz1 - wx1);
HXDLIN( 624)							m9->self->_02 = (xz1 - wy1);
HXDLIN( 624)							m9->self->_12 = (yz1 + wx1);
HXDLIN( 624)							m9->self->_22 = ( (float)((((Float)1.0) - (xx1 + yy1))) );
HXDLIN( 624)							m9->self->_03 = ( (float)(((Float)0.0)) );
HXDLIN( 624)							m9->self->_13 = ( (float)(((Float)0.0)) );
HXDLIN( 624)							m9->self->_23 = ( (float)(((Float)0.0)) );
HXDLIN( 624)							m9->self->_30 = ( (float)(((Float)0.0)) );
HXDLIN( 624)							m9->self->_31 = ( (float)(((Float)0.0)) );
HXDLIN( 624)							m9->self->_32 = ( (float)(((Float)0.0)) );
HXDLIN( 624)							m9->self->_33 = ( (float)(((Float)1.0)) );
            						}
HXDLIN( 624)						{
HXLINE( 624)							float x5 = sc1->x;
HXDLIN( 624)							float y4 = sc1->y;
HXDLIN( 624)							float z4 = sc1->z;
HXDLIN( 624)							{
HXLINE( 624)								 ::iron::math::Mat4 _g15 = m9;
HXDLIN( 624)								_g15->self->_00 = (_g15->self->_00 * x5);
            							}
HXDLIN( 624)							{
HXLINE( 624)								 ::iron::math::Mat4 _g16 = m9;
HXDLIN( 624)								_g16->self->_01 = (_g16->self->_01 * x5);
            							}
HXDLIN( 624)							{
HXLINE( 624)								 ::iron::math::Mat4 _g17 = m9;
HXDLIN( 624)								_g17->self->_02 = (_g17->self->_02 * x5);
            							}
HXDLIN( 624)							{
HXLINE( 624)								 ::iron::math::Mat4 _g18 = m9;
HXDLIN( 624)								_g18->self->_03 = (_g18->self->_03 * x5);
            							}
HXDLIN( 624)							{
HXLINE( 624)								 ::iron::math::Mat4 _g19 = m9;
HXDLIN( 624)								_g19->self->_10 = (_g19->self->_10 * y4);
            							}
HXDLIN( 624)							{
HXLINE( 624)								 ::iron::math::Mat4 _g20 = m9;
HXDLIN( 624)								_g20->self->_11 = (_g20->self->_11 * y4);
            							}
HXDLIN( 624)							{
HXLINE( 624)								 ::iron::math::Mat4 _g21 = m9;
HXDLIN( 624)								_g21->self->_12 = (_g21->self->_12 * y4);
            							}
HXDLIN( 624)							{
HXLINE( 624)								 ::iron::math::Mat4 _g22 = m9;
HXDLIN( 624)								_g22->self->_13 = (_g22->self->_13 * y4);
            							}
HXDLIN( 624)							{
HXLINE( 624)								 ::iron::math::Mat4 _g23 = m9;
HXDLIN( 624)								_g23->self->_20 = (_g23->self->_20 * z4);
            							}
HXDLIN( 624)							{
HXLINE( 624)								 ::iron::math::Mat4 _g24 = m9;
HXDLIN( 624)								_g24->self->_21 = (_g24->self->_21 * z4);
            							}
HXDLIN( 624)							{
HXLINE( 624)								 ::iron::math::Mat4 _g25 = m9;
HXDLIN( 624)								_g25->self->_22 = (_g25->self->_22 * z4);
            							}
HXDLIN( 624)							{
HXLINE( 624)								 ::iron::math::Mat4 _g26 = m9;
HXDLIN( 624)								_g26->self->_23 = (_g26->self->_23 * z4);
            							}
            						}
HXDLIN( 624)						{
HXLINE( 624)							m9->self->_30 = loc3->x;
HXDLIN( 624)							m9->self->_31 = loc3->y;
HXDLIN( 624)							m9->self->_32 = loc3->z;
            						}
            					}
            				}
            			}
HXLINE( 628)			{
HXLINE( 628)				int _g27 = 0;
HXDLIN( 628)				while((_g27 < bones->length)){
HXLINE( 628)					 ::iron::data::TObj b4 = bones->__get(_g27).StaticCast<  ::iron::data::TObj >();
HXDLIN( 628)					_g27 = (_g27 + 1);
HXDLIN( 628)					::Array< bool > _hx_tmp8 = this->applyParent;
HXDLIN( 628)					_hx_tmp8[this->getBoneIndex(b4,null())] = true;
            				}
            			}
HXLINE( 630)			return;
            		}
HXLINE( 634)		float vec_x = ( (float)(((Float)0.0)) );
HXDLIN( 634)		float vec_y = ( (float)(((Float)0.0)) );
HXDLIN( 634)		float vec_z = ( (float)(((Float)0.0)) );
HXDLIN( 634)		float vec_w = ( (float)(((Float)1.0)) );
HXLINE( 635)		::Array< ::Dynamic> locs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 636)		{
HXLINE( 636)			int _g28 = 0;
HXDLIN( 636)			while((_g28 < bones->length)){
HXLINE( 636)				 ::iron::data::TObj b5 = bones->__get(_g28).StaticCast<  ::iron::data::TObj >();
HXDLIN( 636)				_g28 = (_g28 + 1);
HXDLIN( 636)				 ::iron::math::Mat4 _this58 = this->getWorldMat(b5);
HXDLIN( 636)				locs->push( ::iron::math::Vec4_obj::__alloc( HX_CTX ,_this58->self->_30,_this58->self->_31,_this58->self->_32,_this58->self->_33));
            			}
            		}
HXLINE( 638)		{
HXLINE( 638)			int _g110 = 0;
HXDLIN( 638)			int _g29 = maxIterations;
HXDLIN( 638)			while((_g110 < _g29)){
HXLINE( 638)				_g110 = (_g110 + 1);
HXDLIN( 638)				int i1 = (_g110 - 1);
HXLINE( 640)				vec_x = goal->x;
HXDLIN( 640)				vec_y = goal->y;
HXDLIN( 640)				vec_z = goal->z;
HXLINE( 641)				 ::iron::math::Vec4 v26 = locs->__get(0).StaticCast<  ::iron::math::Vec4 >();
HXDLIN( 641)				vec_x = (vec_x - v26->x);
HXDLIN( 641)				vec_y = (vec_y - v26->y);
HXDLIN( 641)				vec_z = (vec_z - v26->z);
HXLINE( 642)				float n2 = ( (float)(::Math_obj::sqrt(( (Float)((((vec_x * vec_x) + (vec_y * vec_y)) + (vec_z * vec_z))) ))) );
HXDLIN( 642)				if ((n2 > ((Float)0.0))) {
HXLINE( 642)					Float invN2 = (((Float)1.0) / ( (Float)(n2) ));
HXDLIN( 642)					vec_x = (vec_x * invN2);
HXDLIN( 642)					vec_y = (vec_y * invN2);
HXDLIN( 642)					vec_z = (vec_z * invN2);
            				}
HXLINE( 643)				float f = lengths->__get(0);
HXDLIN( 643)				vec_x = (vec_x * f);
HXDLIN( 643)				vec_y = (vec_y * f);
HXDLIN( 643)				vec_z = (vec_z * f);
HXLINE( 644)				{
HXLINE( 644)					 ::iron::math::Vec4 _this59 = locs->__get(0).StaticCast<  ::iron::math::Vec4 >();
HXDLIN( 644)					_this59->x = goal->x;
HXDLIN( 644)					_this59->y = goal->y;
HXDLIN( 644)					_this59->z = goal->z;
            				}
HXLINE( 645)				{
HXLINE( 645)					 ::iron::math::Vec4 _this60 = locs->__get(0).StaticCast<  ::iron::math::Vec4 >();
HXDLIN( 645)					 ::iron::math::Vec4 _this61 = _this60;
HXDLIN( 645)					_this61->x = (_this61->x - vec_x);
HXDLIN( 645)					 ::iron::math::Vec4 _this62 = _this60;
HXDLIN( 645)					_this62->y = (_this62->y - vec_y);
HXDLIN( 645)					 ::iron::math::Vec4 _this63 = _this60;
HXDLIN( 645)					_this63->z = (_this63->z - vec_z);
            				}
HXLINE( 646)				{
HXLINE( 646)					int _g31 = 1;
HXDLIN( 646)					int _g210 = locs->length;
HXDLIN( 646)					while((_g31 < _g210)){
HXLINE( 646)						_g31 = (_g31 + 1);
HXDLIN( 646)						int j = (_g31 - 1);
HXLINE( 647)						 ::iron::math::Vec4 v27 = locs->__get(j).StaticCast<  ::iron::math::Vec4 >();
HXDLIN( 647)						vec_x = v27->x;
HXDLIN( 647)						vec_y = v27->y;
HXDLIN( 647)						vec_z = v27->z;
HXLINE( 648)						 ::iron::math::Vec4 v28 = locs->__get((j - 1)).StaticCast<  ::iron::math::Vec4 >();
HXDLIN( 648)						vec_x = (vec_x - v28->x);
HXDLIN( 648)						vec_y = (vec_y - v28->y);
HXDLIN( 648)						vec_z = (vec_z - v28->z);
HXLINE( 649)						float n3 = ( (float)(::Math_obj::sqrt(( (Float)((((vec_x * vec_x) + (vec_y * vec_y)) + (vec_z * vec_z))) ))) );
HXDLIN( 649)						if ((n3 > ((Float)0.0))) {
HXLINE( 649)							Float invN3 = (((Float)1.0) / ( (Float)(n3) ));
HXDLIN( 649)							vec_x = (vec_x * invN3);
HXDLIN( 649)							vec_y = (vec_y * invN3);
HXDLIN( 649)							vec_z = (vec_z * invN3);
            						}
HXLINE( 650)						float f1 = lengths->__get(j);
HXDLIN( 650)						vec_x = (vec_x * f1);
HXDLIN( 650)						vec_y = (vec_y * f1);
HXDLIN( 650)						vec_z = (vec_z * f1);
HXLINE( 651)						{
HXLINE( 651)							 ::iron::math::Vec4 _this64 = locs->__get(j).StaticCast<  ::iron::math::Vec4 >();
HXDLIN( 651)							 ::iron::math::Vec4 v29 = locs->__get((j - 1)).StaticCast<  ::iron::math::Vec4 >();
HXDLIN( 651)							_this64->x = v29->x;
HXDLIN( 651)							_this64->y = v29->y;
HXDLIN( 651)							_this64->z = v29->z;
            						}
HXLINE( 652)						{
HXLINE( 652)							 ::iron::math::Vec4 _this65 = locs->__get(j).StaticCast<  ::iron::math::Vec4 >();
HXDLIN( 652)							 ::iron::math::Vec4 _this66 = _this65;
HXDLIN( 652)							_this66->x = (_this66->x + vec_x);
HXDLIN( 652)							 ::iron::math::Vec4 _this67 = _this65;
HXDLIN( 652)							_this67->y = (_this67->y + vec_y);
HXDLIN( 652)							 ::iron::math::Vec4 _this68 = _this65;
HXDLIN( 652)							_this68->z = (_this68->z + vec_z);
            						}
            					}
            				}
HXLINE( 655)				{
HXLINE( 655)					 ::iron::math::Vec4 _this69 = locs->__get((locs->length - 1)).StaticCast<  ::iron::math::Vec4 >();
HXDLIN( 655)					_this69->x = startLoc_x;
HXDLIN( 655)					_this69->y = startLoc_y;
HXDLIN( 655)					_this69->z = startLoc_z;
            				}
HXLINE( 656)				int l3 = locs->length;
HXLINE( 657)				{
HXLINE( 657)					int _g32 = 1;
HXDLIN( 657)					int _g211 = l3;
HXDLIN( 657)					while((_g32 < _g211)){
HXLINE( 657)						_g32 = (_g32 + 1);
HXDLIN( 657)						int j1 = (_g32 - 1);
HXLINE( 658)						 ::iron::math::Vec4 v30 = locs->__get(((l3 - j1) - 1)).StaticCast<  ::iron::math::Vec4 >();
HXDLIN( 658)						vec_x = v30->x;
HXDLIN( 658)						vec_y = v30->y;
HXDLIN( 658)						vec_z = v30->z;
HXLINE( 659)						 ::iron::math::Vec4 v31 = locs->__get((l3 - j1)).StaticCast<  ::iron::math::Vec4 >();
HXDLIN( 659)						vec_x = (vec_x - v31->x);
HXDLIN( 659)						vec_y = (vec_y - v31->y);
HXDLIN( 659)						vec_z = (vec_z - v31->z);
HXLINE( 660)						float n4 = ( (float)(::Math_obj::sqrt(( (Float)((((vec_x * vec_x) + (vec_y * vec_y)) + (vec_z * vec_z))) ))) );
HXDLIN( 660)						if ((n4 > ((Float)0.0))) {
HXLINE( 660)							Float invN4 = (((Float)1.0) / ( (Float)(n4) ));
HXDLIN( 660)							vec_x = (vec_x * invN4);
HXDLIN( 660)							vec_y = (vec_y * invN4);
HXDLIN( 660)							vec_z = (vec_z * invN4);
            						}
HXLINE( 661)						float f2 = lengths->__get((l3 - j1));
HXDLIN( 661)						vec_x = (vec_x * f2);
HXDLIN( 661)						vec_y = (vec_y * f2);
HXDLIN( 661)						vec_z = (vec_z * f2);
HXLINE( 662)						{
HXLINE( 662)							 ::iron::math::Vec4 _this70 = locs->__get(((l3 - j1) - 1)).StaticCast<  ::iron::math::Vec4 >();
HXDLIN( 662)							 ::iron::math::Vec4 v32 = locs->__get((l3 - j1)).StaticCast<  ::iron::math::Vec4 >();
HXDLIN( 662)							_this70->x = v32->x;
HXDLIN( 662)							_this70->y = v32->y;
HXDLIN( 662)							_this70->z = v32->z;
            						}
HXLINE( 663)						{
HXLINE( 663)							 ::iron::math::Vec4 _this71 = locs->__get(((l3 - j1) - 1)).StaticCast<  ::iron::math::Vec4 >();
HXDLIN( 663)							 ::iron::math::Vec4 _this72 = _this71;
HXDLIN( 663)							_this72->x = (_this72->x + vec_x);
HXDLIN( 663)							 ::iron::math::Vec4 _this73 = _this71;
HXDLIN( 663)							_this73->y = (_this73->y + vec_y);
HXDLIN( 663)							 ::iron::math::Vec4 _this74 = _this71;
HXDLIN( 663)							_this74->z = (_this74->z + vec_z);
            						}
            					}
            				}
HXLINE( 665)				 ::iron::math::Vec4 v110 = locs->__get(0).StaticCast<  ::iron::math::Vec4 >();
HXDLIN( 665)				float vx1 = (v110->x - goal->x);
HXDLIN( 665)				float vy1 = (v110->y - goal->y);
HXDLIN( 665)				float vz1 = (v110->z - goal->z);
HXDLIN( 665)				if ((( (float)(::Math_obj::sqrt(( (Float)((((vx1 * vx1) + (vy1 * vy1)) + (vz1 * vz1))) ))) ) <= precission)) {
HXLINE( 665)					goto _hx_goto_58;
            				}
            			}
            			_hx_goto_58:;
            		}
HXLINE( 668)		{
HXLINE( 668)			int _g30 = 0;
HXDLIN( 668)			while((_g30 < bones->length)){
HXLINE( 668)				 ::iron::data::TObj b6 = bones->__get(_g30).StaticCast<  ::iron::data::TObj >();
HXDLIN( 668)				_g30 = (_g30 + 1);
HXDLIN( 668)				::Array< bool > _hx_tmp9 = this->applyParent;
HXDLIN( 668)				_hx_tmp9[this->getBoneIndex(b6,null())] = false;
            			}
            		}
HXLINE( 670)		{
HXLINE( 670)			int _g111 = 0;
HXDLIN( 670)			int _g33 = bones->length;
HXDLIN( 670)			while((_g111 < _g33)){
HXLINE( 670)				_g111 = (_g111 + 1);
HXDLIN( 670)				int i2 = (_g111 - 1);
HXLINE( 671)				 ::iron::math::Mat4 m14 = this->getBoneMat(bones->__get(i2).StaticCast<  ::iron::data::TObj >());
HXLINE( 672)				{
HXLINE( 672)					 ::iron::math::Vec4 loc4 = ::iron::object::BoneAnimation_obj::vpos;
HXDLIN( 672)					 ::iron::math::Quat quat3 = ::iron::object::BoneAnimation_obj::q1;
HXDLIN( 672)					 ::iron::math::Vec4 scale2 = ::iron::object::BoneAnimation_obj::vscl;
HXDLIN( 672)					loc4->x = m14->self->_30;
HXDLIN( 672)					loc4->y = m14->self->_31;
HXDLIN( 672)					loc4->z = m14->self->_32;
HXDLIN( 672)					 ::iron::math::Vec4 _this75 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 672)					_this75->x = m14->self->_00;
HXDLIN( 672)					_this75->y = m14->self->_01;
HXDLIN( 672)					_this75->z = m14->self->_02;
HXDLIN( 672)					_this75->w = ( (float)(((Float)1.0)) );
HXDLIN( 672)					 ::iron::math::Vec4 _this76 = _this75;
HXDLIN( 672)					float v33 = (_this76->x * _this76->x);
HXDLIN( 672)					float v34 = (v33 + (_this76->y * _this76->y));
HXDLIN( 672)					scale2->x = ( (float)(::Math_obj::sqrt(( (Float)((v34 + (_this76->z * _this76->z))) ))) );
HXDLIN( 672)					 ::iron::math::Vec4 _this77 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 672)					_this77->x = m14->self->_10;
HXDLIN( 672)					_this77->y = m14->self->_11;
HXDLIN( 672)					_this77->z = m14->self->_12;
HXDLIN( 672)					_this77->w = ( (float)(((Float)1.0)) );
HXDLIN( 672)					 ::iron::math::Vec4 _this78 = _this77;
HXDLIN( 672)					float v35 = (_this78->x * _this78->x);
HXDLIN( 672)					float v36 = (v35 + (_this78->y * _this78->y));
HXDLIN( 672)					scale2->y = ( (float)(::Math_obj::sqrt(( (Float)((v36 + (_this78->z * _this78->z))) ))) );
HXDLIN( 672)					 ::iron::math::Vec4 _this79 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 672)					_this79->x = m14->self->_20;
HXDLIN( 672)					_this79->y = m14->self->_21;
HXDLIN( 672)					_this79->z = m14->self->_22;
HXDLIN( 672)					_this79->w = ( (float)(((Float)1.0)) );
HXDLIN( 672)					 ::iron::math::Vec4 _this80 = _this79;
HXDLIN( 672)					float v37 = (_this80->x * _this80->x);
HXDLIN( 672)					float v38 = (v37 + (_this80->y * _this80->y));
HXDLIN( 672)					scale2->z = ( (float)(::Math_obj::sqrt(( (Float)((v38 + (_this80->z * _this80->z))) ))) );
HXDLIN( 672)					 ::kha::math::FastMatrix4 _this81 = m14->self;
HXDLIN( 672)					float m38 = _this81->_12;
HXDLIN( 672)					float m48 = _this81->_22;
HXDLIN( 672)					float m58 = _this81->_32;
HXDLIN( 672)					float m68 = _this81->_13;
HXDLIN( 672)					float m78 = _this81->_23;
HXDLIN( 672)					float m88 = _this81->_33;
HXDLIN( 672)					float _this82 = _this81->_11;
HXDLIN( 672)					float c006 = (_this82 * ((m48 * m88) - (m58 * m78)));
HXDLIN( 672)					float _this83 = _this81->_21;
HXDLIN( 672)					float c007 = (c006 - (_this83 * ((m38 * m88) - (m58 * m68))));
HXDLIN( 672)					float _this84 = _this81->_31;
HXDLIN( 672)					float c008 = (c007 + (_this84 * ((m38 * m78) - (m48 * m68))));
HXDLIN( 672)					float m39 = _this81->_12;
HXDLIN( 672)					float m49 = _this81->_22;
HXDLIN( 672)					float m59 = _this81->_32;
HXDLIN( 672)					float m69 = _this81->_13;
HXDLIN( 672)					float m79 = _this81->_23;
HXDLIN( 672)					float m89 = _this81->_33;
HXDLIN( 672)					float _this85 = _this81->_10;
HXDLIN( 672)					float c016 = (_this85 * ((m49 * m89) - (m59 * m79)));
HXDLIN( 672)					float _this86 = _this81->_20;
HXDLIN( 672)					float c017 = (c016 - (_this86 * ((m39 * m89) - (m59 * m69))));
HXDLIN( 672)					float _this87 = _this81->_30;
HXDLIN( 672)					float c018 = (c017 + (_this87 * ((m39 * m79) - (m49 * m69))));
HXDLIN( 672)					float m310 = _this81->_11;
HXDLIN( 672)					float m410 = _this81->_21;
HXDLIN( 672)					float m510 = _this81->_31;
HXDLIN( 672)					float m610 = _this81->_13;
HXDLIN( 672)					float m710 = _this81->_23;
HXDLIN( 672)					float m810 = _this81->_33;
HXDLIN( 672)					float _this88 = _this81->_10;
HXDLIN( 672)					float c026 = (_this88 * ((m410 * m810) - (m510 * m710)));
HXDLIN( 672)					float _this89 = _this81->_20;
HXDLIN( 672)					float c027 = (c026 - (_this89 * ((m310 * m810) - (m510 * m610))));
HXDLIN( 672)					float _this90 = _this81->_30;
HXDLIN( 672)					float c028 = (c027 + (_this90 * ((m310 * m710) - (m410 * m610))));
HXDLIN( 672)					float m313 = _this81->_11;
HXDLIN( 672)					float m411 = _this81->_21;
HXDLIN( 672)					float m511 = _this81->_31;
HXDLIN( 672)					float m611 = _this81->_12;
HXDLIN( 672)					float m711 = _this81->_22;
HXDLIN( 672)					float m811 = _this81->_32;
HXDLIN( 672)					float _this91 = _this81->_10;
HXDLIN( 672)					float c036 = (_this91 * ((m411 * m811) - (m511 * m711)));
HXDLIN( 672)					float _this92 = _this81->_20;
HXDLIN( 672)					float c037 = (c036 - (_this92 * ((m313 * m811) - (m511 * m611))));
HXDLIN( 672)					float _this93 = _this81->_30;
HXDLIN( 672)					float c038 = (c037 + (_this93 * ((m313 * m711) - (m411 * m611))));
HXDLIN( 672)					float _hx_tmp10 = (_this81->_00 * c008);
HXDLIN( 672)					float _hx_tmp11 = (_hx_tmp10 - (_this81->_01 * c018));
HXDLIN( 672)					float _hx_tmp12 = (_hx_tmp11 + (_this81->_02 * c028));
HXDLIN( 672)					if (((_hx_tmp12 - (_this81->_03 * c038)) < ((Float)0.0))) {
HXLINE( 672)						scale2->x = -(scale2->x);
            					}
HXDLIN( 672)					Float invs2 = (((Float)1.0) / ( (Float)(scale2->x) ));
HXDLIN( 672)					::iron::math::Mat4_obj::helpMat->self->_00 = ( (float)((m14->self->_00 * invs2)) );
HXDLIN( 672)					::iron::math::Mat4_obj::helpMat->self->_01 = ( (float)((m14->self->_01 * invs2)) );
HXDLIN( 672)					::iron::math::Mat4_obj::helpMat->self->_02 = ( (float)((m14->self->_02 * invs2)) );
HXLINE(  35)					invs2 = (((Float)1.0) / ( (Float)(scale2->y) ));
HXLINE( 672)					::iron::math::Mat4_obj::helpMat->self->_10 = ( (float)((m14->self->_10 * invs2)) );
HXDLIN( 672)					::iron::math::Mat4_obj::helpMat->self->_11 = ( (float)((m14->self->_11 * invs2)) );
HXDLIN( 672)					::iron::math::Mat4_obj::helpMat->self->_12 = ( (float)((m14->self->_12 * invs2)) );
HXLINE(  39)					invs2 = (((Float)1.0) / ( (Float)(scale2->z) ));
HXLINE( 672)					::iron::math::Mat4_obj::helpMat->self->_20 = ( (float)((m14->self->_20 * invs2)) );
HXDLIN( 672)					::iron::math::Mat4_obj::helpMat->self->_21 = ( (float)((m14->self->_21 * invs2)) );
HXDLIN( 672)					::iron::math::Mat4_obj::helpMat->self->_22 = ( (float)((m14->self->_22 * invs2)) );
HXDLIN( 672)					{
HXLINE( 672)						 ::iron::math::Mat4 m15 = ::iron::math::Mat4_obj::helpMat;
HXDLIN( 672)						float m112 = m15->self->_00;
HXDLIN( 672)						float m122 = m15->self->_10;
HXDLIN( 672)						float m132 = m15->self->_20;
HXDLIN( 672)						float m212 = m15->self->_01;
HXDLIN( 672)						float m222 = m15->self->_11;
HXDLIN( 672)						float m232 = m15->self->_21;
HXDLIN( 672)						float m314 = m15->self->_02;
HXDLIN( 672)						float m323 = m15->self->_12;
HXDLIN( 672)						float m333 = m15->self->_22;
HXDLIN( 672)						float tr2 = ((m112 + m222) + m333);
HXDLIN( 672)						Float s3 = ((Float)0.0);
HXDLIN( 672)						if ((tr2 > 0)) {
HXLINE(  75)							s3 = (((Float)0.5) / ::Math_obj::sqrt((tr2 + ((Float)1.0))));
HXLINE( 672)							quat3->w = ( (float)((((Float)0.25) / s3)) );
HXDLIN( 672)							quat3->x = ( (float)(((m323 - m232) * s3)) );
HXDLIN( 672)							quat3->y = ( (float)(((m132 - m314) * s3)) );
HXDLIN( 672)							quat3->z = ( (float)(((m212 - m122) * s3)) );
            						}
            						else {
HXLINE( 672)							bool _hx_tmp13;
HXDLIN( 672)							if ((m112 > m222)) {
HXLINE( 672)								_hx_tmp13 = (m112 > m333);
            							}
            							else {
HXLINE( 672)								_hx_tmp13 = false;
            							}
HXDLIN( 672)							if (_hx_tmp13) {
HXLINE(  82)								s3 = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m112) - m222) - m333)));
HXLINE( 672)								quat3->w = ( (float)((( (Float)((m323 - m232)) ) / s3)) );
HXDLIN( 672)								quat3->x = ( (float)((((Float)0.25) * s3)) );
HXDLIN( 672)								quat3->y = ( (float)((( (Float)((m122 + m212)) ) / s3)) );
HXDLIN( 672)								quat3->z = ( (float)((( (Float)((m132 + m314)) ) / s3)) );
            							}
            							else {
HXLINE( 672)								if ((m222 > m333)) {
HXLINE(  89)									s3 = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m222) - m112) - m333)));
HXLINE( 672)									quat3->w = ( (float)((( (Float)((m132 - m314)) ) / s3)) );
HXDLIN( 672)									quat3->x = ( (float)((( (Float)((m122 + m212)) ) / s3)) );
HXDLIN( 672)									quat3->y = ( (float)((((Float)0.25) * s3)) );
HXDLIN( 672)									quat3->z = ( (float)((( (Float)((m232 + m323)) ) / s3)) );
            								}
            								else {
HXLINE(  96)									s3 = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m333) - m112) - m222)));
HXLINE( 672)									quat3->w = ( (float)((( (Float)((m212 - m122)) ) / s3)) );
HXDLIN( 672)									quat3->x = ( (float)((( (Float)((m132 + m314)) ) / s3)) );
HXDLIN( 672)									quat3->y = ( (float)((( (Float)((m232 + m323)) ) / s3)) );
HXDLIN( 672)									quat3->z = ( (float)((((Float)0.25) * s3)) );
            								}
            							}
            						}
            					}
            				}
HXLINE( 673)				 ::iron::math::Vec4 l11;
HXDLIN( 673)				if ((i2 == 0)) {
HXLINE( 673)					l11 = locs->__get(i2).StaticCast<  ::iron::math::Vec4 >();
            				}
            				else {
HXLINE( 673)					l11 = locs->__get((i2 - 1)).StaticCast<  ::iron::math::Vec4 >();
            				}
HXLINE( 674)				 ::iron::math::Vec4 l21;
HXDLIN( 674)				if ((i2 == 0)) {
HXLINE( 674)					l21 = locs->__get((i2 + 1)).StaticCast<  ::iron::math::Vec4 >();
            				}
            				else {
HXLINE( 674)					l21 = locs->__get(i2).StaticCast<  ::iron::math::Vec4 >();
            				}
HXLINE( 675)				{
HXLINE( 675)					 ::iron::math::Vec4 _this94 = ::iron::object::BoneAnimation_obj::v2;
HXDLIN( 675)					_this94->x = l11->x;
HXDLIN( 675)					_this94->y = l11->y;
HXDLIN( 675)					_this94->z = l11->z;
HXDLIN( 675)					 ::iron::math::Vec4 _this95 = _this94;
HXDLIN( 675)					 ::iron::math::Vec4 _this96 = _this95;
HXDLIN( 675)					_this96->x = (_this96->x - l21->x);
HXDLIN( 675)					 ::iron::math::Vec4 _this97 = _this95;
HXDLIN( 675)					_this97->y = (_this97->y - l21->y);
HXDLIN( 675)					 ::iron::math::Vec4 _this98 = _this95;
HXDLIN( 675)					_this98->z = (_this98->z - l21->z);
HXDLIN( 675)					 ::iron::math::Vec4 _this99 = _this95;
HXDLIN( 675)					float v39 = (_this99->x * _this99->x);
HXDLIN( 675)					float v40 = (v39 + (_this99->y * _this99->y));
HXDLIN( 675)					float n5 = ( (float)(::Math_obj::sqrt(( (Float)((v40 + (_this99->z * _this99->z))) ))) );
HXDLIN( 675)					if ((n5 > ((Float)0.0))) {
HXLINE( 675)						Float invN5 = (((Float)1.0) / ( (Float)(n5) ));
HXDLIN( 675)						 ::iron::math::Vec4 _this100 = _this99;
HXDLIN( 675)						_this100->x = (_this100->x * invN5);
HXDLIN( 675)						 ::iron::math::Vec4 _this101 = _this99;
HXDLIN( 675)						_this101->y = (_this101->y * invN5);
HXDLIN( 675)						 ::iron::math::Vec4 _this102 = _this99;
HXDLIN( 675)						_this102->z = (_this102->z * invN5);
            					}
            				}
HXLINE( 676)				{
HXLINE( 676)					 ::iron::math::Quat _this103 = ::iron::object::BoneAnimation_obj::q1;
HXDLIN( 676)					 ::iron::math::Vec4 v111 = ::iron::object::BoneAnimation_obj::v1;
HXDLIN( 676)					 ::iron::math::Vec4 v210 = ::iron::object::BoneAnimation_obj::v2;
HXDLIN( 676)					 ::iron::math::Vec4 a6 = ::iron::math::Quat_obj::helpVec0;
HXDLIN( 676)					float dot3 = (v111->x * v210->x);
HXDLIN( 676)					float dot4 = (dot3 + (v111->y * v210->y));
HXDLIN( 676)					float dot5 = (dot4 + (v111->z * v210->z));
HXDLIN( 676)					if ((dot5 < ((Float)-0.999999))) {
HXLINE( 676)						{
HXLINE( 676)							 ::iron::math::Vec4 a7 = ::iron::math::Quat_obj::xAxis;
HXDLIN( 676)							float ax3 = a7->x;
HXDLIN( 676)							float ay3 = a7->y;
HXDLIN( 676)							float az3 = a7->z;
HXDLIN( 676)							float bx3 = v111->x;
HXDLIN( 676)							float by3 = v111->y;
HXDLIN( 676)							float bz3 = v111->z;
HXDLIN( 676)							a6->x = ((ay3 * bz3) - (az3 * by3));
HXDLIN( 676)							a6->y = ((az3 * bx3) - (ax3 * bz3));
HXDLIN( 676)							a6->z = ((ax3 * by3) - (ay3 * bx3));
            						}
HXDLIN( 676)						float v41 = (a6->x * a6->x);
HXDLIN( 676)						float v42 = (v41 + (a6->y * a6->y));
HXDLIN( 676)						if ((( (float)(::Math_obj::sqrt(( (Float)((v42 + (a6->z * a6->z))) ))) ) < ((Float)0.000001))) {
HXLINE( 676)							 ::iron::math::Vec4 a8 = ::iron::math::Quat_obj::yAxis;
HXDLIN( 676)							float ax4 = a8->x;
HXDLIN( 676)							float ay4 = a8->y;
HXDLIN( 676)							float az4 = a8->z;
HXDLIN( 676)							float bx4 = v111->x;
HXDLIN( 676)							float by4 = v111->y;
HXDLIN( 676)							float bz4 = v111->z;
HXDLIN( 676)							a6->x = ((ay4 * bz4) - (az4 * by4));
HXDLIN( 676)							a6->y = ((az4 * bx4) - (ax4 * bz4));
HXDLIN( 676)							a6->z = ((ax4 * by4) - (ay4 * bx4));
            						}
HXDLIN( 676)						{
HXLINE( 676)							float v43 = (a6->x * a6->x);
HXDLIN( 676)							float v44 = (v43 + (a6->y * a6->y));
HXDLIN( 676)							float n6 = ( (float)(::Math_obj::sqrt(( (Float)((v44 + (a6->z * a6->z))) ))) );
HXDLIN( 676)							if ((n6 > ((Float)0.0))) {
HXLINE( 676)								Float invN6 = (((Float)1.0) / ( (Float)(n6) ));
HXDLIN( 676)								 ::iron::math::Vec4 a9 = a6;
HXDLIN( 676)								a9->x = (a9->x * invN6);
HXDLIN( 676)								 ::iron::math::Vec4 a14 = a6;
HXDLIN( 676)								a14->y = (a14->y * invN6);
HXDLIN( 676)								 ::iron::math::Vec4 a15 = a6;
HXDLIN( 676)								a15->z = (a15->z * invN6);
            							}
            						}
HXDLIN( 676)						{
HXLINE( 676)							float s4 = ( (float)(::Math_obj::sin(((Float)1.5707963267948966))) );
HXDLIN( 676)							_this103->x = (a6->x * s4);
HXDLIN( 676)							_this103->y = (a6->y * s4);
HXDLIN( 676)							_this103->z = (a6->z * s4);
HXDLIN( 676)							_this103->w = ( (float)(::Math_obj::cos(((Float)1.5707963267948966))) );
HXDLIN( 676)							{
HXLINE( 676)								float v45 = (_this103->x * _this103->x);
HXDLIN( 676)								float v46 = (v45 + (_this103->y * _this103->y));
HXDLIN( 676)								float v47 = (v46 + (_this103->z * _this103->z));
HXDLIN( 676)								Float l4 = ::Math_obj::sqrt(( (Float)((v47 + (_this103->w * _this103->w))) ));
HXDLIN( 676)								if ((l4 == ((Float)0.0))) {
HXLINE( 676)									_this103->x = ( (float)(0) );
HXDLIN( 676)									_this103->y = ( (float)(0) );
HXDLIN( 676)									_this103->z = ( (float)(0) );
HXDLIN( 676)									_this103->w = ( (float)(0) );
            								}
            								else {
HXLINE( 128)									l4 = (((Float)1.0) / l4);
HXLINE( 676)									 ::iron::math::Quat _this104 = _this103;
HXDLIN( 676)									_this104->x = (_this104->x * l4);
HXDLIN( 676)									 ::iron::math::Quat _this105 = _this103;
HXDLIN( 676)									_this105->y = (_this105->y * l4);
HXDLIN( 676)									 ::iron::math::Quat _this106 = _this103;
HXDLIN( 676)									_this106->z = (_this106->z * l4);
HXDLIN( 676)									 ::iron::math::Quat _this107 = _this103;
HXDLIN( 676)									_this107->w = (_this107->w * l4);
            								}
            							}
            						}
            					}
            					else {
HXLINE( 676)						if ((dot5 > ((Float)0.999999))) {
HXLINE( 676)							_this103->x = ( (float)(0) );
HXDLIN( 676)							_this103->y = ( (float)(0) );
HXDLIN( 676)							_this103->z = ( (float)(0) );
HXDLIN( 676)							_this103->w = ( (float)(1) );
            						}
            						else {
HXLINE( 676)							{
HXLINE( 676)								float ax5 = v111->x;
HXDLIN( 676)								float ay5 = v111->y;
HXDLIN( 676)								float az5 = v111->z;
HXDLIN( 676)								float bx5 = v210->x;
HXDLIN( 676)								float by5 = v210->y;
HXDLIN( 676)								float bz5 = v210->z;
HXDLIN( 676)								a6->x = ((ay5 * bz5) - (az5 * by5));
HXDLIN( 676)								a6->y = ((az5 * bx5) - (ax5 * bz5));
HXDLIN( 676)								a6->z = ((ax5 * by5) - (ay5 * bx5));
            							}
HXDLIN( 676)							{
HXLINE( 676)								_this103->x = a6->x;
HXDLIN( 676)								_this103->y = a6->y;
HXDLIN( 676)								_this103->z = a6->z;
HXDLIN( 676)								_this103->w = (1 + dot5);
            							}
HXDLIN( 676)							{
HXLINE( 676)								float v48 = (_this103->x * _this103->x);
HXDLIN( 676)								float v49 = (v48 + (_this103->y * _this103->y));
HXDLIN( 676)								float v50 = (v49 + (_this103->z * _this103->z));
HXDLIN( 676)								Float l5 = ::Math_obj::sqrt(( (Float)((v50 + (_this103->w * _this103->w))) ));
HXDLIN( 676)								if ((l5 == ((Float)0.0))) {
HXLINE( 676)									_this103->x = ( (float)(0) );
HXDLIN( 676)									_this103->y = ( (float)(0) );
HXDLIN( 676)									_this103->z = ( (float)(0) );
HXDLIN( 676)									_this103->w = ( (float)(0) );
            								}
            								else {
HXLINE( 128)									l5 = (((Float)1.0) / l5);
HXLINE( 676)									 ::iron::math::Quat _this108 = _this103;
HXDLIN( 676)									_this108->x = (_this108->x * l5);
HXDLIN( 676)									 ::iron::math::Quat _this109 = _this103;
HXDLIN( 676)									_this109->y = (_this109->y * l5);
HXDLIN( 676)									 ::iron::math::Quat _this110 = _this103;
HXDLIN( 676)									_this110->z = (_this110->z * l5);
HXDLIN( 676)									 ::iron::math::Quat _this111 = _this103;
HXDLIN( 676)									_this111->w = (_this111->w * l5);
            								}
            							}
            						}
            					}
            				}
HXLINE( 677)				 ::iron::math::Vec4 v51 = locs->__get(i2).StaticCast<  ::iron::math::Vec4 >();
HXDLIN( 677)				vec_x = v51->x;
HXDLIN( 677)				vec_y = v51->y;
HXDLIN( 677)				vec_z = v51->z;
HXLINE( 678)				{
HXLINE( 678)					 ::iron::math::Quat quat4 = ::iron::object::BoneAnimation_obj::q1;
HXDLIN( 678)					 ::iron::math::Vec4 sc2 = ::iron::object::BoneAnimation_obj::vscl;
HXDLIN( 678)					{
HXLINE( 678)						float x6 = quat4->x;
HXDLIN( 678)						float y5 = quat4->y;
HXDLIN( 678)						float z5 = quat4->z;
HXDLIN( 678)						float w3 = quat4->w;
HXDLIN( 678)						float x22 = (x6 + x6);
HXDLIN( 678)						float y22 = (y5 + y5);
HXDLIN( 678)						float z22 = (z5 + z5);
HXDLIN( 678)						float xx2 = (x6 * x22);
HXDLIN( 678)						float xy2 = (x6 * y22);
HXDLIN( 678)						float xz2 = (x6 * z22);
HXDLIN( 678)						float yy2 = (y5 * y22);
HXDLIN( 678)						float yz2 = (y5 * z22);
HXDLIN( 678)						float zz2 = (z5 * z22);
HXDLIN( 678)						float wx2 = (w3 * x22);
HXDLIN( 678)						float wy2 = (w3 * y22);
HXDLIN( 678)						float wz2 = (w3 * z22);
HXDLIN( 678)						m14->self->_00 = ( (float)((((Float)1.0) - (yy2 + zz2))) );
HXDLIN( 678)						m14->self->_10 = (xy2 - wz2);
HXDLIN( 678)						m14->self->_20 = (xz2 + wy2);
HXDLIN( 678)						m14->self->_01 = (xy2 + wz2);
HXDLIN( 678)						m14->self->_11 = ( (float)((((Float)1.0) - (xx2 + zz2))) );
HXDLIN( 678)						m14->self->_21 = (yz2 - wx2);
HXDLIN( 678)						m14->self->_02 = (xz2 - wy2);
HXDLIN( 678)						m14->self->_12 = (yz2 + wx2);
HXDLIN( 678)						m14->self->_22 = ( (float)((((Float)1.0) - (xx2 + yy2))) );
HXDLIN( 678)						m14->self->_03 = ( (float)(((Float)0.0)) );
HXDLIN( 678)						m14->self->_13 = ( (float)(((Float)0.0)) );
HXDLIN( 678)						m14->self->_23 = ( (float)(((Float)0.0)) );
HXDLIN( 678)						m14->self->_30 = ( (float)(((Float)0.0)) );
HXDLIN( 678)						m14->self->_31 = ( (float)(((Float)0.0)) );
HXDLIN( 678)						m14->self->_32 = ( (float)(((Float)0.0)) );
HXDLIN( 678)						m14->self->_33 = ( (float)(((Float)1.0)) );
            					}
HXDLIN( 678)					{
HXLINE( 678)						float x7 = sc2->x;
HXDLIN( 678)						float y6 = sc2->y;
HXDLIN( 678)						float z6 = sc2->z;
HXDLIN( 678)						{
HXLINE( 678)							 ::iron::math::Mat4 _g34 = m14;
HXDLIN( 678)							_g34->self->_00 = (_g34->self->_00 * x7);
            						}
HXDLIN( 678)						{
HXLINE( 678)							 ::iron::math::Mat4 _g35 = m14;
HXDLIN( 678)							_g35->self->_01 = (_g35->self->_01 * x7);
            						}
HXDLIN( 678)						{
HXLINE( 678)							 ::iron::math::Mat4 _g36 = m14;
HXDLIN( 678)							_g36->self->_02 = (_g36->self->_02 * x7);
            						}
HXDLIN( 678)						{
HXLINE( 678)							 ::iron::math::Mat4 _g37 = m14;
HXDLIN( 678)							_g37->self->_03 = (_g37->self->_03 * x7);
            						}
HXDLIN( 678)						{
HXLINE( 678)							 ::iron::math::Mat4 _g38 = m14;
HXDLIN( 678)							_g38->self->_10 = (_g38->self->_10 * y6);
            						}
HXDLIN( 678)						{
HXLINE( 678)							 ::iron::math::Mat4 _g39 = m14;
HXDLIN( 678)							_g39->self->_11 = (_g39->self->_11 * y6);
            						}
HXDLIN( 678)						{
HXLINE( 678)							 ::iron::math::Mat4 _g40 = m14;
HXDLIN( 678)							_g40->self->_12 = (_g40->self->_12 * y6);
            						}
HXDLIN( 678)						{
HXLINE( 678)							 ::iron::math::Mat4 _g41 = m14;
HXDLIN( 678)							_g41->self->_13 = (_g41->self->_13 * y6);
            						}
HXDLIN( 678)						{
HXLINE( 678)							 ::iron::math::Mat4 _g42 = m14;
HXDLIN( 678)							_g42->self->_20 = (_g42->self->_20 * z6);
            						}
HXDLIN( 678)						{
HXLINE( 678)							 ::iron::math::Mat4 _g43 = m14;
HXDLIN( 678)							_g43->self->_21 = (_g43->self->_21 * z6);
            						}
HXDLIN( 678)						{
HXLINE( 678)							 ::iron::math::Mat4 _g44 = m14;
HXDLIN( 678)							_g44->self->_22 = (_g44->self->_22 * z6);
            						}
HXDLIN( 678)						{
HXLINE( 678)							 ::iron::math::Mat4 _g45 = m14;
HXDLIN( 678)							_g45->self->_23 = (_g45->self->_23 * z6);
            						}
            					}
HXDLIN( 678)					{
HXLINE( 678)						m14->self->_30 = vec_x;
HXDLIN( 678)						m14->self->_31 = vec_y;
HXDLIN( 678)						m14->self->_32 = vec_z;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(BoneAnimation_obj,solveIK,(void))

int BoneAnimation_obj::skinMaxBones;

 ::iron::math::Mat4 BoneAnimation_obj::m;

 ::iron::math::Mat4 BoneAnimation_obj::m1;

 ::iron::math::Mat4 BoneAnimation_obj::m2;

 ::iron::math::Mat4 BoneAnimation_obj::bm;

 ::iron::math::Mat4 BoneAnimation_obj::wm;

 ::iron::math::Vec4 BoneAnimation_obj::vpos;

 ::iron::math::Vec4 BoneAnimation_obj::vscl;

 ::iron::math::Quat BoneAnimation_obj::q1;

 ::iron::math::Quat BoneAnimation_obj::q2;

 ::iron::math::Quat BoneAnimation_obj::q3;

 ::iron::math::Vec4 BoneAnimation_obj::vpos2;

 ::iron::math::Vec4 BoneAnimation_obj::vscl2;

 ::iron::math::Vec4 BoneAnimation_obj::v1;

 ::iron::math::Vec4 BoneAnimation_obj::v2;


hx::ObjectPtr< BoneAnimation_obj > BoneAnimation_obj::__new(::String __o_armatureName) {
	hx::ObjectPtr< BoneAnimation_obj > __this = new BoneAnimation_obj();
	__this->__construct(__o_armatureName);
	return __this;
}

hx::ObjectPtr< BoneAnimation_obj > BoneAnimation_obj::__alloc(hx::Ctx *_hx_ctx,::String __o_armatureName) {
	BoneAnimation_obj *__this = (BoneAnimation_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BoneAnimation_obj), true, "iron.object.BoneAnimation"));
	*(void **)__this = BoneAnimation_obj::_hx_vtable;
	__this->__construct(__o_armatureName);
	return __this;
}

BoneAnimation_obj::BoneAnimation_obj()
{
}

void BoneAnimation_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BoneAnimation);
	HX_MARK_MEMBER_NAME(object,"object");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(skinBuffer,"skinBuffer");
	HX_MARK_MEMBER_NAME(skeletonBones,"skeletonBones");
	HX_MARK_MEMBER_NAME(skeletonMats,"skeletonMats");
	HX_MARK_MEMBER_NAME(skeletonBonesBlend,"skeletonBonesBlend");
	HX_MARK_MEMBER_NAME(skeletonMatsBlend,"skeletonMatsBlend");
	HX_MARK_MEMBER_NAME(absMats,"absMats");
	HX_MARK_MEMBER_NAME(applyParent,"applyParent");
	HX_MARK_MEMBER_NAME(matsFast,"matsFast");
	HX_MARK_MEMBER_NAME(matsFastSort,"matsFastSort");
	HX_MARK_MEMBER_NAME(matsFastBlend,"matsFastBlend");
	HX_MARK_MEMBER_NAME(matsFastBlendSort,"matsFastBlendSort");
	HX_MARK_MEMBER_NAME(boneChildren,"boneChildren");
	HX_MARK_MEMBER_NAME(constraintTargets,"constraintTargets");
	HX_MARK_MEMBER_NAME(constraintTargetsI,"constraintTargetsI");
	HX_MARK_MEMBER_NAME(constraintMats,"constraintMats");
	HX_MARK_MEMBER_NAME(onUpdates,"onUpdates");
	 ::iron::object::Animation_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BoneAnimation_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(object,"object");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(skinBuffer,"skinBuffer");
	HX_VISIT_MEMBER_NAME(skeletonBones,"skeletonBones");
	HX_VISIT_MEMBER_NAME(skeletonMats,"skeletonMats");
	HX_VISIT_MEMBER_NAME(skeletonBonesBlend,"skeletonBonesBlend");
	HX_VISIT_MEMBER_NAME(skeletonMatsBlend,"skeletonMatsBlend");
	HX_VISIT_MEMBER_NAME(absMats,"absMats");
	HX_VISIT_MEMBER_NAME(applyParent,"applyParent");
	HX_VISIT_MEMBER_NAME(matsFast,"matsFast");
	HX_VISIT_MEMBER_NAME(matsFastSort,"matsFastSort");
	HX_VISIT_MEMBER_NAME(matsFastBlend,"matsFastBlend");
	HX_VISIT_MEMBER_NAME(matsFastBlendSort,"matsFastBlendSort");
	HX_VISIT_MEMBER_NAME(boneChildren,"boneChildren");
	HX_VISIT_MEMBER_NAME(constraintTargets,"constraintTargets");
	HX_VISIT_MEMBER_NAME(constraintTargetsI,"constraintTargetsI");
	HX_VISIT_MEMBER_NAME(constraintMats,"constraintMats");
	HX_VISIT_MEMBER_NAME(onUpdates,"onUpdates");
	 ::iron::object::Animation_obj::__Visit(HX_VISIT_ARG);
}

hx::Val BoneAnimation_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data ); }
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"blend") ) { return hx::Val( blend_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"object") ) { return hx::Val( object ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"absMats") ) { return hx::Val( absMats ); }
		if (HX_FIELD_EQ(inName,"setSkin") ) { return hx::Val( setSkin_dyn() ); }
		if (HX_FIELD_EQ(inName,"setMats") ) { return hx::Val( setMats_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBone") ) { return hx::Val( getBone_dyn() ); }
		if (HX_FIELD_EQ(inName,"solveIK") ) { return hx::Val( solveIK_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"matsFast") ) { return hx::Val( matsFast ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setAction") ) { return hx::Val( setAction_dyn() ); }
		if (HX_FIELD_EQ(inName,"onUpdates") ) { return hx::Val( onUpdates ); }
		if (HX_FIELD_EQ(inName,"getAbsMat") ) { return hx::Val( getAbsMat_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"skinBuffer") ) { return hx::Val( skinBuffer ); }
		if (HX_FIELD_EQ(inName,"numParents") ) { return hx::Val( numParents_dyn() ); }
		if (HX_FIELD_EQ(inName,"multParent") ) { return hx::Val( multParent_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBoneMat") ) { return hx::Val( getBoneMat_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBoneLen") ) { return hx::Val( getBoneLen_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"applyParent") ) { return hx::Val( applyParent ); }
		if (HX_FIELD_EQ(inName,"multParents") ) { return hx::Val( multParents_dyn() ); }
		if (HX_FIELD_EQ(inName,"totalFrames") ) { return hx::Val( totalFrames_dyn() ); }
		if (HX_FIELD_EQ(inName,"getWorldMat") ) { return hx::Val( getWorldMat_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"skeletonMats") ) { return hx::Val( skeletonMats ); }
		if (HX_FIELD_EQ(inName,"matsFastSort") ) { return hx::Val( matsFastSort ); }
		if (HX_FIELD_EQ(inName,"boneChildren") ) { return hx::Val( boneChildren ); }
		if (HX_FIELD_EQ(inName,"addBoneChild") ) { return hx::Val( addBoneChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeUpdate") ) { return hx::Val( removeUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBoneIndex") ) { return hx::Val( getBoneIndex_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"skeletonBones") ) { return hx::Val( skeletonBones ); }
		if (HX_FIELD_EQ(inName,"matsFastBlend") ) { return hx::Val( matsFastBlend ); }
		if (HX_FIELD_EQ(inName,"updateSkinGpu") ) { return hx::Val( updateSkinGpu_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"constraintMats") ) { return hx::Val( constraintMats ); }
		if (HX_FIELD_EQ(inName,"setActionBlend") ) { return hx::Val( setActionBlend_dyn() ); }
		if (HX_FIELD_EQ(inName,"notifyOnUpdate") ) { return hx::Val( notifyOnUpdate_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateBonesOnly") ) { return hx::Val( updateBonesOnly_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBoneMatBlend") ) { return hx::Val( getBoneMatBlend_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"updateSkinBuffer") ) { return hx::Val( updateSkinBuffer_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"skeletonMatsBlend") ) { return hx::Val( skeletonMatsBlend ); }
		if (HX_FIELD_EQ(inName,"matsFastBlendSort") ) { return hx::Val( matsFastBlendSort ); }
		if (HX_FIELD_EQ(inName,"constraintTargets") ) { return hx::Val( constraintTargets ); }
		if (HX_FIELD_EQ(inName,"updateConstraints") ) { return hx::Val( updateConstraints_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"skeletonBonesBlend") ) { return hx::Val( skeletonBonesBlend ); }
		if (HX_FIELD_EQ(inName,"constraintTargetsI") ) { return hx::Val( constraintTargetsI ); }
		if (HX_FIELD_EQ(inName,"updateBoneChildren") ) { return hx::Val( updateBoneChildren_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BoneAnimation_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"m") ) { outValue = ( m ); return true; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"m1") ) { outValue = ( m1 ); return true; }
		if (HX_FIELD_EQ(inName,"m2") ) { outValue = ( m2 ); return true; }
		if (HX_FIELD_EQ(inName,"bm") ) { outValue = ( bm ); return true; }
		if (HX_FIELD_EQ(inName,"wm") ) { outValue = ( wm ); return true; }
		if (HX_FIELD_EQ(inName,"q1") ) { outValue = ( q1 ); return true; }
		if (HX_FIELD_EQ(inName,"q2") ) { outValue = ( q2 ); return true; }
		if (HX_FIELD_EQ(inName,"q3") ) { outValue = ( q3 ); return true; }
		if (HX_FIELD_EQ(inName,"v1") ) { outValue = ( v1 ); return true; }
		if (HX_FIELD_EQ(inName,"v2") ) { outValue = ( v2 ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"vpos") ) { outValue = ( vpos ); return true; }
		if (HX_FIELD_EQ(inName,"vscl") ) { outValue = ( vscl ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"vpos2") ) { outValue = ( vpos2 ); return true; }
		if (HX_FIELD_EQ(inName,"vscl2") ) { outValue = ( vscl2 ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"skinMaxBones") ) { outValue = ( skinMaxBones ); return true; }
	}
	return false;
}

hx::Val BoneAnimation_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::iron::data::MeshData >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"object") ) { object=inValue.Cast<  ::iron::object::MeshObject >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"absMats") ) { absMats=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"matsFast") ) { matsFast=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"onUpdates") ) { onUpdates=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"skinBuffer") ) { skinBuffer=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"applyParent") ) { applyParent=inValue.Cast< ::Array< bool > >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"skeletonMats") ) { skeletonMats=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"matsFastSort") ) { matsFastSort=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boneChildren") ) { boneChildren=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"skeletonBones") ) { skeletonBones=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"matsFastBlend") ) { matsFastBlend=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"constraintMats") ) { constraintMats=inValue.Cast<  ::haxe::ds::ObjectMap >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"skeletonMatsBlend") ) { skeletonMatsBlend=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"matsFastBlendSort") ) { matsFastBlendSort=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"constraintTargets") ) { constraintTargets=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"skeletonBonesBlend") ) { skeletonBonesBlend=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"constraintTargetsI") ) { constraintTargetsI=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BoneAnimation_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"m") ) { m=ioValue.Cast<  ::iron::math::Mat4 >(); return true; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"m1") ) { m1=ioValue.Cast<  ::iron::math::Mat4 >(); return true; }
		if (HX_FIELD_EQ(inName,"m2") ) { m2=ioValue.Cast<  ::iron::math::Mat4 >(); return true; }
		if (HX_FIELD_EQ(inName,"bm") ) { bm=ioValue.Cast<  ::iron::math::Mat4 >(); return true; }
		if (HX_FIELD_EQ(inName,"wm") ) { wm=ioValue.Cast<  ::iron::math::Mat4 >(); return true; }
		if (HX_FIELD_EQ(inName,"q1") ) { q1=ioValue.Cast<  ::iron::math::Quat >(); return true; }
		if (HX_FIELD_EQ(inName,"q2") ) { q2=ioValue.Cast<  ::iron::math::Quat >(); return true; }
		if (HX_FIELD_EQ(inName,"q3") ) { q3=ioValue.Cast<  ::iron::math::Quat >(); return true; }
		if (HX_FIELD_EQ(inName,"v1") ) { v1=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
		if (HX_FIELD_EQ(inName,"v2") ) { v2=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"vpos") ) { vpos=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
		if (HX_FIELD_EQ(inName,"vscl") ) { vscl=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"vpos2") ) { vpos2=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
		if (HX_FIELD_EQ(inName,"vscl2") ) { vscl2=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"skinMaxBones") ) { skinMaxBones=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void BoneAnimation_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("object",bf,7e,3f,15));
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("skinBuffer",5d,c3,6d,e5));
	outFields->push(HX_("skeletonBones",a2,2f,f5,38));
	outFields->push(HX_("skeletonMats",40,ca,af,94));
	outFields->push(HX_("skeletonBonesBlend",4f,3d,d3,02));
	outFields->push(HX_("skeletonMatsBlend",f1,65,cd,06));
	outFields->push(HX_("absMats",65,7f,df,5a));
	outFields->push(HX_("applyParent",38,c5,78,29));
	outFields->push(HX_("matsFast",0f,16,26,e3));
	outFields->push(HX_("matsFastSort",0d,1d,1d,19));
	outFields->push(HX_("matsFastBlend",c2,eb,86,14));
	outFields->push(HX_("matsFastBlendSort",40,48,c6,e4));
	outFields->push(HX_("boneChildren",a3,3c,12,2f));
	outFields->push(HX_("constraintTargets",25,91,c0,f3));
	outFields->push(HX_("constraintTargetsI",84,6f,be,54));
	outFields->push(HX_("constraintMats",d0,60,3f,70));
	outFields->push(HX_("onUpdates",eb,7a,7a,75));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo BoneAnimation_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::object::MeshObject*/ ,(int)offsetof(BoneAnimation_obj,object),HX_("object",bf,7e,3f,15)},
	{hx::fsObject /*::iron::data::MeshData*/ ,(int)offsetof(BoneAnimation_obj,data),HX_("data",2a,56,63,42)},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(int)offsetof(BoneAnimation_obj,skinBuffer),HX_("skinBuffer",5d,c3,6d,e5)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(BoneAnimation_obj,skeletonBones),HX_("skeletonBones",a2,2f,f5,38)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(BoneAnimation_obj,skeletonMats),HX_("skeletonMats",40,ca,af,94)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(BoneAnimation_obj,skeletonBonesBlend),HX_("skeletonBonesBlend",4f,3d,d3,02)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(BoneAnimation_obj,skeletonMatsBlend),HX_("skeletonMatsBlend",f1,65,cd,06)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(BoneAnimation_obj,absMats),HX_("absMats",65,7f,df,5a)},
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(BoneAnimation_obj,applyParent),HX_("applyParent",38,c5,78,29)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(BoneAnimation_obj,matsFast),HX_("matsFast",0f,16,26,e3)},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(BoneAnimation_obj,matsFastSort),HX_("matsFastSort",0d,1d,1d,19)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(BoneAnimation_obj,matsFastBlend),HX_("matsFastBlend",c2,eb,86,14)},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(BoneAnimation_obj,matsFastBlendSort),HX_("matsFastBlendSort",40,48,c6,e4)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(BoneAnimation_obj,boneChildren),HX_("boneChildren",a3,3c,12,2f)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(BoneAnimation_obj,constraintTargets),HX_("constraintTargets",25,91,c0,f3)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(BoneAnimation_obj,constraintTargetsI),HX_("constraintTargetsI",84,6f,be,54)},
	{hx::fsObject /*::haxe::ds::ObjectMap*/ ,(int)offsetof(BoneAnimation_obj,constraintMats),HX_("constraintMats",d0,60,3f,70)},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(BoneAnimation_obj,onUpdates),HX_("onUpdates",eb,7a,7a,75)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo BoneAnimation_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &BoneAnimation_obj::skinMaxBones,HX_("skinMaxBones",08,c3,01,23)},
	{hx::fsObject /*::iron::math::Mat4*/ ,(void *) &BoneAnimation_obj::m,HX_("m",6d,00,00,00)},
	{hx::fsObject /*::iron::math::Mat4*/ ,(void *) &BoneAnimation_obj::m1,HX_("m1",24,5f,00,00)},
	{hx::fsObject /*::iron::math::Mat4*/ ,(void *) &BoneAnimation_obj::m2,HX_("m2",25,5f,00,00)},
	{hx::fsObject /*::iron::math::Mat4*/ ,(void *) &BoneAnimation_obj::bm,HX_("bm",cb,55,00,00)},
	{hx::fsObject /*::iron::math::Mat4*/ ,(void *) &BoneAnimation_obj::wm,HX_("wm",16,68,00,00)},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &BoneAnimation_obj::vpos,HX_("vpos",de,8a,54,4e)},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &BoneAnimation_obj::vscl,HX_("vscl",26,c7,56,4e)},
	{hx::fsObject /*::iron::math::Quat*/ ,(void *) &BoneAnimation_obj::q1,HX_("q1",a0,62,00,00)},
	{hx::fsObject /*::iron::math::Quat*/ ,(void *) &BoneAnimation_obj::q2,HX_("q2",a1,62,00,00)},
	{hx::fsObject /*::iron::math::Quat*/ ,(void *) &BoneAnimation_obj::q3,HX_("q3",a2,62,00,00)},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &BoneAnimation_obj::vpos2,HX_("vpos2",94,f7,a4,3b)},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &BoneAnimation_obj::vscl2,HX_("vscl2",4c,7a,97,3d)},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &BoneAnimation_obj::v1,HX_("v1",fb,66,00,00)},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &BoneAnimation_obj::v2,HX_("v2",fc,66,00,00)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String BoneAnimation_obj_sMemberFields[] = {
	HX_("object",bf,7e,3f,15),
	HX_("data",2a,56,63,42),
	HX_("skinBuffer",5d,c3,6d,e5),
	HX_("skeletonBones",a2,2f,f5,38),
	HX_("skeletonMats",40,ca,af,94),
	HX_("skeletonBonesBlend",4f,3d,d3,02),
	HX_("skeletonMatsBlend",f1,65,cd,06),
	HX_("absMats",65,7f,df,5a),
	HX_("applyParent",38,c5,78,29),
	HX_("matsFast",0f,16,26,e3),
	HX_("matsFastSort",0d,1d,1d,19),
	HX_("matsFastBlend",c2,eb,86,14),
	HX_("matsFastBlendSort",40,48,c6,e4),
	HX_("boneChildren",a3,3c,12,2f),
	HX_("constraintTargets",25,91,c0,f3),
	HX_("constraintTargetsI",84,6f,be,54),
	HX_("constraintMats",d0,60,3f,70),
	HX_("setSkin",3f,57,d9,11),
	HX_("addBoneChild",57,61,c9,a5),
	HX_("updateBoneChildren",4c,78,1f,a7),
	HX_("numParents",63,be,e6,10),
	HX_("setMats",95,82,da,0d),
	HX_("setAction",f8,b0,ed,75),
	HX_("setActionBlend",39,24,18,2f),
	HX_("play",f4,2d,5a,4a),
	HX_("blend",51,e8,f4,b4),
	HX_("update",09,86,05,87),
	HX_("multParent",3a,75,1e,63),
	HX_("multParents",f9,1d,88,57),
	HX_("updateConstraints",ed,fd,1d,7c),
	HX_("onUpdates",eb,7a,7a,75),
	HX_("notifyOnUpdate",71,84,12,1d),
	HX_("removeUpdate",6d,21,33,f6),
	HX_("updateBonesOnly",72,5e,b9,88),
	HX_("updateSkinGpu",a6,fc,c0,ff),
	HX_("updateSkinBuffer",c6,92,59,2f),
	HX_("totalFrames",8a,a2,bb,72),
	HX_("getBone",fa,32,9e,13),
	HX_("getBoneIndex",b8,cd,26,2e),
	HX_("getBoneMat",c6,27,47,35),
	HX_("getBoneMatBlend",ab,42,37,a7),
	HX_("getAbsMat",84,ae,77,fe),
	HX_("getWorldMat",24,2e,7f,ca),
	HX_("getBoneLen",fb,68,46,35),
	HX_("solveIK",21,1d,54,8d),
	::String(null()) };

static void BoneAnimation_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BoneAnimation_obj::skinMaxBones,"skinMaxBones");
	HX_MARK_MEMBER_NAME(BoneAnimation_obj::m,"m");
	HX_MARK_MEMBER_NAME(BoneAnimation_obj::m1,"m1");
	HX_MARK_MEMBER_NAME(BoneAnimation_obj::m2,"m2");
	HX_MARK_MEMBER_NAME(BoneAnimation_obj::bm,"bm");
	HX_MARK_MEMBER_NAME(BoneAnimation_obj::wm,"wm");
	HX_MARK_MEMBER_NAME(BoneAnimation_obj::vpos,"vpos");
	HX_MARK_MEMBER_NAME(BoneAnimation_obj::vscl,"vscl");
	HX_MARK_MEMBER_NAME(BoneAnimation_obj::q1,"q1");
	HX_MARK_MEMBER_NAME(BoneAnimation_obj::q2,"q2");
	HX_MARK_MEMBER_NAME(BoneAnimation_obj::q3,"q3");
	HX_MARK_MEMBER_NAME(BoneAnimation_obj::vpos2,"vpos2");
	HX_MARK_MEMBER_NAME(BoneAnimation_obj::vscl2,"vscl2");
	HX_MARK_MEMBER_NAME(BoneAnimation_obj::v1,"v1");
	HX_MARK_MEMBER_NAME(BoneAnimation_obj::v2,"v2");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BoneAnimation_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BoneAnimation_obj::skinMaxBones,"skinMaxBones");
	HX_VISIT_MEMBER_NAME(BoneAnimation_obj::m,"m");
	HX_VISIT_MEMBER_NAME(BoneAnimation_obj::m1,"m1");
	HX_VISIT_MEMBER_NAME(BoneAnimation_obj::m2,"m2");
	HX_VISIT_MEMBER_NAME(BoneAnimation_obj::bm,"bm");
	HX_VISIT_MEMBER_NAME(BoneAnimation_obj::wm,"wm");
	HX_VISIT_MEMBER_NAME(BoneAnimation_obj::vpos,"vpos");
	HX_VISIT_MEMBER_NAME(BoneAnimation_obj::vscl,"vscl");
	HX_VISIT_MEMBER_NAME(BoneAnimation_obj::q1,"q1");
	HX_VISIT_MEMBER_NAME(BoneAnimation_obj::q2,"q2");
	HX_VISIT_MEMBER_NAME(BoneAnimation_obj::q3,"q3");
	HX_VISIT_MEMBER_NAME(BoneAnimation_obj::vpos2,"vpos2");
	HX_VISIT_MEMBER_NAME(BoneAnimation_obj::vscl2,"vscl2");
	HX_VISIT_MEMBER_NAME(BoneAnimation_obj::v1,"v1");
	HX_VISIT_MEMBER_NAME(BoneAnimation_obj::v2,"v2");
};

#endif

hx::Class BoneAnimation_obj::__mClass;

static ::String BoneAnimation_obj_sStaticFields[] = {
	HX_("skinMaxBones",08,c3,01,23),
	HX_("m",6d,00,00,00),
	HX_("m1",24,5f,00,00),
	HX_("m2",25,5f,00,00),
	HX_("bm",cb,55,00,00),
	HX_("wm",16,68,00,00),
	HX_("vpos",de,8a,54,4e),
	HX_("vscl",26,c7,56,4e),
	HX_("q1",a0,62,00,00),
	HX_("q2",a1,62,00,00),
	HX_("q3",a2,62,00,00),
	HX_("vpos2",94,f7,a4,3b),
	HX_("vscl2",4c,7a,97,3d),
	HX_("v1",fb,66,00,00),
	HX_("v2",fc,66,00,00),
	::String(null())
};

void BoneAnimation_obj::__register()
{
	BoneAnimation_obj _hx_dummy;
	BoneAnimation_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.object.BoneAnimation",f7,a9,25,0c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BoneAnimation_obj::__GetStatic;
	__mClass->mSetStaticField = &BoneAnimation_obj::__SetStatic;
	__mClass->mMarkFunc = BoneAnimation_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BoneAnimation_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BoneAnimation_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BoneAnimation_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BoneAnimation_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BoneAnimation_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BoneAnimation_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BoneAnimation_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_511999cb334fbc62_15_boot)
HXDLIN(  15)		skinMaxBones = 50;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_39_boot)
HXDLIN(  39)		m =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_40_boot)
HXDLIN(  40)		m1 =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_41_boot)
HXDLIN(  41)		m2 =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_42_boot)
HXDLIN(  42)		bm =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_43_boot)
HXDLIN(  43)		wm =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_44_boot)
HXDLIN(  44)		vpos =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_45_boot)
HXDLIN(  45)		vscl =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_46_boot)
HXDLIN(  46)		q1 =  ::iron::math::Quat_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_47_boot)
HXDLIN(  47)		q2 =  ::iron::math::Quat_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_48_boot)
HXDLIN(  48)		q3 =  ::iron::math::Quat_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_49_boot)
HXDLIN(  49)		vpos2 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_50_boot)
HXDLIN(  50)		vscl2 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_51_boot)
HXDLIN(  51)		v1 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_511999cb334fbc62_52_boot)
HXDLIN(  52)		v2 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
}

} // end namespace iron
} // end namespace object
