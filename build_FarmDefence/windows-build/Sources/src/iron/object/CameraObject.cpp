// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_iron_RenderPath
#include <hxinc/iron/RenderPath.h>
#endif
#ifndef INCLUDED_iron_Scene
#include <hxinc/iron/Scene.h>
#endif
#ifndef INCLUDED_iron_data_CameraData
#include <hxinc/iron/data/CameraData.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <hxinc/iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_data_TCameraData
#include <hxinc/iron/data/TCameraData.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <hxinc/iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Quat
#include <hxinc/iron/math/Quat.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <hxinc/iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_object_CameraObject
#include <hxinc/iron/object/CameraObject.h>
#endif
#ifndef INCLUDED_iron_object_FrustumPlane
#include <hxinc/iron/object/FrustumPlane.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <hxinc/iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <hxinc/iron/object/Transform.h>
#endif
#ifndef INCLUDED_kha_System
#include <hxinc/kha/System.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <hxinc/kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d44c7901d1565a4b_9_new,"iron.object.CameraObject","new",0xe65d8fbf,"iron.object.CameraObject.new","iron/object/CameraObject.hx",9,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_52_buildProjection,"iron.object.CameraObject","buildProjection",0x3bf93f3c,"iron.object.CameraObject.buildProjection","iron/object/CameraObject.hx",52,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_67_remove,"iron.object.CameraObject","remove",0x48ab8245,"iron.object.CameraObject.remove","iron/object/CameraObject.hx",67,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_72_renderFrame,"iron.object.CameraObject","renderFrame",0xce2b5b56,"iron.object.CameraObject.renderFrame","iron/object/CameraObject.hx",72,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_107_buildMatrix,"iron.object.CameraObject","buildMatrix",0x082fd26e,"iron.object.CameraObject.buildMatrix","iron/object/CameraObject.hx",107,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_177_rotate,"iron.object.CameraObject","rotate",0x0f432c5c,"iron.object.CameraObject.rotate","iron/object/CameraObject.hx",177,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_183_move,"iron.object.CameraObject","move",0xaade96d2,"iron.object.CameraObject.move","iron/object/CameraObject.hx",183,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_188_right,"iron.object.CameraObject","right",0xb4e3a0fb,"iron.object.CameraObject.right","iron/object/CameraObject.hx",188,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_189_up,"iron.object.CameraObject","up",0x54d5f7dc,"iron.object.CameraObject.up","iron/object/CameraObject.hx",189,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_190_look,"iron.object.CameraObject","look",0xaa355a20,"iron.object.CameraObject.look","iron/object/CameraObject.hx",190,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_191_rightWorld,"iron.object.CameraObject","rightWorld",0x8b1df757,"iron.object.CameraObject.rightWorld","iron/object/CameraObject.hx",191,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_192_upWorld,"iron.object.CameraObject","upWorld",0x854010d6,"iron.object.CameraObject.upWorld","iron/object/CameraObject.hx",192,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_193_lookWorld,"iron.object.CameraObject","lookWorld",0x8121f812,"iron.object.CameraObject.lookWorld","iron/object/CameraObject.hx",193,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_195_toString,"iron.object.CameraObject","toString",0xf797f8ed,"iron.object.CameraObject.toString","iron/object/CameraObject.hx",195,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_146_buildViewFrustum,"iron.object.CameraObject","buildViewFrustum",0xbb1fa430,"iron.object.CameraObject.buildViewFrustum","iron/object/CameraObject.hx",146,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_164_sphereInFrustum,"iron.object.CameraObject","sphereInFrustum",0xc7edc30f,"iron.object.CameraObject.sphereInFrustum","iron/object/CameraObject.hx",164,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_21_boot,"iron.object.CameraObject","boot",0xa39937f3,"iron.object.CameraObject.boot","iron/object/CameraObject.hx",21,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_22_boot,"iron.object.CameraObject","boot",0xa39937f3,"iron.object.CameraObject.boot","iron/object/CameraObject.hx",22,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_d44c7901d1565a4b_163_boot,"iron.object.CameraObject","boot",0xa39937f3,"iron.object.CameraObject.boot","iron/object/CameraObject.hx",163,0x9c38de71)
namespace iron{
namespace object{

void CameraObject_obj::__construct( ::iron::data::CameraData data){
            	HX_GC_STACKFRAME(&_hx_pos_d44c7901d1565a4b_9_new)
HXLINE(  20)		this->frustumPlanes = null();
HXLINE(  18)		this->prevV = null();
HXLINE(  31)		super::__construct();
HXLINE(  33)		this->data = data;
HXLINE(  39)		this->buildProjection(null());
HXLINE(  41)		this->V =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ));
HXLINE(  42)		this->VP =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ));
HXLINE(  44)		if (( (bool)(data->raw->frustum_culling) )) {
HXLINE(  45)			this->frustumPlanes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  46)			{
HXLINE(  46)				int _g = 0;
HXDLIN(  46)				while((_g < 6)){
HXLINE(  46)					_g = (_g + 1);
HXDLIN(  46)					int i = (_g - 1);
HXDLIN(  46)					::Array< ::Dynamic> _hx_tmp = this->frustumPlanes;
HXDLIN(  46)					_hx_tmp->push( ::iron::object::FrustumPlane_obj::__alloc( HX_CTX ));
            				}
            			}
            		}
HXLINE(  49)		::iron::Scene_obj::active->cameras->push(hx::ObjectPtr<OBJ_>(this));
            	}

Dynamic CameraObject_obj::__CreateEmpty() { return new CameraObject_obj; }

void *CameraObject_obj::_hx_vtable = 0;

Dynamic CameraObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CameraObject_obj > _hx_result = new CameraObject_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CameraObject_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x284f908f) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x284f908f;
	} else {
		return inClassId==(int)0x2a486766;
	}
}

void CameraObject_obj::buildProjection( ::Dynamic screenAspect){
            	HX_GC_STACKFRAME(&_hx_pos_d44c7901d1565a4b_52_buildProjection)
HXLINE(  53)		if (hx::IsNull( screenAspect )) {
HXLINE(  53)			int screenAspect1 = ::kha::System_obj::windowWidth(null());
HXDLIN(  53)			screenAspect = (( (Float)(screenAspect1) ) / ( (Float)(::kha::System_obj::windowHeight(null())) ));
            		}
HXLINE(  54)		 ::Dynamic aspect;
HXDLIN(  54)		if (hx::IsNotNull( this->data->raw->aspect )) {
HXLINE(  54)			aspect = this->data->raw->aspect;
            		}
            		else {
HXLINE(  54)			aspect = screenAspect;
            		}
HXLINE(  55)		if (hx::IsNotNull( this->data->raw->ortho_scale )) {
HXLINE(  56)			float sc = ( (float)(this->data->raw->ortho_scale) );
HXLINE(  57)			float left = ( (float)(((-1 * aspect) * sc)) );
HXDLIN(  57)			float right = ( (float)((aspect * sc)) );
HXDLIN(  57)			float bottom = (-1 * sc);
HXDLIN(  57)			float _hx_near = (-1 * this->data->raw->far_plane);
HXDLIN(  57)			float _hx_far = this->data->raw->far_plane;
HXDLIN(  57)			float rl = (right - left);
HXDLIN(  57)			float tb = (sc - bottom);
HXDLIN(  57)			float fn = (_hx_far - _hx_near);
HXDLIN(  57)			Float tx = (( (Float)(-((right + left))) ) / ( (Float)(rl) ));
HXDLIN(  57)			Float ty = (( (Float)(-((sc + bottom))) ) / ( (Float)(tb) ));
HXDLIN(  57)			Float tz = (( (Float)(-((_hx_far + _hx_near))) ) / ( (Float)(fn) ));
HXDLIN(  57)			this->P =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)((( (Float)(2) ) / ( (Float)(rl) ))) ),( (float)(0) ),( (float)(0) ),( (float)(tx) ),( (float)(0) ),( (float)((( (Float)(2) ) / ( (Float)(tb) ))) ),( (float)(0) ),( (float)(ty) ),( (float)(0) ),( (float)(0) ),( (float)((( (Float)(-2) ) / ( (Float)(fn) ))) ),( (float)(tz) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(1) ));
            		}
            		else {
HXLINE(  60)			float zn = this->data->raw->near_plane;
HXDLIN(  60)			float zf = this->data->raw->far_plane;
HXDLIN(  60)			Float uh = (((Float)1.0) / ::Math_obj::tan((( (Float)(this->data->raw->fov) ) / ( (Float)(2) ))));
HXDLIN(  60)			Float uw = (uh / ( (Float)(( (float)(aspect) )) ));
HXDLIN(  60)			this->P =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(uw) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(uh) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)((( (Float)((zf + zn)) ) / ( (Float)((zn - zf)) ))) ),( (float)((( (Float)(((2 * zf) * zn)) ) / ( (Float)((zn - zf)) ))) ),( (float)(0) ),( (float)(0) ),( (float)(-1) ),( (float)(0) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CameraObject_obj,buildProjection,(void))

void CameraObject_obj::remove(){
            	HX_STACKFRAME(&_hx_pos_d44c7901d1565a4b_67_remove)
HXLINE(  68)		::iron::Scene_obj::active->cameras->remove(hx::ObjectPtr<OBJ_>(this));
HXLINE(  69)		this->super::remove();
            	}


void CameraObject_obj::renderFrame(::Dynamic g){
            	HX_GC_STACKFRAME(&_hx_pos_d44c7901d1565a4b_72_renderFrame)
HXLINE(  78)		this->buildMatrix();
HXLINE(  81)		if (hx::IsNull( this->prevV )) {
HXLINE(  82)			this->prevV =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ));
HXLINE(  83)			{
HXLINE(  83)				 ::iron::math::Mat4 _this = this->prevV;
HXDLIN(  83)				 ::iron::math::Mat4 m = this->V;
HXDLIN(  83)				_this->self->_00 = m->self->_00;
HXDLIN(  83)				_this->self->_01 = m->self->_01;
HXDLIN(  83)				_this->self->_02 = m->self->_02;
HXDLIN(  83)				_this->self->_03 = m->self->_03;
HXDLIN(  83)				_this->self->_10 = m->self->_10;
HXDLIN(  83)				_this->self->_11 = m->self->_11;
HXDLIN(  83)				_this->self->_12 = m->self->_12;
HXDLIN(  83)				_this->self->_13 = m->self->_13;
HXDLIN(  83)				_this->self->_20 = m->self->_20;
HXDLIN(  83)				_this->self->_21 = m->self->_21;
HXDLIN(  83)				_this->self->_22 = m->self->_22;
HXDLIN(  83)				_this->self->_23 = m->self->_23;
HXDLIN(  83)				_this->self->_30 = m->self->_30;
HXDLIN(  83)				_this->self->_31 = m->self->_31;
HXDLIN(  83)				_this->self->_32 = m->self->_32;
HXDLIN(  83)				_this->self->_33 = m->self->_33;
            			}
            		}
HXLINE(  86)		::iron::RenderPath_obj::active->renderFrame(g);
HXLINE(  88)		{
HXLINE(  88)			 ::iron::math::Mat4 _this1 = this->prevV;
HXDLIN(  88)			 ::iron::math::Mat4 m1 = this->V;
HXDLIN(  88)			_this1->self->_00 = m1->self->_00;
HXDLIN(  88)			_this1->self->_01 = m1->self->_01;
HXDLIN(  88)			_this1->self->_02 = m1->self->_02;
HXDLIN(  88)			_this1->self->_03 = m1->self->_03;
HXDLIN(  88)			_this1->self->_10 = m1->self->_10;
HXDLIN(  88)			_this1->self->_11 = m1->self->_11;
HXDLIN(  88)			_this1->self->_12 = m1->self->_12;
HXDLIN(  88)			_this1->self->_13 = m1->self->_13;
HXDLIN(  88)			_this1->self->_20 = m1->self->_20;
HXDLIN(  88)			_this1->self->_21 = m1->self->_21;
HXDLIN(  88)			_this1->self->_22 = m1->self->_22;
HXDLIN(  88)			_this1->self->_23 = m1->self->_23;
HXDLIN(  88)			_this1->self->_30 = m1->self->_30;
HXDLIN(  88)			_this1->self->_31 = m1->self->_31;
HXDLIN(  88)			_this1->self->_32 = m1->self->_32;
HXDLIN(  88)			_this1->self->_33 = m1->self->_33;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(CameraObject_obj,renderFrame,(void))

void CameraObject_obj::buildMatrix(){
            	HX_STACKFRAME(&_hx_pos_d44c7901d1565a4b_107_buildMatrix)
HXLINE( 108)		this->transform->buildMatrix();
HXLINE( 112)		 ::iron::math::Mat4 _this = this->transform->world;
HXDLIN( 112)		float v = (_this->self->_00 * _this->self->_00);
HXDLIN( 112)		float v1 = (v + (_this->self->_10 * _this->self->_10));
HXDLIN( 112)		float v2 = (_this->self->_01 * _this->self->_01);
HXDLIN( 112)		float v3 = (v2 + (_this->self->_11 * _this->self->_11));
HXDLIN( 112)		float v4 = (_this->self->_02 * _this->self->_02);
HXDLIN( 112)		float v5 = (v4 + (_this->self->_12 * _this->self->_12));
HXDLIN( 112)		float sc_x = ( (float)(::Math_obj::sqrt(( (Float)((v1 + (_this->self->_20 * _this->self->_20))) ))) );
HXDLIN( 112)		float sc_y = ( (float)(::Math_obj::sqrt(( (Float)((v3 + (_this->self->_21 * _this->self->_21))) ))) );
HXDLIN( 112)		float sc_z = ( (float)(::Math_obj::sqrt(( (Float)((v5 + (_this->self->_22 * _this->self->_22))) ))) );
HXDLIN( 112)		float sc_w = ( (float)(((Float)1.0)) );
HXLINE( 113)		{
HXLINE( 113)			 ::iron::math::Vec4 _this1 = ::iron::object::CameraObject_obj::temp;
HXDLIN( 113)			_this1->x = ( (float)((((Float)1.0) / ( (Float)(sc_x) ))) );
HXDLIN( 113)			_this1->y = ( (float)((((Float)1.0) / ( (Float)(sc_y) ))) );
HXDLIN( 113)			_this1->z = ( (float)((((Float)1.0) / ( (Float)(sc_z) ))) );
HXDLIN( 113)			_this1->w = ( (float)(((Float)1.0)) );
            		}
HXLINE( 114)		{
HXLINE( 114)			 ::iron::math::Mat4 _this2 = this->transform->world;
HXDLIN( 114)			 ::iron::math::Vec4 v6 = ::iron::object::CameraObject_obj::temp;
HXDLIN( 114)			float x = v6->x;
HXDLIN( 114)			float y = v6->y;
HXDLIN( 114)			float z = v6->z;
HXDLIN( 114)			{
HXLINE( 114)				 ::iron::math::Mat4 _g = _this2;
HXDLIN( 114)				_g->self->_00 = (_g->self->_00 * x);
            			}
HXDLIN( 114)			{
HXLINE( 114)				 ::iron::math::Mat4 _g1 = _this2;
HXDLIN( 114)				_g1->self->_01 = (_g1->self->_01 * x);
            			}
HXDLIN( 114)			{
HXLINE( 114)				 ::iron::math::Mat4 _g2 = _this2;
HXDLIN( 114)				_g2->self->_02 = (_g2->self->_02 * x);
            			}
HXDLIN( 114)			{
HXLINE( 114)				 ::iron::math::Mat4 _g3 = _this2;
HXDLIN( 114)				_g3->self->_03 = (_g3->self->_03 * x);
            			}
HXDLIN( 114)			{
HXLINE( 114)				 ::iron::math::Mat4 _g4 = _this2;
HXDLIN( 114)				_g4->self->_10 = (_g4->self->_10 * y);
            			}
HXDLIN( 114)			{
HXLINE( 114)				 ::iron::math::Mat4 _g5 = _this2;
HXDLIN( 114)				_g5->self->_11 = (_g5->self->_11 * y);
            			}
HXDLIN( 114)			{
HXLINE( 114)				 ::iron::math::Mat4 _g6 = _this2;
HXDLIN( 114)				_g6->self->_12 = (_g6->self->_12 * y);
            			}
HXDLIN( 114)			{
HXLINE( 114)				 ::iron::math::Mat4 _g7 = _this2;
HXDLIN( 114)				_g7->self->_13 = (_g7->self->_13 * y);
            			}
HXDLIN( 114)			{
HXLINE( 114)				 ::iron::math::Mat4 _g8 = _this2;
HXDLIN( 114)				_g8->self->_20 = (_g8->self->_20 * z);
            			}
HXDLIN( 114)			{
HXLINE( 114)				 ::iron::math::Mat4 _g9 = _this2;
HXDLIN( 114)				_g9->self->_21 = (_g9->self->_21 * z);
            			}
HXDLIN( 114)			{
HXLINE( 114)				 ::iron::math::Mat4 _g10 = _this2;
HXDLIN( 114)				_g10->self->_22 = (_g10->self->_22 * z);
            			}
HXDLIN( 114)			{
HXLINE( 114)				 ::iron::math::Mat4 _g11 = _this2;
HXDLIN( 114)				_g11->self->_23 = (_g11->self->_23 * z);
            			}
            		}
HXLINE( 116)		{
HXLINE( 116)			 ::iron::math::Mat4 _this3 = this->V;
HXDLIN( 116)			 ::iron::math::Mat4 m = this->transform->world;
HXDLIN( 116)			float a00 = m->self->_00;
HXDLIN( 116)			float a01 = m->self->_01;
HXDLIN( 116)			float a02 = m->self->_02;
HXDLIN( 116)			float a03 = m->self->_03;
HXDLIN( 116)			float a10 = m->self->_10;
HXDLIN( 116)			float a11 = m->self->_11;
HXDLIN( 116)			float a12 = m->self->_12;
HXDLIN( 116)			float a13 = m->self->_13;
HXDLIN( 116)			float a20 = m->self->_20;
HXDLIN( 116)			float a21 = m->self->_21;
HXDLIN( 116)			float a22 = m->self->_22;
HXDLIN( 116)			float a23 = m->self->_23;
HXDLIN( 116)			float a30 = m->self->_30;
HXDLIN( 116)			float a31 = m->self->_31;
HXDLIN( 116)			float a32 = m->self->_32;
HXDLIN( 116)			float a33 = m->self->_33;
HXDLIN( 116)			float b00 = ((a00 * a11) - (a01 * a10));
HXDLIN( 116)			float b01 = ((a00 * a12) - (a02 * a10));
HXDLIN( 116)			float b02 = ((a00 * a13) - (a03 * a10));
HXDLIN( 116)			float b03 = ((a01 * a12) - (a02 * a11));
HXDLIN( 116)			float b04 = ((a01 * a13) - (a03 * a11));
HXDLIN( 116)			float b05 = ((a02 * a13) - (a03 * a12));
HXDLIN( 116)			float b06 = ((a20 * a31) - (a21 * a30));
HXDLIN( 116)			float b07 = ((a20 * a32) - (a22 * a30));
HXDLIN( 116)			float b08 = ((a20 * a33) - (a23 * a30));
HXDLIN( 116)			float b09 = ((a21 * a32) - (a22 * a31));
HXDLIN( 116)			float b10 = ((a21 * a33) - (a23 * a31));
HXDLIN( 116)			float b11 = ((a22 * a33) - (a23 * a32));
HXDLIN( 116)			float det = ((((((b00 * b11) - (b01 * b10)) + (b02 * b09)) + (b03 * b08)) - (b04 * b07)) + (b05 * b06));
HXDLIN( 116)			if ((det == ((Float)0.0))) {
HXLINE( 116)				_this3->self->_00 = ( (float)(((Float)1.0)) );
HXDLIN( 116)				_this3->self->_01 = ( (float)(((Float)0.0)) );
HXDLIN( 116)				_this3->self->_02 = ( (float)(((Float)0.0)) );
HXDLIN( 116)				_this3->self->_03 = ( (float)(((Float)0.0)) );
HXDLIN( 116)				_this3->self->_10 = ( (float)(((Float)0.0)) );
HXDLIN( 116)				_this3->self->_11 = ( (float)(((Float)1.0)) );
HXDLIN( 116)				_this3->self->_12 = ( (float)(((Float)0.0)) );
HXDLIN( 116)				_this3->self->_13 = ( (float)(((Float)0.0)) );
HXDLIN( 116)				_this3->self->_20 = ( (float)(((Float)0.0)) );
HXDLIN( 116)				_this3->self->_21 = ( (float)(((Float)0.0)) );
HXDLIN( 116)				_this3->self->_22 = ( (float)(((Float)1.0)) );
HXDLIN( 116)				_this3->self->_23 = ( (float)(((Float)0.0)) );
HXDLIN( 116)				_this3->self->_30 = ( (float)(((Float)0.0)) );
HXDLIN( 116)				_this3->self->_31 = ( (float)(((Float)0.0)) );
HXDLIN( 116)				_this3->self->_32 = ( (float)(((Float)0.0)) );
HXDLIN( 116)				_this3->self->_33 = ( (float)(((Float)1.0)) );
            			}
            			else {
HXLINE( 262)				det = ( (float)((((Float)1.0) / ( (Float)(det) ))) );
HXLINE( 116)				_this3->self->_00 = ((((a11 * b11) - (a12 * b10)) + (a13 * b09)) * det);
HXDLIN( 116)				_this3->self->_01 = ((((a02 * b10) - (a01 * b11)) - (a03 * b09)) * det);
HXDLIN( 116)				_this3->self->_02 = ((((a31 * b05) - (a32 * b04)) + (a33 * b03)) * det);
HXDLIN( 116)				_this3->self->_03 = ((((a22 * b04) - (a21 * b05)) - (a23 * b03)) * det);
HXDLIN( 116)				_this3->self->_10 = ((((a12 * b08) - (a10 * b11)) - (a13 * b07)) * det);
HXDLIN( 116)				_this3->self->_11 = ((((a00 * b11) - (a02 * b08)) + (a03 * b07)) * det);
HXDLIN( 116)				_this3->self->_12 = ((((a32 * b02) - (a30 * b05)) - (a33 * b01)) * det);
HXDLIN( 116)				_this3->self->_13 = ((((a20 * b05) - (a22 * b02)) + (a23 * b01)) * det);
HXDLIN( 116)				_this3->self->_20 = ((((a10 * b10) - (a11 * b08)) + (a13 * b06)) * det);
HXDLIN( 116)				_this3->self->_21 = ((((a01 * b08) - (a00 * b10)) - (a03 * b06)) * det);
HXDLIN( 116)				_this3->self->_22 = ((((a30 * b04) - (a31 * b02)) + (a33 * b00)) * det);
HXDLIN( 116)				_this3->self->_23 = ((((a21 * b02) - (a20 * b04)) - (a23 * b00)) * det);
HXDLIN( 116)				_this3->self->_30 = ((((a11 * b07) - (a10 * b09)) - (a12 * b06)) * det);
HXDLIN( 116)				_this3->self->_31 = ((((a00 * b09) - (a01 * b07)) + (a02 * b06)) * det);
HXDLIN( 116)				_this3->self->_32 = ((((a31 * b01) - (a30 * b03)) - (a32 * b00)) * det);
HXDLIN( 116)				_this3->self->_33 = ((((a20 * b03) - (a21 * b01)) + (a22 * b00)) * det);
            			}
            		}
HXLINE( 138)		{
HXLINE( 138)			 ::iron::math::Mat4 _this4 = this->VP;
HXDLIN( 138)			 ::iron::math::Mat4 b = this->P;
HXDLIN( 138)			 ::iron::math::Mat4 a = this->V;
HXDLIN( 138)			float a001 = a->self->_00;
HXDLIN( 138)			float a011 = a->self->_01;
HXDLIN( 138)			float a021 = a->self->_02;
HXDLIN( 138)			float a031 = a->self->_03;
HXDLIN( 138)			float a101 = a->self->_10;
HXDLIN( 138)			float a111 = a->self->_11;
HXDLIN( 138)			float a121 = a->self->_12;
HXDLIN( 138)			float a131 = a->self->_13;
HXDLIN( 138)			float a201 = a->self->_20;
HXDLIN( 138)			float a211 = a->self->_21;
HXDLIN( 138)			float a221 = a->self->_22;
HXDLIN( 138)			float a231 = a->self->_23;
HXDLIN( 138)			float a301 = a->self->_30;
HXDLIN( 138)			float a311 = a->self->_31;
HXDLIN( 138)			float a321 = a->self->_32;
HXDLIN( 138)			float a331 = a->self->_33;
HXDLIN( 138)			float b0 = b->self->_00;
HXDLIN( 138)			float b1 = b->self->_10;
HXDLIN( 138)			float b2 = b->self->_20;
HXDLIN( 138)			float b3 = b->self->_30;
HXDLIN( 138)			_this4->self->_00 = ((((a001 * b0) + (a011 * b1)) + (a021 * b2)) + (a031 * b3));
HXDLIN( 138)			_this4->self->_10 = ((((a101 * b0) + (a111 * b1)) + (a121 * b2)) + (a131 * b3));
HXDLIN( 138)			_this4->self->_20 = ((((a201 * b0) + (a211 * b1)) + (a221 * b2)) + (a231 * b3));
HXDLIN( 138)			_this4->self->_30 = ((((a301 * b0) + (a311 * b1)) + (a321 * b2)) + (a331 * b3));
HXLINE( 186)			b0 = b->self->_01;
HXDLIN( 186)			b1 = b->self->_11;
HXDLIN( 186)			b2 = b->self->_21;
HXDLIN( 186)			b3 = b->self->_31;
HXLINE( 138)			_this4->self->_01 = ((((a001 * b0) + (a011 * b1)) + (a021 * b2)) + (a031 * b3));
HXDLIN( 138)			_this4->self->_11 = ((((a101 * b0) + (a111 * b1)) + (a121 * b2)) + (a131 * b3));
HXDLIN( 138)			_this4->self->_21 = ((((a201 * b0) + (a211 * b1)) + (a221 * b2)) + (a231 * b3));
HXDLIN( 138)			_this4->self->_31 = ((((a301 * b0) + (a311 * b1)) + (a321 * b2)) + (a331 * b3));
HXLINE( 192)			b0 = b->self->_02;
HXDLIN( 192)			b1 = b->self->_12;
HXDLIN( 192)			b2 = b->self->_22;
HXDLIN( 192)			b3 = b->self->_32;
HXLINE( 138)			_this4->self->_02 = ((((a001 * b0) + (a011 * b1)) + (a021 * b2)) + (a031 * b3));
HXDLIN( 138)			_this4->self->_12 = ((((a101 * b0) + (a111 * b1)) + (a121 * b2)) + (a131 * b3));
HXDLIN( 138)			_this4->self->_22 = ((((a201 * b0) + (a211 * b1)) + (a221 * b2)) + (a231 * b3));
HXDLIN( 138)			_this4->self->_32 = ((((a301 * b0) + (a311 * b1)) + (a321 * b2)) + (a331 * b3));
HXLINE( 198)			b0 = b->self->_03;
HXDLIN( 198)			b1 = b->self->_13;
HXDLIN( 198)			b2 = b->self->_23;
HXDLIN( 198)			b3 = b->self->_33;
HXLINE( 138)			_this4->self->_03 = ((((a001 * b0) + (a011 * b1)) + (a021 * b2)) + (a031 * b3));
HXDLIN( 138)			_this4->self->_13 = ((((a101 * b0) + (a111 * b1)) + (a121 * b2)) + (a131 * b3));
HXDLIN( 138)			_this4->self->_23 = ((((a201 * b0) + (a211 * b1)) + (a221 * b2)) + (a231 * b3));
HXDLIN( 138)			_this4->self->_33 = ((((a301 * b0) + (a311 * b1)) + (a321 * b2)) + (a331 * b3));
            		}
HXLINE( 141)		if (( (bool)(this->data->raw->frustum_culling) )) {
HXLINE( 142)			::iron::object::CameraObject_obj::buildViewFrustum(this->VP,this->frustumPlanes);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CameraObject_obj,buildMatrix,(void))

void CameraObject_obj::rotate( ::iron::math::Vec4 axis,Float f){
            	HX_STACKFRAME(&_hx_pos_d44c7901d1565a4b_177_rotate)
HXLINE( 178)		{
HXLINE( 178)			 ::iron::math::Quat _this = ::iron::object::CameraObject_obj::q;
HXDLIN( 178)			float s = ( (float)(::Math_obj::sin((f * ((Float)0.5)))) );
HXDLIN( 178)			_this->x = (axis->x * s);
HXDLIN( 178)			_this->y = (axis->y * s);
HXDLIN( 178)			_this->z = (axis->z * s);
HXDLIN( 178)			_this->w = ( (float)(::Math_obj::cos((f * ((Float)0.5)))) );
HXDLIN( 178)			{
HXLINE( 178)				float v = (_this->x * _this->x);
HXDLIN( 178)				float v1 = (v + (_this->y * _this->y));
HXDLIN( 178)				float v2 = (v1 + (_this->z * _this->z));
HXDLIN( 178)				Float l = ::Math_obj::sqrt(( (Float)((v2 + (_this->w * _this->w))) ));
HXDLIN( 178)				if ((l == ((Float)0.0))) {
HXLINE( 178)					_this->x = ( (float)(0) );
HXDLIN( 178)					_this->y = ( (float)(0) );
HXDLIN( 178)					_this->z = ( (float)(0) );
HXDLIN( 178)					_this->w = ( (float)(0) );
            				}
            				else {
HXLINE( 178)					l = (((Float)1.0) / l);
HXDLIN( 178)					 ::iron::math::Quat _this1 = _this;
HXDLIN( 178)					_this1->x = (_this1->x * l);
HXDLIN( 178)					 ::iron::math::Quat _this2 = _this;
HXDLIN( 178)					_this2->y = (_this2->y * l);
HXDLIN( 178)					 ::iron::math::Quat _this3 = _this;
HXDLIN( 178)					_this3->z = (_this3->z * l);
HXDLIN( 178)					 ::iron::math::Quat _this4 = _this;
HXDLIN( 178)					_this4->w = (_this4->w * l);
            				}
            			}
            		}
HXLINE( 179)		{
HXLINE( 179)			 ::iron::math::Quat _this5 = this->transform->rot;
HXDLIN( 179)			 ::iron::math::Quat q1 = ::iron::object::CameraObject_obj::q;
HXDLIN( 179)			 ::iron::math::Quat q2 = this->transform->rot;
HXDLIN( 179)			float q1x = q1->x;
HXDLIN( 179)			float q1y = q1->y;
HXDLIN( 179)			float q1z = q1->z;
HXDLIN( 179)			float q1w = q1->w;
HXDLIN( 179)			float q2x = q2->x;
HXDLIN( 179)			float q2y = q2->y;
HXDLIN( 179)			float q2z = q2->z;
HXDLIN( 179)			float q2w = q2->w;
HXDLIN( 179)			_this5->x = ((((q1x * q2w) + (q1w * q2x)) + (q1y * q2z)) - (q1z * q2y));
HXDLIN( 179)			_this5->y = ((((q1w * q2y) - (q1x * q2z)) + (q1y * q2w)) + (q1z * q2x));
HXDLIN( 179)			_this5->z = ((((q1w * q2z) + (q1x * q2y)) - (q1y * q2x)) + (q1z * q2w));
HXDLIN( 179)			_this5->w = ((((q1w * q2w) - (q1x * q2x)) - (q1y * q2y)) - (q1z * q2z));
            		}
HXLINE( 180)		this->buildMatrix();
            	}


HX_DEFINE_DYNAMIC_FUNC2(CameraObject_obj,rotate,(void))

void CameraObject_obj::move( ::iron::math::Vec4 axis,hx::Null< Float >  __o_f){
Float f = __o_f.Default(((Float)1.0));
            	HX_STACKFRAME(&_hx_pos_d44c7901d1565a4b_183_move)
HXLINE( 184)		{
HXLINE( 184)			 ::iron::math::Vec4 _this = this->transform->loc;
HXDLIN( 184)			 ::iron::math::Vec4 _this1 = _this;
HXDLIN( 184)			_this1->x = (_this1->x + ( (float)((axis->x * f)) ));
HXDLIN( 184)			 ::iron::math::Vec4 _this2 = _this;
HXDLIN( 184)			_this2->y = (_this2->y + ( (float)((axis->y * f)) ));
HXDLIN( 184)			 ::iron::math::Vec4 _this3 = _this;
HXDLIN( 184)			_this3->z = (_this3->z + ( (float)((axis->z * f)) ));
            		}
HXLINE( 185)		this->buildMatrix();
            	}


HX_DEFINE_DYNAMIC_FUNC2(CameraObject_obj,move,(void))

 ::iron::math::Vec4 CameraObject_obj::right(){
            	HX_GC_STACKFRAME(&_hx_pos_d44c7901d1565a4b_188_right)
HXDLIN( 188)		return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,this->transform->local->self->_00,this->transform->local->self->_01,this->transform->local->self->_02,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(CameraObject_obj,right,return )

 ::iron::math::Vec4 CameraObject_obj::up(){
            	HX_GC_STACKFRAME(&_hx_pos_d44c7901d1565a4b_189_up)
HXDLIN( 189)		return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,this->transform->local->self->_10,this->transform->local->self->_11,this->transform->local->self->_12,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(CameraObject_obj,up,return )

 ::iron::math::Vec4 CameraObject_obj::look(){
            	HX_GC_STACKFRAME(&_hx_pos_d44c7901d1565a4b_190_look)
HXDLIN( 190)		return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,-(this->transform->local->self->_20),-(this->transform->local->self->_21),-(this->transform->local->self->_22),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(CameraObject_obj,look,return )

 ::iron::math::Vec4 CameraObject_obj::rightWorld(){
            	HX_GC_STACKFRAME(&_hx_pos_d44c7901d1565a4b_191_rightWorld)
HXDLIN( 191)		return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,this->transform->world->self->_00,this->transform->world->self->_01,this->transform->world->self->_02,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(CameraObject_obj,rightWorld,return )

 ::iron::math::Vec4 CameraObject_obj::upWorld(){
            	HX_GC_STACKFRAME(&_hx_pos_d44c7901d1565a4b_192_upWorld)
HXDLIN( 192)		return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,this->transform->world->self->_10,this->transform->world->self->_11,this->transform->world->self->_12,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(CameraObject_obj,upWorld,return )

 ::iron::math::Vec4 CameraObject_obj::lookWorld(){
            	HX_GC_STACKFRAME(&_hx_pos_d44c7901d1565a4b_193_lookWorld)
HXDLIN( 193)		return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,-(this->transform->world->self->_20),-(this->transform->world->self->_21),-(this->transform->world->self->_22),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(CameraObject_obj,lookWorld,return )

::String CameraObject_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_d44c7901d1565a4b_195_toString)
HXDLIN( 195)		return (HX_("Camera Object ",06,5c,1f,3c) + this->name);
            	}


 ::iron::math::Vec4 CameraObject_obj::temp;

 ::iron::math::Quat CameraObject_obj::q;

void CameraObject_obj::buildViewFrustum( ::iron::math::Mat4 VP,::Array< ::Dynamic> frustumPlanes){
            	HX_STACKFRAME(&_hx_pos_d44c7901d1565a4b_146_buildViewFrustum)
HXLINE( 148)		{
HXLINE( 148)			 ::iron::object::FrustumPlane _this = frustumPlanes->__get(0).StaticCast<  ::iron::object::FrustumPlane >();
HXDLIN( 148)			{
HXLINE( 148)				 ::iron::math::Vec4 _this1 = _this->normal;
HXDLIN( 148)				_this1->x = ( (float)(( (Float)((VP->self->_03 + VP->self->_00)) )) );
HXDLIN( 148)				_this1->y = ( (float)(( (Float)((VP->self->_13 + VP->self->_10)) )) );
HXDLIN( 148)				_this1->z = ( (float)(( (Float)((VP->self->_23 + VP->self->_20)) )) );
HXDLIN( 148)				_this1->w = ( (float)(((Float)1.0)) );
            			}
HXDLIN( 148)			_this->constant = ( (Float)((VP->self->_33 + VP->self->_30)) );
            		}
HXLINE( 150)		{
HXLINE( 150)			 ::iron::object::FrustumPlane _this2 = frustumPlanes->__get(1).StaticCast<  ::iron::object::FrustumPlane >();
HXDLIN( 150)			{
HXLINE( 150)				 ::iron::math::Vec4 _this3 = _this2->normal;
HXDLIN( 150)				_this3->x = ( (float)(( (Float)((VP->self->_03 - VP->self->_00)) )) );
HXDLIN( 150)				_this3->y = ( (float)(( (Float)((VP->self->_13 - VP->self->_10)) )) );
HXDLIN( 150)				_this3->z = ( (float)(( (Float)((VP->self->_23 - VP->self->_20)) )) );
HXDLIN( 150)				_this3->w = ( (float)(((Float)1.0)) );
            			}
HXDLIN( 150)			_this2->constant = ( (Float)((VP->self->_33 - VP->self->_30)) );
            		}
HXLINE( 152)		{
HXLINE( 152)			 ::iron::object::FrustumPlane _this4 = frustumPlanes->__get(2).StaticCast<  ::iron::object::FrustumPlane >();
HXDLIN( 152)			{
HXLINE( 152)				 ::iron::math::Vec4 _this5 = _this4->normal;
HXDLIN( 152)				_this5->x = ( (float)(( (Float)((VP->self->_03 - VP->self->_01)) )) );
HXDLIN( 152)				_this5->y = ( (float)(( (Float)((VP->self->_13 - VP->self->_11)) )) );
HXDLIN( 152)				_this5->z = ( (float)(( (Float)((VP->self->_23 - VP->self->_21)) )) );
HXDLIN( 152)				_this5->w = ( (float)(((Float)1.0)) );
            			}
HXDLIN( 152)			_this4->constant = ( (Float)((VP->self->_33 - VP->self->_31)) );
            		}
HXLINE( 154)		{
HXLINE( 154)			 ::iron::object::FrustumPlane _this6 = frustumPlanes->__get(3).StaticCast<  ::iron::object::FrustumPlane >();
HXDLIN( 154)			{
HXLINE( 154)				 ::iron::math::Vec4 _this7 = _this6->normal;
HXDLIN( 154)				_this7->x = ( (float)(( (Float)((VP->self->_03 + VP->self->_01)) )) );
HXDLIN( 154)				_this7->y = ( (float)(( (Float)((VP->self->_13 + VP->self->_11)) )) );
HXDLIN( 154)				_this7->z = ( (float)(( (Float)((VP->self->_23 + VP->self->_21)) )) );
HXDLIN( 154)				_this7->w = ( (float)(((Float)1.0)) );
            			}
HXDLIN( 154)			_this6->constant = ( (Float)((VP->self->_33 + VP->self->_31)) );
            		}
HXLINE( 156)		{
HXLINE( 156)			 ::iron::object::FrustumPlane _this8 = frustumPlanes->__get(4).StaticCast<  ::iron::object::FrustumPlane >();
HXDLIN( 156)			{
HXLINE( 156)				 ::iron::math::Vec4 _this9 = _this8->normal;
HXDLIN( 156)				_this9->x = ( (float)(( (Float)(VP->self->_02) )) );
HXDLIN( 156)				_this9->y = ( (float)(( (Float)(VP->self->_12) )) );
HXDLIN( 156)				_this9->z = ( (float)(( (Float)(VP->self->_22) )) );
HXDLIN( 156)				_this9->w = ( (float)(((Float)1.0)) );
            			}
HXDLIN( 156)			_this8->constant = ( (Float)(VP->self->_32) );
            		}
HXLINE( 158)		{
HXLINE( 158)			 ::iron::object::FrustumPlane _this10 = frustumPlanes->__get(5).StaticCast<  ::iron::object::FrustumPlane >();
HXDLIN( 158)			{
HXLINE( 158)				 ::iron::math::Vec4 _this11 = _this10->normal;
HXDLIN( 158)				_this11->x = ( (float)(( (Float)((VP->self->_03 - VP->self->_02)) )) );
HXDLIN( 158)				_this11->y = ( (float)(( (Float)((VP->self->_13 - VP->self->_12)) )) );
HXDLIN( 158)				_this11->z = ( (float)(( (Float)((VP->self->_23 - VP->self->_22)) )) );
HXDLIN( 158)				_this11->w = ( (float)(((Float)1.0)) );
            			}
HXDLIN( 158)			_this10->constant = ( (Float)((VP->self->_33 - VP->self->_32)) );
            		}
HXLINE( 160)		{
HXLINE( 160)			int _g = 0;
HXDLIN( 160)			while((_g < frustumPlanes->length)){
HXLINE( 160)				 ::iron::object::FrustumPlane plane = frustumPlanes->__get(_g).StaticCast<  ::iron::object::FrustumPlane >();
HXDLIN( 160)				_g = (_g + 1);
HXDLIN( 160)				plane->normalize();
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CameraObject_obj,buildViewFrustum,(void))

 ::iron::math::Vec4 CameraObject_obj::sphereCenter;

bool CameraObject_obj::sphereInFrustum(::Array< ::Dynamic> frustumPlanes, ::iron::object::Transform t,hx::Null< Float >  __o_radiusScale,hx::Null< Float >  __o_offsetX,hx::Null< Float >  __o_offsetY,hx::Null< Float >  __o_offsetZ){
Float radiusScale = __o_radiusScale.Default(((Float)1.0));
Float offsetX = __o_offsetX.Default(((Float)0.0));
Float offsetY = __o_offsetY.Default(((Float)0.0));
Float offsetZ = __o_offsetZ.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_d44c7901d1565a4b_164_sphereInFrustum)
HXLINE( 166)		Float radius = (t->radius * radiusScale);
HXLINE( 167)		{
HXLINE( 167)			int _g = 0;
HXDLIN( 167)			while((_g < frustumPlanes->length)){
HXLINE( 167)				 ::iron::object::FrustumPlane plane = frustumPlanes->__get(_g).StaticCast<  ::iron::object::FrustumPlane >();
HXDLIN( 167)				_g = (_g + 1);
HXLINE( 168)				{
HXLINE( 168)					 ::iron::math::Vec4 _this = ::iron::object::CameraObject_obj::sphereCenter;
HXDLIN( 168)					_this->x = ( (float)((t->world->self->_30 + offsetX)) );
HXDLIN( 168)					_this->y = ( (float)((t->world->self->_31 + offsetY)) );
HXDLIN( 168)					_this->z = ( (float)((t->world->self->_32 + offsetZ)) );
HXDLIN( 168)					_this->w = ( (float)(((Float)1.0)) );
            				}
HXLINE( 170)				Float _hx_tmp = plane->distanceToSphere(::iron::object::CameraObject_obj::sphereCenter,radius);
HXDLIN( 170)				if (((_hx_tmp + (radius * 2)) < 0)) {
HXLINE( 171)					return false;
            				}
            			}
            		}
HXLINE( 174)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(CameraObject_obj,sphereInFrustum,return )


hx::ObjectPtr< CameraObject_obj > CameraObject_obj::__new( ::iron::data::CameraData data) {
	hx::ObjectPtr< CameraObject_obj > __this = new CameraObject_obj();
	__this->__construct(data);
	return __this;
}

hx::ObjectPtr< CameraObject_obj > CameraObject_obj::__alloc(hx::Ctx *_hx_ctx, ::iron::data::CameraData data) {
	CameraObject_obj *__this = (CameraObject_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CameraObject_obj), true, "iron.object.CameraObject"));
	*(void **)__this = CameraObject_obj::_hx_vtable;
	__this->__construct(data);
	return __this;
}

CameraObject_obj::CameraObject_obj()
{
}

void CameraObject_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CameraObject);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(P,"P");
	HX_MARK_MEMBER_NAME(V,"V");
	HX_MARK_MEMBER_NAME(prevV,"prevV");
	HX_MARK_MEMBER_NAME(VP,"VP");
	HX_MARK_MEMBER_NAME(frustumPlanes,"frustumPlanes");
	 ::iron::object::Object_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CameraObject_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(P,"P");
	HX_VISIT_MEMBER_NAME(V,"V");
	HX_VISIT_MEMBER_NAME(prevV,"prevV");
	HX_VISIT_MEMBER_NAME(VP,"VP");
	HX_VISIT_MEMBER_NAME(frustumPlanes,"frustumPlanes");
	 ::iron::object::Object_obj::__Visit(HX_VISIT_ARG);
}

hx::Val CameraObject_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"P") ) { return hx::Val( P ); }
		if (HX_FIELD_EQ(inName,"V") ) { return hx::Val( V ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"VP") ) { return hx::Val( VP ); }
		if (HX_FIELD_EQ(inName,"up") ) { return hx::Val( up_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data ); }
		if (HX_FIELD_EQ(inName,"move") ) { return hx::Val( move_dyn() ); }
		if (HX_FIELD_EQ(inName,"look") ) { return hx::Val( look_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"prevV") ) { return hx::Val( prevV ); }
		if (HX_FIELD_EQ(inName,"right") ) { return hx::Val( right_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"rotate") ) { return hx::Val( rotate_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"upWorld") ) { return hx::Val( upWorld_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"lookWorld") ) { return hx::Val( lookWorld_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rightWorld") ) { return hx::Val( rightWorld_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"renderFrame") ) { return hx::Val( renderFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"buildMatrix") ) { return hx::Val( buildMatrix_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"frustumPlanes") ) { return hx::Val( frustumPlanes ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"buildProjection") ) { return hx::Val( buildProjection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CameraObject_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"q") ) { outValue = ( q ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"temp") ) { outValue = ( temp ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sphereCenter") ) { outValue = ( sphereCenter ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sphereInFrustum") ) { outValue = sphereInFrustum_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"buildViewFrustum") ) { outValue = buildViewFrustum_dyn(); return true; }
	}
	return false;
}

hx::Val CameraObject_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"P") ) { P=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"V") ) { V=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"VP") ) { VP=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::iron::data::CameraData >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"prevV") ) { prevV=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"frustumPlanes") ) { frustumPlanes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool CameraObject_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"q") ) { q=ioValue.Cast<  ::iron::math::Quat >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"temp") ) { temp=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sphereCenter") ) { sphereCenter=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
	}
	return false;
}

void CameraObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("P",50,00,00,00));
	outFields->push(HX_("V",56,00,00,00));
	outFields->push(HX_("prevV",03,56,88,c8));
	outFields->push(HX_("VP",3a,4b,00,00));
	outFields->push(HX_("frustumPlanes",99,03,66,33));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo CameraObject_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::data::CameraData*/ ,(int)offsetof(CameraObject_obj,data),HX_("data",2a,56,63,42)},
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(CameraObject_obj,P),HX_("P",50,00,00,00)},
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(CameraObject_obj,V),HX_("V",56,00,00,00)},
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(CameraObject_obj,prevV),HX_("prevV",03,56,88,c8)},
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(CameraObject_obj,VP),HX_("VP",3a,4b,00,00)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(CameraObject_obj,frustumPlanes),HX_("frustumPlanes",99,03,66,33)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo CameraObject_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &CameraObject_obj::temp,HX_("temp",14,c3,f9,4c)},
	{hx::fsObject /*::iron::math::Quat*/ ,(void *) &CameraObject_obj::q,HX_("q",71,00,00,00)},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &CameraObject_obj::sphereCenter,HX_("sphereCenter",c2,90,aa,5c)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String CameraObject_obj_sMemberFields[] = {
	HX_("data",2a,56,63,42),
	HX_("P",50,00,00,00),
	HX_("V",56,00,00,00),
	HX_("prevV",03,56,88,c8),
	HX_("VP",3a,4b,00,00),
	HX_("frustumPlanes",99,03,66,33),
	HX_("buildProjection",5d,6d,5e,6c),
	HX_("remove",44,9c,88,04),
	HX_("renderFrame",f7,a4,34,d2),
	HX_("buildMatrix",0f,1c,39,0c),
	HX_("rotate",5b,46,20,cb),
	HX_("move",11,e3,60,48),
	HX_("right",dc,0b,64,e9),
	HX_("up",5b,66,00,00),
	HX_("look",5f,a6,b7,47),
	HX_("rightWorld",d6,7c,29,d1),
	HX_("upWorld",f7,b5,d9,2a),
	HX_("lookWorld",73,e7,47,fc),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

static void CameraObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CameraObject_obj::temp,"temp");
	HX_MARK_MEMBER_NAME(CameraObject_obj::q,"q");
	HX_MARK_MEMBER_NAME(CameraObject_obj::sphereCenter,"sphereCenter");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CameraObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CameraObject_obj::temp,"temp");
	HX_VISIT_MEMBER_NAME(CameraObject_obj::q,"q");
	HX_VISIT_MEMBER_NAME(CameraObject_obj::sphereCenter,"sphereCenter");
};

#endif

hx::Class CameraObject_obj::__mClass;

static ::String CameraObject_obj_sStaticFields[] = {
	HX_("temp",14,c3,f9,4c),
	HX_("q",71,00,00,00),
	HX_("buildViewFrustum",ef,d2,42,e3),
	HX_("sphereCenter",c2,90,aa,5c),
	HX_("sphereInFrustum",30,f1,52,f8),
	::String(null())
};

void CameraObject_obj::__register()
{
	CameraObject_obj _hx_dummy;
	CameraObject_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.object.CameraObject",4d,44,d5,23);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CameraObject_obj::__GetStatic;
	__mClass->mSetStaticField = &CameraObject_obj::__SetStatic;
	__mClass->mMarkFunc = CameraObject_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CameraObject_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CameraObject_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CameraObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CameraObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CameraObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CameraObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CameraObject_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_d44c7901d1565a4b_21_boot)
HXDLIN(  21)		temp =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d44c7901d1565a4b_22_boot)
HXDLIN(  22)		q =  ::iron::math::Quat_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d44c7901d1565a4b_163_boot)
HXDLIN( 163)		sphereCenter =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
}

} // end namespace iron
} // end namespace object
