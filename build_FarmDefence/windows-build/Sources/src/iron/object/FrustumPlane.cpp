// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <hxinc/iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_object_FrustumPlane
#include <hxinc/iron/object/FrustumPlane.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e18e0914b47657d8_198_new,"iron.object.FrustumPlane","new",0xde2e5315,"iron.object.FrustumPlane.new","iron/object/CameraObject.hx",198,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_e18e0914b47657d8_204_normalize,"iron.object.FrustumPlane","normalize",0xb5f63002,"iron.object.FrustumPlane.normalize","iron/object/CameraObject.hx",204,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_e18e0914b47657d8_211_distanceToSphere,"iron.object.FrustumPlane","distanceToSphere",0x40ee9368,"iron.object.FrustumPlane.distanceToSphere","iron/object/CameraObject.hx",211,0x9c38de71)
HX_LOCAL_STACK_FRAME(_hx_pos_e18e0914b47657d8_214_setComponents,"iron.object.FrustumPlane","setComponents",0x7da9ca4d,"iron.object.FrustumPlane.setComponents","iron/object/CameraObject.hx",214,0x9c38de71)
namespace iron{
namespace object{

void FrustumPlane_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_e18e0914b47657d8_198_new)
HXLINE( 200)		this->constant = ((Float)0.0);
HXLINE( 199)		this->normal =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,((Float)1.0),((Float)0.0),((Float)0.0),null());
            	}

Dynamic FrustumPlane_obj::__CreateEmpty() { return new FrustumPlane_obj; }

void *FrustumPlane_obj::_hx_vtable = 0;

Dynamic FrustumPlane_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FrustumPlane_obj > _hx_result = new FrustumPlane_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FrustumPlane_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x31c08381;
}

void FrustumPlane_obj::normalize(){
            	HX_STACKFRAME(&_hx_pos_e18e0914b47657d8_204_normalize)
HXLINE( 205)		 ::iron::math::Vec4 _this = this->normal;
HXDLIN( 205)		float v = (_this->x * _this->x);
HXDLIN( 205)		float v1 = (v + (_this->y * _this->y));
HXDLIN( 205)		Float inverseNormalLength = (((Float)1.0) / ( (Float)(( (float)(::Math_obj::sqrt(( (Float)((v1 + (_this->z * _this->z))) ))) )) ));
HXLINE( 206)		{
HXLINE( 206)			 ::iron::math::Vec4 _this1 = this->normal;
HXDLIN( 206)			 ::iron::math::Vec4 _this2 = _this1;
HXDLIN( 206)			_this2->x = (_this2->x * inverseNormalLength);
HXDLIN( 206)			 ::iron::math::Vec4 _this3 = _this1;
HXDLIN( 206)			_this3->y = (_this3->y * inverseNormalLength);
HXDLIN( 206)			 ::iron::math::Vec4 _this4 = _this1;
HXDLIN( 206)			_this4->z = (_this4->z * inverseNormalLength);
            		}
HXLINE( 207)		 ::iron::object::FrustumPlane _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 207)		_hx_tmp->constant = (_hx_tmp->constant * inverseNormalLength);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FrustumPlane_obj,normalize,(void))

Float FrustumPlane_obj::distanceToSphere( ::iron::math::Vec4 sphereCenter,Float sphereRadius){
            	HX_STACKFRAME(&_hx_pos_e18e0914b47657d8_211_distanceToSphere)
HXDLIN( 211)		 ::iron::math::Vec4 _this = this->normal;
HXDLIN( 211)		float _hx_tmp = (_this->x * sphereCenter->x);
HXDLIN( 211)		float _hx_tmp1 = (_hx_tmp + (_this->y * sphereCenter->y));
HXDLIN( 211)		return (((_hx_tmp1 + (_this->z * sphereCenter->z)) + this->constant) - sphereRadius);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FrustumPlane_obj,distanceToSphere,return )

void FrustumPlane_obj::setComponents(Float x,Float y,Float z,Float w){
            	HX_STACKFRAME(&_hx_pos_e18e0914b47657d8_214_setComponents)
HXLINE( 215)		{
HXLINE( 215)			 ::iron::math::Vec4 _this = this->normal;
HXDLIN( 215)			_this->x = ( (float)(x) );
HXDLIN( 215)			_this->y = ( (float)(y) );
HXDLIN( 215)			_this->z = ( (float)(z) );
HXDLIN( 215)			_this->w = ( (float)(((Float)1.0)) );
            		}
HXLINE( 216)		this->constant = w;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FrustumPlane_obj,setComponents,(void))


hx::ObjectPtr< FrustumPlane_obj > FrustumPlane_obj::__new() {
	hx::ObjectPtr< FrustumPlane_obj > __this = new FrustumPlane_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< FrustumPlane_obj > FrustumPlane_obj::__alloc(hx::Ctx *_hx_ctx) {
	FrustumPlane_obj *__this = (FrustumPlane_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FrustumPlane_obj), true, "iron.object.FrustumPlane"));
	*(void **)__this = FrustumPlane_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FrustumPlane_obj::FrustumPlane_obj()
{
}

void FrustumPlane_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FrustumPlane);
	HX_MARK_MEMBER_NAME(normal,"normal");
	HX_MARK_MEMBER_NAME(constant,"constant");
	HX_MARK_END_CLASS();
}

void FrustumPlane_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(normal,"normal");
	HX_VISIT_MEMBER_NAME(constant,"constant");
}

hx::Val FrustumPlane_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"normal") ) { return hx::Val( normal ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"constant") ) { return hx::Val( constant ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"normalize") ) { return hx::Val( normalize_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setComponents") ) { return hx::Val( setComponents_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"distanceToSphere") ) { return hx::Val( distanceToSphere_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FrustumPlane_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"normal") ) { normal=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"constant") ) { constant=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FrustumPlane_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("normal",27,72,69,30));
	outFields->push(HX_("constant",64,c1,9d,a5));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo FrustumPlane_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(FrustumPlane_obj,normal),HX_("normal",27,72,69,30)},
	{hx::fsFloat,(int)offsetof(FrustumPlane_obj,constant),HX_("constant",64,c1,9d,a5)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FrustumPlane_obj_sStaticStorageInfo = 0;
#endif

static ::String FrustumPlane_obj_sMemberFields[] = {
	HX_("normal",27,72,69,30),
	HX_("constant",64,c1,9d,a5),
	HX_("normalize",8d,37,a1,ab),
	HX_("distanceToSphere",3d,63,26,96),
	HX_("setComponents",58,f3,96,fb),
	::String(null()) };

hx::Class FrustumPlane_obj::__mClass;

void FrustumPlane_obj::__register()
{
	FrustumPlane_obj _hx_dummy;
	FrustumPlane_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.object.FrustumPlane",a3,24,40,58);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FrustumPlane_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FrustumPlane_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FrustumPlane_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FrustumPlane_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace object
