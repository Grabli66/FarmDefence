// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_iron_Scene
#include <hxinc/iron/Scene.h>
#endif
#ifndef INCLUDED_iron_data_CameraData
#include <hxinc/iron/data/CameraData.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <hxinc/iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_data_LightData
#include <hxinc/iron/data/LightData.h>
#endif
#ifndef INCLUDED_iron_data_TCameraData
#include <hxinc/iron/data/TCameraData.h>
#endif
#ifndef INCLUDED_iron_data_TLightData
#include <hxinc/iron/data/TLightData.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <hxinc/iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <hxinc/iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_object_CameraObject
#include <hxinc/iron/object/CameraObject.h>
#endif
#ifndef INCLUDED_iron_object_FrustumPlane
#include <hxinc/iron/object/FrustumPlane.h>
#endif
#ifndef INCLUDED_iron_object_LightObject
#include <hxinc/iron/object/LightObject.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <hxinc/iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <hxinc/iron/object/Transform.h>
#endif
#ifndef INCLUDED_kha_System
#include <hxinc/kha/System.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ff63d2941c613727_10_new,"iron.object.LightObject","new",0xb6ecb23e,"iron.object.LightObject.new","iron/object/LightObject.hx",10,0xa9e4c912)
HX_LOCAL_STACK_FRAME(_hx_pos_ff63d2941c613727_58_remove,"iron.object.LightObject","remove",0xc8afb926,"iron.object.LightObject.remove","iron/object/LightObject.hx",58,0xa9e4c912)
HX_LOCAL_STACK_FRAME(_hx_pos_ff63d2941c613727_75_buildMatrices,"iron.object.LightObject","buildMatrices",0x83710a46,"iron.object.LightObject.buildMatrices","iron/object/LightObject.hx",75,0xa9e4c912)
HX_LOCAL_STACK_FRAME(_hx_pos_ff63d2941c613727_90_setCascade,"iron.object.LightObject","setCascade",0x658d0e94,"iron.object.LightObject.setCascade","iron/object/LightObject.hx",90,0xa9e4c912)
HX_LOCAL_STACK_FRAME(_hx_pos_ff63d2941c613727_207_updateViewFrustum,"iron.object.LightObject","updateViewFrustum",0x812c5a52,"iron.object.LightObject.updateViewFrustum","iron/object/LightObject.hx",207,0xa9e4c912)
HX_LOCAL_STACK_FRAME(_hx_pos_ff63d2941c613727_223_setCubeFace,"iron.object.LightObject","setCubeFace",0xfe6df5d2,"iron.object.LightObject.setCubeFace","iron/object/LightObject.hx",223,0xa9e4c912)
HX_LOCAL_STACK_FRAME(_hx_pos_ff63d2941c613727_295_right,"iron.object.LightObject","right",0x215fa13a,"iron.object.LightObject.right","iron/object/LightObject.hx",295,0xa9e4c912)
HX_LOCAL_STACK_FRAME(_hx_pos_ff63d2941c613727_296_up,"iron.object.LightObject","up",0xd09aea3d,"iron.object.LightObject.up","iron/object/LightObject.hx",296,0xa9e4c912)
HX_LOCAL_STACK_FRAME(_hx_pos_ff63d2941c613727_297_look,"iron.object.LightObject","look",0x56e466c1,"iron.object.LightObject.look","iron/object/LightObject.hx",297,0xa9e4c912)
HX_LOCAL_STACK_FRAME(_hx_pos_ff63d2941c613727_299_toString,"iron.object.LightObject","toString",0xaa406a0e,"iron.object.LightObject.toString","iron/object/LightObject.hx",299,0xa9e4c912)
HX_LOCAL_STACK_FRAME(_hx_pos_ff63d2941c613727_63_setCorners,"iron.object.LightObject","setCorners",0x726df55e,"iron.object.LightObject.setCorners","iron/object/LightObject.hx",63,0xa9e4c912)
HX_LOCAL_STACK_FRAME(_hx_pos_ff63d2941c613727_88_mix,"iron.object.LightObject","mix",0xb6ebf37a,"iron.object.LightObject.mix","iron/object/LightObject.hx",88,0xa9e4c912)
HX_LOCAL_STACK_FRAME(_hx_pos_ff63d2941c613727_12_boot,"iron.object.LightObject","boot",0x50484494,"iron.object.LightObject.boot","iron/object/LightObject.hx",12,0xa9e4c912)
HX_LOCAL_STACK_FRAME(_hx_pos_ff63d2941c613727_13_boot,"iron.object.LightObject","boot",0x50484494,"iron.object.LightObject.boot","iron/object/LightObject.hx",13,0xa9e4c912)
HX_LOCAL_STACK_FRAME(_hx_pos_ff63d2941c613727_14_boot,"iron.object.LightObject","boot",0x50484494,"iron.object.LightObject.boot","iron/object/LightObject.hx",14,0xa9e4c912)
HX_LOCAL_STACK_FRAME(_hx_pos_ff63d2941c613727_31_boot,"iron.object.LightObject","boot",0x50484494,"iron.object.LightObject.boot","iron/object/LightObject.hx",31,0xa9e4c912)
HX_LOCAL_STACK_FRAME(_hx_pos_ff63d2941c613727_74_boot,"iron.object.LightObject","boot",0x50484494,"iron.object.LightObject.boot","iron/object/LightObject.hx",74,0xa9e4c912)
HX_LOCAL_STACK_FRAME(_hx_pos_ff63d2941c613727_220_boot,"iron.object.LightObject","boot",0x50484494,"iron.object.LightObject.boot","iron/object/LightObject.hx",220,0xa9e4c912)
HX_LOCAL_STACK_FRAME(_hx_pos_ff63d2941c613727_221_boot,"iron.object.LightObject","boot",0x50484494,"iron.object.LightObject.boot","iron/object/LightObject.hx",221,0xa9e4c912)
HX_LOCAL_STACK_FRAME(_hx_pos_ff63d2941c613727_222_boot,"iron.object.LightObject","boot",0x50484494,"iron.object.LightObject.boot","iron/object/LightObject.hx",222,0xa9e4c912)
namespace iron{
namespace object{

void LightObject_obj::__construct( ::iron::data::LightData data){
            	HX_GC_STACKFRAME(&_hx_pos_ff63d2941c613727_10_new)
HXLINE(  30)		this->frustumPlanes = null();
HXLINE(  28)		this->VP =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ));
HXLINE(  27)		this->P = null();
HXLINE(  26)		this->V =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ));
HXLINE(  21)		this->camSlicedP = null();
HXLINE(  34)		super::__construct();
HXLINE(  36)		this->data = data;
HXLINE(  38)		::String type = data->raw->type;
HXLINE(  39)		 ::Dynamic fov = data->raw->fov;
HXLINE(  41)		if ((type == HX_("sun",8c,a9,57,00))) {
HXLINE(  42)			if (hx::IsNull( ::iron::object::LightObject_obj::corners )) {
HXLINE(  43)				::iron::object::LightObject_obj::corners = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  44)				{
HXLINE(  44)					int _g = 0;
HXDLIN(  44)					while((_g < 8)){
HXLINE(  44)						_g = (_g + 1);
HXDLIN(  44)						int i = (_g - 1);
HXDLIN(  44)						::Array< ::Dynamic> _hx_tmp = ::iron::object::LightObject_obj::corners;
HXDLIN(  44)						_hx_tmp->push( ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null()));
            					}
            				}
            			}
HXLINE(  46)			this->P =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ));
            		}
            		else {
HXLINE(  48)			bool _hx_tmp1;
HXDLIN(  48)			if ((type != HX_("point",50,b4,8f,c6))) {
HXLINE(  48)				_hx_tmp1 = (type == HX_("area",8d,8b,74,40));
            			}
            			else {
HXLINE(  48)				_hx_tmp1 = true;
            			}
HXDLIN(  48)			if (_hx_tmp1) {
HXLINE(  49)				float zn = ( (float)(data->raw->near_plane) );
HXDLIN(  49)				float zf = ( (float)(data->raw->far_plane) );
HXDLIN(  49)				Float uh = (((Float)1.0) / ::Math_obj::tan((( (Float)(( (float)(fov) )) ) / ( (Float)(2) ))));
HXDLIN(  49)				Float uw = (uh / ( (Float)(1) ));
HXDLIN(  49)				this->P =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(uw) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(uh) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)((( (Float)((zf + zn)) ) / ( (Float)((zn - zf)) ))) ),( (float)((( (Float)(((2 * zf) * zn)) ) / ( (Float)((zn - zf)) ))) ),( (float)(0) ),( (float)(0) ),( (float)(-1) ),( (float)(0) ));
            			}
            			else {
HXLINE(  51)				if ((type == HX_("spot",02,e7,58,4c))) {
HXLINE(  52)					float zn1 = ( (float)(data->raw->near_plane) );
HXDLIN(  52)					float zf1 = ( (float)(data->raw->far_plane) );
HXDLIN(  52)					Float uh1 = (((Float)1.0) / ::Math_obj::tan((( (Float)(( (float)(fov) )) ) / ( (Float)(2) ))));
HXDLIN(  52)					Float uw1 = (uh1 / ( (Float)(1) ));
HXDLIN(  52)					this->P =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(uw1) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(uh1) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)((( (Float)((zf1 + zn1)) ) / ( (Float)((zn1 - zf1)) ))) ),( (float)((( (Float)(((2 * zf1) * zn1)) ) / ( (Float)((zn1 - zf1)) ))) ),( (float)(0) ),( (float)(0) ),( (float)(-1) ),( (float)(0) ));
            				}
            			}
            		}
HXLINE(  55)		::iron::Scene_obj::active->lights->push(hx::ObjectPtr<OBJ_>(this));
            	}

Dynamic LightObject_obj::__CreateEmpty() { return new LightObject_obj; }

void *LightObject_obj::_hx_vtable = 0;

Dynamic LightObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< LightObject_obj > _hx_result = new LightObject_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool LightObject_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2a486766) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2a486766;
	} else {
		return inClassId==(int)0x2aaced4a;
	}
}

void LightObject_obj::remove(){
            	HX_STACKFRAME(&_hx_pos_ff63d2941c613727_58_remove)
HXLINE(  59)		if (hx::IsNotNull( ::iron::Scene_obj::active )) {
HXLINE(  59)			::iron::Scene_obj::active->lights->remove(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(  60)		this->super::remove();
            	}


void LightObject_obj::buildMatrices( ::iron::object::CameraObject camera){
            	HX_STACKFRAME(&_hx_pos_ff63d2941c613727_75_buildMatrices)
HXLINE(  76)		this->transform->buildMatrix();
HXLINE(  77)		if ((this->data->raw->type == HX_("sun",8c,a9,57,00))) {
HXLINE(  79)			this->setCascade(camera,0);
            		}
            		else {
HXLINE(  83)			{
HXLINE(  83)				 ::iron::math::Mat4 _this = this->V;
HXDLIN(  83)				 ::iron::math::Mat4 m = this->transform->world;
HXDLIN(  83)				float a00 = m->self->_00;
HXDLIN(  83)				float a01 = m->self->_01;
HXDLIN(  83)				float a02 = m->self->_02;
HXDLIN(  83)				float a03 = m->self->_03;
HXDLIN(  83)				float a10 = m->self->_10;
HXDLIN(  83)				float a11 = m->self->_11;
HXDLIN(  83)				float a12 = m->self->_12;
HXDLIN(  83)				float a13 = m->self->_13;
HXDLIN(  83)				float a20 = m->self->_20;
HXDLIN(  83)				float a21 = m->self->_21;
HXDLIN(  83)				float a22 = m->self->_22;
HXDLIN(  83)				float a23 = m->self->_23;
HXDLIN(  83)				float a30 = m->self->_30;
HXDLIN(  83)				float a31 = m->self->_31;
HXDLIN(  83)				float a32 = m->self->_32;
HXDLIN(  83)				float a33 = m->self->_33;
HXDLIN(  83)				float b00 = ((a00 * a11) - (a01 * a10));
HXDLIN(  83)				float b01 = ((a00 * a12) - (a02 * a10));
HXDLIN(  83)				float b02 = ((a00 * a13) - (a03 * a10));
HXDLIN(  83)				float b03 = ((a01 * a12) - (a02 * a11));
HXDLIN(  83)				float b04 = ((a01 * a13) - (a03 * a11));
HXDLIN(  83)				float b05 = ((a02 * a13) - (a03 * a12));
HXDLIN(  83)				float b06 = ((a20 * a31) - (a21 * a30));
HXDLIN(  83)				float b07 = ((a20 * a32) - (a22 * a30));
HXDLIN(  83)				float b08 = ((a20 * a33) - (a23 * a30));
HXDLIN(  83)				float b09 = ((a21 * a32) - (a22 * a31));
HXDLIN(  83)				float b10 = ((a21 * a33) - (a23 * a31));
HXDLIN(  83)				float b11 = ((a22 * a33) - (a23 * a32));
HXDLIN(  83)				float det = ((((((b00 * b11) - (b01 * b10)) + (b02 * b09)) + (b03 * b08)) - (b04 * b07)) + (b05 * b06));
HXDLIN(  83)				if ((det == ((Float)0.0))) {
HXLINE(  83)					_this->self->_00 = ( (float)(((Float)1.0)) );
HXDLIN(  83)					_this->self->_01 = ( (float)(((Float)0.0)) );
HXDLIN(  83)					_this->self->_02 = ( (float)(((Float)0.0)) );
HXDLIN(  83)					_this->self->_03 = ( (float)(((Float)0.0)) );
HXDLIN(  83)					_this->self->_10 = ( (float)(((Float)0.0)) );
HXDLIN(  83)					_this->self->_11 = ( (float)(((Float)1.0)) );
HXDLIN(  83)					_this->self->_12 = ( (float)(((Float)0.0)) );
HXDLIN(  83)					_this->self->_13 = ( (float)(((Float)0.0)) );
HXDLIN(  83)					_this->self->_20 = ( (float)(((Float)0.0)) );
HXDLIN(  83)					_this->self->_21 = ( (float)(((Float)0.0)) );
HXDLIN(  83)					_this->self->_22 = ( (float)(((Float)1.0)) );
HXDLIN(  83)					_this->self->_23 = ( (float)(((Float)0.0)) );
HXDLIN(  83)					_this->self->_30 = ( (float)(((Float)0.0)) );
HXDLIN(  83)					_this->self->_31 = ( (float)(((Float)0.0)) );
HXDLIN(  83)					_this->self->_32 = ( (float)(((Float)0.0)) );
HXDLIN(  83)					_this->self->_33 = ( (float)(((Float)1.0)) );
            				}
            				else {
HXLINE(  83)					det = ( (float)((((Float)1.0) / ( (Float)(det) ))) );
HXDLIN(  83)					_this->self->_00 = ((((a11 * b11) - (a12 * b10)) + (a13 * b09)) * det);
HXDLIN(  83)					_this->self->_01 = ((((a02 * b10) - (a01 * b11)) - (a03 * b09)) * det);
HXDLIN(  83)					_this->self->_02 = ((((a31 * b05) - (a32 * b04)) + (a33 * b03)) * det);
HXDLIN(  83)					_this->self->_03 = ((((a22 * b04) - (a21 * b05)) - (a23 * b03)) * det);
HXDLIN(  83)					_this->self->_10 = ((((a12 * b08) - (a10 * b11)) - (a13 * b07)) * det);
HXDLIN(  83)					_this->self->_11 = ((((a00 * b11) - (a02 * b08)) + (a03 * b07)) * det);
HXDLIN(  83)					_this->self->_12 = ((((a32 * b02) - (a30 * b05)) - (a33 * b01)) * det);
HXDLIN(  83)					_this->self->_13 = ((((a20 * b05) - (a22 * b02)) + (a23 * b01)) * det);
HXDLIN(  83)					_this->self->_20 = ((((a10 * b10) - (a11 * b08)) + (a13 * b06)) * det);
HXDLIN(  83)					_this->self->_21 = ((((a01 * b08) - (a00 * b10)) - (a03 * b06)) * det);
HXDLIN(  83)					_this->self->_22 = ((((a30 * b04) - (a31 * b02)) + (a33 * b00)) * det);
HXDLIN(  83)					_this->self->_23 = ((((a21 * b02) - (a20 * b04)) - (a23 * b00)) * det);
HXDLIN(  83)					_this->self->_30 = ((((a11 * b07) - (a10 * b09)) - (a12 * b06)) * det);
HXDLIN(  83)					_this->self->_31 = ((((a00 * b09) - (a01 * b07)) + (a02 * b06)) * det);
HXDLIN(  83)					_this->self->_32 = ((((a31 * b01) - (a30 * b03)) - (a32 * b00)) * det);
HXDLIN(  83)					_this->self->_33 = ((((a20 * b03) - (a21 * b01)) + (a22 * b00)) * det);
            				}
            			}
HXLINE(  84)			this->updateViewFrustum(camera);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(LightObject_obj,buildMatrices,(void))

void LightObject_obj::setCascade( ::iron::object::CameraObject camera,int cascade){
            	HX_GC_STACKFRAME(&_hx_pos_ff63d2941c613727_90_setCascade)
HXLINE(  95)		{
HXLINE(  95)			 ::iron::math::Mat4 _this = ::iron::object::LightObject_obj::m;
HXDLIN(  95)			 ::iron::math::Mat4 m = camera->V;
HXDLIN(  95)			_this->self->_00 = m->self->_00;
HXDLIN(  95)			_this->self->_01 = m->self->_01;
HXDLIN(  95)			_this->self->_02 = m->self->_02;
HXDLIN(  95)			_this->self->_03 = m->self->_03;
HXDLIN(  95)			_this->self->_10 = m->self->_10;
HXDLIN(  95)			_this->self->_11 = m->self->_11;
HXDLIN(  95)			_this->self->_12 = m->self->_12;
HXDLIN(  95)			_this->self->_13 = m->self->_13;
HXDLIN(  95)			_this->self->_20 = m->self->_20;
HXDLIN(  95)			_this->self->_21 = m->self->_21;
HXDLIN(  95)			_this->self->_22 = m->self->_22;
HXDLIN(  95)			_this->self->_23 = m->self->_23;
HXDLIN(  95)			_this->self->_30 = m->self->_30;
HXDLIN(  95)			_this->self->_31 = m->self->_31;
HXDLIN(  95)			_this->self->_32 = m->self->_32;
HXDLIN(  95)			_this->self->_33 = m->self->_33;
            		}
HXLINE( 124)		if (hx::IsNull( this->camSlicedP )) {
HXLINE( 125)			float fov = camera->data->raw->fov;
HXLINE( 126)			 ::Dynamic _hx_near = this->data->raw->near_plane;
HXLINE( 127)			 ::Dynamic _hx_far = this->data->raw->far_plane;
HXLINE( 128)			 ::Dynamic aspect;
HXDLIN( 128)			if (hx::IsNotNull( camera->data->raw->aspect )) {
HXLINE( 128)				aspect = camera->data->raw->aspect;
            			}
            			else {
HXLINE( 128)				int aspect1 = ::kha::System_obj::windowWidth(null());
HXDLIN( 128)				aspect = (( (Float)(aspect1) ) / ( (Float)(::kha::System_obj::windowHeight(null())) ));
            			}
HXLINE( 129)			float zn = ( (float)(_hx_near) );
HXDLIN( 129)			float zf = ( (float)(_hx_far) );
HXDLIN( 129)			Float uh = (((Float)1.0) / ::Math_obj::tan((( (Float)(fov) ) / ( (Float)(2) ))));
HXDLIN( 129)			Float uw = (uh / ( (Float)(( (float)(aspect) )) ));
HXDLIN( 129)			this->camSlicedP =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(uw) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(uh) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)((( (Float)((zf + zn)) ) / ( (Float)((zn - zf)) ))) ),( (float)((( (Float)(((2 * zf) * zn)) ) / ( (Float)((zn - zf)) ))) ),( (float)(0) ),( (float)(0) ),( (float)(-1) ),( (float)(0) ));
            		}
HXLINE( 131)		{
HXLINE( 131)			 ::iron::math::Mat4 _this1 = ::iron::object::LightObject_obj::m;
HXDLIN( 131)			 ::iron::math::Mat4 m1 = this->camSlicedP;
HXDLIN( 131)			float a00 = _this1->self->_00;
HXDLIN( 131)			float a01 = _this1->self->_01;
HXDLIN( 131)			float a02 = _this1->self->_02;
HXDLIN( 131)			float a03 = _this1->self->_03;
HXDLIN( 131)			float a10 = _this1->self->_10;
HXDLIN( 131)			float a11 = _this1->self->_11;
HXDLIN( 131)			float a12 = _this1->self->_12;
HXDLIN( 131)			float a13 = _this1->self->_13;
HXDLIN( 131)			float a20 = _this1->self->_20;
HXDLIN( 131)			float a21 = _this1->self->_21;
HXDLIN( 131)			float a22 = _this1->self->_22;
HXDLIN( 131)			float a23 = _this1->self->_23;
HXDLIN( 131)			float a30 = _this1->self->_30;
HXDLIN( 131)			float a31 = _this1->self->_31;
HXDLIN( 131)			float a32 = _this1->self->_32;
HXDLIN( 131)			float a33 = _this1->self->_33;
HXDLIN( 131)			float b0 = m1->self->_00;
HXDLIN( 131)			float b1 = m1->self->_10;
HXDLIN( 131)			float b2 = m1->self->_20;
HXDLIN( 131)			float b3 = m1->self->_30;
HXDLIN( 131)			_this1->self->_00 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 131)			_this1->self->_10 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 131)			_this1->self->_20 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 131)			_this1->self->_30 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN( 131)			b0 = m1->self->_01;
HXDLIN( 131)			b1 = m1->self->_11;
HXDLIN( 131)			b2 = m1->self->_21;
HXDLIN( 131)			b3 = m1->self->_31;
HXDLIN( 131)			_this1->self->_01 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 131)			_this1->self->_11 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 131)			_this1->self->_21 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 131)			_this1->self->_31 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN( 131)			b0 = m1->self->_02;
HXDLIN( 131)			b1 = m1->self->_12;
HXDLIN( 131)			b2 = m1->self->_22;
HXDLIN( 131)			b3 = m1->self->_32;
HXDLIN( 131)			_this1->self->_02 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 131)			_this1->self->_12 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 131)			_this1->self->_22 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 131)			_this1->self->_32 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN( 131)			b0 = m1->self->_03;
HXDLIN( 131)			b1 = m1->self->_13;
HXDLIN( 131)			b2 = m1->self->_23;
HXDLIN( 131)			b3 = m1->self->_33;
HXDLIN( 131)			_this1->self->_03 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 131)			_this1->self->_13 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 131)			_this1->self->_23 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 131)			_this1->self->_33 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
            		}
HXLINE( 134)		{
HXLINE( 134)			 ::iron::math::Mat4 _this2 = ::iron::object::LightObject_obj::m;
HXDLIN( 134)			 ::iron::math::Mat4 m2 = ::iron::object::LightObject_obj::m;
HXDLIN( 134)			float a001 = m2->self->_00;
HXDLIN( 134)			float a011 = m2->self->_01;
HXDLIN( 134)			float a021 = m2->self->_02;
HXDLIN( 134)			float a031 = m2->self->_03;
HXDLIN( 134)			float a101 = m2->self->_10;
HXDLIN( 134)			float a111 = m2->self->_11;
HXDLIN( 134)			float a121 = m2->self->_12;
HXDLIN( 134)			float a131 = m2->self->_13;
HXDLIN( 134)			float a201 = m2->self->_20;
HXDLIN( 134)			float a211 = m2->self->_21;
HXDLIN( 134)			float a221 = m2->self->_22;
HXDLIN( 134)			float a231 = m2->self->_23;
HXDLIN( 134)			float a301 = m2->self->_30;
HXDLIN( 134)			float a311 = m2->self->_31;
HXDLIN( 134)			float a321 = m2->self->_32;
HXDLIN( 134)			float a331 = m2->self->_33;
HXDLIN( 134)			float b00 = ((a001 * a111) - (a011 * a101));
HXDLIN( 134)			float b01 = ((a001 * a121) - (a021 * a101));
HXDLIN( 134)			float b02 = ((a001 * a131) - (a031 * a101));
HXDLIN( 134)			float b03 = ((a011 * a121) - (a021 * a111));
HXDLIN( 134)			float b04 = ((a011 * a131) - (a031 * a111));
HXDLIN( 134)			float b05 = ((a021 * a131) - (a031 * a121));
HXDLIN( 134)			float b06 = ((a201 * a311) - (a211 * a301));
HXDLIN( 134)			float b07 = ((a201 * a321) - (a221 * a301));
HXDLIN( 134)			float b08 = ((a201 * a331) - (a231 * a301));
HXDLIN( 134)			float b09 = ((a211 * a321) - (a221 * a311));
HXDLIN( 134)			float b10 = ((a211 * a331) - (a231 * a311));
HXDLIN( 134)			float b11 = ((a221 * a331) - (a231 * a321));
HXDLIN( 134)			float det = ((((((b00 * b11) - (b01 * b10)) + (b02 * b09)) + (b03 * b08)) - (b04 * b07)) + (b05 * b06));
HXDLIN( 134)			if ((det == ((Float)0.0))) {
HXLINE( 134)				_this2->self->_00 = ( (float)(((Float)1.0)) );
HXDLIN( 134)				_this2->self->_01 = ( (float)(((Float)0.0)) );
HXDLIN( 134)				_this2->self->_02 = ( (float)(((Float)0.0)) );
HXDLIN( 134)				_this2->self->_03 = ( (float)(((Float)0.0)) );
HXDLIN( 134)				_this2->self->_10 = ( (float)(((Float)0.0)) );
HXDLIN( 134)				_this2->self->_11 = ( (float)(((Float)1.0)) );
HXDLIN( 134)				_this2->self->_12 = ( (float)(((Float)0.0)) );
HXDLIN( 134)				_this2->self->_13 = ( (float)(((Float)0.0)) );
HXDLIN( 134)				_this2->self->_20 = ( (float)(((Float)0.0)) );
HXDLIN( 134)				_this2->self->_21 = ( (float)(((Float)0.0)) );
HXDLIN( 134)				_this2->self->_22 = ( (float)(((Float)1.0)) );
HXDLIN( 134)				_this2->self->_23 = ( (float)(((Float)0.0)) );
HXDLIN( 134)				_this2->self->_30 = ( (float)(((Float)0.0)) );
HXDLIN( 134)				_this2->self->_31 = ( (float)(((Float)0.0)) );
HXDLIN( 134)				_this2->self->_32 = ( (float)(((Float)0.0)) );
HXDLIN( 134)				_this2->self->_33 = ( (float)(((Float)1.0)) );
            			}
            			else {
HXLINE( 134)				det = ( (float)((((Float)1.0) / ( (Float)(det) ))) );
HXDLIN( 134)				_this2->self->_00 = ((((a111 * b11) - (a121 * b10)) + (a131 * b09)) * det);
HXDLIN( 134)				_this2->self->_01 = ((((a021 * b10) - (a011 * b11)) - (a031 * b09)) * det);
HXDLIN( 134)				_this2->self->_02 = ((((a311 * b05) - (a321 * b04)) + (a331 * b03)) * det);
HXDLIN( 134)				_this2->self->_03 = ((((a221 * b04) - (a211 * b05)) - (a231 * b03)) * det);
HXDLIN( 134)				_this2->self->_10 = ((((a121 * b08) - (a101 * b11)) - (a131 * b07)) * det);
HXDLIN( 134)				_this2->self->_11 = ((((a001 * b11) - (a021 * b08)) + (a031 * b07)) * det);
HXDLIN( 134)				_this2->self->_12 = ((((a321 * b02) - (a301 * b05)) - (a331 * b01)) * det);
HXDLIN( 134)				_this2->self->_13 = ((((a201 * b05) - (a221 * b02)) + (a231 * b01)) * det);
HXDLIN( 134)				_this2->self->_20 = ((((a101 * b10) - (a111 * b08)) + (a131 * b06)) * det);
HXDLIN( 134)				_this2->self->_21 = ((((a011 * b08) - (a001 * b10)) - (a031 * b06)) * det);
HXDLIN( 134)				_this2->self->_22 = ((((a301 * b04) - (a311 * b02)) + (a331 * b00)) * det);
HXDLIN( 134)				_this2->self->_23 = ((((a211 * b02) - (a201 * b04)) - (a231 * b00)) * det);
HXDLIN( 134)				_this2->self->_30 = ((((a111 * b07) - (a101 * b09)) - (a121 * b06)) * det);
HXDLIN( 134)				_this2->self->_31 = ((((a001 * b09) - (a011 * b07)) + (a021 * b06)) * det);
HXDLIN( 134)				_this2->self->_32 = ((((a311 * b01) - (a301 * b03)) - (a321 * b00)) * det);
HXDLIN( 134)				_this2->self->_33 = ((((a201 * b03) - (a211 * b01)) + (a221 * b00)) * det);
            			}
            		}
HXLINE( 135)		{
HXLINE( 135)			 ::iron::math::Mat4 _this3 = this->V;
HXDLIN( 135)			 ::iron::math::Mat4 m3 = this->transform->world;
HXDLIN( 135)			float a002 = m3->self->_00;
HXDLIN( 135)			float a012 = m3->self->_01;
HXDLIN( 135)			float a022 = m3->self->_02;
HXDLIN( 135)			float a032 = m3->self->_03;
HXDLIN( 135)			float a102 = m3->self->_10;
HXDLIN( 135)			float a112 = m3->self->_11;
HXDLIN( 135)			float a122 = m3->self->_12;
HXDLIN( 135)			float a132 = m3->self->_13;
HXDLIN( 135)			float a202 = m3->self->_20;
HXDLIN( 135)			float a212 = m3->self->_21;
HXDLIN( 135)			float a222 = m3->self->_22;
HXDLIN( 135)			float a232 = m3->self->_23;
HXDLIN( 135)			float a302 = m3->self->_30;
HXDLIN( 135)			float a312 = m3->self->_31;
HXDLIN( 135)			float a322 = m3->self->_32;
HXDLIN( 135)			float a332 = m3->self->_33;
HXDLIN( 135)			float b001 = ((a002 * a112) - (a012 * a102));
HXDLIN( 135)			float b011 = ((a002 * a122) - (a022 * a102));
HXDLIN( 135)			float b021 = ((a002 * a132) - (a032 * a102));
HXDLIN( 135)			float b031 = ((a012 * a122) - (a022 * a112));
HXDLIN( 135)			float b041 = ((a012 * a132) - (a032 * a112));
HXDLIN( 135)			float b051 = ((a022 * a132) - (a032 * a122));
HXDLIN( 135)			float b061 = ((a202 * a312) - (a212 * a302));
HXDLIN( 135)			float b071 = ((a202 * a322) - (a222 * a302));
HXDLIN( 135)			float b081 = ((a202 * a332) - (a232 * a302));
HXDLIN( 135)			float b091 = ((a212 * a322) - (a222 * a312));
HXDLIN( 135)			float b101 = ((a212 * a332) - (a232 * a312));
HXDLIN( 135)			float b111 = ((a222 * a332) - (a232 * a322));
HXDLIN( 135)			float det1 = ((((((b001 * b111) - (b011 * b101)) + (b021 * b091)) + (b031 * b081)) - (b041 * b071)) + (b051 * b061));
HXDLIN( 135)			if ((det1 == ((Float)0.0))) {
HXLINE( 135)				_this3->self->_00 = ( (float)(((Float)1.0)) );
HXDLIN( 135)				_this3->self->_01 = ( (float)(((Float)0.0)) );
HXDLIN( 135)				_this3->self->_02 = ( (float)(((Float)0.0)) );
HXDLIN( 135)				_this3->self->_03 = ( (float)(((Float)0.0)) );
HXDLIN( 135)				_this3->self->_10 = ( (float)(((Float)0.0)) );
HXDLIN( 135)				_this3->self->_11 = ( (float)(((Float)1.0)) );
HXDLIN( 135)				_this3->self->_12 = ( (float)(((Float)0.0)) );
HXDLIN( 135)				_this3->self->_13 = ( (float)(((Float)0.0)) );
HXDLIN( 135)				_this3->self->_20 = ( (float)(((Float)0.0)) );
HXDLIN( 135)				_this3->self->_21 = ( (float)(((Float)0.0)) );
HXDLIN( 135)				_this3->self->_22 = ( (float)(((Float)1.0)) );
HXDLIN( 135)				_this3->self->_23 = ( (float)(((Float)0.0)) );
HXDLIN( 135)				_this3->self->_30 = ( (float)(((Float)0.0)) );
HXDLIN( 135)				_this3->self->_31 = ( (float)(((Float)0.0)) );
HXDLIN( 135)				_this3->self->_32 = ( (float)(((Float)0.0)) );
HXDLIN( 135)				_this3->self->_33 = ( (float)(((Float)1.0)) );
            			}
            			else {
HXLINE( 135)				det1 = ( (float)((((Float)1.0) / ( (Float)(det1) ))) );
HXDLIN( 135)				_this3->self->_00 = ((((a112 * b111) - (a122 * b101)) + (a132 * b091)) * det1);
HXDLIN( 135)				_this3->self->_01 = ((((a022 * b101) - (a012 * b111)) - (a032 * b091)) * det1);
HXDLIN( 135)				_this3->self->_02 = ((((a312 * b051) - (a322 * b041)) + (a332 * b031)) * det1);
HXDLIN( 135)				_this3->self->_03 = ((((a222 * b041) - (a212 * b051)) - (a232 * b031)) * det1);
HXDLIN( 135)				_this3->self->_10 = ((((a122 * b081) - (a102 * b111)) - (a132 * b071)) * det1);
HXDLIN( 135)				_this3->self->_11 = ((((a002 * b111) - (a022 * b081)) + (a032 * b071)) * det1);
HXDLIN( 135)				_this3->self->_12 = ((((a322 * b021) - (a302 * b051)) - (a332 * b011)) * det1);
HXDLIN( 135)				_this3->self->_13 = ((((a202 * b051) - (a222 * b021)) + (a232 * b011)) * det1);
HXDLIN( 135)				_this3->self->_20 = ((((a102 * b101) - (a112 * b081)) + (a132 * b061)) * det1);
HXDLIN( 135)				_this3->self->_21 = ((((a012 * b081) - (a002 * b101)) - (a032 * b061)) * det1);
HXDLIN( 135)				_this3->self->_22 = ((((a302 * b041) - (a312 * b021)) + (a332 * b001)) * det1);
HXDLIN( 135)				_this3->self->_23 = ((((a212 * b021) - (a202 * b041)) - (a232 * b001)) * det1);
HXDLIN( 135)				_this3->self->_30 = ((((a112 * b071) - (a102 * b091)) - (a122 * b061)) * det1);
HXDLIN( 135)				_this3->self->_31 = ((((a002 * b091) - (a012 * b071)) + (a022 * b061)) * det1);
HXDLIN( 135)				_this3->self->_32 = ((((a312 * b011) - (a302 * b031)) - (a322 * b001)) * det1);
HXDLIN( 135)				_this3->self->_33 = ((((a202 * b031) - (a212 * b011)) + (a222 * b001)) * det1);
            			}
            		}
HXLINE( 136)		{
HXLINE( 136)			 ::iron::math::Mat4 _this4 = this->V;
HXDLIN( 136)			 ::iron::math::Vec4 _this5 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 136)			_this5->x = _this4->self->_00;
HXDLIN( 136)			_this5->y = _this4->self->_01;
HXDLIN( 136)			_this5->z = _this4->self->_02;
HXDLIN( 136)			_this5->w = ( (float)(((Float)1.0)) );
HXDLIN( 136)			 ::iron::math::Vec4 _this6 = _this5;
HXDLIN( 136)			float v = (_this6->x * _this6->x);
HXDLIN( 136)			float v1 = (v + (_this6->y * _this6->y));
HXDLIN( 136)			Float scale = (((Float)1.0) / ( (Float)(( (float)(::Math_obj::sqrt(( (Float)((v1 + (_this6->z * _this6->z))) ))) )) ));
HXDLIN( 136)			_this4->self->_00 = ( (float)((_this4->self->_00 * scale)) );
HXDLIN( 136)			_this4->self->_01 = ( (float)((_this4->self->_01 * scale)) );
HXDLIN( 136)			_this4->self->_02 = ( (float)((_this4->self->_02 * scale)) );
HXDLIN( 136)			 ::iron::math::Vec4 _this7 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 136)			_this7->x = _this4->self->_10;
HXDLIN( 136)			_this7->y = _this4->self->_11;
HXDLIN( 136)			_this7->z = _this4->self->_12;
HXDLIN( 136)			_this7->w = ( (float)(((Float)1.0)) );
HXDLIN( 136)			 ::iron::math::Vec4 _this8 = _this7;
HXDLIN( 136)			float v2 = (_this8->x * _this8->x);
HXDLIN( 136)			float v3 = (v2 + (_this8->y * _this8->y));
HXDLIN( 136)			scale = (((Float)1.0) / ( (Float)(( (float)(::Math_obj::sqrt(( (Float)((v3 + (_this8->z * _this8->z))) ))) )) ));
HXDLIN( 136)			_this4->self->_10 = ( (float)((_this4->self->_10 * scale)) );
HXDLIN( 136)			_this4->self->_11 = ( (float)((_this4->self->_11 * scale)) );
HXDLIN( 136)			_this4->self->_12 = ( (float)((_this4->self->_12 * scale)) );
HXDLIN( 136)			 ::iron::math::Vec4 _this9 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 136)			_this9->x = _this4->self->_20;
HXDLIN( 136)			_this9->y = _this4->self->_21;
HXDLIN( 136)			_this9->z = _this4->self->_22;
HXDLIN( 136)			_this9->w = ( (float)(((Float)1.0)) );
HXDLIN( 136)			 ::iron::math::Vec4 _this10 = _this9;
HXDLIN( 136)			float v4 = (_this10->x * _this10->x);
HXDLIN( 136)			float v5 = (v4 + (_this10->y * _this10->y));
HXDLIN( 136)			scale = (((Float)1.0) / ( (Float)(( (float)(::Math_obj::sqrt(( (Float)((v5 + (_this10->z * _this10->z))) ))) )) ));
HXDLIN( 136)			_this4->self->_20 = ( (float)((_this4->self->_20 * scale)) );
HXDLIN( 136)			_this4->self->_21 = ( (float)((_this4->self->_21 * scale)) );
HXDLIN( 136)			_this4->self->_22 = ( (float)((_this4->self->_22 * scale)) );
HXDLIN( 136)			_this4->self->_03 = ( (float)(((Float)0.0)) );
HXDLIN( 136)			_this4->self->_13 = ( (float)(((Float)0.0)) );
HXDLIN( 136)			_this4->self->_23 = ( (float)(((Float)0.0)) );
HXDLIN( 136)			_this4->self->_30 = ( (float)(((Float)0.0)) );
HXDLIN( 136)			_this4->self->_31 = ( (float)(((Float)0.0)) );
HXDLIN( 136)			_this4->self->_32 = ( (float)(((Float)0.0)) );
HXDLIN( 136)			_this4->self->_33 = ( (float)(((Float)1.0)) );
            		}
HXLINE( 137)		{
HXLINE( 137)			 ::iron::math::Mat4 _this11 = ::iron::object::LightObject_obj::m;
HXDLIN( 137)			 ::iron::math::Mat4 m4 = this->V;
HXDLIN( 137)			float a003 = _this11->self->_00;
HXDLIN( 137)			float a013 = _this11->self->_01;
HXDLIN( 137)			float a023 = _this11->self->_02;
HXDLIN( 137)			float a033 = _this11->self->_03;
HXDLIN( 137)			float a103 = _this11->self->_10;
HXDLIN( 137)			float a113 = _this11->self->_11;
HXDLIN( 137)			float a123 = _this11->self->_12;
HXDLIN( 137)			float a133 = _this11->self->_13;
HXDLIN( 137)			float a203 = _this11->self->_20;
HXDLIN( 137)			float a213 = _this11->self->_21;
HXDLIN( 137)			float a223 = _this11->self->_22;
HXDLIN( 137)			float a233 = _this11->self->_23;
HXDLIN( 137)			float a303 = _this11->self->_30;
HXDLIN( 137)			float a313 = _this11->self->_31;
HXDLIN( 137)			float a323 = _this11->self->_32;
HXDLIN( 137)			float a333 = _this11->self->_33;
HXDLIN( 137)			float b010 = m4->self->_00;
HXDLIN( 137)			float b12 = m4->self->_10;
HXDLIN( 137)			float b21 = m4->self->_20;
HXDLIN( 137)			float b31 = m4->self->_30;
HXDLIN( 137)			_this11->self->_00 = ((((a003 * b010) + (a013 * b12)) + (a023 * b21)) + (a033 * b31));
HXDLIN( 137)			_this11->self->_10 = ((((a103 * b010) + (a113 * b12)) + (a123 * b21)) + (a133 * b31));
HXDLIN( 137)			_this11->self->_20 = ((((a203 * b010) + (a213 * b12)) + (a223 * b21)) + (a233 * b31));
HXDLIN( 137)			_this11->self->_30 = ((((a303 * b010) + (a313 * b12)) + (a323 * b21)) + (a333 * b31));
HXDLIN( 137)			b010 = m4->self->_01;
HXDLIN( 137)			b12 = m4->self->_11;
HXDLIN( 137)			b21 = m4->self->_21;
HXDLIN( 137)			b31 = m4->self->_31;
HXDLIN( 137)			_this11->self->_01 = ((((a003 * b010) + (a013 * b12)) + (a023 * b21)) + (a033 * b31));
HXDLIN( 137)			_this11->self->_11 = ((((a103 * b010) + (a113 * b12)) + (a123 * b21)) + (a133 * b31));
HXDLIN( 137)			_this11->self->_21 = ((((a203 * b010) + (a213 * b12)) + (a223 * b21)) + (a233 * b31));
HXDLIN( 137)			_this11->self->_31 = ((((a303 * b010) + (a313 * b12)) + (a323 * b21)) + (a333 * b31));
HXDLIN( 137)			b010 = m4->self->_02;
HXDLIN( 137)			b12 = m4->self->_12;
HXDLIN( 137)			b21 = m4->self->_22;
HXDLIN( 137)			b31 = m4->self->_32;
HXDLIN( 137)			_this11->self->_02 = ((((a003 * b010) + (a013 * b12)) + (a023 * b21)) + (a033 * b31));
HXDLIN( 137)			_this11->self->_12 = ((((a103 * b010) + (a113 * b12)) + (a123 * b21)) + (a133 * b31));
HXDLIN( 137)			_this11->self->_22 = ((((a203 * b010) + (a213 * b12)) + (a223 * b21)) + (a233 * b31));
HXDLIN( 137)			_this11->self->_32 = ((((a303 * b010) + (a313 * b12)) + (a323 * b21)) + (a333 * b31));
HXDLIN( 137)			b010 = m4->self->_03;
HXDLIN( 137)			b12 = m4->self->_13;
HXDLIN( 137)			b21 = m4->self->_23;
HXDLIN( 137)			b31 = m4->self->_33;
HXDLIN( 137)			_this11->self->_03 = ((((a003 * b010) + (a013 * b12)) + (a023 * b21)) + (a033 * b31));
HXDLIN( 137)			_this11->self->_13 = ((((a103 * b010) + (a113 * b12)) + (a123 * b21)) + (a133 * b31));
HXDLIN( 137)			_this11->self->_23 = ((((a203 * b010) + (a213 * b12)) + (a223 * b21)) + (a233 * b31));
HXDLIN( 137)			_this11->self->_33 = ((((a303 * b010) + (a313 * b12)) + (a323 * b21)) + (a333 * b31));
            		}
HXLINE( 138)		::iron::object::LightObject_obj::setCorners();
HXLINE( 139)		{
HXLINE( 139)			int _g = 0;
HXDLIN( 139)			::Array< ::Dynamic> _g1 = ::iron::object::LightObject_obj::corners;
HXDLIN( 139)			while((_g < _g1->length)){
HXLINE( 139)				 ::iron::math::Vec4 v6 = _g1->__get(_g).StaticCast<  ::iron::math::Vec4 >();
HXDLIN( 139)				_g = (_g + 1);
HXLINE( 140)				{
HXLINE( 140)					 ::iron::math::Mat4 m5 = ::iron::object::LightObject_obj::m;
HXDLIN( 140)					float x = v6->x;
HXDLIN( 140)					float y = v6->y;
HXDLIN( 140)					float z = v6->z;
HXDLIN( 140)					float w = v6->w;
HXDLIN( 140)					float _hx_tmp = (m5->self->_00 * x);
HXDLIN( 140)					float _hx_tmp1 = (_hx_tmp + (m5->self->_10 * y));
HXDLIN( 140)					float _hx_tmp2 = (_hx_tmp1 + (m5->self->_20 * z));
HXDLIN( 140)					v6->x = (_hx_tmp2 + (m5->self->_30 * w));
HXDLIN( 140)					float _hx_tmp3 = (m5->self->_01 * x);
HXDLIN( 140)					float _hx_tmp4 = (_hx_tmp3 + (m5->self->_11 * y));
HXDLIN( 140)					float _hx_tmp5 = (_hx_tmp4 + (m5->self->_21 * z));
HXDLIN( 140)					v6->y = (_hx_tmp5 + (m5->self->_31 * w));
HXDLIN( 140)					float _hx_tmp6 = (m5->self->_02 * x);
HXDLIN( 140)					float _hx_tmp7 = (_hx_tmp6 + (m5->self->_12 * y));
HXDLIN( 140)					float _hx_tmp8 = (_hx_tmp7 + (m5->self->_22 * z));
HXDLIN( 140)					v6->z = (_hx_tmp8 + (m5->self->_32 * w));
HXDLIN( 140)					float _hx_tmp9 = (m5->self->_03 * x);
HXDLIN( 140)					float _hx_tmp10 = (_hx_tmp9 + (m5->self->_13 * y));
HXDLIN( 140)					float _hx_tmp11 = (_hx_tmp10 + (m5->self->_23 * z));
HXDLIN( 140)					v6->w = (_hx_tmp11 + (m5->self->_33 * w));
            				}
HXLINE( 141)				{
HXLINE( 141)					v6->x = ( (float)((( (Float)(v6->x) ) / ( (Float)(v6->w) ))) );
HXDLIN( 141)					v6->y = ( (float)((( (Float)(v6->y) ) / ( (Float)(v6->w) ))) );
HXDLIN( 141)					v6->z = ( (float)((( (Float)(v6->z) ) / ( (Float)(v6->w) ))) );
HXDLIN( 141)					v6->w = ( (float)(((Float)1.0)) );
            				}
            			}
            		}
HXLINE( 144)		float minx = ::iron::object::LightObject_obj::corners->__get(0).StaticCast<  ::iron::math::Vec4 >()->x;
HXLINE( 145)		float miny = ::iron::object::LightObject_obj::corners->__get(0).StaticCast<  ::iron::math::Vec4 >()->y;
HXLINE( 146)		float minz = ::iron::object::LightObject_obj::corners->__get(0).StaticCast<  ::iron::math::Vec4 >()->z;
HXLINE( 147)		float maxx = ::iron::object::LightObject_obj::corners->__get(0).StaticCast<  ::iron::math::Vec4 >()->x;
HXLINE( 148)		float maxy = ::iron::object::LightObject_obj::corners->__get(0).StaticCast<  ::iron::math::Vec4 >()->y;
HXLINE( 149)		float maxz = ::iron::object::LightObject_obj::corners->__get(0).StaticCast<  ::iron::math::Vec4 >()->z;
HXLINE( 150)		{
HXLINE( 150)			int _g2 = 0;
HXDLIN( 150)			::Array< ::Dynamic> _g11 = ::iron::object::LightObject_obj::corners;
HXDLIN( 150)			while((_g2 < _g11->length)){
HXLINE( 150)				 ::iron::math::Vec4 v7 = _g11->__get(_g2).StaticCast<  ::iron::math::Vec4 >();
HXDLIN( 150)				_g2 = (_g2 + 1);
HXLINE( 151)				if ((v7->x < minx)) {
HXLINE( 151)					minx = v7->x;
            				}
HXLINE( 152)				if ((v7->x > maxx)) {
HXLINE( 152)					maxx = v7->x;
            				}
HXLINE( 153)				if ((v7->y < miny)) {
HXLINE( 153)					miny = v7->y;
            				}
HXLINE( 154)				if ((v7->y > maxy)) {
HXLINE( 154)					maxy = v7->y;
            				}
HXLINE( 155)				if ((v7->z < minz)) {
HXLINE( 155)					minz = v7->z;
            				}
HXLINE( 156)				if ((v7->z > maxz)) {
HXLINE( 156)					maxz = v7->z;
            				}
            			}
            		}
HXLINE( 160)		 ::iron::math::Vec4 v11 = ::iron::object::LightObject_obj::corners->__get(0).StaticCast<  ::iron::math::Vec4 >();
HXDLIN( 160)		 ::iron::math::Vec4 v21 = ::iron::object::LightObject_obj::corners->__get(7).StaticCast<  ::iron::math::Vec4 >();
HXDLIN( 160)		float vx = (v11->x - v21->x);
HXDLIN( 160)		float vy = (v11->y - v21->y);
HXDLIN( 160)		float vz = (v11->z - v21->z);
HXDLIN( 160)		float diag0 = ( (float)(::Math_obj::sqrt(( (Float)((((vx * vx) + (vy * vy)) + (vz * vz))) ))) );
HXLINE( 161)		Float offx = ((diag0 - (maxx - minx)) * ((Float)0.5));
HXLINE( 162)		Float offy = ((diag0 - (maxy - miny)) * ((Float)0.5));
HXLINE( 163)		minx = (minx - offx);
HXLINE( 164)		maxx = (maxx + offx);
HXLINE( 165)		miny = (miny - offy);
HXLINE( 166)		maxy = (maxy + offy);
HXLINE( 169)		 ::Dynamic smsize = this->data->raw->shadowmap_size;
HXLINE( 173)		Float worldPerTexelX = (( (Float)((maxx - minx)) ) / ( (Float)(smsize) ));
HXLINE( 174)		Float worldPerTexelY = (( (Float)((maxy - miny)) ) / ( (Float)(smsize) ));
HXLINE( 175)		Float worldPerTexelZ = (( (Float)((maxz - minz)) ) / ( (Float)(smsize) ));
HXLINE( 176)		minx = ( (float)((::Math_obj::floor((( (Float)(minx) ) / worldPerTexelX)) * worldPerTexelX)) );
HXLINE( 177)		miny = ( (float)((::Math_obj::floor((( (Float)(miny) ) / worldPerTexelY)) * worldPerTexelY)) );
HXLINE( 178)		minz = ( (float)((::Math_obj::floor((( (Float)(minz) ) / worldPerTexelZ)) * worldPerTexelZ)) );
HXLINE( 179)		maxx = ( (float)((::Math_obj::floor((( (Float)(maxx) ) / worldPerTexelX)) * worldPerTexelX)) );
HXLINE( 180)		maxy = ( (float)((::Math_obj::floor((( (Float)(maxy) ) / worldPerTexelY)) * worldPerTexelY)) );
HXLINE( 181)		maxz = ( (float)((::Math_obj::floor((( (Float)(maxz) ) / worldPerTexelZ)) * worldPerTexelZ)) );
HXLINE( 183)		Float hx = ((( (Float)((maxx - minx)) ) / ( (Float)(2) )) * ::iron::object::LightObject_obj::cascadeBounds);
HXLINE( 184)		Float hy = ((( (Float)((maxy - miny)) ) / ( (Float)(2) )) * ::iron::object::LightObject_obj::cascadeBounds);
HXLINE( 185)		Float hz = ((( (Float)((maxz - minz)) ) / ( (Float)(2) )) * ::iron::object::LightObject_obj::cascadeBounds);
HXLINE( 186)		this->V->self->_30 = ( (float)(-((minx + hx))) );
HXLINE( 187)		this->V->self->_31 = ( (float)(-((miny + hy))) );
HXLINE( 188)		this->V->self->_32 = ( (float)(-((minz + hz))) );
HXLINE( 191)		float left = ( (float)(-(hx)) );
HXDLIN( 191)		float bottom = ( (float)(-(hy)) );
HXDLIN( 191)		float near1 = ( (float)((-(hz) * 4)) );
HXDLIN( 191)		float rl = (hx - left);
HXDLIN( 191)		float tb = (hy - bottom);
HXDLIN( 191)		float fn = (hz - near1);
HXDLIN( 191)		Float tx = (( (Float)(-((hx + left))) ) / ( (Float)(rl) ));
HXDLIN( 191)		Float ty = (( (Float)(-((hy + bottom))) ) / ( (Float)(tb) ));
HXDLIN( 191)		Float tz = (( (Float)(-((hz + near1))) ) / ( (Float)(fn) ));
HXDLIN( 191)		::iron::object::LightObject_obj::m =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)((( (Float)(2) ) / ( (Float)(rl) ))) ),( (float)(0) ),( (float)(0) ),( (float)(tx) ),( (float)(0) ),( (float)((( (Float)(2) ) / ( (Float)(tb) ))) ),( (float)(0) ),( (float)(ty) ),( (float)(0) ),( (float)(0) ),( (float)((( (Float)(-2) ) / ( (Float)(fn) ))) ),( (float)(tz) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(1) ));
HXLINE( 192)		{
HXLINE( 192)			 ::iron::math::Mat4 _this12 = this->P;
HXDLIN( 192)			 ::iron::math::Mat4 m6 = ::iron::object::LightObject_obj::m;
HXDLIN( 192)			_this12->self->_00 = m6->self->_00;
HXDLIN( 192)			_this12->self->_01 = m6->self->_01;
HXDLIN( 192)			_this12->self->_02 = m6->self->_02;
HXDLIN( 192)			_this12->self->_03 = m6->self->_03;
HXDLIN( 192)			_this12->self->_10 = m6->self->_10;
HXDLIN( 192)			_this12->self->_11 = m6->self->_11;
HXDLIN( 192)			_this12->self->_12 = m6->self->_12;
HXDLIN( 192)			_this12->self->_13 = m6->self->_13;
HXDLIN( 192)			_this12->self->_20 = m6->self->_20;
HXDLIN( 192)			_this12->self->_21 = m6->self->_21;
HXDLIN( 192)			_this12->self->_22 = m6->self->_22;
HXDLIN( 192)			_this12->self->_23 = m6->self->_23;
HXDLIN( 192)			_this12->self->_30 = m6->self->_30;
HXDLIN( 192)			_this12->self->_31 = m6->self->_31;
HXDLIN( 192)			_this12->self->_32 = m6->self->_32;
HXDLIN( 192)			_this12->self->_33 = m6->self->_33;
            		}
HXLINE( 194)		this->updateViewFrustum(camera);
            	}


HX_DEFINE_DYNAMIC_FUNC2(LightObject_obj,setCascade,(void))

void LightObject_obj::updateViewFrustum( ::iron::object::CameraObject camera){
            	HX_GC_STACKFRAME(&_hx_pos_ff63d2941c613727_207_updateViewFrustum)
HXLINE( 208)		{
HXLINE( 208)			 ::iron::math::Mat4 _this = this->VP;
HXDLIN( 208)			 ::iron::math::Mat4 b = this->P;
HXDLIN( 208)			 ::iron::math::Mat4 a = this->V;
HXDLIN( 208)			float a00 = a->self->_00;
HXDLIN( 208)			float a01 = a->self->_01;
HXDLIN( 208)			float a02 = a->self->_02;
HXDLIN( 208)			float a03 = a->self->_03;
HXDLIN( 208)			float a10 = a->self->_10;
HXDLIN( 208)			float a11 = a->self->_11;
HXDLIN( 208)			float a12 = a->self->_12;
HXDLIN( 208)			float a13 = a->self->_13;
HXDLIN( 208)			float a20 = a->self->_20;
HXDLIN( 208)			float a21 = a->self->_21;
HXDLIN( 208)			float a22 = a->self->_22;
HXDLIN( 208)			float a23 = a->self->_23;
HXDLIN( 208)			float a30 = a->self->_30;
HXDLIN( 208)			float a31 = a->self->_31;
HXDLIN( 208)			float a32 = a->self->_32;
HXDLIN( 208)			float a33 = a->self->_33;
HXDLIN( 208)			float b0 = b->self->_00;
HXDLIN( 208)			float b1 = b->self->_10;
HXDLIN( 208)			float b2 = b->self->_20;
HXDLIN( 208)			float b3 = b->self->_30;
HXDLIN( 208)			_this->self->_00 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 208)			_this->self->_10 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 208)			_this->self->_20 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 208)			_this->self->_30 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN( 208)			b0 = b->self->_01;
HXDLIN( 208)			b1 = b->self->_11;
HXDLIN( 208)			b2 = b->self->_21;
HXDLIN( 208)			b3 = b->self->_31;
HXDLIN( 208)			_this->self->_01 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 208)			_this->self->_11 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 208)			_this->self->_21 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 208)			_this->self->_31 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN( 208)			b0 = b->self->_02;
HXDLIN( 208)			b1 = b->self->_12;
HXDLIN( 208)			b2 = b->self->_22;
HXDLIN( 208)			b3 = b->self->_32;
HXDLIN( 208)			_this->self->_02 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 208)			_this->self->_12 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 208)			_this->self->_22 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 208)			_this->self->_32 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN( 208)			b0 = b->self->_03;
HXDLIN( 208)			b1 = b->self->_13;
HXDLIN( 208)			b2 = b->self->_23;
HXDLIN( 208)			b3 = b->self->_33;
HXDLIN( 208)			_this->self->_03 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 208)			_this->self->_13 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 208)			_this->self->_23 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 208)			_this->self->_33 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
            		}
HXLINE( 211)		if (( (bool)(camera->data->raw->frustum_culling) )) {
HXLINE( 212)			if (hx::IsNull( this->frustumPlanes )) {
HXLINE( 213)				this->frustumPlanes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 214)				{
HXLINE( 214)					int _g = 0;
HXDLIN( 214)					while((_g < 6)){
HXLINE( 214)						_g = (_g + 1);
HXDLIN( 214)						int i = (_g - 1);
HXDLIN( 214)						::Array< ::Dynamic> _hx_tmp = this->frustumPlanes;
HXDLIN( 214)						_hx_tmp->push( ::iron::object::FrustumPlane_obj::__alloc( HX_CTX ));
            					}
            				}
            			}
HXLINE( 216)			::iron::object::CameraObject_obj::buildViewFrustum(this->VP,this->frustumPlanes);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(LightObject_obj,updateViewFrustum,(void))

void LightObject_obj::setCubeFace(int face, ::iron::object::CameraObject camera){
            	HX_STACKFRAME(&_hx_pos_ff63d2941c613727_223_setCubeFace)
HXLINE( 225)		{
HXLINE( 225)			 ::iron::math::Vec4 _this = ::iron::object::LightObject_obj::p1;
HXDLIN( 225)			_this->x = this->transform->world->self->_30;
HXDLIN( 225)			_this->y = this->transform->world->self->_31;
HXDLIN( 225)			_this->z = this->transform->world->self->_32;
HXDLIN( 225)			_this->w = ( (float)(((Float)1.0)) );
            		}
HXLINE( 226)		{
HXLINE( 226)			 ::iron::math::Vec4 _this1 = ::iron::object::LightObject_obj::p2;
HXDLIN( 226)			 ::iron::math::Vec4 v = ::iron::object::LightObject_obj::p1;
HXDLIN( 226)			_this1->x = v->x;
HXDLIN( 226)			_this1->y = v->y;
HXDLIN( 226)			_this1->z = v->z;
            		}
HXLINE( 228)		switch((int)(face)){
            			case (int)0: {
HXLINE( 230)				{
HXLINE( 230)					 ::iron::math::Vec4 _this2 = ::iron::object::LightObject_obj::p2;
HXDLIN( 230)					 ::iron::math::Vec4 _this3 = _this2;
HXDLIN( 230)					_this3->x = (_this3->x + ((Float)1.0));
HXDLIN( 230)					 ::iron::math::Vec4 _this4 = _this2;
HXDLIN( 230)					_this4->y = (_this4->y + ((Float)0.0));
HXDLIN( 230)					 ::iron::math::Vec4 _this5 = _this2;
HXDLIN( 230)					_this5->z = (_this5->z + ((Float)0.0));
            				}
HXLINE( 231)				{
HXLINE( 231)					 ::iron::math::Vec4 _this6 = ::iron::object::LightObject_obj::p3;
HXDLIN( 231)					_this6->x = ( (float)(((Float)0.0)) );
HXDLIN( 231)					_this6->y = ( (float)(((Float)-1.0)) );
HXDLIN( 231)					_this6->z = ( (float)(((Float)0.0)) );
HXDLIN( 231)					_this6->w = ( (float)(((Float)1.0)) );
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 233)				{
HXLINE( 233)					 ::iron::math::Vec4 _this7 = ::iron::object::LightObject_obj::p2;
HXDLIN( 233)					 ::iron::math::Vec4 _this8 = _this7;
HXDLIN( 233)					_this8->x = (_this8->x + ((Float)-1.0));
HXDLIN( 233)					 ::iron::math::Vec4 _this9 = _this7;
HXDLIN( 233)					_this9->y = (_this9->y + ((Float)0.0));
HXDLIN( 233)					 ::iron::math::Vec4 _this10 = _this7;
HXDLIN( 233)					_this10->z = (_this10->z + ((Float)0.0));
            				}
HXLINE( 234)				{
HXLINE( 234)					 ::iron::math::Vec4 _this11 = ::iron::object::LightObject_obj::p3;
HXDLIN( 234)					_this11->x = ( (float)(((Float)0.0)) );
HXDLIN( 234)					_this11->y = ( (float)(((Float)-1.0)) );
HXDLIN( 234)					_this11->z = ( (float)(((Float)0.0)) );
HXDLIN( 234)					_this11->w = ( (float)(((Float)1.0)) );
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 236)				{
HXLINE( 236)					 ::iron::math::Vec4 _this12 = ::iron::object::LightObject_obj::p2;
HXDLIN( 236)					 ::iron::math::Vec4 _this13 = _this12;
HXDLIN( 236)					_this13->x = (_this13->x + ((Float)0.0));
HXDLIN( 236)					 ::iron::math::Vec4 _this14 = _this12;
HXDLIN( 236)					_this14->y = (_this14->y + ((Float)1.0));
HXDLIN( 236)					 ::iron::math::Vec4 _this15 = _this12;
HXDLIN( 236)					_this15->z = (_this15->z + ((Float)0.0));
            				}
HXLINE( 237)				{
HXLINE( 237)					 ::iron::math::Vec4 _this16 = ::iron::object::LightObject_obj::p3;
HXDLIN( 237)					_this16->x = ( (float)(((Float)0.0)) );
HXDLIN( 237)					_this16->y = ( (float)(((Float)0.0)) );
HXDLIN( 237)					_this16->z = ( (float)(((Float)1.0)) );
HXDLIN( 237)					_this16->w = ( (float)(((Float)1.0)) );
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 239)				{
HXLINE( 239)					 ::iron::math::Vec4 _this17 = ::iron::object::LightObject_obj::p2;
HXDLIN( 239)					 ::iron::math::Vec4 _this18 = _this17;
HXDLIN( 239)					_this18->x = (_this18->x + ((Float)0.0));
HXDLIN( 239)					 ::iron::math::Vec4 _this19 = _this17;
HXDLIN( 239)					_this19->y = (_this19->y + ((Float)-1.0));
HXDLIN( 239)					 ::iron::math::Vec4 _this20 = _this17;
HXDLIN( 239)					_this20->z = (_this20->z + ((Float)0.0));
            				}
HXLINE( 240)				{
HXLINE( 240)					 ::iron::math::Vec4 _this21 = ::iron::object::LightObject_obj::p3;
HXDLIN( 240)					_this21->x = ( (float)(((Float)0.0)) );
HXDLIN( 240)					_this21->y = ( (float)(((Float)0.0)) );
HXDLIN( 240)					_this21->z = ( (float)(((Float)-1.0)) );
HXDLIN( 240)					_this21->w = ( (float)(((Float)1.0)) );
            				}
            			}
            			break;
            			case (int)4: {
HXLINE( 242)				{
HXLINE( 242)					 ::iron::math::Vec4 _this22 = ::iron::object::LightObject_obj::p2;
HXDLIN( 242)					 ::iron::math::Vec4 _this23 = _this22;
HXDLIN( 242)					_this23->x = (_this23->x + ((Float)0.0));
HXDLIN( 242)					 ::iron::math::Vec4 _this24 = _this22;
HXDLIN( 242)					_this24->y = (_this24->y + ((Float)0.0));
HXDLIN( 242)					 ::iron::math::Vec4 _this25 = _this22;
HXDLIN( 242)					_this25->z = (_this25->z + ((Float)1.0));
            				}
HXLINE( 243)				{
HXLINE( 243)					 ::iron::math::Vec4 _this26 = ::iron::object::LightObject_obj::p3;
HXDLIN( 243)					_this26->x = ( (float)(((Float)0.0)) );
HXDLIN( 243)					_this26->y = ( (float)(((Float)-1.0)) );
HXDLIN( 243)					_this26->z = ( (float)(((Float)0.0)) );
HXDLIN( 243)					_this26->w = ( (float)(((Float)1.0)) );
            				}
            			}
            			break;
            			case (int)5: {
HXLINE( 245)				{
HXLINE( 245)					 ::iron::math::Vec4 _this27 = ::iron::object::LightObject_obj::p2;
HXDLIN( 245)					 ::iron::math::Vec4 _this28 = _this27;
HXDLIN( 245)					_this28->x = (_this28->x + ((Float)0.0));
HXDLIN( 245)					 ::iron::math::Vec4 _this29 = _this27;
HXDLIN( 245)					_this29->y = (_this29->y + ((Float)0.0));
HXDLIN( 245)					 ::iron::math::Vec4 _this30 = _this27;
HXDLIN( 245)					_this30->z = (_this30->z + ((Float)-1.0));
            				}
HXLINE( 246)				{
HXLINE( 246)					 ::iron::math::Vec4 _this31 = ::iron::object::LightObject_obj::p3;
HXDLIN( 246)					_this31->x = ( (float)(((Float)0.0)) );
HXDLIN( 246)					_this31->y = ( (float)(((Float)-1.0)) );
HXDLIN( 246)					_this31->z = ( (float)(((Float)0.0)) );
HXDLIN( 246)					_this31->w = ( (float)(((Float)1.0)) );
            				}
            			}
            			break;
            		}
HXLINE( 249)		{
HXLINE( 249)			 ::iron::math::Mat4 _this32 = this->V;
HXDLIN( 249)			 ::iron::math::Vec4 eye = ::iron::object::LightObject_obj::p1;
HXDLIN( 249)			 ::iron::math::Vec4 center = ::iron::object::LightObject_obj::p2;
HXDLIN( 249)			 ::iron::math::Vec4 up = ::iron::object::LightObject_obj::p3;
HXDLIN( 249)			float f0 = (center->x - eye->x);
HXDLIN( 249)			float f1 = (center->y - eye->y);
HXDLIN( 249)			float f2 = (center->z - eye->z);
HXDLIN( 249)			Float n = (((Float)1.0) / ::Math_obj::sqrt(( (Float)((((f0 * f0) + (f1 * f1)) + (f2 * f2))) )));
HXDLIN( 249)			f0 = (f0 * n);
HXDLIN( 249)			f1 = (f1 * n);
HXDLIN( 249)			f2 = (f2 * n);
HXDLIN( 249)			float s0 = (f1 * up->z);
HXDLIN( 249)			float s01 = (s0 - (f2 * up->y));
HXDLIN( 249)			float s1 = (f2 * up->x);
HXDLIN( 249)			float s11 = (s1 - (f0 * up->z));
HXDLIN( 249)			float s2 = (f0 * up->y);
HXDLIN( 249)			float s21 = (s2 - (f1 * up->x));
HXDLIN( 249)			n = (((Float)1.0) / ::Math_obj::sqrt(( (Float)((((s01 * s01) + (s11 * s11)) + (s21 * s21))) )));
HXDLIN( 249)			s01 = (s01 * n);
HXDLIN( 249)			s11 = (s11 * n);
HXDLIN( 249)			s21 = (s21 * n);
HXDLIN( 249)			float u0 = ((s11 * f2) - (s21 * f1));
HXDLIN( 249)			float u1 = ((s21 * f0) - (s01 * f2));
HXDLIN( 249)			float u2 = ((s01 * f1) - (s11 * f0));
HXDLIN( 249)			float d0 = (-(eye->x) * s01);
HXDLIN( 249)			float d01 = (d0 - (eye->y * s11));
HXDLIN( 249)			float d02 = (d01 - (eye->z * s21));
HXDLIN( 249)			float d1 = (-(eye->x) * u0);
HXDLIN( 249)			float d11 = (d1 - (eye->y * u1));
HXDLIN( 249)			float d12 = (d11 - (eye->z * u2));
HXDLIN( 249)			float d2 = (eye->x * f0);
HXDLIN( 249)			float d21 = (d2 + (eye->y * f1));
HXDLIN( 249)			float d22 = (d21 + (eye->z * f2));
HXDLIN( 249)			_this32->self->_00 = s01;
HXDLIN( 249)			_this32->self->_10 = s11;
HXDLIN( 249)			_this32->self->_20 = s21;
HXDLIN( 249)			_this32->self->_30 = d02;
HXDLIN( 249)			_this32->self->_01 = u0;
HXDLIN( 249)			_this32->self->_11 = u1;
HXDLIN( 249)			_this32->self->_21 = u2;
HXDLIN( 249)			_this32->self->_31 = d12;
HXDLIN( 249)			_this32->self->_02 = -(f0);
HXDLIN( 249)			_this32->self->_12 = -(f1);
HXDLIN( 249)			_this32->self->_22 = -(f2);
HXDLIN( 249)			_this32->self->_32 = d22;
HXDLIN( 249)			_this32->self->_03 = ( (float)(((Float)0.0)) );
HXDLIN( 249)			_this32->self->_13 = ( (float)(((Float)0.0)) );
HXDLIN( 249)			_this32->self->_23 = ( (float)(((Float)0.0)) );
HXDLIN( 249)			_this32->self->_33 = ( (float)(((Float)1.0)) );
            		}
HXLINE( 250)		this->updateViewFrustum(camera);
            	}


HX_DEFINE_DYNAMIC_FUNC2(LightObject_obj,setCubeFace,(void))

 ::iron::math::Vec4 LightObject_obj::right(){
            	HX_GC_STACKFRAME(&_hx_pos_ff63d2941c613727_295_right)
HXDLIN( 295)		return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,this->V->self->_00,this->V->self->_10,this->V->self->_20,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(LightObject_obj,right,return )

 ::iron::math::Vec4 LightObject_obj::up(){
            	HX_GC_STACKFRAME(&_hx_pos_ff63d2941c613727_296_up)
HXDLIN( 296)		return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,this->V->self->_01,this->V->self->_11,this->V->self->_21,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(LightObject_obj,up,return )

 ::iron::math::Vec4 LightObject_obj::look(){
            	HX_GC_STACKFRAME(&_hx_pos_ff63d2941c613727_297_look)
HXDLIN( 297)		return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,this->V->self->_02,this->V->self->_12,this->V->self->_22,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(LightObject_obj,look,return )

::String LightObject_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_ff63d2941c613727_299_toString)
HXDLIN( 299)		return (HX_("Light Object ",f7,7a,b9,af) + this->name);
            	}


int LightObject_obj::cascadeCount;

Float LightObject_obj::cascadeSplitFactor;

Float LightObject_obj::cascadeBounds;

::Array< ::Dynamic> LightObject_obj::corners;

void LightObject_obj::setCorners(){
            	HX_STACKFRAME(&_hx_pos_ff63d2941c613727_63_setCorners)
HXLINE(  64)		{
HXLINE(  64)			 ::iron::math::Vec4 _this = ::iron::object::LightObject_obj::corners->__get(0).StaticCast<  ::iron::math::Vec4 >();
HXDLIN(  64)			_this->x = ( (float)(((Float)-1.0)) );
HXDLIN(  64)			_this->y = ( (float)(((Float)-1.0)) );
HXDLIN(  64)			_this->z = ( (float)(((Float)1.0)) );
HXDLIN(  64)			_this->w = ( (float)(((Float)1.0)) );
            		}
HXLINE(  65)		{
HXLINE(  65)			 ::iron::math::Vec4 _this1 = ::iron::object::LightObject_obj::corners->__get(1).StaticCast<  ::iron::math::Vec4 >();
HXDLIN(  65)			_this1->x = ( (float)(((Float)-1.0)) );
HXDLIN(  65)			_this1->y = ( (float)(((Float)-1.0)) );
HXDLIN(  65)			_this1->z = ( (float)(((Float)-1.0)) );
HXDLIN(  65)			_this1->w = ( (float)(((Float)1.0)) );
            		}
HXLINE(  66)		{
HXLINE(  66)			 ::iron::math::Vec4 _this2 = ::iron::object::LightObject_obj::corners->__get(2).StaticCast<  ::iron::math::Vec4 >();
HXDLIN(  66)			_this2->x = ( (float)(((Float)-1.0)) );
HXDLIN(  66)			_this2->y = ( (float)(((Float)1.0)) );
HXDLIN(  66)			_this2->z = ( (float)(((Float)1.0)) );
HXDLIN(  66)			_this2->w = ( (float)(((Float)1.0)) );
            		}
HXLINE(  67)		{
HXLINE(  67)			 ::iron::math::Vec4 _this3 = ::iron::object::LightObject_obj::corners->__get(3).StaticCast<  ::iron::math::Vec4 >();
HXDLIN(  67)			_this3->x = ( (float)(((Float)-1.0)) );
HXDLIN(  67)			_this3->y = ( (float)(((Float)1.0)) );
HXDLIN(  67)			_this3->z = ( (float)(((Float)-1.0)) );
HXDLIN(  67)			_this3->w = ( (float)(((Float)1.0)) );
            		}
HXLINE(  68)		{
HXLINE(  68)			 ::iron::math::Vec4 _this4 = ::iron::object::LightObject_obj::corners->__get(4).StaticCast<  ::iron::math::Vec4 >();
HXDLIN(  68)			_this4->x = ( (float)(((Float)1.0)) );
HXDLIN(  68)			_this4->y = ( (float)(((Float)-1.0)) );
HXDLIN(  68)			_this4->z = ( (float)(((Float)1.0)) );
HXDLIN(  68)			_this4->w = ( (float)(((Float)1.0)) );
            		}
HXLINE(  69)		{
HXLINE(  69)			 ::iron::math::Vec4 _this5 = ::iron::object::LightObject_obj::corners->__get(5).StaticCast<  ::iron::math::Vec4 >();
HXDLIN(  69)			_this5->x = ( (float)(((Float)1.0)) );
HXDLIN(  69)			_this5->y = ( (float)(((Float)-1.0)) );
HXDLIN(  69)			_this5->z = ( (float)(((Float)-1.0)) );
HXDLIN(  69)			_this5->w = ( (float)(((Float)1.0)) );
            		}
HXLINE(  70)		{
HXLINE(  70)			 ::iron::math::Vec4 _this6 = ::iron::object::LightObject_obj::corners->__get(6).StaticCast<  ::iron::math::Vec4 >();
HXDLIN(  70)			_this6->x = ( (float)(((Float)1.0)) );
HXDLIN(  70)			_this6->y = ( (float)(((Float)1.0)) );
HXDLIN(  70)			_this6->z = ( (float)(((Float)1.0)) );
HXDLIN(  70)			_this6->w = ( (float)(((Float)1.0)) );
            		}
HXLINE(  71)		{
HXLINE(  71)			 ::iron::math::Vec4 _this7 = ::iron::object::LightObject_obj::corners->__get(7).StaticCast<  ::iron::math::Vec4 >();
HXDLIN(  71)			_this7->x = ( (float)(((Float)1.0)) );
HXDLIN(  71)			_this7->y = ( (float)(((Float)1.0)) );
HXDLIN(  71)			_this7->z = ( (float)(((Float)-1.0)) );
HXDLIN(  71)			_this7->w = ( (float)(((Float)1.0)) );
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(LightObject_obj,setCorners,(void))

 ::iron::math::Mat4 LightObject_obj::m;

Float LightObject_obj::mix(Float a,Float b,Float f){
            	HX_STACKFRAME(&_hx_pos_ff63d2941c613727_88_mix)
HXDLIN(  88)		return ((a * (1 - f)) + (b * f));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(LightObject_obj,mix,return )

 ::iron::math::Vec4 LightObject_obj::p1;

 ::iron::math::Vec4 LightObject_obj::p2;

 ::iron::math::Vec4 LightObject_obj::p3;


hx::ObjectPtr< LightObject_obj > LightObject_obj::__new( ::iron::data::LightData data) {
	hx::ObjectPtr< LightObject_obj > __this = new LightObject_obj();
	__this->__construct(data);
	return __this;
}

hx::ObjectPtr< LightObject_obj > LightObject_obj::__alloc(hx::Ctx *_hx_ctx, ::iron::data::LightData data) {
	LightObject_obj *__this = (LightObject_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(LightObject_obj), true, "iron.object.LightObject"));
	*(void **)__this = LightObject_obj::_hx_vtable;
	__this->__construct(data);
	return __this;
}

LightObject_obj::LightObject_obj()
{
}

void LightObject_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LightObject);
	HX_MARK_MEMBER_NAME(camSlicedP,"camSlicedP");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(V,"V");
	HX_MARK_MEMBER_NAME(P,"P");
	HX_MARK_MEMBER_NAME(VP,"VP");
	HX_MARK_MEMBER_NAME(frustumPlanes,"frustumPlanes");
	 ::iron::object::Object_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void LightObject_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(camSlicedP,"camSlicedP");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(V,"V");
	HX_VISIT_MEMBER_NAME(P,"P");
	HX_VISIT_MEMBER_NAME(VP,"VP");
	HX_VISIT_MEMBER_NAME(frustumPlanes,"frustumPlanes");
	 ::iron::object::Object_obj::__Visit(HX_VISIT_ARG);
}

hx::Val LightObject_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"V") ) { return hx::Val( V ); }
		if (HX_FIELD_EQ(inName,"P") ) { return hx::Val( P ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"VP") ) { return hx::Val( VP ); }
		if (HX_FIELD_EQ(inName,"up") ) { return hx::Val( up_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data ); }
		if (HX_FIELD_EQ(inName,"look") ) { return hx::Val( look_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { return hx::Val( right_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"camSlicedP") ) { return hx::Val( camSlicedP ); }
		if (HX_FIELD_EQ(inName,"setCascade") ) { return hx::Val( setCascade_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"setCubeFace") ) { return hx::Val( setCubeFace_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"frustumPlanes") ) { return hx::Val( frustumPlanes ); }
		if (HX_FIELD_EQ(inName,"buildMatrices") ) { return hx::Val( buildMatrices_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"updateViewFrustum") ) { return hx::Val( updateViewFrustum_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool LightObject_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"m") ) { outValue = ( m ); return true; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"p1") ) { outValue = ( p1 ); return true; }
		if (HX_FIELD_EQ(inName,"p2") ) { outValue = ( p2 ); return true; }
		if (HX_FIELD_EQ(inName,"p3") ) { outValue = ( p3 ); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"mix") ) { outValue = mix_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"corners") ) { outValue = ( corners ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"setCorners") ) { outValue = setCorners_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cascadeCount") ) { outValue = ( cascadeCount ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"cascadeBounds") ) { outValue = ( cascadeBounds ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"cascadeSplitFactor") ) { outValue = ( cascadeSplitFactor ); return true; }
	}
	return false;
}

hx::Val LightObject_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"V") ) { V=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"P") ) { P=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"VP") ) { VP=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::iron::data::LightData >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"camSlicedP") ) { camSlicedP=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"frustumPlanes") ) { frustumPlanes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool LightObject_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"m") ) { m=ioValue.Cast<  ::iron::math::Mat4 >(); return true; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"p1") ) { p1=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
		if (HX_FIELD_EQ(inName,"p2") ) { p2=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
		if (HX_FIELD_EQ(inName,"p3") ) { p3=ioValue.Cast<  ::iron::math::Vec4 >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"corners") ) { corners=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cascadeCount") ) { cascadeCount=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"cascadeBounds") ) { cascadeBounds=ioValue.Cast< Float >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"cascadeSplitFactor") ) { cascadeSplitFactor=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

void LightObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("camSlicedP",ef,37,90,05));
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("V",56,00,00,00));
	outFields->push(HX_("P",50,00,00,00));
	outFields->push(HX_("VP",3a,4b,00,00));
	outFields->push(HX_("frustumPlanes",99,03,66,33));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo LightObject_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(LightObject_obj,camSlicedP),HX_("camSlicedP",ef,37,90,05)},
	{hx::fsObject /*::iron::data::LightData*/ ,(int)offsetof(LightObject_obj,data),HX_("data",2a,56,63,42)},
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(LightObject_obj,V),HX_("V",56,00,00,00)},
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(LightObject_obj,P),HX_("P",50,00,00,00)},
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(LightObject_obj,VP),HX_("VP",3a,4b,00,00)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(LightObject_obj,frustumPlanes),HX_("frustumPlanes",99,03,66,33)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo LightObject_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &LightObject_obj::cascadeCount,HX_("cascadeCount",fb,43,39,60)},
	{hx::fsFloat,(void *) &LightObject_obj::cascadeSplitFactor,HX_("cascadeSplitFactor",75,3f,f3,12)},
	{hx::fsFloat,(void *) &LightObject_obj::cascadeBounds,HX_("cascadeBounds",c9,cd,86,6b)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &LightObject_obj::corners,HX_("corners",fe,9a,1a,63)},
	{hx::fsObject /*::iron::math::Mat4*/ ,(void *) &LightObject_obj::m,HX_("m",6d,00,00,00)},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &LightObject_obj::p1,HX_("p1",c1,61,00,00)},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &LightObject_obj::p2,HX_("p2",c2,61,00,00)},
	{hx::fsObject /*::iron::math::Vec4*/ ,(void *) &LightObject_obj::p3,HX_("p3",c3,61,00,00)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String LightObject_obj_sMemberFields[] = {
	HX_("camSlicedP",ef,37,90,05),
	HX_("data",2a,56,63,42),
	HX_("V",56,00,00,00),
	HX_("P",50,00,00,00),
	HX_("VP",3a,4b,00,00),
	HX_("frustumPlanes",99,03,66,33),
	HX_("remove",44,9c,88,04),
	HX_("buildMatrices",e8,e6,b3,61),
	HX_("setCascade",b2,d8,18,a9),
	HX_("updateViewFrustum",f4,2f,f7,16),
	HX_("setCubeFace",f4,05,33,d5),
	HX_("right",dc,0b,64,e9),
	HX_("up",5b,66,00,00),
	HX_("look",5f,a6,b7,47),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

static void LightObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(LightObject_obj::cascadeCount,"cascadeCount");
	HX_MARK_MEMBER_NAME(LightObject_obj::cascadeSplitFactor,"cascadeSplitFactor");
	HX_MARK_MEMBER_NAME(LightObject_obj::cascadeBounds,"cascadeBounds");
	HX_MARK_MEMBER_NAME(LightObject_obj::corners,"corners");
	HX_MARK_MEMBER_NAME(LightObject_obj::m,"m");
	HX_MARK_MEMBER_NAME(LightObject_obj::p1,"p1");
	HX_MARK_MEMBER_NAME(LightObject_obj::p2,"p2");
	HX_MARK_MEMBER_NAME(LightObject_obj::p3,"p3");
};

#ifdef HXCPP_VISIT_ALLOCS
static void LightObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(LightObject_obj::cascadeCount,"cascadeCount");
	HX_VISIT_MEMBER_NAME(LightObject_obj::cascadeSplitFactor,"cascadeSplitFactor");
	HX_VISIT_MEMBER_NAME(LightObject_obj::cascadeBounds,"cascadeBounds");
	HX_VISIT_MEMBER_NAME(LightObject_obj::corners,"corners");
	HX_VISIT_MEMBER_NAME(LightObject_obj::m,"m");
	HX_VISIT_MEMBER_NAME(LightObject_obj::p1,"p1");
	HX_VISIT_MEMBER_NAME(LightObject_obj::p2,"p2");
	HX_VISIT_MEMBER_NAME(LightObject_obj::p3,"p3");
};

#endif

hx::Class LightObject_obj::__mClass;

static ::String LightObject_obj_sStaticFields[] = {
	HX_("cascadeCount",fb,43,39,60),
	HX_("cascadeSplitFactor",75,3f,f3,12),
	HX_("cascadeBounds",c9,cd,86,6b),
	HX_("corners",fe,9a,1a,63),
	HX_("setCorners",7c,bf,f9,b5),
	HX_("m",6d,00,00,00),
	HX_("mix",9c,11,53,00),
	HX_("p1",c1,61,00,00),
	HX_("p2",c2,61,00,00),
	HX_("p3",c3,61,00,00),
	::String(null())
};

void LightObject_obj::__register()
{
	LightObject_obj _hx_dummy;
	LightObject_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.object.LightObject",4c,7b,e3,de);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &LightObject_obj::__GetStatic;
	__mClass->mSetStaticField = &LightObject_obj::__SetStatic;
	__mClass->mMarkFunc = LightObject_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(LightObject_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(LightObject_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< LightObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = LightObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LightObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LightObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void LightObject_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ff63d2941c613727_12_boot)
HXDLIN(  12)		cascadeCount = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ff63d2941c613727_13_boot)
HXDLIN(  13)		cascadeSplitFactor = ((Float)0.8);
            	}
{
            	HX_STACKFRAME(&_hx_pos_ff63d2941c613727_14_boot)
HXDLIN(  14)		cascadeBounds = ((Float)1.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_ff63d2941c613727_31_boot)
HXDLIN(  31)		corners = null();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_ff63d2941c613727_74_boot)
HXDLIN(  74)		m =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_ff63d2941c613727_220_boot)
HXDLIN( 220)		p1 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_ff63d2941c613727_221_boot)
HXDLIN( 221)		p2 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_ff63d2941c613727_222_boot)
HXDLIN( 222)		p3 =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
}

} // end namespace iron
} // end namespace object
