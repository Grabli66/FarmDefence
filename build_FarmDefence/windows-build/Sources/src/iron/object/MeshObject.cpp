// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_iron_Scene
#include <hxinc/iron/Scene.h>
#endif
#ifndef INCLUDED_iron_data_CameraData
#include <hxinc/iron/data/CameraData.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <hxinc/iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_data_Geometry
#include <hxinc/iron/data/Geometry.h>
#endif
#ifndef INCLUDED_iron_data_LightData
#include <hxinc/iron/data/LightData.h>
#endif
#ifndef INCLUDED_iron_data_MaterialContext
#include <hxinc/iron/data/MaterialContext.h>
#endif
#ifndef INCLUDED_iron_data_MaterialData
#include <hxinc/iron/data/MaterialData.h>
#endif
#ifndef INCLUDED_iron_data_MeshData
#include <hxinc/iron/data/MeshData.h>
#endif
#ifndef INCLUDED_iron_data_ParticleData
#include <hxinc/iron/data/ParticleData.h>
#endif
#ifndef INCLUDED_iron_data_ShaderContext
#include <hxinc/iron/data/ShaderContext.h>
#endif
#ifndef INCLUDED_iron_data_ShaderData
#include <hxinc/iron/data/ShaderData.h>
#endif
#ifndef INCLUDED_iron_data_TCameraData
#include <hxinc/iron/data/TCameraData.h>
#endif
#ifndef INCLUDED_iron_data_TLightData
#include <hxinc/iron/data/TLightData.h>
#endif
#ifndef INCLUDED_iron_data_TLod
#include <hxinc/iron/data/TLod.h>
#endif
#ifndef INCLUDED_iron_data_TMaterialContext
#include <hxinc/iron/data/TMaterialContext.h>
#endif
#ifndef INCLUDED_iron_data_TMaterialData
#include <hxinc/iron/data/TMaterialData.h>
#endif
#ifndef INCLUDED_iron_data_TObj
#include <hxinc/iron/data/TObj.h>
#endif
#ifndef INCLUDED_iron_data_TParticleData
#include <hxinc/iron/data/TParticleData.h>
#endif
#ifndef INCLUDED_iron_data_TParticleReference
#include <hxinc/iron/data/TParticleReference.h>
#endif
#ifndef INCLUDED_iron_data_TSceneFormat
#include <hxinc/iron/data/TSceneFormat.h>
#endif
#ifndef INCLUDED_iron_data_TShaderContext
#include <hxinc/iron/data/TShaderContext.h>
#endif
#ifndef INCLUDED_iron_data_TVertexData
#include <hxinc/iron/data/TVertexData.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <hxinc/iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <hxinc/iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_object_Animation
#include <hxinc/iron/object/Animation.h>
#endif
#ifndef INCLUDED_iron_object_BoneAnimation
#include <hxinc/iron/object/BoneAnimation.h>
#endif
#ifndef INCLUDED_iron_object_CameraObject
#include <hxinc/iron/object/CameraObject.h>
#endif
#ifndef INCLUDED_iron_object_FrustumPlane
#include <hxinc/iron/object/FrustumPlane.h>
#endif
#ifndef INCLUDED_iron_object_LightObject
#include <hxinc/iron/object/LightObject.h>
#endif
#ifndef INCLUDED_iron_object_MeshObject
#include <hxinc/iron/object/MeshObject.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <hxinc/iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_ParticleSystem
#include <hxinc/iron/object/ParticleSystem.h>
#endif
#ifndef INCLUDED_iron_object_Tilesheet
#include <hxinc/iron/object/Tilesheet.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <hxinc/iron/object/Transform.h>
#endif
#ifndef INCLUDED_iron_object_Uniforms
#include <hxinc/iron/object/Uniforms.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <hxinc/kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_IndexBuffer
#include <hxinc/kha/graphics4/IndexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <hxinc/kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <hxinc/kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexBuffer
#include <hxinc/kha/graphics4/VertexBuffer.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_23b447a144a44f97_17_new,"iron.object.MeshObject","new",0x3713d8c7,"iron.object.MeshObject.new","iron/object/MeshObject.hx",17,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_44_setData,"iron.object.MeshObject","setData",0x21915ed3,"iron.object.MeshObject.setData","iron/object/MeshObject.hx",44,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_61_remove,"iron.object.MeshObject","remove",0x13928e3d,"iron.object.MeshObject.remove","iron/object/MeshObject.hx",61,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_81_setupAnimation,"iron.object.MeshObject","setupAnimation",0xe780fbc0,"iron.object.MeshObject.setupAnimation","iron/object/MeshObject.hx",81,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_95_setupParticleSystem,"iron.object.MeshObject","setupParticleSystem",0x2c098b99,"iron.object.MeshObject.setupParticleSystem","iron/object/MeshObject.hx",95,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_103_setupTilesheet,"iron.object.MeshObject","setupTilesheet",0x1099dd6d,"iron.object.MeshObject.setupTilesheet","iron/object/MeshObject.hx",103,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_107_isLodMaterial,"iron.object.MeshObject","isLodMaterial",0xeb7ed5a5,"iron.object.MeshObject.isLodMaterial","iron/object/MeshObject.hx",107,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_110_setCulled,"iron.object.MeshObject","setCulled",0xc82c337a,"iron.object.MeshObject.setCulled","iron/object/MeshObject.hx",110,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_119_cullMaterial,"iron.object.MeshObject","cullMaterial",0xdd3d9332,"iron.object.MeshObject.cullMaterial","iron/object/MeshObject.hx",119,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_134_cullMesh,"iron.object.MeshObject","cullMesh",0x0bba9ef8,"iron.object.MeshObject.cullMesh","iron/object/MeshObject.hx",134,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_187_skipContext,"iron.object.MeshObject","skipContext",0x16124c97,"iron.object.MeshObject.skipContext","iron/object/MeshObject.hx",187,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_198_getContexts,"iron.object.MeshObject","getContexts",0xb648a5c1,"iron.object.MeshObject.getContexts","iron/object/MeshObject.hx",198,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_210_render,"iron.object.MeshObject","render",0x14335d4f,"iron.object.MeshObject.render","iron/object/MeshObject.hx",210,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_224_render,"iron.object.MeshObject","render",0x14335d4f,"iron.object.MeshObject.render","iron/object/MeshObject.hx",224,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_331_validContext,"iron.object.MeshObject","validContext",0xa864530c,"iron.object.MeshObject.validContext","iron/object/MeshObject.hx",331,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_336_computeCameraDistance,"iron.object.MeshObject","computeCameraDistance",0x133ecef8,"iron.object.MeshObject.computeCameraDistance","iron/object/MeshObject.hx",336,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_339_computeScreenSize,"iron.object.MeshObject","computeScreenSize",0x30d1634b,"iron.object.MeshObject.computeScreenSize","iron/object/MeshObject.hx",339,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_350_initLods,"iron.object.MeshObject","initLods",0xa753ee3b,"iron.object.MeshObject.initLods","iron/object/MeshObject.hx",350,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_359_toString,"iron.object.MeshObject","toString",0x9353f2e5,"iron.object.MeshObject.toString","iron/object/MeshObject.hx",359,0x2bb25669)
HX_LOCAL_STACK_FRAME(_hx_pos_23b447a144a44f97_209_boot,"iron.object.MeshObject","boot",0xf262d5eb,"iron.object.MeshObject.boot","iron/object/MeshObject.hx",209,0x2bb25669)
namespace iron{
namespace object{

void MeshObject_obj::__construct( ::iron::data::MeshData data,::Array< ::Dynamic> materials){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_17_new)
HXLINE(  30)		this->tilesheet = null();
HXLINE(  29)		this->frustumCulling = true;
HXLINE(  28)		this->screenSize = ((Float)0.0);
HXLINE(  25)		this->particleIndex = -1;
HXLINE(  24)		this->particleOwner = null();
HXLINE(  23)		this->particleChildren = null();
HXLINE(  22)		this->particleSystems = null();
HXLINE(  19)		this->data = null();
HXLINE(  37)		super::__construct();
HXLINE(  39)		this->materials = materials;
HXLINE(  40)		this->setData(data);
HXLINE(  41)		::iron::Scene_obj::active->meshes->push(hx::ObjectPtr<OBJ_>(this));
            	}

Dynamic MeshObject_obj::__CreateEmpty() { return new MeshObject_obj; }

void *MeshObject_obj::_hx_vtable = 0;

Dynamic MeshObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MeshObject_obj > _hx_result = new MeshObject_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MeshObject_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2a486766) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2a486766;
	} else {
		return inClassId==(int)0x50b0b4b3;
	}
}

void MeshObject_obj::setData( ::iron::data::MeshData data){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_44_setData)
HXLINE(  45)		this->data = data;
HXLINE(  46)		data->refcount++;
HXLINE(  49)		data->geom->build();
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshObject_obj,setData,(void))

void MeshObject_obj::remove(){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_61_remove)
HXLINE(  66)		if (hx::IsNotNull( this->particleChildren )) {
HXLINE(  67)			{
HXLINE(  67)				int _g = 0;
HXDLIN(  67)				::Array< ::Dynamic> _g1 = this->particleChildren;
HXDLIN(  67)				while((_g < _g1->length)){
HXLINE(  67)					 ::iron::object::MeshObject c = _g1->__get(_g).StaticCast<  ::iron::object::MeshObject >();
HXDLIN(  67)					_g = (_g + 1);
HXDLIN(  67)					c->remove();
            				}
            			}
HXLINE(  68)			this->particleChildren = null();
            		}
HXLINE(  70)		if (hx::IsNotNull( this->particleSystems )) {
HXLINE(  71)			{
HXLINE(  71)				int _g2 = 0;
HXDLIN(  71)				::Array< ::Dynamic> _g11 = this->particleSystems;
HXDLIN(  71)				while((_g2 < _g11->length)){
HXLINE(  71)					 ::iron::object::ParticleSystem psys = _g11->__get(_g2).StaticCast<  ::iron::object::ParticleSystem >();
HXDLIN(  71)					_g2 = (_g2 + 1);
HXDLIN(  71)					psys->remove();
            				}
            			}
HXLINE(  72)			this->particleSystems = null();
            		}
HXLINE(  75)		if (hx::IsNotNull( this->tilesheet )) {
HXLINE(  75)			this->tilesheet->remove();
            		}
HXLINE(  76)		if (hx::IsNotNull( ::iron::Scene_obj::active )) {
HXLINE(  76)			::iron::Scene_obj::active->meshes->remove(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(  77)		this->data->refcount--;
HXLINE(  78)		this->super::remove();
            	}


void MeshObject_obj::setupAnimation(::Array< ::Dynamic> oactions){
            	HX_GC_STACKFRAME(&_hx_pos_23b447a144a44f97_81_setupAnimation)
HXLINE(  83)		bool hasAction;
HXDLIN(  83)		bool hasAction1;
HXDLIN(  83)		if (hx::IsNotNull( this->parent )) {
HXLINE(  83)			hasAction1 = hx::IsNotNull( this->parent->raw );
            		}
            		else {
HXLINE(  83)			hasAction1 = false;
            		}
HXDLIN(  83)		if (hasAction1) {
HXLINE(  83)			hasAction = hx::IsNotNull( this->parent->raw->bone_actions );
            		}
            		else {
HXLINE(  83)			hasAction = false;
            		}
HXLINE(  84)		if (hasAction) {
HXLINE(  85)			::String armatureName = this->parent->name;
HXLINE(  86)			this->animation = this->getParentArmature(armatureName);
HXLINE(  87)			if (hx::IsNull( this->animation )) {
HXLINE(  87)				this->animation =  ::iron::object::BoneAnimation_obj::__alloc( HX_CTX ,armatureName);
            			}
HXLINE(  88)			if (this->data->isSkinned) {
HXLINE(  88)				hx::TCast<  ::iron::object::BoneAnimation >::cast(this->animation)->setSkin(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
HXLINE(  91)		this->super::setupAnimation(oactions);
            	}


void MeshObject_obj::setupParticleSystem(::String sceneName, ::iron::data::TParticleReference pref){
            	HX_GC_STACKFRAME(&_hx_pos_23b447a144a44f97_95_setupParticleSystem)
HXLINE(  96)		if (hx::IsNull( this->particleSystems )) {
HXLINE(  96)			this->particleSystems = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE(  97)		 ::iron::object::ParticleSystem psys =  ::iron::object::ParticleSystem_obj::__alloc( HX_CTX ,sceneName,pref);
HXLINE(  98)		this->particleSystems->push(psys);
            	}


HX_DEFINE_DYNAMIC_FUNC2(MeshObject_obj,setupParticleSystem,(void))

void MeshObject_obj::setupTilesheet(::String sceneName,::String tilesheet_ref,::String tilesheet_action_ref){
            	HX_GC_STACKFRAME(&_hx_pos_23b447a144a44f97_103_setupTilesheet)
HXDLIN( 103)		this->tilesheet =  ::iron::object::Tilesheet_obj::__alloc( HX_CTX ,sceneName,tilesheet_ref,tilesheet_action_ref);
            	}


HX_DEFINE_DYNAMIC_FUNC3(MeshObject_obj,setupTilesheet,(void))

bool MeshObject_obj::isLodMaterial(){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_107_isLodMaterial)
HXDLIN( 107)		bool _hx_tmp;
HXDLIN( 107)		if (hx::IsNotNull( this->raw )) {
HXDLIN( 107)			_hx_tmp = hx::IsNotNull( this->raw->lod_material );
            		}
            		else {
HXDLIN( 107)			_hx_tmp = false;
            		}
HXDLIN( 107)		if (_hx_tmp) {
HXDLIN( 107)			return hx::IsEq( this->raw->lod_material,true );
            		}
            		else {
HXDLIN( 107)			return false;
            		}
HXDLIN( 107)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshObject_obj,isLodMaterial,return )

bool MeshObject_obj::setCulled(bool isShadow,bool b){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_110_setCulled)
HXLINE( 111)		if (isShadow) {
HXLINE( 111)			this->culledShadow = b;
            		}
            		else {
HXLINE( 111)			this->culledMesh = b;
            		}
HXLINE( 112)		bool _hx_tmp;
HXDLIN( 112)		if (this->culledMesh) {
HXLINE( 112)			_hx_tmp = this->culledShadow;
            		}
            		else {
HXLINE( 112)			_hx_tmp = false;
            		}
HXDLIN( 112)		this->culled = _hx_tmp;
HXLINE( 116)		return b;
            	}


HX_DEFINE_DYNAMIC_FUNC2(MeshObject_obj,setCulled,return )

bool MeshObject_obj::cullMaterial(::String context){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_119_cullMaterial)
HXLINE( 121)		::Array< ::Dynamic> mats = this->materials;
HXLINE( 122)		bool _hx_tmp;
HXDLIN( 122)		bool _hx_tmp1;
HXDLIN( 122)		bool _hx_tmp2;
HXDLIN( 122)		if (hx::IsNotNull( this->raw )) {
HXLINE( 122)			_hx_tmp2 = hx::IsNotNull( this->raw->lod_material );
            		}
            		else {
HXLINE( 122)			_hx_tmp2 = false;
            		}
HXDLIN( 122)		if (_hx_tmp2) {
HXLINE( 122)			_hx_tmp1 = hx::IsEq( this->raw->lod_material,true );
            		}
            		else {
HXLINE( 122)			_hx_tmp1 = false;
            		}
HXDLIN( 122)		if (!(_hx_tmp1)) {
HXLINE( 122)			_hx_tmp = hx::IsNull( ( ( ::iron::data::MaterialData)(_hx_array_unsafe_get(mats,0)) )->getContext(context) );
            		}
            		else {
HXLINE( 122)			_hx_tmp = false;
            		}
HXDLIN( 122)		if (_hx_tmp) {
HXLINE( 122)			return true;
            		}
HXLINE( 124)		bool isShadow = (context == HX_("shadowmap",bc,6e,b8,f4));
HXLINE( 125)		bool _hx_tmp3;
HXDLIN( 125)		if (!(this->visibleMesh)) {
HXLINE( 125)			_hx_tmp3 = !(isShadow);
            		}
            		else {
HXLINE( 125)			_hx_tmp3 = false;
            		}
HXDLIN( 125)		if (_hx_tmp3) {
HXLINE( 125)			return this->setCulled(isShadow,true);
            		}
HXLINE( 126)		bool _hx_tmp4;
HXDLIN( 126)		if (!(this->visibleShadow)) {
HXLINE( 126)			_hx_tmp4 = isShadow;
            		}
            		else {
HXLINE( 126)			_hx_tmp4 = false;
            		}
HXDLIN( 126)		if (_hx_tmp4) {
HXLINE( 126)			return this->setCulled(isShadow,true);
            		}
HXLINE( 129)		if (this->skipContext(context)) {
HXLINE( 129)			return this->setCulled(isShadow,true);
            		}
HXLINE( 131)		return this->setCulled(isShadow,false);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshObject_obj,cullMaterial,return )

bool MeshObject_obj::cullMesh(::String context, ::iron::object::CameraObject camera, ::iron::object::LightObject light){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_134_cullMesh)
HXLINE( 135)		if (hx::IsNull( camera )) {
HXLINE( 135)			return false;
            		}
HXLINE( 137)		bool _hx_tmp;
HXDLIN( 137)		if (( (bool)(camera->data->raw->frustum_culling) )) {
HXLINE( 137)			_hx_tmp = this->frustumCulling;
            		}
            		else {
HXLINE( 137)			_hx_tmp = false;
            		}
HXDLIN( 137)		if (_hx_tmp) {
HXLINE( 140)			Float radiusScale;
HXDLIN( 140)			if (this->data->isSkinned) {
HXLINE( 140)				radiusScale = ((Float)2.0);
            			}
            			else {
HXLINE( 140)				radiusScale = ((Float)1.0);
            			}
HXLINE( 143)			bool _hx_tmp1;
HXDLIN( 143)			if (hx::IsNull( this->particleSystems )) {
HXLINE( 143)				_hx_tmp1 = hx::IsNotNull( this->particleOwner );
            			}
            			else {
HXLINE( 143)				_hx_tmp1 = true;
            			}
HXDLIN( 143)			if (_hx_tmp1) {
HXLINE( 143)				radiusScale = (radiusScale * 1000);
            			}
HXLINE( 145)			if ((context == HX_("voxel",46,89,02,3b))) {
HXLINE( 145)				radiusScale = (radiusScale * 100);
            			}
HXLINE( 146)			bool isShadow = (context == HX_("shadowmap",bc,6e,b8,f4));
HXLINE( 147)			::Array< ::Dynamic> frustumPlanes;
HXDLIN( 147)			if (isShadow) {
HXLINE( 147)				frustumPlanes = light->frustumPlanes;
            			}
            			else {
HXLINE( 147)				frustumPlanes = camera->frustumPlanes;
            			}
HXLINE( 149)			bool _hx_tmp2;
HXDLIN( 149)			if (isShadow) {
HXLINE( 149)				_hx_tmp2 = (light->data->raw->type != HX_("sun",8c,a9,57,00));
            			}
            			else {
HXLINE( 149)				_hx_tmp2 = false;
            			}
HXDLIN( 149)			if (_hx_tmp2) {
HXLINE( 150)				light->transform->radius = ( (float)(light->data->raw->far_plane) );
HXLINE( 151)				if (!(::iron::object::CameraObject_obj::sphereInFrustum(camera->frustumPlanes,light->transform,null(),null(),null(),null()))) {
HXLINE( 152)					return this->setCulled(isShadow,true);
            				}
            			}
HXLINE( 157)			if (!(this->data->geom->instanced)) {
HXLINE( 177)				if (!(::iron::object::CameraObject_obj::sphereInFrustum(frustumPlanes,this->transform,radiusScale,null(),null(),null()))) {
HXLINE( 178)					return this->setCulled(isShadow,true);
            				}
            			}
            		}
HXLINE( 183)		this->culled = false;
HXLINE( 184)		return this->culled;
            	}


HX_DEFINE_DYNAMIC_FUNC3(MeshObject_obj,cullMesh,return )

bool MeshObject_obj::skipContext(::String context){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_187_skipContext)
HXLINE( 188)		{
HXLINE( 188)			int _g = 0;
HXDLIN( 188)			::Array< ::Dynamic> _g1 = this->materials;
HXDLIN( 188)			while((_g < _g1->length)){
HXLINE( 188)				 ::iron::data::MaterialData mat = ( ( ::iron::data::MaterialData)(_hx_array_unsafe_get(_g1,_g)) );
HXDLIN( 188)				_g = (_g + 1);
HXLINE( 189)				bool _hx_tmp;
HXDLIN( 189)				if (hx::IsNotNull( mat->raw->skip_context )) {
HXLINE( 189)					_hx_tmp = (mat->raw->skip_context == context);
            				}
            				else {
HXLINE( 189)					_hx_tmp = false;
            				}
HXDLIN( 189)				if (_hx_tmp) {
HXLINE( 191)					return true;
            				}
            			}
            		}
HXLINE( 194)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshObject_obj,skipContext,return )

void MeshObject_obj::getContexts(::String context,::Array< ::Dynamic> materials,::Array< ::Dynamic> materialContexts,::Array< ::Dynamic> shaderContexts){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_198_getContexts)
HXDLIN( 198)		int _g = 0;
HXDLIN( 198)		while((_g < materials->length)){
HXDLIN( 198)			 ::iron::data::MaterialData mat = ( ( ::iron::data::MaterialData)(_hx_array_unsafe_get(materials,_g)) );
HXDLIN( 198)			_g = (_g + 1);
HXLINE( 199)			{
HXLINE( 199)				int _g2 = 0;
HXDLIN( 199)				int _g1 = mat->raw->contexts->length;
HXDLIN( 199)				while((_g2 < _g1)){
HXLINE( 199)					_g2 = (_g2 + 1);
HXDLIN( 199)					int i = (_g2 - 1);
HXLINE( 200)					if ((mat->raw->contexts->__get(i).StaticCast<  ::iron::data::TMaterialContext >()->name.substr(0,context.length) == context)) {
HXLINE( 201)						materialContexts->push(mat->contexts->__get(i).StaticCast<  ::iron::data::MaterialContext >());
HXLINE( 202)						shaderContexts->push(mat->shader->getContext(context));
HXLINE( 203)						goto _hx_goto_15;
            					}
            				}
            				_hx_goto_15:;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(MeshObject_obj,getContexts,(void))

void MeshObject_obj::render(::Dynamic g,::String context, ::iron::object::CameraObject camera, ::iron::object::LightObject light,::Array< ::String > bindParams){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_210_render)
HXDLIN( 210)		 ::iron::object::MeshObject _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 212)		bool _hx_tmp;
HXDLIN( 212)		if (hx::IsNotNull( this->data )) {
HXLINE( 212)			_hx_tmp = !(this->data->geom->ready);
            		}
            		else {
HXLINE( 212)			_hx_tmp = true;
            		}
HXDLIN( 212)		if (_hx_tmp) {
HXLINE( 212)			return;
            		}
HXLINE( 213)		if (!(this->visible)) {
HXLINE( 213)			return;
            		}
HXLINE( 214)		if (this->cullMesh(context,camera,light)) {
HXLINE( 214)			return;
            		}
HXLINE( 215)		bool meshContext;
HXDLIN( 215)		if (hx::IsNotNull( this->raw )) {
HXLINE( 215)			meshContext = (HX_("mesh",ed,49,59,48) == context);
            		}
            		else {
HXLINE( 215)			meshContext = false;
            		}
HXLINE( 217)		bool _hx_tmp1;
HXDLIN( 217)		bool _hx_tmp2;
HXDLIN( 217)		if (hx::IsNotNull( this->raw )) {
HXLINE( 217)			_hx_tmp2 = ( (bool)(this->raw->is_particle) );
            		}
            		else {
HXLINE( 217)			_hx_tmp2 = false;
            		}
HXDLIN( 217)		if (_hx_tmp2) {
HXLINE( 217)			_hx_tmp1 = hx::IsNull( this->particleOwner );
            		}
            		else {
HXLINE( 217)			_hx_tmp1 = false;
            		}
HXDLIN( 217)		if (_hx_tmp1) {
HXLINE( 217)			return;
            		}
HXLINE( 218)		bool _hx_tmp3;
HXDLIN( 218)		if (hx::IsNotNull( this->particleSystems )) {
HXLINE( 218)			_hx_tmp3 = meshContext;
            		}
            		else {
HXLINE( 218)			_hx_tmp3 = false;
            		}
HXDLIN( 218)		if (_hx_tmp3) {
HXLINE( 219)			if (hx::IsNull( this->particleChildren )) {
HXLINE( 220)				this->particleChildren = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 221)				{
HXLINE( 221)					int _g = 0;
HXDLIN( 221)					::Array< ::Dynamic> _g1 = this->particleSystems;
HXDLIN( 221)					while((_g < _g1->length)){
            						HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::iron::object::MeshObject,_gthis) HXARGC(1)
            						void _hx_run( ::iron::object::Object o){
            							HX_STACKFRAME(&_hx_pos_23b447a144a44f97_224_render)
HXLINE( 224)							if (hx::IsNotNull( o )) {
HXLINE( 225)								 ::iron::object::MeshObject c = ( ( ::iron::object::MeshObject)(o) );
HXLINE( 226)								_gthis->particleChildren->push(c);
HXLINE( 227)								c->particleOwner = _gthis;
HXLINE( 228)								c->particleIndex = (_gthis->particleChildren->length - 1);
HXLINE( 229)								c->transform = _gthis->transform;
            							}
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE( 221)						 ::iron::object::ParticleSystem psys = _g1->__get(_g).StaticCast<  ::iron::object::ParticleSystem >();
HXDLIN( 221)						_g = (_g + 1);
HXLINE( 223)						::iron::Scene_obj::active->spawnObject(psys->data->raw->dupli_object,null(), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            					}
            				}
            			}
HXLINE( 235)			{
HXLINE( 235)				int _g11 = 0;
HXDLIN( 235)				int _g2 = this->particleSystems->length;
HXDLIN( 235)				while((_g11 < _g2)){
HXLINE( 235)					_g11 = (_g11 + 1);
HXDLIN( 235)					int i = (_g11 - 1);
HXDLIN( 235)					 ::iron::object::ParticleSystem _hx_tmp4 = this->particleSystems->__get(i).StaticCast<  ::iron::object::ParticleSystem >();
HXDLIN( 235)					_hx_tmp4->update(this->particleChildren->__get(i).StaticCast<  ::iron::object::MeshObject >(),hx::ObjectPtr<OBJ_>(this));
            				}
            			}
            		}
HXLINE( 237)		bool _hx_tmp5;
HXDLIN( 237)		bool _hx_tmp6;
HXDLIN( 237)		if (hx::IsNotNull( this->particleSystems )) {
HXLINE( 237)			_hx_tmp6 = (this->particleSystems->length > 0);
            		}
            		else {
HXLINE( 237)			_hx_tmp6 = false;
            		}
HXDLIN( 237)		if (_hx_tmp6) {
HXLINE( 237)			_hx_tmp5 = !(this->particleSystems->__get(0).StaticCast<  ::iron::object::ParticleSystem >()->data->raw->render_emitter);
            		}
            		else {
HXLINE( 237)			_hx_tmp5 = false;
            		}
HXDLIN( 237)		if (_hx_tmp5) {
HXLINE( 237)			return;
            		}
HXLINE( 239)		if (hx::IsNotNull( this->tilesheet )) {
HXLINE( 239)			this->tilesheet->update();
            		}
HXLINE( 240)		if (this->cullMaterial(context)) {
HXLINE( 240)			return;
            		}
HXLINE( 243)		::Array< ::Dynamic> mats = this->materials;
HXLINE( 244)		 ::iron::object::MeshObject lod = hx::ObjectPtr<OBJ_>(this);
HXLINE( 245)		bool _hx_tmp7;
HXDLIN( 245)		bool _hx_tmp8;
HXDLIN( 245)		if (hx::IsNotNull( this->raw )) {
HXLINE( 245)			_hx_tmp8 = hx::IsNotNull( this->raw->lods );
            		}
            		else {
HXLINE( 245)			_hx_tmp8 = false;
            		}
HXDLIN( 245)		if (_hx_tmp8) {
HXLINE( 245)			_hx_tmp7 = (this->raw->lods->length > 0);
            		}
            		else {
HXLINE( 245)			_hx_tmp7 = false;
            		}
HXDLIN( 245)		if (_hx_tmp7) {
HXLINE( 246)			{
HXLINE( 246)				 ::iron::object::Transform tr = this->transform;
HXDLIN( 246)				float volume = ((tr->dim->x * tr->dim->y) * tr->dim->z);
HXDLIN( 246)				this->screenSize = (volume * (((Float)1.0) / this->cameraDistance));
HXDLIN( 246)				Float _hx_tmp9;
HXDLIN( 246)				if ((this->screenSize > ((Float)1.0))) {
HXLINE( 246)					_hx_tmp9 = ((Float)1.0);
            				}
            				else {
HXLINE( 246)					_hx_tmp9 = this->screenSize;
            				}
HXDLIN( 246)				this->screenSize = _hx_tmp9;
            			}
HXLINE( 247)			if (hx::IsNull( this->lods )) {
HXLINE( 247)				this->lods = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 247)				{
HXLINE( 247)					int _g3 = 0;
HXDLIN( 247)					::Array< ::Dynamic> _g12 = this->raw->lods;
HXDLIN( 247)					while((_g3 < _g12->length)){
HXLINE( 247)						 ::iron::data::TLod l = _g12->__get(_g3).StaticCast<  ::iron::data::TLod >();
HXDLIN( 247)						_g3 = (_g3 + 1);
HXDLIN( 247)						if ((l->object_ref == HX_("",00,00,00,00))) {
HXLINE( 247)							this->lods->push(null());
            						}
            						else {
HXLINE( 247)							::Array< ::Dynamic> _hx_tmp10 = this->lods;
HXDLIN( 247)							_hx_tmp10->push(::iron::Scene_obj::active->getChild(l->object_ref));
            						}
            					}
            				}
            			}
HXLINE( 248)			if ((context == HX_("voxel",46,89,02,3b))) {
HXLINE( 250)				::Array< ::Dynamic> lod1 = this->lods;
HXDLIN( 250)				lod = ( ( ::iron::object::MeshObject)(lod1->__get((this->lods->length - 1)).StaticCast<  ::iron::object::Object >()) );
            			}
            			else {
HXLINE( 254)				int _g13 = 0;
HXDLIN( 254)				int _g4 = this->raw->lods->length;
HXDLIN( 254)				while((_g13 < _g4)){
HXLINE( 254)					_g13 = (_g13 + 1);
HXDLIN( 254)					int i1 = (_g13 - 1);
HXLINE( 256)					if ((this->screenSize > this->raw->lods->__get(i1).StaticCast<  ::iron::data::TLod >()->screen_size)) {
HXLINE( 256)						goto _hx_goto_20;
            					}
HXLINE( 257)					lod = ( ( ::iron::object::MeshObject)(this->lods->__get(i1).StaticCast<  ::iron::object::Object >()) );
HXLINE( 258)					bool _hx_tmp11;
HXDLIN( 258)					bool _hx_tmp12;
HXDLIN( 258)					if (hx::IsNotNull( this->raw )) {
HXLINE( 258)						_hx_tmp12 = hx::IsNotNull( this->raw->lod_material );
            					}
            					else {
HXLINE( 258)						_hx_tmp12 = false;
            					}
HXDLIN( 258)					if (_hx_tmp12) {
HXLINE( 258)						_hx_tmp11 = hx::IsEq( this->raw->lod_material,true );
            					}
            					else {
HXLINE( 258)						_hx_tmp11 = false;
            					}
HXDLIN( 258)					if (_hx_tmp11) {
HXLINE( 258)						mats = lod->materials;
            					}
            				}
            				_hx_goto_20:;
            			}
HXLINE( 261)			if (hx::IsNull( lod )) {
HXLINE( 261)				return;
            			}
            		}
HXLINE( 266)		bool _hx_tmp13;
HXDLIN( 266)		bool _hx_tmp14;
HXDLIN( 266)		bool _hx_tmp15;
HXDLIN( 266)		if (hx::IsNotNull( this->raw )) {
HXLINE( 266)			_hx_tmp15 = hx::IsNotNull( this->raw->lod_material );
            		}
            		else {
HXLINE( 266)			_hx_tmp15 = false;
            		}
HXDLIN( 266)		if (_hx_tmp15) {
HXLINE( 266)			_hx_tmp14 = hx::IsEq( this->raw->lod_material,true );
            		}
            		else {
HXLINE( 266)			_hx_tmp14 = false;
            		}
HXDLIN( 266)		if (_hx_tmp14) {
HXLINE( 266)			_hx_tmp13 = hx::IsNull( ( ( ::iron::data::MaterialData)(_hx_array_unsafe_get(mats,0)) )->getContext(context) );
            		}
            		else {
HXLINE( 266)			_hx_tmp13 = false;
            		}
HXDLIN( 266)		if (_hx_tmp13) {
HXLINE( 266)			return;
            		}
HXLINE( 269)		::Array< ::Dynamic> materialContexts = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 270)		::Array< ::Dynamic> shaderContexts = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 271)		this->getContexts(context,mats,materialContexts,shaderContexts);
HXLINE( 273)		this->transform->update();
HXLINE( 276)		 ::iron::data::MeshData ldata = lod->data;
HXLINE( 277)		{
HXLINE( 277)			int _g14 = 0;
HXDLIN( 277)			int _g5 = ldata->geom->indexBuffers->length;
HXDLIN( 277)			while((_g14 < _g5)){
HXLINE( 277)				_g14 = (_g14 + 1);
HXDLIN( 277)				int i2 = (_g14 - 1);
HXLINE( 279)				int mi = ldata->geom->materialIndices->__get(i2);
HXLINE( 280)				if ((shaderContexts->length <= mi)) {
HXLINE( 280)					continue;
            				}
HXLINE( 281)				 ::iron::data::ShaderContext scontext = shaderContexts->__get(mi).StaticCast<  ::iron::data::ShaderContext >();
HXLINE( 282)				::Array< ::Dynamic> vs = scontext->raw->vertex_structure;
HXLINE( 285)				if (hx::IsNotEq( scontext->pipeState,::iron::object::MeshObject_obj::lastPipeline )) {
HXLINE( 286)					::kha::graphics4::Graphics_obj::setPipeline(g,scontext->pipeState);
HXLINE( 287)					::iron::object::MeshObject_obj::lastPipeline = scontext->pipeState;
HXLINE( 288)					::iron::object::Uniforms_obj::setContextConstants(g,scontext,camera,light,bindParams);
            				}
HXLINE( 290)				::iron::object::Uniforms_obj::setObjectConstants(g,scontext,hx::ObjectPtr<OBJ_>(this),camera,light);
HXLINE( 291)				if ((materialContexts->length > mi)) {
HXLINE( 292)					::iron::object::Uniforms_obj::setMaterialConstants(g,scontext,materialContexts->__get(mi).StaticCast<  ::iron::data::MaterialContext >());
            				}
HXLINE( 299)				if (ldata->geom->instanced) {
HXLINE( 300)					 ::kha::graphics4::VertexBuffer _hx_tmp16 = ldata->geom->get(vs);
HXDLIN( 300)					::kha::graphics4::Graphics_obj::setVertexBuffers(g,::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp16)->init(1,ldata->geom->instancedVB));
            				}
            				else {
HXLINE( 303)					::kha::graphics4::Graphics_obj::setVertexBuffer(g,ldata->geom->get(vs));
            				}
HXLINE( 307)				::kha::graphics4::Graphics_obj::setIndexBuffer(g,ldata->geom->indexBuffers->__get(i2).StaticCast<  ::kha::graphics4::IndexBuffer >());
HXLINE( 310)				if (ldata->geom->instanced) {
HXLINE( 311)					::kha::graphics4::Graphics_obj::drawIndexedVerticesInstanced(g,ldata->geom->instanceCount,ldata->geom->start,ldata->geom->count);
            				}
            				else {
HXLINE( 314)					::kha::graphics4::Graphics_obj::drawIndexedVertices(g,ldata->geom->start,ldata->geom->count);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(MeshObject_obj,render,(void))

bool MeshObject_obj::validContext( ::iron::data::MaterialData mat,::String context){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_331_validContext)
HXDLIN( 331)		return hx::IsNotNull( mat->getContext(context) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(MeshObject_obj,validContext,return )

void MeshObject_obj::computeCameraDistance(Float camX,Float camY,Float camZ){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_336_computeCameraDistance)
HXDLIN( 336)		float vx = (camX - this->transform->world->self->_30);
HXDLIN( 336)		float vy = (camY - this->transform->world->self->_31);
HXDLIN( 336)		float vz = (camZ - this->transform->world->self->_32);
HXDLIN( 336)		this->cameraDistance = ( (Float)(( (float)(::Math_obj::sqrt(( (Float)((((vx * vx) + (vy * vy)) + (vz * vz))) ))) )) );
            	}


HX_DEFINE_DYNAMIC_FUNC3(MeshObject_obj,computeCameraDistance,(void))

void MeshObject_obj::computeScreenSize( ::iron::object::CameraObject camera){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_339_computeScreenSize)
HXLINE( 343)		 ::iron::object::Transform tr = this->transform;
HXLINE( 344)		float volume = ((tr->dim->x * tr->dim->y) * tr->dim->z);
HXLINE( 345)		this->screenSize = (volume * (((Float)1.0) / this->cameraDistance));
HXLINE( 346)		Float _hx_tmp;
HXDLIN( 346)		if ((this->screenSize > ((Float)1.0))) {
HXLINE( 346)			_hx_tmp = ((Float)1.0);
            		}
            		else {
HXLINE( 346)			_hx_tmp = this->screenSize;
            		}
HXDLIN( 346)		this->screenSize = _hx_tmp;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MeshObject_obj,computeScreenSize,(void))

void MeshObject_obj::initLods(){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_350_initLods)
HXDLIN( 350)		if (hx::IsNull( this->lods )) {
HXLINE( 351)			this->lods = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 352)			{
HXLINE( 352)				int _g = 0;
HXDLIN( 352)				::Array< ::Dynamic> _g1 = this->raw->lods;
HXDLIN( 352)				while((_g < _g1->length)){
HXLINE( 352)					 ::iron::data::TLod l = _g1->__get(_g).StaticCast<  ::iron::data::TLod >();
HXDLIN( 352)					_g = (_g + 1);
HXLINE( 353)					if ((l->object_ref == HX_("",00,00,00,00))) {
HXLINE( 353)						this->lods->push(null());
            					}
            					else {
HXLINE( 354)						::Array< ::Dynamic> _hx_tmp = this->lods;
HXDLIN( 354)						_hx_tmp->push(::iron::Scene_obj::active->getChild(l->object_ref));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MeshObject_obj,initLods,(void))

::String MeshObject_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_359_toString)
HXDLIN( 359)		return (HX_("Mesh Object ",4e,9f,c9,27) + this->name);
            	}


 ::kha::graphics4::PipelineState MeshObject_obj::lastPipeline;


hx::ObjectPtr< MeshObject_obj > MeshObject_obj::__new( ::iron::data::MeshData data,::Array< ::Dynamic> materials) {
	hx::ObjectPtr< MeshObject_obj > __this = new MeshObject_obj();
	__this->__construct(data,materials);
	return __this;
}

hx::ObjectPtr< MeshObject_obj > MeshObject_obj::__alloc(hx::Ctx *_hx_ctx, ::iron::data::MeshData data,::Array< ::Dynamic> materials) {
	MeshObject_obj *__this = (MeshObject_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MeshObject_obj), true, "iron.object.MeshObject"));
	*(void **)__this = MeshObject_obj::_hx_vtable;
	__this->__construct(data,materials);
	return __this;
}

MeshObject_obj::MeshObject_obj()
{
}

void MeshObject_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MeshObject);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(materials,"materials");
	HX_MARK_MEMBER_NAME(particleSystems,"particleSystems");
	HX_MARK_MEMBER_NAME(particleChildren,"particleChildren");
	HX_MARK_MEMBER_NAME(particleOwner,"particleOwner");
	HX_MARK_MEMBER_NAME(particleIndex,"particleIndex");
	HX_MARK_MEMBER_NAME(cameraDistance,"cameraDistance");
	HX_MARK_MEMBER_NAME(screenSize,"screenSize");
	HX_MARK_MEMBER_NAME(frustumCulling,"frustumCulling");
	HX_MARK_MEMBER_NAME(tilesheet,"tilesheet");
	 ::iron::object::Object_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MeshObject_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(materials,"materials");
	HX_VISIT_MEMBER_NAME(particleSystems,"particleSystems");
	HX_VISIT_MEMBER_NAME(particleChildren,"particleChildren");
	HX_VISIT_MEMBER_NAME(particleOwner,"particleOwner");
	HX_VISIT_MEMBER_NAME(particleIndex,"particleIndex");
	HX_VISIT_MEMBER_NAME(cameraDistance,"cameraDistance");
	HX_VISIT_MEMBER_NAME(screenSize,"screenSize");
	HX_VISIT_MEMBER_NAME(frustumCulling,"frustumCulling");
	HX_VISIT_MEMBER_NAME(tilesheet,"tilesheet");
	 ::iron::object::Object_obj::__Visit(HX_VISIT_ARG);
}

hx::Val MeshObject_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"setData") ) { return hx::Val( setData_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"cullMesh") ) { return hx::Val( cullMesh_dyn() ); }
		if (HX_FIELD_EQ(inName,"initLods") ) { return hx::Val( initLods_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"materials") ) { return hx::Val( materials ); }
		if (HX_FIELD_EQ(inName,"tilesheet") ) { return hx::Val( tilesheet ); }
		if (HX_FIELD_EQ(inName,"setCulled") ) { return hx::Val( setCulled_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"screenSize") ) { return hx::Val( screenSize ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"skipContext") ) { return hx::Val( skipContext_dyn() ); }
		if (HX_FIELD_EQ(inName,"getContexts") ) { return hx::Val( getContexts_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cullMaterial") ) { return hx::Val( cullMaterial_dyn() ); }
		if (HX_FIELD_EQ(inName,"validContext") ) { return hx::Val( validContext_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"particleOwner") ) { return hx::Val( particleOwner ); }
		if (HX_FIELD_EQ(inName,"particleIndex") ) { return hx::Val( particleIndex ); }
		if (HX_FIELD_EQ(inName,"isLodMaterial") ) { return hx::Val( isLodMaterial_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"cameraDistance") ) { return hx::Val( cameraDistance ); }
		if (HX_FIELD_EQ(inName,"frustumCulling") ) { return hx::Val( frustumCulling ); }
		if (HX_FIELD_EQ(inName,"setupAnimation") ) { return hx::Val( setupAnimation_dyn() ); }
		if (HX_FIELD_EQ(inName,"setupTilesheet") ) { return hx::Val( setupTilesheet_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"particleSystems") ) { return hx::Val( particleSystems ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"particleChildren") ) { return hx::Val( particleChildren ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"computeScreenSize") ) { return hx::Val( computeScreenSize_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"setupParticleSystem") ) { return hx::Val( setupParticleSystem_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"computeCameraDistance") ) { return hx::Val( computeCameraDistance_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MeshObject_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"lastPipeline") ) { outValue = ( lastPipeline ); return true; }
	}
	return false;
}

hx::Val MeshObject_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::iron::data::MeshData >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"materials") ) { materials=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tilesheet") ) { tilesheet=inValue.Cast<  ::iron::object::Tilesheet >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"screenSize") ) { screenSize=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"particleOwner") ) { particleOwner=inValue.Cast<  ::iron::object::MeshObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"particleIndex") ) { particleIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"cameraDistance") ) { cameraDistance=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frustumCulling") ) { frustumCulling=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"particleSystems") ) { particleSystems=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"particleChildren") ) { particleChildren=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MeshObject_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"lastPipeline") ) { lastPipeline=ioValue.Cast<  ::kha::graphics4::PipelineState >(); return true; }
	}
	return false;
}

void MeshObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("materials",ec,b5,0b,a0));
	outFields->push(HX_("particleSystems",fe,58,b0,f3));
	outFields->push(HX_("particleChildren",a5,c9,1d,55));
	outFields->push(HX_("particleOwner",0d,4c,cd,4e));
	outFields->push(HX_("particleIndex",ec,4e,6b,d4));
	outFields->push(HX_("cameraDistance",fa,42,86,61));
	outFields->push(HX_("screenSize",4d,2e,8a,c4));
	outFields->push(HX_("frustumCulling",2e,53,95,96));
	outFields->push(HX_("tilesheet",b1,d0,4d,74));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo MeshObject_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::data::MeshData*/ ,(int)offsetof(MeshObject_obj,data),HX_("data",2a,56,63,42)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(MeshObject_obj,materials),HX_("materials",ec,b5,0b,a0)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(MeshObject_obj,particleSystems),HX_("particleSystems",fe,58,b0,f3)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(MeshObject_obj,particleChildren),HX_("particleChildren",a5,c9,1d,55)},
	{hx::fsObject /*::iron::object::MeshObject*/ ,(int)offsetof(MeshObject_obj,particleOwner),HX_("particleOwner",0d,4c,cd,4e)},
	{hx::fsInt,(int)offsetof(MeshObject_obj,particleIndex),HX_("particleIndex",ec,4e,6b,d4)},
	{hx::fsFloat,(int)offsetof(MeshObject_obj,cameraDistance),HX_("cameraDistance",fa,42,86,61)},
	{hx::fsFloat,(int)offsetof(MeshObject_obj,screenSize),HX_("screenSize",4d,2e,8a,c4)},
	{hx::fsBool,(int)offsetof(MeshObject_obj,frustumCulling),HX_("frustumCulling",2e,53,95,96)},
	{hx::fsObject /*::iron::object::Tilesheet*/ ,(int)offsetof(MeshObject_obj,tilesheet),HX_("tilesheet",b1,d0,4d,74)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo MeshObject_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::kha::graphics4::PipelineState*/ ,(void *) &MeshObject_obj::lastPipeline,HX_("lastPipeline",98,c7,15,ad)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String MeshObject_obj_sMemberFields[] = {
	HX_("data",2a,56,63,42),
	HX_("materials",ec,b5,0b,a0),
	HX_("particleSystems",fe,58,b0,f3),
	HX_("particleChildren",a5,c9,1d,55),
	HX_("particleOwner",0d,4c,cd,4e),
	HX_("particleIndex",ec,4e,6b,d4),
	HX_("cameraDistance",fa,42,86,61),
	HX_("screenSize",4d,2e,8a,c4),
	HX_("frustumCulling",2e,53,95,96),
	HX_("tilesheet",b1,d0,4d,74),
	HX_("setData",ec,96,e7,07),
	HX_("remove",44,9c,88,04),
	HX_("setupAnimation",c7,e8,ce,b6),
	HX_("setupParticleSystem",32,05,a0,26),
	HX_("setupTilesheet",74,ca,e7,df),
	HX_("isLodMaterial",7e,a6,e7,f7),
	HX_("setCulled",d3,63,93,9a),
	HX_("cullMaterial",79,60,48,3a),
	HX_("cullMesh",bf,7c,d5,b0),
	HX_("skipContext",30,05,e9,b4),
	HX_("getContexts",5a,5e,1f,55),
	HX_("render",56,6b,29,05),
	HX_("validContext",53,20,6f,05),
	HX_("computeCameraDistance",d1,a0,99,bb),
	HX_("computeScreenSize",a4,14,d6,db),
	HX_("initLods",02,cc,6e,4c),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

static void MeshObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MeshObject_obj::lastPipeline,"lastPipeline");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MeshObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MeshObject_obj::lastPipeline,"lastPipeline");
};

#endif

hx::Class MeshObject_obj::__mClass;

static ::String MeshObject_obj_sStaticFields[] = {
	HX_("lastPipeline",98,c7,15,ad),
	::String(null())
};

void MeshObject_obj::__register()
{
	MeshObject_obj _hx_dummy;
	MeshObject_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.object.MeshObject",55,69,60,64);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MeshObject_obj::__GetStatic;
	__mClass->mSetStaticField = &MeshObject_obj::__SetStatic;
	__mClass->mMarkFunc = MeshObject_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MeshObject_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MeshObject_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MeshObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MeshObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MeshObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MeshObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MeshObject_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_23b447a144a44f97_209_boot)
HXDLIN( 209)		lastPipeline = null();
            	}
}

} // end namespace iron
} // end namespace object
