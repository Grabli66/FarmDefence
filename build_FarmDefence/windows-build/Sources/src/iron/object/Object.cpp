// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_Type
#include <hxinc/Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <hxinc/haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <hxinc/haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_iron_App
#include <hxinc/iron/App.h>
#endif
#ifndef INCLUDED_iron_Scene
#include <hxinc/iron/Scene.h>
#endif
#ifndef INCLUDED_iron_Trait
#include <hxinc/iron/Trait.h>
#endif
#ifndef INCLUDED_iron_data_Armature
#include <hxinc/iron/data/Armature.h>
#endif
#ifndef INCLUDED_iron_data_TObj
#include <hxinc/iron/data/TObj.h>
#endif
#ifndef INCLUDED_iron_data_TSceneFormat
#include <hxinc/iron/data/TSceneFormat.h>
#endif
#ifndef INCLUDED_iron_object_Animation
#include <hxinc/iron/object/Animation.h>
#endif
#ifndef INCLUDED_iron_object_BoneAnimation
#include <hxinc/iron/object/BoneAnimation.h>
#endif
#ifndef INCLUDED_iron_object_Constraint
#include <hxinc/iron/object/Constraint.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <hxinc/iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_ObjectAnimation
#include <hxinc/iron/object/ObjectAnimation.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <hxinc/iron/object/Transform.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <hxinc/kha/graphics4/Graphics.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_6_new,"iron.object.Object","new",0x215267fa,"iron.object.Object.new","iron/object/Object.hx",6,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_45_addChild,"iron.object.Object","addChild",0xbbca69e1,"iron.object.Object.addChild","iron/object/Object.hx",45,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_58_removeChild,"iron.object.Object","removeChild",0xdd144852,"iron.object.Object.removeChild","iron/object/Object.hx",58,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_68_remove,"iron.object.Object","remove",0x4b4d40ea,"iron.object.Object.remove","iron/object/Object.hx",68,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_82_getChild,"iron.object.Object","getChild",0xa244534c,"iron.object.Object.getChild","iron/object/Object.hx",82,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_93_getChildOfType,"iron.object.Object","getChildOfType",0x04169fdd,"iron.object.Object.getChildOfType","iron/object/Object.hx",93,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_105_addTrait,"iron.object.Object","addTrait",0x8c305413,"iron.object.Object.addTrait","iron/object/Object.hx",105,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_121_removeTrait,"iron.object.Object","removeTrait",0xad7a3284,"iron.object.Object.removeTrait","iron/object/Object.hx",121,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_155_getTrait,"iron.object.Object","getTrait",0x72aa3d7e,"iron.object.Object.getTrait","iron/object/Object.hx",155,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_161_getParentArmature,"iron.object.Object","getParentArmature",0xd2d94013,"iron.object.Object.getParentArmature","iron/object/Object.hx",161,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_167_setupAnimation,"iron.object.Object","setupAnimation",0xd161a36d,"iron.object.Object.setupAnimation","iron/object/Object.hx",167,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_171_setupAnimation,"iron.object.Object","setupAnimation",0xd161a36d,"iron.object.Object.setupAnimation","iron/object/Object.hx",171,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_193_toString,"iron.object.Object","toString",0x35226ad2,"iron.object.Object.toString","iron/object/Object.hx",193,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_183_seededRandom,"iron.object.Object","seededRandom",0xc89c8359,"iron.object.Object.seededRandom","iron/object/Object.hx",183,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_7_boot,"iron.object.Object","boot",0xfee19358,"iron.object.Object.boot","iron/object/Object.hx",7,0xa61e7e96)
HX_LOCAL_STACK_FRAME(_hx_pos_3bdfe9b3b9a7fc6b_182_boot,"iron.object.Object","boot",0xfee19358,"iron.object.Object.boot","iron/object/Object.hx",182,0xa61e7e96)
namespace iron{
namespace object{

void Object_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_6_new)
HXLINE(  29)		this->isEmpty = false;
HXLINE(  28)		this->properties = null();
HXLINE(  27)		this->culledShadow = false;
HXLINE(  26)		this->culledMesh = false;
HXLINE(  25)		this->culled = false;
HXLINE(  24)		this->visibleShadow = true;
HXLINE(  23)		this->visibleMesh = true;
HXLINE(  22)		this->visible = true;
HXLINE(  21)		this->animation = null();
HXLINE(  19)		this->lods = null();
HXLINE(  18)		this->children = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  17)		this->parent = null();
HXLINE(  15)		this->traits = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  14)		this->constraints = null();
HXLINE(  12)		this->name = HX_("",00,00,00,00);
HXLINE(  10)		this->raw = null();
HXLINE(  32)		this->uid = ::iron::object::Object_obj::uidCounter++;
HXLINE(  33)		this->urandom = ::iron::object::Object_obj::seededRandom();
HXLINE(  34)		this->transform =  ::iron::object::Transform_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE(  35)		this->isEmpty = hx::IsEq( ::Type_obj::getClass(hx::ObjectPtr<OBJ_>(this)),hx::ClassOf< ::iron::object::Object >() );
HXLINE(  36)		bool _hx_tmp;
HXDLIN(  36)		if (this->isEmpty) {
HXLINE(  36)			_hx_tmp = hx::IsNotNull( ::iron::Scene_obj::active );
            		}
            		else {
HXLINE(  36)			_hx_tmp = false;
            		}
HXDLIN(  36)		if (_hx_tmp) {
HXLINE(  36)			::iron::Scene_obj::active->empties->push(hx::ObjectPtr<OBJ_>(this));
            		}
            	}

Dynamic Object_obj::__CreateEmpty() { return new Object_obj; }

void *Object_obj::_hx_vtable = 0;

Dynamic Object_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Object_obj > _hx_result = new Object_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Object_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2a486766;
}

void Object_obj::addChild( ::iron::object::Object o,hx::Null< bool >  __o_parentInverse){
bool parentInverse = __o_parentInverse.Default(false);
            	HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_45_addChild)
HXLINE(  46)		if (hx::IsEq( o->parent,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(  46)			return;
            		}
HXLINE(  47)		this->children->push(o);
HXLINE(  48)		o->parent = hx::ObjectPtr<OBJ_>(this);
HXLINE(  49)		if (parentInverse) {
HXLINE(  49)			o->transform->applyParentInverse();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Object_obj,addChild,(void))

void Object_obj::removeChild( ::iron::object::Object o,hx::Null< bool >  __o_keepTransform){
bool keepTransform = __o_keepTransform.Default(false);
            	HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_58_removeChild)
HXLINE(  59)		if (keepTransform) {
HXLINE(  59)			o->transform->applyParent();
            		}
HXLINE(  60)		o->parent = null();
HXLINE(  61)		o->transform->buildMatrix();
HXLINE(  62)		this->children->remove(o);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Object_obj,removeChild,(void))

void Object_obj::remove(){
            	HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_68_remove)
HXLINE(  69)		bool _hx_tmp;
HXDLIN(  69)		if (this->isEmpty) {
HXLINE(  69)			_hx_tmp = hx::IsNotNull( ::iron::Scene_obj::active );
            		}
            		else {
HXLINE(  69)			_hx_tmp = false;
            		}
HXDLIN(  69)		if (_hx_tmp) {
HXLINE(  69)			::iron::Scene_obj::active->empties->remove(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(  70)		if (hx::IsNotNull( this->animation )) {
HXLINE(  70)			this->animation->remove();
            		}
HXLINE(  71)		while((this->children->length > 0)){
HXLINE(  71)			this->children->__get(0).StaticCast<  ::iron::object::Object >()->remove();
            		}
HXLINE(  72)		while((this->traits->length > 0)){
HXLINE(  72)			this->traits->__get(0).StaticCast<  ::iron::Trait >()->remove();
            		}
HXLINE(  73)		if (hx::IsNotNull( this->parent )) {
HXLINE(  73)			this->parent->children->remove(hx::ObjectPtr<OBJ_>(this));
HXDLIN(  73)			this->parent = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Object_obj,remove,(void))

 ::iron::object::Object Object_obj::getChild(::String name){
            	HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_82_getChild)
HXLINE(  83)		if ((this->name == name)) {
HXLINE(  83)			return hx::ObjectPtr<OBJ_>(this);
            		}
            		else {
HXLINE(  85)			int _g = 0;
HXDLIN(  85)			::Array< ::Dynamic> _g1 = this->children;
HXDLIN(  85)			while((_g < _g1->length)){
HXLINE(  85)				 ::iron::object::Object c = _g1->__get(_g).StaticCast<  ::iron::object::Object >();
HXDLIN(  85)				_g = (_g + 1);
HXLINE(  86)				 ::iron::object::Object r = c->getChild(name);
HXLINE(  87)				if (hx::IsNotNull( r )) {
HXLINE(  87)					return r;
            				}
            			}
            		}
HXLINE(  90)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Object_obj,getChild,return )

 ::iron::object::Object Object_obj::getChildOfType(hx::Class type){
            	HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_93_getChildOfType)
HXLINE(  94)		if (::Std_obj::is(hx::ObjectPtr<OBJ_>(this),type)) {
HXLINE(  94)			return hx::ObjectPtr<OBJ_>(this);
            		}
            		else {
HXLINE(  96)			int _g = 0;
HXDLIN(  96)			::Array< ::Dynamic> _g1 = this->children;
HXDLIN(  96)			while((_g < _g1->length)){
HXLINE(  96)				 ::iron::object::Object c = _g1->__get(_g).StaticCast<  ::iron::object::Object >();
HXDLIN(  96)				_g = (_g + 1);
HXLINE(  97)				 ::iron::object::Object r = c->getChildOfType(type);
HXLINE(  98)				if (hx::IsNotNull( r )) {
HXLINE(  98)					return r;
            				}
            			}
            		}
HXLINE( 101)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Object_obj,getChildOfType,return )

void Object_obj::addTrait( ::iron::Trait t){
            	HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_105_addTrait)
HXLINE( 106)		this->traits->push(t);
HXLINE( 107)		t->object = hx::ObjectPtr<OBJ_>(this);
HXLINE( 109)		if (hx::IsNotNull( t->_add )) {
HXLINE( 110)			{
HXLINE( 110)				int _g = 0;
HXDLIN( 110)				::Array< ::Dynamic> _g1 = t->_add;
HXDLIN( 110)				while((_g < _g1->length)){
HXLINE( 110)					 ::Dynamic f = _g1->__get(_g);
HXDLIN( 110)					_g = (_g + 1);
HXDLIN( 110)					f();
            				}
            			}
HXLINE( 111)			t->_add = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Object_obj,addTrait,(void))

void Object_obj::removeTrait( ::iron::Trait t){
            	HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_121_removeTrait)
HXLINE( 122)		if (hx::IsNotNull( t->_init )) {
HXLINE( 123)			{
HXLINE( 123)				int _g = 0;
HXDLIN( 123)				::Array< ::Dynamic> _g1 = t->_init;
HXDLIN( 123)				while((_g < _g1->length)){
HXLINE( 123)					 ::Dynamic f = _g1->__get(_g);
HXDLIN( 123)					_g = (_g + 1);
HXDLIN( 123)					::iron::App_obj::removeInit(f);
            				}
            			}
HXLINE( 124)			t->_init = null();
            		}
HXLINE( 126)		if (hx::IsNotNull( t->_update )) {
HXLINE( 127)			{
HXLINE( 127)				int _g2 = 0;
HXDLIN( 127)				::Array< ::Dynamic> _g11 = t->_update;
HXDLIN( 127)				while((_g2 < _g11->length)){
HXLINE( 127)					 ::Dynamic f1 = _g11->__get(_g2);
HXDLIN( 127)					_g2 = (_g2 + 1);
HXDLIN( 127)					::iron::App_obj::removeUpdate(f1);
            				}
            			}
HXLINE( 128)			t->_update = null();
            		}
HXLINE( 130)		if (hx::IsNotNull( t->_lateUpdate )) {
HXLINE( 131)			{
HXLINE( 131)				int _g3 = 0;
HXDLIN( 131)				::Array< ::Dynamic> _g12 = t->_lateUpdate;
HXDLIN( 131)				while((_g3 < _g12->length)){
HXLINE( 131)					 ::Dynamic f2 = _g12->__get(_g3);
HXDLIN( 131)					_g3 = (_g3 + 1);
HXDLIN( 131)					::iron::App_obj::removeLateUpdate(f2);
            				}
            			}
HXLINE( 132)			t->_lateUpdate = null();
            		}
HXLINE( 134)		if (hx::IsNotNull( t->_render )) {
HXLINE( 135)			{
HXLINE( 135)				int _g4 = 0;
HXDLIN( 135)				::Array< ::Dynamic> _g13 = t->_render;
HXDLIN( 135)				while((_g4 < _g13->length)){
HXLINE( 135)					 ::Dynamic f3 = _g13->__get(_g4);
HXDLIN( 135)					_g4 = (_g4 + 1);
HXDLIN( 135)					::iron::App_obj::removeRender(f3);
            				}
            			}
HXLINE( 136)			t->_render = null();
            		}
HXLINE( 138)		if (hx::IsNotNull( t->_render2D )) {
HXLINE( 139)			{
HXLINE( 139)				int _g5 = 0;
HXDLIN( 139)				::Array< ::Dynamic> _g14 = t->_render2D;
HXDLIN( 139)				while((_g5 < _g14->length)){
HXLINE( 139)					 ::Dynamic f4 = _g14->__get(_g5);
HXDLIN( 139)					_g5 = (_g5 + 1);
HXDLIN( 139)					::iron::App_obj::removeRender2D(f4);
            				}
            			}
HXLINE( 140)			t->_render2D = null();
            		}
HXLINE( 142)		if (hx::IsNotNull( t->_remove )) {
HXLINE( 143)			{
HXLINE( 143)				int _g6 = 0;
HXDLIN( 143)				::Array< ::Dynamic> _g15 = t->_remove;
HXDLIN( 143)				while((_g6 < _g15->length)){
HXLINE( 143)					 ::Dynamic f5 = _g15->__get(_g6);
HXDLIN( 143)					_g6 = (_g6 + 1);
HXDLIN( 143)					f5();
            				}
            			}
HXLINE( 144)			t->_remove = null();
            		}
HXLINE( 146)		this->traits->remove(t);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Object_obj,removeTrait,(void))

 ::Dynamic Object_obj::getTrait(hx::Class c){
            	HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_155_getTrait)
HXLINE( 156)		{
HXLINE( 156)			int _g = 0;
HXDLIN( 156)			::Array< ::Dynamic> _g1 = this->traits;
HXDLIN( 156)			while((_g < _g1->length)){
HXLINE( 156)				 ::iron::Trait t = _g1->__get(_g).StaticCast<  ::iron::Trait >();
HXDLIN( 156)				_g = (_g + 1);
HXDLIN( 156)				if (hx::IsEq( ::Type_obj::getClass(t),c )) {
HXLINE( 156)					return t;
            				}
            			}
            		}
HXLINE( 157)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Object_obj,getTrait,return )

 ::iron::object::BoneAnimation Object_obj::getParentArmature(::String name){
            	HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_161_getParentArmature)
HXLINE( 162)		{
HXLINE( 162)			int _g = 0;
HXDLIN( 162)			::Array< ::Dynamic> _g1 = ::iron::Scene_obj::active->animations;
HXDLIN( 162)			while((_g < _g1->length)){
HXLINE( 162)				 ::iron::object::Animation a = _g1->__get(_g).StaticCast<  ::iron::object::Animation >();
HXDLIN( 162)				_g = (_g + 1);
HXDLIN( 162)				bool _hx_tmp;
HXDLIN( 162)				if (hx::IsNotNull( a->armature )) {
HXLINE( 162)					_hx_tmp = (a->armature->name == name);
            				}
            				else {
HXLINE( 162)					_hx_tmp = false;
            				}
HXDLIN( 162)				if (_hx_tmp) {
HXLINE( 162)					return ( ( ::iron::object::BoneAnimation)(a) );
            				}
            			}
            		}
HXLINE( 163)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Object_obj,getParentArmature,return )

void Object_obj::setupAnimation(::Array< ::Dynamic> oactions){
            	HX_GC_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_167_setupAnimation)
HXDLIN( 167)		 ::iron::object::Object _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 170)		if (hx::IsNotNull( this->raw->parent_bone )) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::iron::object::Object,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_171_setupAnimation)
HXLINE( 172)				 ::iron::object::BoneAnimation banim = _gthis->getParentArmature(_gthis->parent->name);
HXLINE( 173)				if (hx::IsNotNull( banim )) {
HXLINE( 173)					banim->addBoneChild(_gthis->raw->parent_bone,_gthis);
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 171)			::iron::Scene_obj::active->notifyOnInit( ::Dynamic(new _hx_Closure_0(_gthis)));
            		}
HXLINE( 178)		if (hx::IsNull( oactions )) {
HXLINE( 178)			return;
            		}
HXLINE( 179)		this->animation =  ::iron::object::ObjectAnimation_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),oactions);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Object_obj,setupAnimation,(void))

::String Object_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_193_toString)
HXDLIN( 193)		return (HX_("Object ",61,90,a0,4f) + this->name);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Object_obj,toString,return )

int Object_obj::uidCounter;

int Object_obj::seed;

Float Object_obj::seededRandom(){
            	HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_183_seededRandom)
HXLINE( 184)		::iron::object::Object_obj::seed = hx::Mod(((::iron::object::Object_obj::seed * 9301) + 49297),233280);
HXLINE( 185)		return (( (Float)(::iron::object::Object_obj::seed) ) / ((Float)233280.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Object_obj,seededRandom,return )


hx::ObjectPtr< Object_obj > Object_obj::__new() {
	hx::ObjectPtr< Object_obj > __this = new Object_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Object_obj > Object_obj::__alloc(hx::Ctx *_hx_ctx) {
	Object_obj *__this = (Object_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Object_obj), true, "iron.object.Object"));
	*(void **)__this = Object_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Object_obj::Object_obj()
{
}

void Object_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Object);
	HX_MARK_MEMBER_NAME(uid,"uid");
	HX_MARK_MEMBER_NAME(urandom,"urandom");
	HX_MARK_MEMBER_NAME(raw,"raw");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(transform,"transform");
	HX_MARK_MEMBER_NAME(constraints,"constraints");
	HX_MARK_MEMBER_NAME(traits,"traits");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(children,"children");
	HX_MARK_MEMBER_NAME(lods,"lods");
	HX_MARK_MEMBER_NAME(animation,"animation");
	HX_MARK_MEMBER_NAME(visible,"visible");
	HX_MARK_MEMBER_NAME(visibleMesh,"visibleMesh");
	HX_MARK_MEMBER_NAME(visibleShadow,"visibleShadow");
	HX_MARK_MEMBER_NAME(culled,"culled");
	HX_MARK_MEMBER_NAME(culledMesh,"culledMesh");
	HX_MARK_MEMBER_NAME(culledShadow,"culledShadow");
	HX_MARK_MEMBER_NAME(properties,"properties");
	HX_MARK_MEMBER_NAME(isEmpty,"isEmpty");
	HX_MARK_END_CLASS();
}

void Object_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(uid,"uid");
	HX_VISIT_MEMBER_NAME(urandom,"urandom");
	HX_VISIT_MEMBER_NAME(raw,"raw");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(transform,"transform");
	HX_VISIT_MEMBER_NAME(constraints,"constraints");
	HX_VISIT_MEMBER_NAME(traits,"traits");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(children,"children");
	HX_VISIT_MEMBER_NAME(lods,"lods");
	HX_VISIT_MEMBER_NAME(animation,"animation");
	HX_VISIT_MEMBER_NAME(visible,"visible");
	HX_VISIT_MEMBER_NAME(visibleMesh,"visibleMesh");
	HX_VISIT_MEMBER_NAME(visibleShadow,"visibleShadow");
	HX_VISIT_MEMBER_NAME(culled,"culled");
	HX_VISIT_MEMBER_NAME(culledMesh,"culledMesh");
	HX_VISIT_MEMBER_NAME(culledShadow,"culledShadow");
	HX_VISIT_MEMBER_NAME(properties,"properties");
	HX_VISIT_MEMBER_NAME(isEmpty,"isEmpty");
}

hx::Val Object_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"uid") ) { return hx::Val( uid ); }
		if (HX_FIELD_EQ(inName,"raw") ) { return hx::Val( raw ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"lods") ) { return hx::Val( lods ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"traits") ) { return hx::Val( traits ); }
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent ); }
		if (HX_FIELD_EQ(inName,"culled") ) { return hx::Val( culled ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"urandom") ) { return hx::Val( urandom ); }
		if (HX_FIELD_EQ(inName,"visible") ) { return hx::Val( visible ); }
		if (HX_FIELD_EQ(inName,"isEmpty") ) { return hx::Val( isEmpty ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"children") ) { return hx::Val( children ); }
		if (HX_FIELD_EQ(inName,"addChild") ) { return hx::Val( addChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"getChild") ) { return hx::Val( getChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"addTrait") ) { return hx::Val( addTrait_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTrait") ) { return hx::Val( getTrait_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"transform") ) { return hx::Val( transform ); }
		if (HX_FIELD_EQ(inName,"animation") ) { return hx::Val( animation ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"culledMesh") ) { return hx::Val( culledMesh ); }
		if (HX_FIELD_EQ(inName,"properties") ) { return hx::Val( properties ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"constraints") ) { return hx::Val( constraints ); }
		if (HX_FIELD_EQ(inName,"visibleMesh") ) { return hx::Val( visibleMesh ); }
		if (HX_FIELD_EQ(inName,"removeChild") ) { return hx::Val( removeChild_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeTrait") ) { return hx::Val( removeTrait_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"culledShadow") ) { return hx::Val( culledShadow ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"visibleShadow") ) { return hx::Val( visibleShadow ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getChildOfType") ) { return hx::Val( getChildOfType_dyn() ); }
		if (HX_FIELD_EQ(inName,"setupAnimation") ) { return hx::Val( setupAnimation_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getParentArmature") ) { return hx::Val( getParentArmature_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Object_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"seed") ) { outValue = ( seed ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"uidCounter") ) { outValue = ( uidCounter ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"seededRandom") ) { outValue = seededRandom_dyn(); return true; }
	}
	return false;
}

hx::Val Object_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"uid") ) { uid=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"raw") ) { raw=inValue.Cast<  ::iron::data::TObj >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lods") ) { lods=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"traits") ) { traits=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::iron::object::Object >(); return inValue; }
		if (HX_FIELD_EQ(inName,"culled") ) { culled=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"urandom") ) { urandom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"visible") ) { visible=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isEmpty") ) { isEmpty=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"children") ) { children=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"transform") ) { transform=inValue.Cast<  ::iron::object::Transform >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animation") ) { animation=inValue.Cast<  ::iron::object::Animation >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"culledMesh") ) { culledMesh=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"properties") ) { properties=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"constraints") ) { constraints=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"visibleMesh") ) { visibleMesh=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"culledShadow") ) { culledShadow=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"visibleShadow") ) { visibleShadow=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Object_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"seed") ) { seed=ioValue.Cast< int >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"uidCounter") ) { uidCounter=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void Object_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("uid",90,23,59,00));
	outFields->push(HX_("urandom",38,68,de,b8));
	outFields->push(HX_("raw",e8,d5,56,00));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("transform",6c,2d,93,45));
	outFields->push(HX_("constraints",76,51,b4,17));
	outFields->push(HX_("traits",e5,c0,81,45));
	outFields->push(HX_("parent",2a,05,7e,ed));
	outFields->push(HX_("children",3f,19,6a,70));
	outFields->push(HX_("lods",d2,9c,b7,47));
	outFields->push(HX_("animation",04,ef,34,4b));
	outFields->push(HX_("visible",72,78,24,a3));
	outFields->push(HX_("visibleMesh",7f,0f,a1,f1));
	outFields->push(HX_("visibleShadow",f2,95,12,7c));
	outFields->push(HX_("culled",91,ee,eb,3a));
	outFields->push(HX_("culledMesh",1e,81,c7,9a));
	outFields->push(HX_("culledShadow",51,ed,ef,90));
	outFields->push(HX_("properties",f3,fb,0e,61));
	outFields->push(HX_("isEmpty",43,de,5f,0c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Object_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Object_obj,uid),HX_("uid",90,23,59,00)},
	{hx::fsFloat,(int)offsetof(Object_obj,urandom),HX_("urandom",38,68,de,b8)},
	{hx::fsObject /*::iron::data::TObj*/ ,(int)offsetof(Object_obj,raw),HX_("raw",e8,d5,56,00)},
	{hx::fsString,(int)offsetof(Object_obj,name),HX_("name",4b,72,ff,48)},
	{hx::fsObject /*::iron::object::Transform*/ ,(int)offsetof(Object_obj,transform),HX_("transform",6c,2d,93,45)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Object_obj,constraints),HX_("constraints",76,51,b4,17)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Object_obj,traits),HX_("traits",e5,c0,81,45)},
	{hx::fsObject /*::iron::object::Object*/ ,(int)offsetof(Object_obj,parent),HX_("parent",2a,05,7e,ed)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Object_obj,children),HX_("children",3f,19,6a,70)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Object_obj,lods),HX_("lods",d2,9c,b7,47)},
	{hx::fsObject /*::iron::object::Animation*/ ,(int)offsetof(Object_obj,animation),HX_("animation",04,ef,34,4b)},
	{hx::fsBool,(int)offsetof(Object_obj,visible),HX_("visible",72,78,24,a3)},
	{hx::fsBool,(int)offsetof(Object_obj,visibleMesh),HX_("visibleMesh",7f,0f,a1,f1)},
	{hx::fsBool,(int)offsetof(Object_obj,visibleShadow),HX_("visibleShadow",f2,95,12,7c)},
	{hx::fsBool,(int)offsetof(Object_obj,culled),HX_("culled",91,ee,eb,3a)},
	{hx::fsBool,(int)offsetof(Object_obj,culledMesh),HX_("culledMesh",1e,81,c7,9a)},
	{hx::fsBool,(int)offsetof(Object_obj,culledShadow),HX_("culledShadow",51,ed,ef,90)},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Object_obj,properties),HX_("properties",f3,fb,0e,61)},
	{hx::fsBool,(int)offsetof(Object_obj,isEmpty),HX_("isEmpty",43,de,5f,0c)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Object_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Object_obj::uidCounter,HX_("uidCounter",4c,45,6c,a9)},
	{hx::fsInt,(void *) &Object_obj::seed,HX_("seed",71,85,50,4c)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Object_obj_sMemberFields[] = {
	HX_("uid",90,23,59,00),
	HX_("urandom",38,68,de,b8),
	HX_("raw",e8,d5,56,00),
	HX_("name",4b,72,ff,48),
	HX_("transform",6c,2d,93,45),
	HX_("constraints",76,51,b4,17),
	HX_("traits",e5,c0,81,45),
	HX_("parent",2a,05,7e,ed),
	HX_("children",3f,19,6a,70),
	HX_("lods",d2,9c,b7,47),
	HX_("animation",04,ef,34,4b),
	HX_("visible",72,78,24,a3),
	HX_("visibleMesh",7f,0f,a1,f1),
	HX_("visibleShadow",f2,95,12,7c),
	HX_("culled",91,ee,eb,3a),
	HX_("culledMesh",1e,81,c7,9a),
	HX_("culledShadow",51,ed,ef,90),
	HX_("properties",f3,fb,0e,61),
	HX_("isEmpty",43,de,5f,0c),
	HX_("addChild",bb,cf,16,bf),
	HX_("removeChild",b8,86,ed,43),
	HX_("remove",44,9c,88,04),
	HX_("getChild",26,b9,90,a5),
	HX_("getChildOfType",37,e5,83,e9),
	HX_("addTrait",ed,b9,7c,8f),
	HX_("removeTrait",ea,70,53,14),
	HX_("getTrait",58,a3,f6,75),
	HX_("getParentArmature",f9,4e,c2,26),
	HX_("setupAnimation",c7,e8,ce,b6),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

static void Object_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Object_obj::uidCounter,"uidCounter");
	HX_MARK_MEMBER_NAME(Object_obj::seed,"seed");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Object_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Object_obj::uidCounter,"uidCounter");
	HX_VISIT_MEMBER_NAME(Object_obj::seed,"seed");
};

#endif

hx::Class Object_obj::__mClass;

static ::String Object_obj_sStaticFields[] = {
	HX_("uidCounter",4c,45,6c,a9),
	HX_("seed",71,85,50,4c),
	HX_("seededRandom",33,de,d9,5f),
	::String(null())
};

void Object_obj::__register()
{
	Object_obj _hx_dummy;
	Object_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.object.Object",08,a3,d4,1c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Object_obj::__GetStatic;
	__mClass->mSetStaticField = &Object_obj::__SetStatic;
	__mClass->mMarkFunc = Object_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Object_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Object_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Object_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Object_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Object_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Object_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Object_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_7_boot)
HXDLIN(   7)		uidCounter = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_3bdfe9b3b9a7fc6b_182_boot)
HXDLIN( 182)		seed = 1;
            	}
}

} // end namespace iron
} // end namespace object
