// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_7d028c26efabce49
#define INCLUDED_7d028c26efabce49
#include "cpp_uint32array.h"
#endif
#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_iron_data_TAnimation
#include <hxinc/iron/data/TAnimation.h>
#endif
#ifndef INCLUDED_iron_data_TObj
#include <hxinc/iron/data/TObj.h>
#endif
#ifndef INCLUDED_iron_data_TSceneFormat
#include <hxinc/iron/data/TSceneFormat.h>
#endif
#ifndef INCLUDED_iron_data_TTrack
#include <hxinc/iron/data/TTrack.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <hxinc/iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Quat
#include <hxinc/iron/math/Quat.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <hxinc/iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_object_Animation
#include <hxinc/iron/object/Animation.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <hxinc/iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_ObjectAnimation
#include <hxinc/iron/object/ObjectAnimation.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <hxinc/iron/object/Transform.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_arrays_Uint32ArrayPrivate
#include <hxinc/kha/arrays/Uint32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_baced0ab0039e851_10_new,"iron.object.ObjectAnimation","new",0x4e4ac9ce,"iron.object.ObjectAnimation.new","iron/object/ObjectAnimation.hx",10,0x1d3f6382)
HX_LOCAL_STACK_FRAME(_hx_pos_baced0ab0039e851_23_getAction,"iron.object.ObjectAnimation","getAction",0xfbcd84da,"iron.object.ObjectAnimation.getAction","iron/object/ObjectAnimation.hx",23,0x1d3f6382)
HX_LOCAL_STACK_FRAME(_hx_pos_baced0ab0039e851_28_play,"iron.object.ObjectAnimation","play",0x347d74c6,"iron.object.ObjectAnimation.play","iron/object/ObjectAnimation.hx",28,0x1d3f6382)
HX_LOCAL_STACK_FRAME(_hx_pos_baced0ab0039e851_37_update,"iron.object.ObjectAnimation","update",0xb5a5a55b,"iron.object.ObjectAnimation.update","iron/object/ObjectAnimation.hx",37,0x1d3f6382)
HX_LOCAL_STACK_FRAME(_hx_pos_baced0ab0039e851_54_updateObjectAnim,"iron.object.ObjectAnimation","updateObjectAnim",0xf97105ab,"iron.object.ObjectAnimation.updateObjectAnim","iron/object/ObjectAnimation.hx",54,0x1d3f6382)
HX_LOCAL_STACK_FRAME(_hx_pos_baced0ab0039e851_66_interpolateLinear,"iron.object.ObjectAnimation","interpolateLinear",0x24e47f74,"iron.object.ObjectAnimation.interpolateLinear","iron/object/ObjectAnimation.hx",66,0x1d3f6382)
HX_LOCAL_STACK_FRAME(_hx_pos_baced0ab0039e851_73_interpolateBezier,"iron.object.ObjectAnimation","interpolateBezier",0xdfaa2dae,"iron.object.ObjectAnimation.interpolateBezier","iron/object/ObjectAnimation.hx",73,0x1d3f6382)
HX_LOCAL_STACK_FRAME(_hx_pos_baced0ab0039e851_88_isTrackEnd,"iron.object.ObjectAnimation","isTrackEnd",0x9bc8d86c,"iron.object.ObjectAnimation.isTrackEnd","iron/object/ObjectAnimation.hx",88,0x1d3f6382)
HX_LOCAL_STACK_FRAME(_hx_pos_baced0ab0039e851_94_checkFrameIndexT,"iron.object.ObjectAnimation","checkFrameIndexT",0x13f6bef9,"iron.object.ObjectAnimation.checkFrameIndexT","iron/object/ObjectAnimation.hx",94,0x1d3f6382)
HX_LOCAL_STACK_FRAME(_hx_pos_baced0ab0039e851_100_updateAnimNonSampled,"iron.object.ObjectAnimation","updateAnimNonSampled",0xbee2eb99,"iron.object.ObjectAnimation.updateAnimNonSampled","iron/object/ObjectAnimation.hx",100,0x1d3f6382)
HX_LOCAL_STACK_FRAME(_hx_pos_baced0ab0039e851_176_totalFrames,"iron.object.ObjectAnimation","totalFrames",0x198eb9f8,"iron.object.ObjectAnimation.totalFrames","iron/object/ObjectAnimation.hx",176,0x1d3f6382)
namespace iron{
namespace object{

void ObjectAnimation_obj::__construct( ::iron::object::Object object,::Array< ::Dynamic> oactions){
            	HX_STACKFRAME(&_hx_pos_baced0ab0039e851_10_new)
HXLINE(  72)		this->bezierFrameIndex = -1;
HXLINE(  71)		this->s0 = ( (float)(((Float)0.0)) );
HXLINE(  17)		this->object = object;
HXLINE(  18)		this->oactions = oactions;
HXLINE(  19)		this->isSkinned = false;
HXLINE(  20)		super::__construct();
            	}

Dynamic ObjectAnimation_obj::__CreateEmpty() { return new ObjectAnimation_obj; }

void *ObjectAnimation_obj::_hx_vtable = 0;

Dynamic ObjectAnimation_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ObjectAnimation_obj > _hx_result = new ObjectAnimation_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ObjectAnimation_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0e495cf6) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0e495cf6;
	} else {
		return inClassId==(int)0x1ad734d9;
	}
}

 ::iron::data::TObj ObjectAnimation_obj::getAction(::String action){
            	HX_STACKFRAME(&_hx_pos_baced0ab0039e851_23_getAction)
HXLINE(  24)		{
HXLINE(  24)			int _g = 0;
HXDLIN(  24)			::Array< ::Dynamic> _g1 = this->oactions;
HXDLIN(  24)			while((_g < _g1->length)){
HXLINE(  24)				 ::iron::data::TSceneFormat a = _g1->__get(_g).StaticCast<  ::iron::data::TSceneFormat >();
HXDLIN(  24)				_g = (_g + 1);
HXDLIN(  24)				bool _hx_tmp;
HXDLIN(  24)				if (hx::IsNotNull( a )) {
HXLINE(  24)					_hx_tmp = (a->objects->__get(0).StaticCast<  ::iron::data::TObj >()->name == action);
            				}
            				else {
HXLINE(  24)					_hx_tmp = false;
            				}
HXDLIN(  24)				if (_hx_tmp) {
HXLINE(  24)					return a->objects->__get(0).StaticCast<  ::iron::data::TObj >();
            				}
            			}
            		}
HXLINE(  25)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ObjectAnimation_obj,getAction,return )

void ObjectAnimation_obj::play(::String __o_action, ::Dynamic onComplete,hx::Null< Float >  __o_blendTime,hx::Null< Float >  __o_speed,hx::Null< bool >  __o_loop){
::String action = __o_action.Default(HX_("",00,00,00,00));
Float blendTime = __o_blendTime.Default(((Float)0.0));
Float speed = __o_speed.Default(((Float)1.0));
bool loop = __o_loop.Default(true);
            	HX_STACKFRAME(&_hx_pos_baced0ab0039e851_28_play)
HXLINE(  29)		this->super::play(action,onComplete,blendTime,speed,loop);
HXLINE(  30)		bool _hx_tmp;
HXDLIN(  30)		if ((this->action == HX_("",00,00,00,00))) {
HXLINE(  30)			_hx_tmp = hx::IsNotNull( this->oactions->__get(0).StaticCast<  ::iron::data::TSceneFormat >() );
            		}
            		else {
HXLINE(  30)			_hx_tmp = false;
            		}
HXDLIN(  30)		if (_hx_tmp) {
HXLINE(  30)			this->action = this->oactions->__get(0).StaticCast<  ::iron::data::TSceneFormat >()->objects->__get(0).StaticCast<  ::iron::data::TObj >()->name;
            		}
HXLINE(  31)		this->oaction = this->getAction(this->action);
HXLINE(  32)		if (hx::IsNotNull( this->oaction )) {
HXLINE(  33)			bool _hx_tmp1;
HXDLIN(  33)			if (hx::IsNotNull( this->oaction->sampled )) {
HXLINE(  33)				_hx_tmp1 = ( (bool)(this->oaction->sampled) );
            			}
            			else {
HXLINE(  33)				_hx_tmp1 = false;
            			}
HXDLIN(  33)			this->isSampled = _hx_tmp1;
            		}
            	}


void ObjectAnimation_obj::update(float delta){
            	HX_STACKFRAME(&_hx_pos_baced0ab0039e851_37_update)
HXLINE(  38)		bool _hx_tmp;
HXDLIN(  38)		bool _hx_tmp1;
HXDLIN(  38)		if (!(!(this->object->visible))) {
HXLINE(  38)			_hx_tmp1 = this->object->culled;
            		}
            		else {
HXLINE(  38)			_hx_tmp1 = true;
            		}
HXDLIN(  38)		if (!(_hx_tmp1)) {
HXLINE(  38)			_hx_tmp = hx::IsNull( this->oaction );
            		}
            		else {
HXLINE(  38)			_hx_tmp = true;
            		}
HXDLIN(  38)		if (_hx_tmp) {
HXLINE(  38)			return;
            		}
HXLINE(  44)		this->super::update(delta);
HXLINE(  45)		if (this->paused) {
HXLINE(  45)			return;
            		}
HXLINE(  46)		if (!(this->isSkinned)) {
HXLINE(  46)			this->updateObjectAnim();
            		}
            	}


void ObjectAnimation_obj::updateObjectAnim(){
            	HX_STACKFRAME(&_hx_pos_baced0ab0039e851_54_updateObjectAnim)
HXDLIN(  54)		if (this->isSampled) {
HXLINE(  55)			this->updateTrack(this->oaction->anim);
HXLINE(  56)			this->updateAnimSampled(this->oaction->anim,this->object->transform->world);
HXLINE(  57)			{
HXLINE(  57)				 ::iron::math::Mat4 _this = this->object->transform->world;
HXDLIN(  57)				 ::iron::math::Vec4 loc = this->object->transform->loc;
HXDLIN(  57)				 ::iron::math::Quat quat = this->object->transform->rot;
HXDLIN(  57)				 ::iron::math::Vec4 scale = this->object->transform->scale;
HXDLIN(  57)				loc->x = _this->self->_30;
HXDLIN(  57)				loc->y = _this->self->_31;
HXDLIN(  57)				loc->z = _this->self->_32;
HXDLIN(  57)				 ::iron::math::Vec4 _this1 = ::iron::math::Mat4_obj::helpVec;
HXDLIN(  57)				_this1->x = _this->self->_00;
HXDLIN(  57)				_this1->y = _this->self->_01;
HXDLIN(  57)				_this1->z = _this->self->_02;
HXDLIN(  57)				_this1->w = ( (float)(((Float)1.0)) );
HXDLIN(  57)				 ::iron::math::Vec4 _this2 = _this1;
HXDLIN(  57)				float v = (_this2->x * _this2->x);
HXDLIN(  57)				float v1 = (v + (_this2->y * _this2->y));
HXDLIN(  57)				scale->x = ( (float)(::Math_obj::sqrt(( (Float)((v1 + (_this2->z * _this2->z))) ))) );
HXDLIN(  57)				 ::iron::math::Vec4 _this3 = ::iron::math::Mat4_obj::helpVec;
HXDLIN(  57)				_this3->x = _this->self->_10;
HXDLIN(  57)				_this3->y = _this->self->_11;
HXDLIN(  57)				_this3->z = _this->self->_12;
HXDLIN(  57)				_this3->w = ( (float)(((Float)1.0)) );
HXDLIN(  57)				 ::iron::math::Vec4 _this4 = _this3;
HXDLIN(  57)				float v2 = (_this4->x * _this4->x);
HXDLIN(  57)				float v3 = (v2 + (_this4->y * _this4->y));
HXDLIN(  57)				scale->y = ( (float)(::Math_obj::sqrt(( (Float)((v3 + (_this4->z * _this4->z))) ))) );
HXDLIN(  57)				 ::iron::math::Vec4 _this5 = ::iron::math::Mat4_obj::helpVec;
HXDLIN(  57)				_this5->x = _this->self->_20;
HXDLIN(  57)				_this5->y = _this->self->_21;
HXDLIN(  57)				_this5->z = _this->self->_22;
HXDLIN(  57)				_this5->w = ( (float)(((Float)1.0)) );
HXDLIN(  57)				 ::iron::math::Vec4 _this6 = _this5;
HXDLIN(  57)				float v4 = (_this6->x * _this6->x);
HXDLIN(  57)				float v5 = (v4 + (_this6->y * _this6->y));
HXDLIN(  57)				scale->z = ( (float)(::Math_obj::sqrt(( (Float)((v5 + (_this6->z * _this6->z))) ))) );
HXDLIN(  57)				 ::kha::math::FastMatrix4 _this7 = _this->self;
HXDLIN(  57)				float m3 = _this7->_12;
HXDLIN(  57)				float m4 = _this7->_22;
HXDLIN(  57)				float m5 = _this7->_32;
HXDLIN(  57)				float m6 = _this7->_13;
HXDLIN(  57)				float m7 = _this7->_23;
HXDLIN(  57)				float m8 = _this7->_33;
HXDLIN(  57)				float _this8 = _this7->_11;
HXDLIN(  57)				float c00 = (_this8 * ((m4 * m8) - (m5 * m7)));
HXDLIN(  57)				float _this9 = _this7->_21;
HXDLIN(  57)				float c001 = (c00 - (_this9 * ((m3 * m8) - (m5 * m6))));
HXDLIN(  57)				float _this10 = _this7->_31;
HXDLIN(  57)				float c002 = (c001 + (_this10 * ((m3 * m7) - (m4 * m6))));
HXDLIN(  57)				float m31 = _this7->_12;
HXDLIN(  57)				float m41 = _this7->_22;
HXDLIN(  57)				float m51 = _this7->_32;
HXDLIN(  57)				float m61 = _this7->_13;
HXDLIN(  57)				float m71 = _this7->_23;
HXDLIN(  57)				float m81 = _this7->_33;
HXDLIN(  57)				float _this11 = _this7->_10;
HXDLIN(  57)				float c01 = (_this11 * ((m41 * m81) - (m51 * m71)));
HXDLIN(  57)				float _this12 = _this7->_20;
HXDLIN(  57)				float c011 = (c01 - (_this12 * ((m31 * m81) - (m51 * m61))));
HXDLIN(  57)				float _this13 = _this7->_30;
HXDLIN(  57)				float c012 = (c011 + (_this13 * ((m31 * m71) - (m41 * m61))));
HXDLIN(  57)				float m32 = _this7->_11;
HXDLIN(  57)				float m42 = _this7->_21;
HXDLIN(  57)				float m52 = _this7->_31;
HXDLIN(  57)				float m62 = _this7->_13;
HXDLIN(  57)				float m72 = _this7->_23;
HXDLIN(  57)				float m82 = _this7->_33;
HXDLIN(  57)				float _this14 = _this7->_10;
HXDLIN(  57)				float c02 = (_this14 * ((m42 * m82) - (m52 * m72)));
HXDLIN(  57)				float _this15 = _this7->_20;
HXDLIN(  57)				float c021 = (c02 - (_this15 * ((m32 * m82) - (m52 * m62))));
HXDLIN(  57)				float _this16 = _this7->_30;
HXDLIN(  57)				float c022 = (c021 + (_this16 * ((m32 * m72) - (m42 * m62))));
HXDLIN(  57)				float m33 = _this7->_11;
HXDLIN(  57)				float m43 = _this7->_21;
HXDLIN(  57)				float m53 = _this7->_31;
HXDLIN(  57)				float m63 = _this7->_12;
HXDLIN(  57)				float m73 = _this7->_22;
HXDLIN(  57)				float m83 = _this7->_32;
HXDLIN(  57)				float _this17 = _this7->_10;
HXDLIN(  57)				float c03 = (_this17 * ((m43 * m83) - (m53 * m73)));
HXDLIN(  57)				float _this18 = _this7->_20;
HXDLIN(  57)				float c031 = (c03 - (_this18 * ((m33 * m83) - (m53 * m63))));
HXDLIN(  57)				float _this19 = _this7->_30;
HXDLIN(  57)				float c032 = (c031 + (_this19 * ((m33 * m73) - (m43 * m63))));
HXDLIN(  57)				float _hx_tmp = (_this7->_00 * c002);
HXDLIN(  57)				float _hx_tmp1 = (_hx_tmp - (_this7->_01 * c012));
HXDLIN(  57)				float _hx_tmp2 = (_hx_tmp1 + (_this7->_02 * c022));
HXDLIN(  57)				if (((_hx_tmp2 - (_this7->_03 * c032)) < ((Float)0.0))) {
HXLINE(  57)					scale->x = -(scale->x);
            				}
HXDLIN(  57)				Float invs = (((Float)1.0) / ( (Float)(scale->x) ));
HXDLIN(  57)				::iron::math::Mat4_obj::helpMat->self->_00 = ( (float)((_this->self->_00 * invs)) );
HXDLIN(  57)				::iron::math::Mat4_obj::helpMat->self->_01 = ( (float)((_this->self->_01 * invs)) );
HXDLIN(  57)				::iron::math::Mat4_obj::helpMat->self->_02 = ( (float)((_this->self->_02 * invs)) );
HXDLIN(  57)				invs = (((Float)1.0) / ( (Float)(scale->y) ));
HXDLIN(  57)				::iron::math::Mat4_obj::helpMat->self->_10 = ( (float)((_this->self->_10 * invs)) );
HXDLIN(  57)				::iron::math::Mat4_obj::helpMat->self->_11 = ( (float)((_this->self->_11 * invs)) );
HXDLIN(  57)				::iron::math::Mat4_obj::helpMat->self->_12 = ( (float)((_this->self->_12 * invs)) );
HXDLIN(  57)				invs = (((Float)1.0) / ( (Float)(scale->z) ));
HXDLIN(  57)				::iron::math::Mat4_obj::helpMat->self->_20 = ( (float)((_this->self->_20 * invs)) );
HXDLIN(  57)				::iron::math::Mat4_obj::helpMat->self->_21 = ( (float)((_this->self->_21 * invs)) );
HXDLIN(  57)				::iron::math::Mat4_obj::helpMat->self->_22 = ( (float)((_this->self->_22 * invs)) );
HXDLIN(  57)				{
HXLINE(  57)					 ::iron::math::Mat4 m = ::iron::math::Mat4_obj::helpMat;
HXDLIN(  57)					float m11 = m->self->_00;
HXDLIN(  57)					float m12 = m->self->_10;
HXDLIN(  57)					float m13 = m->self->_20;
HXDLIN(  57)					float m21 = m->self->_01;
HXDLIN(  57)					float m22 = m->self->_11;
HXDLIN(  57)					float m23 = m->self->_21;
HXDLIN(  57)					float m311 = m->self->_02;
HXDLIN(  57)					float m321 = m->self->_12;
HXDLIN(  57)					float m331 = m->self->_22;
HXDLIN(  57)					float tr = ((m11 + m22) + m331);
HXDLIN(  57)					Float s = ((Float)0.0);
HXDLIN(  57)					if ((tr > 0)) {
HXLINE(  57)						s = (((Float)0.5) / ::Math_obj::sqrt((tr + ((Float)1.0))));
HXDLIN(  57)						quat->w = ( (float)((((Float)0.25) / s)) );
HXDLIN(  57)						quat->x = ( (float)(((m321 - m23) * s)) );
HXDLIN(  57)						quat->y = ( (float)(((m13 - m311) * s)) );
HXDLIN(  57)						quat->z = ( (float)(((m21 - m12) * s)) );
            					}
            					else {
HXLINE(  57)						bool _hx_tmp3;
HXDLIN(  57)						if ((m11 > m22)) {
HXLINE(  57)							_hx_tmp3 = (m11 > m331);
            						}
            						else {
HXLINE(  57)							_hx_tmp3 = false;
            						}
HXDLIN(  57)						if (_hx_tmp3) {
HXLINE(  57)							s = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m11) - m22) - m331)));
HXDLIN(  57)							quat->w = ( (float)((( (Float)((m321 - m23)) ) / s)) );
HXDLIN(  57)							quat->x = ( (float)((((Float)0.25) * s)) );
HXDLIN(  57)							quat->y = ( (float)((( (Float)((m12 + m21)) ) / s)) );
HXDLIN(  57)							quat->z = ( (float)((( (Float)((m13 + m311)) ) / s)) );
            						}
            						else {
HXLINE(  57)							if ((m22 > m331)) {
HXLINE(  57)								s = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m22) - m11) - m331)));
HXDLIN(  57)								quat->w = ( (float)((( (Float)((m13 - m311)) ) / s)) );
HXDLIN(  57)								quat->x = ( (float)((( (Float)((m12 + m21)) ) / s)) );
HXDLIN(  57)								quat->y = ( (float)((((Float)0.25) * s)) );
HXDLIN(  57)								quat->z = ( (float)((( (Float)((m23 + m321)) ) / s)) );
            							}
            							else {
HXLINE(  57)								s = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m331) - m11) - m22)));
HXDLIN(  57)								quat->w = ( (float)((( (Float)((m21 - m12)) ) / s)) );
HXDLIN(  57)								quat->x = ( (float)((( (Float)((m13 + m311)) ) / s)) );
HXDLIN(  57)								quat->y = ( (float)((( (Float)((m23 + m321)) ) / s)) );
HXDLIN(  57)								quat->z = ( (float)((((Float)0.25) * s)) );
            							}
            						}
            					}
            				}
            			}
HXLINE(  58)			{
HXLINE(  58)				int _g = 0;
HXDLIN(  58)				::Array< ::Dynamic> _g1 = this->object->children;
HXDLIN(  58)				while((_g < _g1->length)){
HXLINE(  58)					 ::iron::object::Object c = _g1->__get(_g).StaticCast<  ::iron::object::Object >();
HXDLIN(  58)					_g = (_g + 1);
HXDLIN(  58)					c->transform->buildMatrix();
            				}
            			}
            		}
            		else {
HXLINE(  61)			this->updateAnimNonSampled(this->oaction->anim,this->object->transform);
HXLINE(  62)			this->object->transform->buildMatrix();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ObjectAnimation_obj,updateObjectAnim,(void))

float ObjectAnimation_obj::interpolateLinear(float t,float t1,float t2,float v1,float v2){
            	HX_STACKFRAME(&_hx_pos_baced0ab0039e851_66_interpolateLinear)
HXLINE(  67)		Float s = (( (Float)((t - t1)) ) / ( (Float)((t2 - t1)) ));
HXLINE(  68)		return ( (float)((((((Float)1.0) - s) * v1) + (s * v2))) );
            	}


HX_DEFINE_DYNAMIC_FUNC5(ObjectAnimation_obj,interpolateLinear,return )

float ObjectAnimation_obj::interpolateBezier(float t,float t1,float t2,float v1,float v2,float c1,float c2,float p1,float p2){
            	HX_STACKFRAME(&_hx_pos_baced0ab0039e851_73_interpolateBezier)
HXLINE(  74)		if ((this->frameIndex != this->bezierFrameIndex)) {
HXLINE(  75)			this->bezierFrameIndex = this->frameIndex;
HXLINE(  76)			this->s0 = ( (float)((( (Float)((t - t1)) ) / ( (Float)((t2 - t1)) ))) );
            		}
HXLINE(  78)		float a = ((((t2 - (3 * c2)) + (3 * c1)) - t1) * ((this->s0 * this->s0) * this->s0));
HXDLIN(  78)		float a1 = (a + ((3 * ((c2 - (2 * c1)) + t1)) * (this->s0 * this->s0)));
HXDLIN(  78)		float a2 = (((a1 + ((3 * (c1 - t1)) * this->s0)) + t1) - t);
HXLINE(  79)		float b = ((3 * (((t2 - (3 * c2)) + (3 * c1)) - t1)) * (this->s0 * this->s0));
HXDLIN(  79)		float b1 = (b + ((6 * ((c2 - (2 * c1)) + t1)) * this->s0));
HXDLIN(  79)		float b2 = (b1 + (3 * (c1 - t1)));
HXLINE(  80)		float s = this->s0;
HXDLIN(  80)		float s1 = ( (float)((s - (( (Float)(a2) ) / ( (Float)(b2) )))) );
HXLINE(  81)		this->s0 = s1;
HXLINE(  82)		return (((((((1 - s1) * (1 - s1)) * (1 - s1)) * v1) + ((((3 * s1) * (1 - s1)) * (1 - s1)) * p1)) + (((3 * (s1 * s1)) * (1 - s1)) * p2)) + (((s1 * s1) * s1) * v2));
            	}


HX_DEFINE_DYNAMIC_FUNC9(ObjectAnimation_obj,interpolateBezier,return )

bool ObjectAnimation_obj::isTrackEnd( ::iron::data::TTrack track){
            	HX_STACKFRAME(&_hx_pos_baced0ab0039e851_88_isTrackEnd)
HXDLIN(  88)		if ((this->speed > 0)) {
HXLINE(  89)			int _hx_tmp = this->frameIndex;
HXDLIN(  89)			return (_hx_tmp >= (track->frames->self.length() - 2));
            		}
            		else {
HXLINE(  90)			return (this->frameIndex <= 0);
            		}
HXLINE(  88)		return false;
            	}


bool ObjectAnimation_obj::checkFrameIndexT( ::kha::arrays::Uint32ArrayPrivate frameValues,float t){
            	HX_STACKFRAME(&_hx_pos_baced0ab0039e851_94_checkFrameIndexT)
HXDLIN(  94)		if ((this->speed > 0)) {
HXLINE(  95)			int _hx_tmp = this->frameIndex;
HXDLIN(  95)			if ((_hx_tmp < (frameValues->self.length() - 2))) {
HXLINE(  95)				int _hx_tmp1 = frameValues->self.get((this->frameIndex + 1));
HXDLIN(  95)				return (t > (_hx_tmp1 * this->frameTime));
            			}
            			else {
HXLINE(  95)				return false;
            			}
            		}
            		else {
HXLINE(  96)			if ((this->frameIndex > 1)) {
HXLINE(  96)				int _hx_tmp2 = frameValues->self.get((this->frameIndex - 1));
HXDLIN(  96)				return (t > (_hx_tmp2 * this->frameTime));
            			}
            			else {
HXLINE(  96)				return false;
            			}
            		}
HXLINE(  94)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ObjectAnimation_obj,checkFrameIndexT,return )

void ObjectAnimation_obj::updateAnimNonSampled( ::iron::data::TAnimation anim, ::iron::object::Transform transform){
            	HX_GC_STACKFRAME(&_hx_pos_baced0ab0039e851_100_updateAnimNonSampled)
HXLINE( 101)		if (hx::IsNull( anim )) {
HXLINE( 101)			return;
            		}
HXLINE( 103)		float total = (anim->end * this->frameTime);
HXDLIN( 103)		float total1 = (total - (anim->begin * this->frameTime));
HXLINE( 105)		if (( (bool)(anim->has_delta) )) {
HXLINE( 106)			 ::iron::object::Transform t = transform;
HXLINE( 107)			if (hx::IsNull( t->dloc )) {
HXLINE( 107)				t->dloc =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXDLIN( 107)				t->drot =  ::iron::math::Quat_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXDLIN( 107)				t->dscale =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            			}
HXLINE( 108)			{
HXLINE( 108)				 ::iron::math::Vec4 _this = t->dloc;
HXDLIN( 108)				_this->x = ( (float)(0) );
HXDLIN( 108)				_this->y = ( (float)(0) );
HXDLIN( 108)				_this->z = ( (float)(0) );
HXDLIN( 108)				_this->w = ( (float)(((Float)1.0)) );
            			}
HXLINE( 109)			{
HXLINE( 109)				 ::iron::math::Vec4 _this1 = t->dscale;
HXDLIN( 109)				_this1->x = ( (float)(0) );
HXDLIN( 109)				_this1->y = ( (float)(0) );
HXDLIN( 109)				_this1->z = ( (float)(0) );
HXDLIN( 109)				_this1->w = ( (float)(((Float)1.0)) );
            			}
HXLINE( 110)			t->_deulerX = (t->_deulerY = (t->_deulerZ = ( (float)(((Float)0.0)) )));
            		}
HXLINE( 113)		{
HXLINE( 113)			int _g = 0;
HXDLIN( 113)			::Array< ::Dynamic> _g1 = anim->tracks;
HXDLIN( 113)			while((_g < _g1->length)){
HXLINE( 113)				 ::iron::data::TTrack track = _g1->__get(_g).StaticCast<  ::iron::data::TTrack >();
HXDLIN( 113)				_g = (_g + 1);
HXLINE( 115)				if ((this->frameIndex == -1)) {
HXLINE( 115)					this->rewind(track);
            				}
HXLINE( 116)				int sign;
HXDLIN( 116)				if ((this->speed > 0)) {
HXLINE( 116)					sign = 1;
            				}
            				else {
HXLINE( 116)					sign = -1;
            				}
HXLINE( 119)				float t1 = this->time;
HXDLIN( 119)				float t2 = (t1 + (anim->begin * this->frameTime));
HXLINE( 120)				while(true){
HXLINE( 120)					 ::kha::arrays::Uint32ArrayPrivate frameValues = track->frames;
HXDLIN( 120)					bool _hx_tmp;
HXDLIN( 120)					if ((this->speed > 0)) {
HXLINE( 120)						int _hx_tmp1 = this->frameIndex;
HXDLIN( 120)						if ((_hx_tmp1 < (frameValues->self.length() - 2))) {
HXLINE( 120)							int _hx_tmp2 = frameValues->self.get((this->frameIndex + 1));
HXDLIN( 120)							_hx_tmp = (t2 > (_hx_tmp2 * this->frameTime));
            						}
            						else {
HXLINE( 120)							_hx_tmp = false;
            						}
            					}
            					else {
HXLINE( 120)						if ((this->frameIndex > 1)) {
HXLINE( 120)							int _hx_tmp3 = frameValues->self.get((this->frameIndex - 1));
HXDLIN( 120)							_hx_tmp = (t2 > (_hx_tmp3 * this->frameTime));
            						}
            						else {
HXLINE( 120)							_hx_tmp = false;
            						}
            					}
HXDLIN( 120)					if (!(_hx_tmp)) {
HXLINE( 120)						goto _hx_goto_12;
            					}
HXDLIN( 120)					 ::iron::object::ObjectAnimation _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 120)					_hx_tmp4->frameIndex = (_hx_tmp4->frameIndex + sign);
            				}
            				_hx_goto_12:;
HXLINE( 123)				int _hx_tmp5 = this->frameIndex;
HXDLIN( 123)				if ((_hx_tmp5 >= track->frames->self.length())) {
HXLINE( 123)					continue;
            				}
HXLINE( 126)				if ((this->time > total1)) {
HXLINE( 127)					if (hx::IsNotNull( this->onComplete )) {
HXLINE( 127)						this->onComplete();
            					}
HXLINE( 128)					this->rewind(track);
HXLINE( 129)					return;
            				}
HXLINE( 132)				int ti = this->frameIndex;
HXLINE( 133)				int t11 = track->frames->self.get(ti);
HXDLIN( 133)				float t12 = (t11 * this->frameTime);
HXLINE( 134)				 uint32array this1 = track->frames->self;
HXDLIN( 134)				int t21 = this1.get((ti + sign));
HXDLIN( 134)				float t22 = (t21 * this->frameTime);
HXLINE( 135)				float v1 = track->values->self.get(ti);
HXLINE( 136)				 float32array this2 = track->values->self;
HXDLIN( 136)				float v2 = this2.get((ti + sign));
HXLINE( 137)				Float v = ((Float)0.0);
HXLINE( 138)				{
HXLINE( 138)					::String _g2 = track->curve;
HXDLIN( 138)					::String _hx_switch_0 = _g2;
            					if (  (_hx_switch_0==HX_("bezier",1f,00,66,a7)) ){
HXLINE( 143)						float c1 = track->frames_control_plus->self.get(ti);
HXDLIN( 143)						float c11 = (c1 * this->frameTime);
HXLINE( 144)						 float32array this3 = track->frames_control_minus->self;
HXDLIN( 144)						float c2 = this3.get((ti + sign));
HXDLIN( 144)						float c21 = (c2 * this->frameTime);
HXLINE( 145)						float p1 = track->values_control_plus->self.get(ti);
HXLINE( 146)						 float32array this4 = track->values_control_minus->self;
HXDLIN( 146)						float p2 = this4.get((ti + sign));
HXLINE( 147)						if ((this->frameIndex != this->bezierFrameIndex)) {
HXLINE( 147)							this->bezierFrameIndex = this->frameIndex;
HXDLIN( 147)							this->s0 = ( (float)((( (Float)((t2 - t12)) ) / ( (Float)((t22 - t12)) ))) );
            						}
HXDLIN( 147)						float a = ((((t22 - (3 * c21)) + (3 * c11)) - t12) * ((this->s0 * this->s0) * this->s0));
HXDLIN( 147)						float a1 = (a + ((3 * ((c21 - (2 * c11)) + t12)) * (this->s0 * this->s0)));
HXDLIN( 147)						float a2 = (((a1 + ((3 * (c11 - t12)) * this->s0)) + t12) - t2);
HXDLIN( 147)						float b = ((3 * (((t22 - (3 * c21)) + (3 * c11)) - t12)) * (this->s0 * this->s0));
HXDLIN( 147)						float b1 = (b + ((6 * ((c21 - (2 * c11)) + t12)) * this->s0));
HXDLIN( 147)						float b2 = (b1 + (3 * (c11 - t12)));
HXDLIN( 147)						float s = this->s0;
HXDLIN( 147)						float s1 = ( (float)((s - (( (Float)(a2) ) / ( (Float)(b2) )))) );
HXDLIN( 147)						this->s0 = s1;
HXDLIN( 147)						v = ( (Float)((((((((1 - s1) * (1 - s1)) * (1 - s1)) * v1) + ((((3 * s1) * (1 - s1)) * (1 - s1)) * p1)) + (((3 * (s1 * s1)) * (1 - s1)) * p2)) + (((s1 * s1) * s1) * v2))) );
HXLINE( 142)						goto _hx_goto_13;
            					}
            					if (  (_hx_switch_0==HX_("linear",e5,51,a0,ec)) ){
HXLINE( 140)						Float s2 = (( (Float)((t2 - t12)) ) / ( (Float)((t22 - t12)) ));
HXDLIN( 140)						v = ( (Float)(( (float)((((((Float)1.0) - s2) * v1) + (s2 * v2))) )) );
HXDLIN( 140)						goto _hx_goto_13;
            					}
            					_hx_goto_13:;
            				}
HXLINE( 152)				{
HXLINE( 152)					::String _g3 = track->target;
HXDLIN( 152)					::String _hx_switch_1 = _g3;
            					if (  (_hx_switch_1==HX_("dxloc",6c,f1,b5,e3)) ){
HXLINE( 163)						transform->dloc->x = ( (float)(v) );
HXDLIN( 163)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("dxrot",03,7f,ba,e3)) ){
HXLINE( 166)						transform->_deulerX = ( (float)(v) );
HXDLIN( 166)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("dxscl",c8,36,bb,e3)) ){
HXLINE( 169)						transform->dscale->x = ( (float)(v) );
HXDLIN( 169)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("dyloc",0b,28,5f,e4)) ){
HXLINE( 164)						transform->dloc->y = ( (float)(v) );
HXDLIN( 164)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("dyrot",a2,b5,63,e4)) ){
HXLINE( 167)						transform->_deulerY = ( (float)(v) );
HXDLIN( 167)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("dyscl",67,6d,64,e4)) ){
HXLINE( 170)						transform->dscale->y = ( (float)(v) );
HXDLIN( 170)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("dzloc",aa,5e,08,e5)) ){
HXLINE( 165)						transform->dloc->z = ( (float)(v) );
HXDLIN( 165)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("dzrot",41,ec,0c,e5)) ){
HXLINE( 168)						transform->_deulerZ = ( (float)(v) );
HXDLIN( 168)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("dzscl",06,a4,0d,e5)) ){
HXLINE( 171)						transform->dscale->z = ( (float)(v) );
HXDLIN( 171)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("xloc",08,ef,a3,4f)) ){
HXLINE( 153)						transform->loc->x = ( (float)(v) );
HXDLIN( 153)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("xrot",9f,7c,a8,4f)) ){
HXLINE( 156)						transform->setRotation(( (float)(v) ),transform->_eulerY,transform->_eulerZ);
HXDLIN( 156)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("xscl",64,34,a9,4f)) ){
HXLINE( 159)						transform->scale->x = ( (float)(v) );
HXDLIN( 159)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("yloc",a7,25,4d,50)) ){
HXLINE( 154)						transform->loc->y = ( (float)(v) );
HXDLIN( 154)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("yrot",3e,b3,51,50)) ){
HXLINE( 157)						transform->setRotation(transform->_eulerX,( (float)(v) ),transform->_eulerZ);
HXDLIN( 157)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("yscl",03,6b,52,50)) ){
HXLINE( 160)						transform->scale->y = ( (float)(v) );
HXDLIN( 160)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("zloc",46,5c,f6,50)) ){
HXLINE( 155)						transform->loc->z = ( (float)(v) );
HXDLIN( 155)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("zrot",dd,e9,fa,50)) ){
HXLINE( 158)						transform->setRotation(transform->_eulerX,transform->_eulerY,( (float)(v) ));
HXDLIN( 158)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_1==HX_("zscl",a2,a1,fb,50)) ){
HXLINE( 161)						transform->scale->z = ( (float)(v) );
HXDLIN( 161)						goto _hx_goto_14;
            					}
            					_hx_goto_14:;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ObjectAnimation_obj,updateAnimNonSampled,(void))

int ObjectAnimation_obj::totalFrames(){
            	HX_STACKFRAME(&_hx_pos_baced0ab0039e851_176_totalFrames)
HXLINE( 177)		bool _hx_tmp;
HXDLIN( 177)		if (hx::IsNotNull( this->oaction )) {
HXLINE( 177)			_hx_tmp = hx::IsNull( this->oaction->anim );
            		}
            		else {
HXLINE( 177)			_hx_tmp = true;
            		}
HXDLIN( 177)		if (_hx_tmp) {
HXLINE( 177)			return 0;
            		}
HXLINE( 178)		return (this->oaction->anim->end - this->oaction->anim->begin);
            	}



hx::ObjectPtr< ObjectAnimation_obj > ObjectAnimation_obj::__new( ::iron::object::Object object,::Array< ::Dynamic> oactions) {
	hx::ObjectPtr< ObjectAnimation_obj > __this = new ObjectAnimation_obj();
	__this->__construct(object,oactions);
	return __this;
}

hx::ObjectPtr< ObjectAnimation_obj > ObjectAnimation_obj::__alloc(hx::Ctx *_hx_ctx, ::iron::object::Object object,::Array< ::Dynamic> oactions) {
	ObjectAnimation_obj *__this = (ObjectAnimation_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ObjectAnimation_obj), true, "iron.object.ObjectAnimation"));
	*(void **)__this = ObjectAnimation_obj::_hx_vtable;
	__this->__construct(object,oactions);
	return __this;
}

ObjectAnimation_obj::ObjectAnimation_obj()
{
}

void ObjectAnimation_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ObjectAnimation);
	HX_MARK_MEMBER_NAME(object,"object");
	HX_MARK_MEMBER_NAME(oactions,"oactions");
	HX_MARK_MEMBER_NAME(oaction,"oaction");
	HX_MARK_MEMBER_NAME(s0,"s0");
	HX_MARK_MEMBER_NAME(bezierFrameIndex,"bezierFrameIndex");
	 ::iron::object::Animation_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ObjectAnimation_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(object,"object");
	HX_VISIT_MEMBER_NAME(oactions,"oactions");
	HX_VISIT_MEMBER_NAME(oaction,"oaction");
	HX_VISIT_MEMBER_NAME(s0,"s0");
	HX_VISIT_MEMBER_NAME(bezierFrameIndex,"bezierFrameIndex");
	 ::iron::object::Animation_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ObjectAnimation_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"s0") ) { return hx::Val( s0 ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"object") ) { return hx::Val( object ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"oaction") ) { return hx::Val( oaction ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"oactions") ) { return hx::Val( oactions ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getAction") ) { return hx::Val( getAction_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isTrackEnd") ) { return hx::Val( isTrackEnd_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"totalFrames") ) { return hx::Val( totalFrames_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"updateObjectAnim") ) { return hx::Val( updateObjectAnim_dyn() ); }
		if (HX_FIELD_EQ(inName,"bezierFrameIndex") ) { return hx::Val( bezierFrameIndex ); }
		if (HX_FIELD_EQ(inName,"checkFrameIndexT") ) { return hx::Val( checkFrameIndexT_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"interpolateLinear") ) { return hx::Val( interpolateLinear_dyn() ); }
		if (HX_FIELD_EQ(inName,"interpolateBezier") ) { return hx::Val( interpolateBezier_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"updateAnimNonSampled") ) { return hx::Val( updateAnimNonSampled_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ObjectAnimation_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"s0") ) { s0=inValue.Cast< float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"object") ) { object=inValue.Cast<  ::iron::object::Object >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"oaction") ) { oaction=inValue.Cast<  ::iron::data::TObj >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"oactions") ) { oactions=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"bezierFrameIndex") ) { bezierFrameIndex=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ObjectAnimation_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("object",bf,7e,3f,15));
	outFields->push(HX_("oactions",6e,7f,0d,34));
	outFields->push(HX_("oaction",65,b9,14,1e));
	outFields->push(HX_("s0",5d,64,00,00));
	outFields->push(HX_("bezierFrameIndex",a4,d0,c0,55));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ObjectAnimation_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::object::Object*/ ,(int)offsetof(ObjectAnimation_obj,object),HX_("object",bf,7e,3f,15)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(ObjectAnimation_obj,oactions),HX_("oactions",6e,7f,0d,34)},
	{hx::fsObject /*::iron::data::TObj*/ ,(int)offsetof(ObjectAnimation_obj,oaction),HX_("oaction",65,b9,14,1e)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(ObjectAnimation_obj,s0),HX_("s0",5d,64,00,00)},
	{hx::fsInt,(int)offsetof(ObjectAnimation_obj,bezierFrameIndex),HX_("bezierFrameIndex",a4,d0,c0,55)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ObjectAnimation_obj_sStaticStorageInfo = 0;
#endif

static ::String ObjectAnimation_obj_sMemberFields[] = {
	HX_("object",bf,7e,3f,15),
	HX_("oactions",6e,7f,0d,34),
	HX_("oaction",65,b9,14,1e),
	HX_("getAction",ec,c4,9c,92),
	HX_("play",f4,2d,5a,4a),
	HX_("update",09,86,05,87),
	HX_("updateObjectAnim",d9,cb,95,0c),
	HX_("interpolateLinear",86,21,ed,d1),
	HX_("s0",5d,64,00,00),
	HX_("bezierFrameIndex",a4,d0,c0,55),
	HX_("interpolateBezier",c0,cf,b2,8c),
	HX_("isTrackEnd",1a,a8,51,fa),
	HX_("checkFrameIndexT",27,85,1b,27),
	HX_("updateAnimNonSampled",c7,60,51,07),
	HX_("totalFrames",8a,a2,bb,72),
	::String(null()) };

hx::Class ObjectAnimation_obj::__mClass;

void ObjectAnimation_obj::__register()
{
	ObjectAnimation_obj _hx_dummy;
	ObjectAnimation_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.object.ObjectAnimation",dc,8a,5a,02);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ObjectAnimation_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ObjectAnimation_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ObjectAnimation_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ObjectAnimation_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace object
