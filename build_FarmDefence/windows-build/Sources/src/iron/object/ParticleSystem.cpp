// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_iron_Scene
#include <hxinc/iron/Scene.h>
#endif
#ifndef INCLUDED_iron_data_Data
#include <hxinc/iron/data/Data.h>
#endif
#ifndef INCLUDED_iron_data_Geometry
#include <hxinc/iron/data/Geometry.h>
#endif
#ifndef INCLUDED_iron_data_MeshData
#include <hxinc/iron/data/MeshData.h>
#endif
#ifndef INCLUDED_iron_data_ParticleData
#include <hxinc/iron/data/ParticleData.h>
#endif
#ifndef INCLUDED_iron_data_TParticleData
#include <hxinc/iron/data/TParticleData.h>
#endif
#ifndef INCLUDED_iron_data_TParticleReference
#include <hxinc/iron/data/TParticleReference.h>
#endif
#ifndef INCLUDED_iron_data_TSceneFormat
#include <hxinc/iron/data/TSceneFormat.h>
#endif
#ifndef INCLUDED_iron_data_TTilesheetData
#include <hxinc/iron/data/TTilesheetData.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <hxinc/iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <hxinc/iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_object_MeshObject
#include <hxinc/iron/object/MeshObject.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <hxinc/iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_Particle
#include <hxinc/iron/object/Particle.h>
#endif
#ifndef INCLUDED_iron_object_ParticleSystem
#include <hxinc/iron/object/ParticleSystem.h>
#endif
#ifndef INCLUDED_iron_object_Tilesheet
#include <hxinc/iron/object/Tilesheet.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <hxinc/iron/object/Transform.h>
#endif
#ifndef INCLUDED_iron_system_Time
#include <hxinc/iron/system/Time.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_graphics4_Usage
#include <hxinc/kha/graphics4/Usage.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c0e3511b1230a8c6_47_new,"iron.object.ParticleSystem","new",0xa851df10,"iron.object.ParticleSystem.new","iron/object/ParticleSystem.hx",47,0x6ff9dc40)
HX_DEFINE_STACK_FRAME(_hx_pos_c0e3511b1230a8c6_13_new,"iron.object.ParticleSystem","new",0xa851df10,"iron.object.ParticleSystem.new","iron/object/ParticleSystem.hx",13,0x6ff9dc40)
HX_LOCAL_STACK_FRAME(_hx_pos_c0e3511b1230a8c6_64_update,"iron.object.ParticleSystem","update",0x2719c559,"iron.object.ParticleSystem.update","iron/object/ParticleSystem.hx",64,0x6ff9dc40)
HX_LOCAL_STACK_FRAME(_hx_pos_c0e3511b1230a8c6_90_getData,"iron.object.ParticleSystem","getData",0x86892c90,"iron.object.ParticleSystem.getData","iron/object/ParticleSystem.hx",90,0x6ff9dc40)
HX_LOCAL_STACK_FRAME(_hx_pos_c0e3511b1230a8c6_111_updateGpu,"iron.object.ParticleSystem","updateGpu",0x00999a53,"iron.object.ParticleSystem.updateGpu","iron/object/ParticleSystem.hx",111,0x6ff9dc40)
HX_LOCAL_STACK_FRAME(_hx_pos_c0e3511b1230a8c6_115_setupGeomGpu,"iron.object.ParticleSystem","setupGeomGpu",0xbb22af23,"iron.object.ParticleSystem.setupGeomGpu","iron/object/ParticleSystem.hx",115,0x6ff9dc40)
HX_LOCAL_STACK_FRAME(_hx_pos_c0e3511b1230a8c6_254_fhash,"iron.object.ParticleSystem","fhash",0x2e8a75e4,"iron.object.ParticleSystem.fhash","iron/object/ParticleSystem.hx",254,0x6ff9dc40)
HX_LOCAL_STACK_FRAME(_hx_pos_c0e3511b1230a8c6_263_remove,"iron.object.ParticleSystem","remove",0xa49cdb94,"iron.object.ParticleSystem.remove","iron/object/ParticleSystem.hx",263,0x6ff9dc40)
namespace iron{
namespace object{

void ParticleSystem_obj::__construct(::String sceneName, ::iron::data::TParticleReference pref){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::iron::object::ParticleSystem,_gthis) HXARGC(1)
            		void _hx_run( ::iron::data::ParticleData b){
            			HX_GC_STACKFRAME(&_hx_pos_c0e3511b1230a8c6_47_new)
HXLINE(  48)			_gthis->data = b;
HXLINE(  49)			_gthis->r = _gthis->data->raw;
HXLINE(  50)			float _hx_tmp = ::iron::Scene_obj::active->raw->gravity->self.get(0);
HXDLIN(  50)			_gthis->gx = ( (Float)((_hx_tmp * _gthis->r->weight_gravity)) );
HXLINE(  51)			float _hx_tmp1 = ::iron::Scene_obj::active->raw->gravity->self.get(1);
HXDLIN(  51)			_gthis->gy = ( (Float)((_hx_tmp1 * _gthis->r->weight_gravity)) );
HXLINE(  52)			float _hx_tmp2 = ::iron::Scene_obj::active->raw->gravity->self.get(2);
HXDLIN(  52)			_gthis->gz = ( (Float)((_hx_tmp2 * _gthis->r->weight_gravity)) );
HXLINE(  53)			float _hx_tmp3 = _gthis->r->object_align_factor->self.get(0);
HXDLIN(  53)			_gthis->alignx = (( (Float)(_hx_tmp3) ) / ( (Float)(2) ));
HXLINE(  54)			float _hx_tmp4 = _gthis->r->object_align_factor->self.get(1);
HXDLIN(  54)			_gthis->aligny = (( (Float)(_hx_tmp4) ) / ( (Float)(2) ));
HXLINE(  55)			float _hx_tmp5 = _gthis->r->object_align_factor->self.get(2);
HXDLIN(  55)			_gthis->alignz = (( (Float)(_hx_tmp5) ) / ( (Float)(2) ));
HXLINE(  56)			_gthis->lifetime = (( (Float)(_gthis->r->lifetime) ) / ( (Float)(_gthis->frameRate) ));
HXLINE(  57)			_gthis->animtime = (( (Float)((_gthis->r->frame_end - _gthis->r->frame_start)) ) / ( (Float)(_gthis->frameRate) ));
HXLINE(  58)			_gthis->spawnRate = ((( (Float)((_gthis->r->frame_end - _gthis->r->frame_start)) ) / ( (Float)(_gthis->r->count) )) / ( (Float)(_gthis->frameRate) ));
HXLINE(  59)			{
HXLINE(  59)				int _g1 = 0;
HXDLIN(  59)				int _g = _gthis->r->count;
HXDLIN(  59)				while((_g1 < _g)){
HXLINE(  59)					_g1 = (_g1 + 1);
HXDLIN(  59)					int i = (_g1 - 1);
HXDLIN(  59)					::Array< ::Dynamic> _gthis1 = _gthis->particles;
HXDLIN(  59)					_gthis1->push( ::iron::object::Particle_obj::__alloc( HX_CTX ,i));
            				}
            			}
HXLINE(  60)			_gthis->ready = true;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_c0e3511b1230a8c6_13_new)
HXLINE(  41)		this->m =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ));
HXLINE(  40)		this->lapTime = ((Float)0.0);
HXLINE(  39)		this->lap = 0;
HXLINE(  38)		this->count = 0;
HXLINE(  23)		this->seed = ((Float)0.0);
HXLINE(  22)		this->spawnRate = ((Float)0.0);
HXLINE(  21)		this->time = ((Float)0.0);
HXLINE(  20)		this->animtime = ((Float)0.0);
HXLINE(  19)		this->lifetime = ((Float)0.0);
HXLINE(  18)		this->frameRate = 24;
HXLINE(  15)		this->speed = ((Float)1.0);
HXLINE(  43)		 ::iron::object::ParticleSystem _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  44)		this->seed = ( (Float)(pref->seed) );
HXLINE(  45)		this->particles = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  46)		this->ready = false;
HXLINE(  47)		::iron::data::Data_obj::getParticle(sceneName,pref->particle, ::Dynamic(new _hx_Closure_0(_gthis)));
            	}

Dynamic ParticleSystem_obj::__CreateEmpty() { return new ParticleSystem_obj; }

void *ParticleSystem_obj::_hx_vtable = 0;

Dynamic ParticleSystem_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ParticleSystem_obj > _hx_result = new ParticleSystem_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ParticleSystem_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2815a97c;
}

void ParticleSystem_obj::update( ::iron::object::MeshObject object, ::iron::object::MeshObject owner){
            	HX_STACKFRAME(&_hx_pos_c0e3511b1230a8c6_64_update)
HXLINE(  65)		bool _hx_tmp;
HXDLIN(  65)		bool _hx_tmp1;
HXDLIN(  65)		if (!(!(this->ready))) {
HXLINE(  65)			_hx_tmp1 = hx::IsNull( object );
            		}
            		else {
HXLINE(  65)			_hx_tmp1 = true;
            		}
HXDLIN(  65)		if (!(_hx_tmp1)) {
HXLINE(  65)			_hx_tmp = (this->speed == ((Float)0.0));
            		}
            		else {
HXLINE(  65)			_hx_tmp = true;
            		}
HXDLIN(  65)		if (_hx_tmp) {
HXLINE(  65)			return;
            		}
HXLINE(  67)		this->dimx = ( (Float)(object->transform->dim->x) );
HXLINE(  68)		this->dimy = ( (Float)(object->transform->dim->y) );
HXLINE(  70)		if (hx::IsNotNull( object->tilesheet )) {
HXLINE(  71)			this->tilesx = object->tilesheet->raw->tilesx;
HXLINE(  72)			this->tilesy = object->tilesheet->raw->tilesy;
HXLINE(  73)			this->tilesFramerate = object->tilesheet->raw->framerate;
            		}
HXLINE(  77)		 ::iron::object::ParticleSystem _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  77)		_hx_tmp2->time = (_hx_tmp2->time + ((((Float)0.016666666666666666) * ::iron::_hx_system::Time_obj::scale) * this->speed));
HXLINE(  78)		this->lap = ::Std_obj::_hx_int((this->time / this->animtime));
HXLINE(  79)		Float _hx_tmp3 = this->time;
HXDLIN(  79)		this->lapTime = (_hx_tmp3 - (this->lap * this->animtime));
HXLINE(  80)		this->count = ::Std_obj::_hx_int((this->lapTime / this->spawnRate));
HXLINE(  83)		this->updateGpu(object,owner);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ParticleSystem_obj,update,(void))

 ::iron::math::Mat4 ParticleSystem_obj::getData(){
            	HX_STACKFRAME(&_hx_pos_c0e3511b1230a8c6_90_getData)
HXLINE(  91)		{
HXLINE(  91)			float f;
HXDLIN(  91)			if (this->r->loop) {
HXLINE(  91)				f = ( (float)(this->animtime) );
            			}
            			else {
HXLINE(  91)				f = ( (float)(-(this->animtime)) );
            			}
HXDLIN(  91)			this->m->self->_00 = f;
            		}
HXLINE(  92)		this->m->self->_01 = ( (float)(this->spawnRate) );
HXLINE(  93)		this->m->self->_02 = ( (float)(this->lifetime) );
HXLINE(  94)		this->m->self->_03 = ( (float)(this->particles->length) );
HXLINE(  95)		this->m->self->_10 = ( (float)(this->alignx) );
HXLINE(  96)		this->m->self->_11 = ( (float)(this->aligny) );
HXLINE(  97)		this->m->self->_12 = ( (float)(this->alignz) );
HXLINE(  98)		this->m->self->_13 = this->r->factor_random;
HXLINE(  99)		this->m->self->_20 = ( (float)((this->gx * this->r->mass)) );
HXLINE( 100)		this->m->self->_21 = ( (float)((this->gy * this->r->mass)) );
HXLINE( 101)		this->m->self->_22 = ( (float)((this->gz * this->r->mass)) );
HXLINE( 102)		this->m->self->_23 = this->r->lifetime_random;
HXLINE( 103)		this->m->self->_30 = ( (float)(this->tilesx) );
HXLINE( 104)		this->m->self->_31 = ( (float)(this->tilesy) );
HXLINE( 105)		this->m->self->_32 = ( (float)((( (Float)(1) ) / ( (Float)(this->tilesFramerate) ))) );
HXLINE( 106)		this->m->self->_33 = ( (float)(this->lapTime) );
HXLINE( 107)		return this->m;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ParticleSystem_obj,getData,return )

void ParticleSystem_obj::updateGpu( ::iron::object::MeshObject object, ::iron::object::MeshObject owner){
            	HX_STACKFRAME(&_hx_pos_c0e3511b1230a8c6_111_updateGpu)
HXDLIN( 111)		if (!(object->data->geom->instanced)) {
HXDLIN( 111)			this->setupGeomGpu(object,owner);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ParticleSystem_obj,updateGpu,(void))

void ParticleSystem_obj::setupGeomGpu( ::iron::object::MeshObject object, ::iron::object::MeshObject owner){
            	HX_GC_STACKFRAME(&_hx_pos_c0e3511b1230a8c6_115_setupGeomGpu)
HXLINE( 116)		 ::kha::arrays::Float32ArrayPrivate this1 =  ::kha::arrays::Float32ArrayPrivate_obj::__alloc( HX_CTX ,(this->particles->length * 3));
HXDLIN( 116)		 ::kha::arrays::Float32ArrayPrivate instancedData = this1;
HXLINE( 117)		int i = 0;
HXLINE( 118)		if ((this->r->emit_from == 0)) {
HXLINE( 119)			 ::kha::arrays::Float32ArrayPrivate pa = owner->data->geom->positions;
HXLINE( 120)			{
HXLINE( 120)				int _g = 0;
HXDLIN( 120)				::Array< ::Dynamic> _g1 = this->particles;
HXDLIN( 120)				while((_g < _g1->length)){
HXLINE( 120)					 ::iron::object::Particle p = _g1->__get(_g).StaticCast<  ::iron::object::Particle >();
HXDLIN( 120)					_g = (_g + 1);
HXLINE( 121)					Float j = this->fhash(i);
HXDLIN( 121)					int j1 = ::Std_obj::_hx_int((j * (( (Float)(pa->self.length()) ) / ( (Float)(3) ))));
HXLINE( 122)					{
HXLINE( 122)						 float32array pa1 = pa->self;
HXDLIN( 122)						float value = pa1.get((j1 * 3));
HXDLIN( 122)						instancedData->self.set(i,value);
            					}
HXDLIN( 122)					i = (i + 1);
HXLINE( 123)					{
HXLINE( 123)						 float32array pa2 = pa->self;
HXDLIN( 123)						float value1 = pa2.get(((j1 * 3) + 1));
HXDLIN( 123)						instancedData->self.set(i,value1);
            					}
HXDLIN( 123)					i = (i + 1);
HXLINE( 124)					{
HXLINE( 124)						 float32array pa3 = pa->self;
HXDLIN( 124)						float value2 = pa3.get(((j1 * 3) + 2));
HXDLIN( 124)						instancedData->self.set(i,value2);
            					}
HXDLIN( 124)					i = (i + 1);
            				}
            			}
            		}
            		else {
HXLINE( 128)			int _g2 = 0;
HXDLIN( 128)			::Array< ::Dynamic> _g11 = this->particles;
HXDLIN( 128)			while((_g2 < _g11->length)){
HXLINE( 128)				 ::iron::object::Particle p1 = _g11->__get(_g2).StaticCast<  ::iron::object::Particle >();
HXDLIN( 128)				_g2 = (_g2 + 1);
HXLINE( 129)				{
HXLINE( 129)					Float value3 = ((::Math_obj::random() * ((Float)2.0)) - ((Float)1.0));
HXDLIN( 129)					instancedData->self.set(i,( (float)((value3 * (( (Float)(object->transform->dim->x) ) / ((Float)2.0)))) ));
            				}
HXDLIN( 129)				i = (i + 1);
HXLINE( 130)				{
HXLINE( 130)					Float value4 = ((::Math_obj::random() * ((Float)2.0)) - ((Float)1.0));
HXDLIN( 130)					instancedData->self.set(i,( (float)((value4 * (( (Float)(object->transform->dim->y) ) / ((Float)2.0)))) ));
            				}
HXDLIN( 130)				i = (i + 1);
HXLINE( 131)				{
HXLINE( 131)					Float value5 = ((::Math_obj::random() * ((Float)2.0)) - ((Float)1.0));
HXDLIN( 131)					instancedData->self.set(i,( (float)((value5 * (( (Float)(object->transform->dim->z) ) / ((Float)2.0)))) ));
            				}
HXDLIN( 131)				i = (i + 1);
            			}
            		}
HXLINE( 134)		if ((this->r->particle_size != ((Float)1.0))) {
HXLINE( 134)			object->data->geom->applyScale(( (Float)(this->r->particle_size) ),( (Float)(this->r->particle_size) ),( (Float)(this->r->particle_size) ));
            		}
HXLINE( 135)		object->data->geom->setupInstanced(instancedData,1,::kha::graphics4::Usage_obj::StaticUsage_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC2(ParticleSystem_obj,setupGeomGpu,(void))

Float ParticleSystem_obj::fhash(int n){
            	HX_STACKFRAME(&_hx_pos_c0e3511b1230a8c6_254_fhash)
HXLINE( 257)		Float s = (n + ((Float)1.0));
HXLINE( 258)		s = (s * hx::Mod(((Float)9301.0),s));
HXLINE( 259)		s = hx::Mod(((s * ((Float)9301.0)) + ((Float)49297.0)),((Float)233280.0));
HXLINE( 260)		return (s / ((Float)233280.0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ParticleSystem_obj,fhash,return )

void ParticleSystem_obj::remove(){
            	HX_STACKFRAME(&_hx_pos_c0e3511b1230a8c6_263_remove)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ParticleSystem_obj,remove,(void))


hx::ObjectPtr< ParticleSystem_obj > ParticleSystem_obj::__new(::String sceneName, ::iron::data::TParticleReference pref) {
	hx::ObjectPtr< ParticleSystem_obj > __this = new ParticleSystem_obj();
	__this->__construct(sceneName,pref);
	return __this;
}

hx::ObjectPtr< ParticleSystem_obj > ParticleSystem_obj::__alloc(hx::Ctx *_hx_ctx,::String sceneName, ::iron::data::TParticleReference pref) {
	ParticleSystem_obj *__this = (ParticleSystem_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ParticleSystem_obj), true, "iron.object.ParticleSystem"));
	*(void **)__this = ParticleSystem_obj::_hx_vtable;
	__this->__construct(sceneName,pref);
	return __this;
}

ParticleSystem_obj::ParticleSystem_obj()
{
}

void ParticleSystem_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ParticleSystem);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(particles,"particles");
	HX_MARK_MEMBER_NAME(ready,"ready");
	HX_MARK_MEMBER_NAME(frameRate,"frameRate");
	HX_MARK_MEMBER_NAME(lifetime,"lifetime");
	HX_MARK_MEMBER_NAME(animtime,"animtime");
	HX_MARK_MEMBER_NAME(time,"time");
	HX_MARK_MEMBER_NAME(spawnRate,"spawnRate");
	HX_MARK_MEMBER_NAME(seed,"seed");
	HX_MARK_MEMBER_NAME(r,"r");
	HX_MARK_MEMBER_NAME(gx,"gx");
	HX_MARK_MEMBER_NAME(gy,"gy");
	HX_MARK_MEMBER_NAME(gz,"gz");
	HX_MARK_MEMBER_NAME(alignx,"alignx");
	HX_MARK_MEMBER_NAME(aligny,"aligny");
	HX_MARK_MEMBER_NAME(alignz,"alignz");
	HX_MARK_MEMBER_NAME(dimx,"dimx");
	HX_MARK_MEMBER_NAME(dimy,"dimy");
	HX_MARK_MEMBER_NAME(tilesx,"tilesx");
	HX_MARK_MEMBER_NAME(tilesy,"tilesy");
	HX_MARK_MEMBER_NAME(tilesFramerate,"tilesFramerate");
	HX_MARK_MEMBER_NAME(count,"count");
	HX_MARK_MEMBER_NAME(lap,"lap");
	HX_MARK_MEMBER_NAME(lapTime,"lapTime");
	HX_MARK_MEMBER_NAME(m,"m");
	HX_MARK_END_CLASS();
}

void ParticleSystem_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(particles,"particles");
	HX_VISIT_MEMBER_NAME(ready,"ready");
	HX_VISIT_MEMBER_NAME(frameRate,"frameRate");
	HX_VISIT_MEMBER_NAME(lifetime,"lifetime");
	HX_VISIT_MEMBER_NAME(animtime,"animtime");
	HX_VISIT_MEMBER_NAME(time,"time");
	HX_VISIT_MEMBER_NAME(spawnRate,"spawnRate");
	HX_VISIT_MEMBER_NAME(seed,"seed");
	HX_VISIT_MEMBER_NAME(r,"r");
	HX_VISIT_MEMBER_NAME(gx,"gx");
	HX_VISIT_MEMBER_NAME(gy,"gy");
	HX_VISIT_MEMBER_NAME(gz,"gz");
	HX_VISIT_MEMBER_NAME(alignx,"alignx");
	HX_VISIT_MEMBER_NAME(aligny,"aligny");
	HX_VISIT_MEMBER_NAME(alignz,"alignz");
	HX_VISIT_MEMBER_NAME(dimx,"dimx");
	HX_VISIT_MEMBER_NAME(dimy,"dimy");
	HX_VISIT_MEMBER_NAME(tilesx,"tilesx");
	HX_VISIT_MEMBER_NAME(tilesy,"tilesy");
	HX_VISIT_MEMBER_NAME(tilesFramerate,"tilesFramerate");
	HX_VISIT_MEMBER_NAME(count,"count");
	HX_VISIT_MEMBER_NAME(lap,"lap");
	HX_VISIT_MEMBER_NAME(lapTime,"lapTime");
	HX_VISIT_MEMBER_NAME(m,"m");
}

hx::Val ParticleSystem_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"r") ) { return hx::Val( r ); }
		if (HX_FIELD_EQ(inName,"m") ) { return hx::Val( m ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"gx") ) { return hx::Val( gx ); }
		if (HX_FIELD_EQ(inName,"gy") ) { return hx::Val( gy ); }
		if (HX_FIELD_EQ(inName,"gz") ) { return hx::Val( gz ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"lap") ) { return hx::Val( lap ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data ); }
		if (HX_FIELD_EQ(inName,"time") ) { return hx::Val( time ); }
		if (HX_FIELD_EQ(inName,"seed") ) { return hx::Val( seed ); }
		if (HX_FIELD_EQ(inName,"dimx") ) { return hx::Val( dimx ); }
		if (HX_FIELD_EQ(inName,"dimy") ) { return hx::Val( dimy ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed ); }
		if (HX_FIELD_EQ(inName,"ready") ) { return hx::Val( ready ); }
		if (HX_FIELD_EQ(inName,"count") ) { return hx::Val( count ); }
		if (HX_FIELD_EQ(inName,"fhash") ) { return hx::Val( fhash_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"alignx") ) { return hx::Val( alignx ); }
		if (HX_FIELD_EQ(inName,"aligny") ) { return hx::Val( aligny ); }
		if (HX_FIELD_EQ(inName,"alignz") ) { return hx::Val( alignz ); }
		if (HX_FIELD_EQ(inName,"tilesx") ) { return hx::Val( tilesx ); }
		if (HX_FIELD_EQ(inName,"tilesy") ) { return hx::Val( tilesy ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"lapTime") ) { return hx::Val( lapTime ); }
		if (HX_FIELD_EQ(inName,"getData") ) { return hx::Val( getData_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lifetime") ) { return hx::Val( lifetime ); }
		if (HX_FIELD_EQ(inName,"animtime") ) { return hx::Val( animtime ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"particles") ) { return hx::Val( particles ); }
		if (HX_FIELD_EQ(inName,"frameRate") ) { return hx::Val( frameRate ); }
		if (HX_FIELD_EQ(inName,"spawnRate") ) { return hx::Val( spawnRate ); }
		if (HX_FIELD_EQ(inName,"updateGpu") ) { return hx::Val( updateGpu_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setupGeomGpu") ) { return hx::Val( setupGeomGpu_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"tilesFramerate") ) { return hx::Val( tilesFramerate ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ParticleSystem_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"r") ) { r=inValue.Cast<  ::iron::data::TParticleData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m") ) { m=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"gx") ) { gx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gy") ) { gy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gz") ) { gz=inValue.Cast< Float >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"lap") ) { lap=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::iron::data::ParticleData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"time") ) { time=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"seed") ) { seed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dimx") ) { dimx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dimy") ) { dimy=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ready") ) { ready=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"count") ) { count=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"alignx") ) { alignx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aligny") ) { aligny=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alignz") ) { alignz=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tilesx") ) { tilesx=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tilesy") ) { tilesy=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"lapTime") ) { lapTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lifetime") ) { lifetime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animtime") ) { animtime=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"particles") ) { particles=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frameRate") ) { frameRate=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"spawnRate") ) { spawnRate=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"tilesFramerate") ) { tilesFramerate=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ParticleSystem_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("speed",87,97,69,81));
	outFields->push(HX_("particles",6d,3f,85,92));
	outFields->push(HX_("ready",63,a0,ba,e6));
	outFields->push(HX_("frameRate",ad,11,25,39));
	outFields->push(HX_("lifetime",09,0b,72,6c));
	outFields->push(HX_("animtime",9e,2e,79,95));
	outFields->push(HX_("time",0d,cc,fc,4c));
	outFields->push(HX_("spawnRate",bb,56,2f,ab));
	outFields->push(HX_("seed",71,85,50,4c));
	outFields->push(HX_("r",72,00,00,00));
	outFields->push(HX_("gx",31,5a,00,00));
	outFields->push(HX_("gy",32,5a,00,00));
	outFields->push(HX_("gz",33,5a,00,00));
	outFields->push(HX_("alignx",13,96,9a,3d));
	outFields->push(HX_("aligny",14,96,9a,3d));
	outFields->push(HX_("alignz",15,96,9a,3d));
	outFields->push(HX_("dimx",30,62,69,42));
	outFields->push(HX_("dimy",31,62,69,42));
	outFields->push(HX_("tilesx",53,d7,28,1e));
	outFields->push(HX_("tilesy",54,d7,28,1e));
	outFields->push(HX_("tilesFramerate",48,6f,92,b8));
	outFields->push(HX_("count",cf,44,63,4a));
	outFields->push(HX_("lap",5b,48,52,00));
	outFields->push(HX_("lapTime",08,0a,63,08));
	outFields->push(HX_("m",6d,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ParticleSystem_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::data::ParticleData*/ ,(int)offsetof(ParticleSystem_obj,data),HX_("data",2a,56,63,42)},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,speed),HX_("speed",87,97,69,81)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(ParticleSystem_obj,particles),HX_("particles",6d,3f,85,92)},
	{hx::fsBool,(int)offsetof(ParticleSystem_obj,ready),HX_("ready",63,a0,ba,e6)},
	{hx::fsInt,(int)offsetof(ParticleSystem_obj,frameRate),HX_("frameRate",ad,11,25,39)},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,lifetime),HX_("lifetime",09,0b,72,6c)},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,animtime),HX_("animtime",9e,2e,79,95)},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,time),HX_("time",0d,cc,fc,4c)},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,spawnRate),HX_("spawnRate",bb,56,2f,ab)},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,seed),HX_("seed",71,85,50,4c)},
	{hx::fsObject /*::iron::data::TParticleData*/ ,(int)offsetof(ParticleSystem_obj,r),HX_("r",72,00,00,00)},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,gx),HX_("gx",31,5a,00,00)},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,gy),HX_("gy",32,5a,00,00)},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,gz),HX_("gz",33,5a,00,00)},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,alignx),HX_("alignx",13,96,9a,3d)},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,aligny),HX_("aligny",14,96,9a,3d)},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,alignz),HX_("alignz",15,96,9a,3d)},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,dimx),HX_("dimx",30,62,69,42)},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,dimy),HX_("dimy",31,62,69,42)},
	{hx::fsInt,(int)offsetof(ParticleSystem_obj,tilesx),HX_("tilesx",53,d7,28,1e)},
	{hx::fsInt,(int)offsetof(ParticleSystem_obj,tilesy),HX_("tilesy",54,d7,28,1e)},
	{hx::fsInt,(int)offsetof(ParticleSystem_obj,tilesFramerate),HX_("tilesFramerate",48,6f,92,b8)},
	{hx::fsInt,(int)offsetof(ParticleSystem_obj,count),HX_("count",cf,44,63,4a)},
	{hx::fsInt,(int)offsetof(ParticleSystem_obj,lap),HX_("lap",5b,48,52,00)},
	{hx::fsFloat,(int)offsetof(ParticleSystem_obj,lapTime),HX_("lapTime",08,0a,63,08)},
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(ParticleSystem_obj,m),HX_("m",6d,00,00,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ParticleSystem_obj_sStaticStorageInfo = 0;
#endif

static ::String ParticleSystem_obj_sMemberFields[] = {
	HX_("data",2a,56,63,42),
	HX_("speed",87,97,69,81),
	HX_("particles",6d,3f,85,92),
	HX_("ready",63,a0,ba,e6),
	HX_("frameRate",ad,11,25,39),
	HX_("lifetime",09,0b,72,6c),
	HX_("animtime",9e,2e,79,95),
	HX_("time",0d,cc,fc,4c),
	HX_("spawnRate",bb,56,2f,ab),
	HX_("seed",71,85,50,4c),
	HX_("r",72,00,00,00),
	HX_("gx",31,5a,00,00),
	HX_("gy",32,5a,00,00),
	HX_("gz",33,5a,00,00),
	HX_("alignx",13,96,9a,3d),
	HX_("aligny",14,96,9a,3d),
	HX_("alignz",15,96,9a,3d),
	HX_("dimx",30,62,69,42),
	HX_("dimy",31,62,69,42),
	HX_("tilesx",53,d7,28,1e),
	HX_("tilesy",54,d7,28,1e),
	HX_("tilesFramerate",48,6f,92,b8),
	HX_("count",cf,44,63,4a),
	HX_("lap",5b,48,52,00),
	HX_("lapTime",08,0a,63,08),
	HX_("m",6d,00,00,00),
	HX_("update",09,86,05,87),
	HX_("getData",e0,05,e6,14),
	HX_("updateGpu",a3,67,db,82),
	HX_("setupGeomGpu",d3,13,20,0d),
	HX_("fhash",34,5b,e7,ff),
	HX_("remove",44,9c,88,04),
	::String(null()) };

hx::Class ParticleSystem_obj::__mClass;

void ParticleSystem_obj::__register()
{
	ParticleSystem_obj _hx_dummy;
	ParticleSystem_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.object.ParticleSystem",1e,57,99,a6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ParticleSystem_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ParticleSystem_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ParticleSystem_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ParticleSystem_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace object
