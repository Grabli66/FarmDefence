// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_iron_data_TObj
#include <hxinc/iron/data/TObj.h>
#endif
#ifndef INCLUDED_iron_math_Mat4
#include <hxinc/iron/math/Mat4.h>
#endif
#ifndef INCLUDED_iron_math_Quat
#include <hxinc/iron/math/Quat.h>
#endif
#ifndef INCLUDED_iron_math_Vec4
#include <hxinc/iron/math/Vec4.h>
#endif
#ifndef INCLUDED_iron_object_Constraint
#include <hxinc/iron/object/Constraint.h>
#endif
#ifndef INCLUDED_iron_object_Object
#include <hxinc/iron/object/Object.h>
#endif
#ifndef INCLUDED_iron_object_Transform
#include <hxinc/iron/object/Transform.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_54bddaaeb07ce419_7_new,"iron.object.Transform","new",0x0da9db35,"iron.object.Transform.new","iron/object/Transform.hx",7,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_30_reset,"iron.object.Transform","reset",0x7dd673e4,"iron.object.Transform.reset","iron/object/Transform.hx",30,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_42_update,"iron.object.Transform","update",0x1c5c2e54,"iron.object.Transform.update","iron/object/Transform.hx",42,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_45_prependMatrix,"iron.object.Transform","prependMatrix",0xfd8ac704,"iron.object.Transform.prependMatrix","iron/object/Transform.hx",45,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_51_popPrependMatrix,"iron.object.Transform","popPrependMatrix",0x85c81fa9,"iron.object.Transform.popPrependMatrix","iron/object/Transform.hx",51,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_57_appendMatrix,"iron.object.Transform","appendMatrix",0xe5a4de46,"iron.object.Transform.appendMatrix","iron/object/Transform.hx",57,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_63_popAppendMatrix,"iron.object.Transform","popAppendMatrix",0x8f022141,"iron.object.Transform.popAppendMatrix","iron/object/Transform.hx",63,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_69_composeDelta,"iron.object.Transform","composeDelta",0x3cbcf011,"iron.object.Transform.composeDelta","iron/object/Transform.hx",69,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_78_buildMatrix,"iron.object.Transform","buildMatrix",0x508583e4,"iron.object.Transform.buildMatrix","iron/object/Transform.hx",78,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_118_translate,"iron.object.Transform","translate",0x6b552fe3,"iron.object.Transform.translate","iron/object/Transform.hx",118,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_125_setMatrix,"iron.object.Transform","setMatrix",0x3d450418,"iron.object.Transform.setMatrix","iron/object/Transform.hx",125,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_131_multMatrix,"iron.object.Transform","multMatrix",0xaa40d01c,"iron.object.Transform.multMatrix","iron/object/Transform.hx",131,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_138_decompose,"iron.object.Transform","decompose",0x9c7d1c46,"iron.object.Transform.decompose","iron/object/Transform.hx",138,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_141_rotate,"iron.object.Transform","rotate",0x6076eea6,"iron.object.Transform.rotate","iron/object/Transform.hx",141,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_154_setRotation,"iron.object.Transform","setRotation",0x7d336ed5,"iron.object.Transform.setRotation","iron/object/Transform.hx",154,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_163_computeRadius,"iron.object.Transform","computeRadius",0x5982c63e,"iron.object.Transform.computeRadius","iron/object/Transform.hx",163,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_166_computeDim,"iron.object.Transform","computeDim",0xad629bdc,"iron.object.Transform.computeDim","iron/object/Transform.hx",166,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_174_applyParentInverse,"iron.object.Transform","applyParentInverse",0xd5bcb223,"iron.object.Transform.applyParentInverse","iron/object/Transform.hx",174,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_183_applyParent,"iron.object.Transform","applyParent",0x6dc52d0d,"iron.object.Transform.applyParent","iron/object/Transform.hx",183,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_190_diff,"iron.object.Transform","diff",0xe05ccb90,"iron.object.Transform.diff","iron/object/Transform.hx",190,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_202_overlap,"iron.object.Transform","overlap",0xbf8cdcdc,"iron.object.Transform.overlap","iron/object/Transform.hx",202,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_214_look,"iron.object.Transform","look",0xe5ab15ea,"iron.object.Transform.look","iron/object/Transform.hx",214,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_215_right,"iron.object.Transform","right",0x807235f1,"iron.object.Transform.right","iron/object/Transform.hx",215,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_216_up,"iron.object.Transform","up",0x84144d26,"iron.object.Transform.up","iron/object/Transform.hx",216,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_218_worldx,"iron.object.Transform","worldx",0x5ef59a31,"iron.object.Transform.worldx","iron/object/Transform.hx",218,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_219_worldy,"iron.object.Transform","worldy",0x5ef59a32,"iron.object.Transform.worldy","iron/object/Transform.hx",219,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_220_worldz,"iron.object.Transform","worldz",0x5ef59a33,"iron.object.Transform.worldz","iron/object/Transform.hx",220,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_19_boot,"iron.object.Transform","boot",0xdf0ef3bd,"iron.object.Transform.boot","iron/object/Transform.hx",19,0x303963fb)
HX_LOCAL_STACK_FRAME(_hx_pos_54bddaaeb07ce419_20_boot,"iron.object.Transform","boot",0xdf0ef3bd,"iron.object.Transform.boot","iron/object/Transform.hx",20,0x303963fb)
namespace iron{
namespace object{

void Transform_obj::__construct( ::iron::object::Object object){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_7_new)
HXLINE( 225)		this->dscale = null();
HXLINE( 224)		this->drot = null();
HXLINE( 223)		this->dloc = null();
HXLINE( 189)		this->lastWorld = null();
HXLINE(  23)		this->boneParent = null();
HXLINE(  22)		this->appendMats = null();
HXLINE(  21)		this->prependMats = null();
HXLINE(   9)		this->localOnly = false;
HXLINE(  26)		this->object = object;
HXLINE(  27)		this->reset();
            	}

Dynamic Transform_obj::__CreateEmpty() { return new Transform_obj; }

void *Transform_obj::_hx_vtable = 0;

Dynamic Transform_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Transform_obj > _hx_result = new Transform_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Transform_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x15357341;
}

void Transform_obj::reset(){
            	HX_GC_STACKFRAME(&_hx_pos_54bddaaeb07ce419_30_reset)
HXLINE(  31)		this->world =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ));
HXLINE(  32)		this->local =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ));
HXLINE(  33)		this->loc =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  34)		this->rot =  ::iron::math::Quat_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  35)		this->scale =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,((Float)1.0),((Float)1.0),((Float)1.0),null());
HXLINE(  36)		this->dim =  ::iron::math::Vec4_obj::__alloc( HX_CTX ,((Float)2.0),((Float)2.0),((Float)2.0),null());
HXLINE(  37)		this->radius = ( (float)(((Float)1.0)) );
HXLINE(  38)		this->dirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,reset,(void))

void Transform_obj::update(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_42_update)
HXDLIN(  42)		if (this->dirty) {
HXDLIN(  42)			this->buildMatrix();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,update,(void))

void Transform_obj::prependMatrix( ::iron::math::Mat4 m){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_45_prependMatrix)
HXLINE(  46)		if (hx::IsNull( this->prependMats )) {
HXLINE(  46)			this->prependMats = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE(  47)		this->prependMats->push(m);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,prependMatrix,(void))

void Transform_obj::popPrependMatrix(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_51_popPrependMatrix)
HXDLIN(  51)		if (hx::IsNotNull( this->prependMats )) {
HXLINE(  52)			this->prependMats->pop().StaticCast<  ::iron::math::Mat4 >();
HXLINE(  53)			if ((this->prependMats->length == 0)) {
HXLINE(  53)				this->prependMats = null();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,popPrependMatrix,(void))

void Transform_obj::appendMatrix( ::iron::math::Mat4 m){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_57_appendMatrix)
HXLINE(  58)		if (hx::IsNull( this->appendMats )) {
HXLINE(  58)			this->appendMats = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE(  59)		this->appendMats->push(m);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,appendMatrix,(void))

void Transform_obj::popAppendMatrix(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_63_popAppendMatrix)
HXDLIN(  63)		if (hx::IsNotNull( this->appendMats )) {
HXLINE(  64)			this->appendMats->pop().StaticCast<  ::iron::math::Mat4 >();
HXLINE(  65)			if ((this->appendMats->length == 0)) {
HXLINE(  65)				this->appendMats = null();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,popAppendMatrix,(void))

void Transform_obj::composeDelta(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_69_composeDelta)
HXLINE(  71)		{
HXLINE(  71)			 ::iron::math::Vec4 _this = this->dloc;
HXDLIN(  71)			 ::iron::math::Vec4 a = this->loc;
HXDLIN(  71)			 ::iron::math::Vec4 b = this->dloc;
HXDLIN(  71)			_this->x = (a->x + b->x);
HXDLIN(  71)			_this->y = (a->y + b->y);
HXDLIN(  71)			_this->z = (a->z + b->z);
            		}
HXLINE(  72)		{
HXLINE(  72)			 ::iron::math::Vec4 _this1 = this->dscale;
HXDLIN(  72)			 ::iron::math::Vec4 a1 = this->dscale;
HXDLIN(  72)			 ::iron::math::Vec4 b1 = this->scale;
HXDLIN(  72)			_this1->x = (a1->x + b1->x);
HXDLIN(  72)			_this1->y = (a1->y + b1->y);
HXDLIN(  72)			_this1->z = (a1->z + b1->z);
            		}
HXLINE(  73)		{
HXLINE(  73)			 ::iron::math::Quat _this2 = this->drot;
HXDLIN(  73)			Float f = (( (Float)(this->_deulerX) ) / ( (Float)(2) ));
HXDLIN(  73)			Float c1 = ::Math_obj::cos(f);
HXDLIN(  73)			Float s1 = ::Math_obj::sin(f);
HXDLIN(  73)			f = (( (Float)(this->_deulerY) ) / ( (Float)(2) ));
HXDLIN(  73)			Float c2 = ::Math_obj::cos(f);
HXDLIN(  73)			Float s2 = ::Math_obj::sin(f);
HXDLIN(  73)			f = (( (Float)(this->_deulerZ) ) / ( (Float)(2) ));
HXDLIN(  73)			Float c3 = ::Math_obj::cos(f);
HXDLIN(  73)			Float s3 = ::Math_obj::sin(f);
HXDLIN(  73)			_this2->x = ( (float)((((s1 * c2) * c3) + ((c1 * s2) * s3))) );
HXDLIN(  73)			_this2->y = ( (float)((((c1 * s2) * c3) + ((s1 * c2) * s3))) );
HXDLIN(  73)			_this2->z = ( (float)((((c1 * c2) * s3) - ((s1 * s2) * c3))) );
HXDLIN(  73)			_this2->w = ( (float)((((c1 * c2) * c3) - ((s1 * s2) * s3))) );
            		}
HXLINE(  74)		{
HXLINE(  74)			 ::iron::math::Quat _this3 = this->drot;
HXDLIN(  74)			 ::iron::math::Quat q1 = this->rot;
HXDLIN(  74)			 ::iron::math::Quat q2 = this->drot;
HXDLIN(  74)			float q1x = q1->x;
HXDLIN(  74)			float q1y = q1->y;
HXDLIN(  74)			float q1z = q1->z;
HXDLIN(  74)			float q1w = q1->w;
HXDLIN(  74)			float q2x = q2->x;
HXDLIN(  74)			float q2y = q2->y;
HXDLIN(  74)			float q2z = q2->z;
HXDLIN(  74)			float q2w = q2->w;
HXDLIN(  74)			_this3->x = ((((q1x * q2w) + (q1w * q2x)) + (q1y * q2z)) - (q1z * q2y));
HXDLIN(  74)			_this3->y = ((((q1w * q2y) - (q1x * q2z)) + (q1y * q2w)) + (q1z * q2x));
HXDLIN(  74)			_this3->z = ((((q1w * q2z) + (q1x * q2y)) - (q1y * q2x)) + (q1z * q2w));
HXDLIN(  74)			_this3->w = ((((q1w * q2w) - (q1x * q2x)) - (q1y * q2y)) - (q1z * q2z));
            		}
HXLINE(  75)		{
HXLINE(  75)			 ::iron::math::Mat4 _this4 = this->local;
HXDLIN(  75)			 ::iron::math::Vec4 loc = this->dloc;
HXDLIN(  75)			 ::iron::math::Quat quat = this->drot;
HXDLIN(  75)			 ::iron::math::Vec4 sc = this->dscale;
HXDLIN(  75)			{
HXLINE(  75)				float x = quat->x;
HXDLIN(  75)				float y = quat->y;
HXDLIN(  75)				float z = quat->z;
HXDLIN(  75)				float w = quat->w;
HXDLIN(  75)				float x2 = (x + x);
HXDLIN(  75)				float y2 = (y + y);
HXDLIN(  75)				float z2 = (z + z);
HXDLIN(  75)				float xx = (x * x2);
HXDLIN(  75)				float xy = (x * y2);
HXDLIN(  75)				float xz = (x * z2);
HXDLIN(  75)				float yy = (y * y2);
HXDLIN(  75)				float yz = (y * z2);
HXDLIN(  75)				float zz = (z * z2);
HXDLIN(  75)				float wx = (w * x2);
HXDLIN(  75)				float wy = (w * y2);
HXDLIN(  75)				float wz = (w * z2);
HXDLIN(  75)				_this4->self->_00 = ( (float)((((Float)1.0) - (yy + zz))) );
HXDLIN(  75)				_this4->self->_10 = (xy - wz);
HXDLIN(  75)				_this4->self->_20 = (xz + wy);
HXDLIN(  75)				_this4->self->_01 = (xy + wz);
HXDLIN(  75)				_this4->self->_11 = ( (float)((((Float)1.0) - (xx + zz))) );
HXDLIN(  75)				_this4->self->_21 = (yz - wx);
HXDLIN(  75)				_this4->self->_02 = (xz - wy);
HXDLIN(  75)				_this4->self->_12 = (yz + wx);
HXDLIN(  75)				_this4->self->_22 = ( (float)((((Float)1.0) - (xx + yy))) );
HXDLIN(  75)				_this4->self->_03 = ( (float)(((Float)0.0)) );
HXDLIN(  75)				_this4->self->_13 = ( (float)(((Float)0.0)) );
HXDLIN(  75)				_this4->self->_23 = ( (float)(((Float)0.0)) );
HXDLIN(  75)				_this4->self->_30 = ( (float)(((Float)0.0)) );
HXDLIN(  75)				_this4->self->_31 = ( (float)(((Float)0.0)) );
HXDLIN(  75)				_this4->self->_32 = ( (float)(((Float)0.0)) );
HXDLIN(  75)				_this4->self->_33 = ( (float)(((Float)1.0)) );
            			}
HXDLIN(  75)			{
HXLINE(  75)				float x1 = sc->x;
HXDLIN(  75)				float y1 = sc->y;
HXDLIN(  75)				float z1 = sc->z;
HXDLIN(  75)				{
HXLINE(  75)					 ::iron::math::Mat4 _g = _this4;
HXDLIN(  75)					_g->self->_00 = (_g->self->_00 * x1);
            				}
HXDLIN(  75)				{
HXLINE(  75)					 ::iron::math::Mat4 _g1 = _this4;
HXDLIN(  75)					_g1->self->_01 = (_g1->self->_01 * x1);
            				}
HXDLIN(  75)				{
HXLINE(  75)					 ::iron::math::Mat4 _g2 = _this4;
HXDLIN(  75)					_g2->self->_02 = (_g2->self->_02 * x1);
            				}
HXDLIN(  75)				{
HXLINE(  75)					 ::iron::math::Mat4 _g3 = _this4;
HXDLIN(  75)					_g3->self->_03 = (_g3->self->_03 * x1);
            				}
HXDLIN(  75)				{
HXLINE(  75)					 ::iron::math::Mat4 _g4 = _this4;
HXDLIN(  75)					_g4->self->_10 = (_g4->self->_10 * y1);
            				}
HXDLIN(  75)				{
HXLINE(  75)					 ::iron::math::Mat4 _g5 = _this4;
HXDLIN(  75)					_g5->self->_11 = (_g5->self->_11 * y1);
            				}
HXDLIN(  75)				{
HXLINE(  75)					 ::iron::math::Mat4 _g6 = _this4;
HXDLIN(  75)					_g6->self->_12 = (_g6->self->_12 * y1);
            				}
HXDLIN(  75)				{
HXLINE(  75)					 ::iron::math::Mat4 _g7 = _this4;
HXDLIN(  75)					_g7->self->_13 = (_g7->self->_13 * y1);
            				}
HXDLIN(  75)				{
HXLINE(  75)					 ::iron::math::Mat4 _g8 = _this4;
HXDLIN(  75)					_g8->self->_20 = (_g8->self->_20 * z1);
            				}
HXDLIN(  75)				{
HXLINE(  75)					 ::iron::math::Mat4 _g9 = _this4;
HXDLIN(  75)					_g9->self->_21 = (_g9->self->_21 * z1);
            				}
HXDLIN(  75)				{
HXLINE(  75)					 ::iron::math::Mat4 _g10 = _this4;
HXDLIN(  75)					_g10->self->_22 = (_g10->self->_22 * z1);
            				}
HXDLIN(  75)				{
HXLINE(  75)					 ::iron::math::Mat4 _g11 = _this4;
HXDLIN(  75)					_g11->self->_23 = (_g11->self->_23 * z1);
            				}
            			}
HXDLIN(  75)			{
HXLINE(  75)				_this4->self->_30 = loc->x;
HXDLIN(  75)				_this4->self->_31 = loc->y;
HXDLIN(  75)				_this4->self->_32 = loc->z;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,composeDelta,(void))

void Transform_obj::buildMatrix(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_78_buildMatrix)
HXLINE(  79)		if (hx::IsNull( this->dloc )) {
HXLINE(  79)			 ::iron::math::Mat4 _this = this->local;
HXDLIN(  79)			 ::iron::math::Vec4 loc = this->loc;
HXDLIN(  79)			 ::iron::math::Quat quat = this->rot;
HXDLIN(  79)			 ::iron::math::Vec4 sc = this->scale;
HXDLIN(  79)			{
HXLINE(  79)				float x = quat->x;
HXDLIN(  79)				float y = quat->y;
HXDLIN(  79)				float z = quat->z;
HXDLIN(  79)				float w = quat->w;
HXDLIN(  79)				float x2 = (x + x);
HXDLIN(  79)				float y2 = (y + y);
HXDLIN(  79)				float z2 = (z + z);
HXDLIN(  79)				float xx = (x * x2);
HXDLIN(  79)				float xy = (x * y2);
HXDLIN(  79)				float xz = (x * z2);
HXDLIN(  79)				float yy = (y * y2);
HXDLIN(  79)				float yz = (y * z2);
HXDLIN(  79)				float zz = (z * z2);
HXDLIN(  79)				float wx = (w * x2);
HXDLIN(  79)				float wy = (w * y2);
HXDLIN(  79)				float wz = (w * z2);
HXDLIN(  79)				_this->self->_00 = ( (float)((((Float)1.0) - (yy + zz))) );
HXDLIN(  79)				_this->self->_10 = (xy - wz);
HXDLIN(  79)				_this->self->_20 = (xz + wy);
HXDLIN(  79)				_this->self->_01 = (xy + wz);
HXDLIN(  79)				_this->self->_11 = ( (float)((((Float)1.0) - (xx + zz))) );
HXDLIN(  79)				_this->self->_21 = (yz - wx);
HXDLIN(  79)				_this->self->_02 = (xz - wy);
HXDLIN(  79)				_this->self->_12 = (yz + wx);
HXDLIN(  79)				_this->self->_22 = ( (float)((((Float)1.0) - (xx + yy))) );
HXDLIN(  79)				_this->self->_03 = ( (float)(((Float)0.0)) );
HXDLIN(  79)				_this->self->_13 = ( (float)(((Float)0.0)) );
HXDLIN(  79)				_this->self->_23 = ( (float)(((Float)0.0)) );
HXDLIN(  79)				_this->self->_30 = ( (float)(((Float)0.0)) );
HXDLIN(  79)				_this->self->_31 = ( (float)(((Float)0.0)) );
HXDLIN(  79)				_this->self->_32 = ( (float)(((Float)0.0)) );
HXDLIN(  79)				_this->self->_33 = ( (float)(((Float)1.0)) );
            			}
HXDLIN(  79)			{
HXLINE(  79)				float x1 = sc->x;
HXDLIN(  79)				float y1 = sc->y;
HXDLIN(  79)				float z1 = sc->z;
HXDLIN(  79)				{
HXLINE(  79)					 ::iron::math::Mat4 _g = _this;
HXDLIN(  79)					_g->self->_00 = (_g->self->_00 * x1);
            				}
HXDLIN(  79)				{
HXLINE(  79)					 ::iron::math::Mat4 _g1 = _this;
HXDLIN(  79)					_g1->self->_01 = (_g1->self->_01 * x1);
            				}
HXDLIN(  79)				{
HXLINE(  79)					 ::iron::math::Mat4 _g2 = _this;
HXDLIN(  79)					_g2->self->_02 = (_g2->self->_02 * x1);
            				}
HXDLIN(  79)				{
HXLINE(  79)					 ::iron::math::Mat4 _g3 = _this;
HXDLIN(  79)					_g3->self->_03 = (_g3->self->_03 * x1);
            				}
HXDLIN(  79)				{
HXLINE(  79)					 ::iron::math::Mat4 _g4 = _this;
HXDLIN(  79)					_g4->self->_10 = (_g4->self->_10 * y1);
            				}
HXDLIN(  79)				{
HXLINE(  79)					 ::iron::math::Mat4 _g5 = _this;
HXDLIN(  79)					_g5->self->_11 = (_g5->self->_11 * y1);
            				}
HXDLIN(  79)				{
HXLINE(  79)					 ::iron::math::Mat4 _g6 = _this;
HXDLIN(  79)					_g6->self->_12 = (_g6->self->_12 * y1);
            				}
HXDLIN(  79)				{
HXLINE(  79)					 ::iron::math::Mat4 _g7 = _this;
HXDLIN(  79)					_g7->self->_13 = (_g7->self->_13 * y1);
            				}
HXDLIN(  79)				{
HXLINE(  79)					 ::iron::math::Mat4 _g8 = _this;
HXDLIN(  79)					_g8->self->_20 = (_g8->self->_20 * z1);
            				}
HXDLIN(  79)				{
HXLINE(  79)					 ::iron::math::Mat4 _g9 = _this;
HXDLIN(  79)					_g9->self->_21 = (_g9->self->_21 * z1);
            				}
HXDLIN(  79)				{
HXLINE(  79)					 ::iron::math::Mat4 _g10 = _this;
HXDLIN(  79)					_g10->self->_22 = (_g10->self->_22 * z1);
            				}
HXDLIN(  79)				{
HXLINE(  79)					 ::iron::math::Mat4 _g11 = _this;
HXDLIN(  79)					_g11->self->_23 = (_g11->self->_23 * z1);
            				}
            			}
HXDLIN(  79)			{
HXLINE(  79)				_this->self->_30 = loc->x;
HXDLIN(  79)				_this->self->_31 = loc->y;
HXDLIN(  79)				_this->self->_32 = loc->z;
            			}
            		}
            		else {
HXLINE(  79)			this->composeDelta();
            		}
HXLINE(  81)		if (hx::IsNotNull( this->prependMats )) {
HXLINE(  82)			{
HXLINE(  82)				 ::iron::math::Mat4 _this1 = ::iron::object::Transform_obj::temp;
HXDLIN(  82)				_this1->self->_00 = ( (float)(((Float)1.0)) );
HXDLIN(  82)				_this1->self->_01 = ( (float)(((Float)0.0)) );
HXDLIN(  82)				_this1->self->_02 = ( (float)(((Float)0.0)) );
HXDLIN(  82)				_this1->self->_03 = ( (float)(((Float)0.0)) );
HXDLIN(  82)				_this1->self->_10 = ( (float)(((Float)0.0)) );
HXDLIN(  82)				_this1->self->_11 = ( (float)(((Float)1.0)) );
HXDLIN(  82)				_this1->self->_12 = ( (float)(((Float)0.0)) );
HXDLIN(  82)				_this1->self->_13 = ( (float)(((Float)0.0)) );
HXDLIN(  82)				_this1->self->_20 = ( (float)(((Float)0.0)) );
HXDLIN(  82)				_this1->self->_21 = ( (float)(((Float)0.0)) );
HXDLIN(  82)				_this1->self->_22 = ( (float)(((Float)1.0)) );
HXDLIN(  82)				_this1->self->_23 = ( (float)(((Float)0.0)) );
HXDLIN(  82)				_this1->self->_30 = ( (float)(((Float)0.0)) );
HXDLIN(  82)				_this1->self->_31 = ( (float)(((Float)0.0)) );
HXDLIN(  82)				_this1->self->_32 = ( (float)(((Float)0.0)) );
HXDLIN(  82)				_this1->self->_33 = ( (float)(((Float)1.0)) );
            			}
HXLINE(  83)			{
HXLINE(  83)				int _g12 = 0;
HXDLIN(  83)				::Array< ::Dynamic> _g13 = this->prependMats;
HXDLIN(  83)				while((_g12 < _g13->length)){
HXLINE(  83)					 ::iron::math::Mat4 m = _g13->__get(_g12).StaticCast<  ::iron::math::Mat4 >();
HXDLIN(  83)					_g12 = (_g12 + 1);
HXDLIN(  83)					{
HXLINE(  83)						 ::iron::math::Mat4 _this2 = ::iron::object::Transform_obj::temp;
HXDLIN(  83)						float a00 = _this2->self->_00;
HXDLIN(  83)						float a01 = _this2->self->_01;
HXDLIN(  83)						float a02 = _this2->self->_02;
HXDLIN(  83)						float a03 = _this2->self->_03;
HXDLIN(  83)						float a10 = _this2->self->_10;
HXDLIN(  83)						float a11 = _this2->self->_11;
HXDLIN(  83)						float a12 = _this2->self->_12;
HXDLIN(  83)						float a13 = _this2->self->_13;
HXDLIN(  83)						float a20 = _this2->self->_20;
HXDLIN(  83)						float a21 = _this2->self->_21;
HXDLIN(  83)						float a22 = _this2->self->_22;
HXDLIN(  83)						float a23 = _this2->self->_23;
HXDLIN(  83)						float a30 = _this2->self->_30;
HXDLIN(  83)						float a31 = _this2->self->_31;
HXDLIN(  83)						float a32 = _this2->self->_32;
HXDLIN(  83)						float a33 = _this2->self->_33;
HXDLIN(  83)						float b0 = m->self->_00;
HXDLIN(  83)						float b1 = m->self->_10;
HXDLIN(  83)						float b2 = m->self->_20;
HXDLIN(  83)						float b3 = m->self->_30;
HXDLIN(  83)						_this2->self->_00 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN(  83)						_this2->self->_10 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN(  83)						_this2->self->_20 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN(  83)						_this2->self->_30 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN(  83)						b0 = m->self->_01;
HXDLIN(  83)						b1 = m->self->_11;
HXDLIN(  83)						b2 = m->self->_21;
HXDLIN(  83)						b3 = m->self->_31;
HXDLIN(  83)						_this2->self->_01 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN(  83)						_this2->self->_11 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN(  83)						_this2->self->_21 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN(  83)						_this2->self->_31 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN(  83)						b0 = m->self->_02;
HXDLIN(  83)						b1 = m->self->_12;
HXDLIN(  83)						b2 = m->self->_22;
HXDLIN(  83)						b3 = m->self->_32;
HXDLIN(  83)						_this2->self->_02 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN(  83)						_this2->self->_12 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN(  83)						_this2->self->_22 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN(  83)						_this2->self->_32 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN(  83)						b0 = m->self->_03;
HXDLIN(  83)						b1 = m->self->_13;
HXDLIN(  83)						b2 = m->self->_23;
HXDLIN(  83)						b3 = m->self->_33;
HXDLIN(  83)						_this2->self->_03 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN(  83)						_this2->self->_13 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN(  83)						_this2->self->_23 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN(  83)						_this2->self->_33 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
            					}
            				}
            			}
HXLINE(  84)			{
HXLINE(  84)				 ::iron::math::Mat4 _this3 = ::iron::object::Transform_obj::temp;
HXDLIN(  84)				 ::iron::math::Mat4 m1 = this->local;
HXDLIN(  84)				float a001 = _this3->self->_00;
HXDLIN(  84)				float a011 = _this3->self->_01;
HXDLIN(  84)				float a021 = _this3->self->_02;
HXDLIN(  84)				float a031 = _this3->self->_03;
HXDLIN(  84)				float a101 = _this3->self->_10;
HXDLIN(  84)				float a111 = _this3->self->_11;
HXDLIN(  84)				float a121 = _this3->self->_12;
HXDLIN(  84)				float a131 = _this3->self->_13;
HXDLIN(  84)				float a201 = _this3->self->_20;
HXDLIN(  84)				float a211 = _this3->self->_21;
HXDLIN(  84)				float a221 = _this3->self->_22;
HXDLIN(  84)				float a231 = _this3->self->_23;
HXDLIN(  84)				float a301 = _this3->self->_30;
HXDLIN(  84)				float a311 = _this3->self->_31;
HXDLIN(  84)				float a321 = _this3->self->_32;
HXDLIN(  84)				float a331 = _this3->self->_33;
HXDLIN(  84)				float b01 = m1->self->_00;
HXDLIN(  84)				float b11 = m1->self->_10;
HXDLIN(  84)				float b21 = m1->self->_20;
HXDLIN(  84)				float b31 = m1->self->_30;
HXDLIN(  84)				_this3->self->_00 = ((((a001 * b01) + (a011 * b11)) + (a021 * b21)) + (a031 * b31));
HXDLIN(  84)				_this3->self->_10 = ((((a101 * b01) + (a111 * b11)) + (a121 * b21)) + (a131 * b31));
HXDLIN(  84)				_this3->self->_20 = ((((a201 * b01) + (a211 * b11)) + (a221 * b21)) + (a231 * b31));
HXDLIN(  84)				_this3->self->_30 = ((((a301 * b01) + (a311 * b11)) + (a321 * b21)) + (a331 * b31));
HXDLIN(  84)				b01 = m1->self->_01;
HXDLIN(  84)				b11 = m1->self->_11;
HXDLIN(  84)				b21 = m1->self->_21;
HXDLIN(  84)				b31 = m1->self->_31;
HXDLIN(  84)				_this3->self->_01 = ((((a001 * b01) + (a011 * b11)) + (a021 * b21)) + (a031 * b31));
HXDLIN(  84)				_this3->self->_11 = ((((a101 * b01) + (a111 * b11)) + (a121 * b21)) + (a131 * b31));
HXDLIN(  84)				_this3->self->_21 = ((((a201 * b01) + (a211 * b11)) + (a221 * b21)) + (a231 * b31));
HXDLIN(  84)				_this3->self->_31 = ((((a301 * b01) + (a311 * b11)) + (a321 * b21)) + (a331 * b31));
HXDLIN(  84)				b01 = m1->self->_02;
HXDLIN(  84)				b11 = m1->self->_12;
HXDLIN(  84)				b21 = m1->self->_22;
HXDLIN(  84)				b31 = m1->self->_32;
HXDLIN(  84)				_this3->self->_02 = ((((a001 * b01) + (a011 * b11)) + (a021 * b21)) + (a031 * b31));
HXDLIN(  84)				_this3->self->_12 = ((((a101 * b01) + (a111 * b11)) + (a121 * b21)) + (a131 * b31));
HXDLIN(  84)				_this3->self->_22 = ((((a201 * b01) + (a211 * b11)) + (a221 * b21)) + (a231 * b31));
HXDLIN(  84)				_this3->self->_32 = ((((a301 * b01) + (a311 * b11)) + (a321 * b21)) + (a331 * b31));
HXDLIN(  84)				b01 = m1->self->_03;
HXDLIN(  84)				b11 = m1->self->_13;
HXDLIN(  84)				b21 = m1->self->_23;
HXDLIN(  84)				b31 = m1->self->_33;
HXDLIN(  84)				_this3->self->_03 = ((((a001 * b01) + (a011 * b11)) + (a021 * b21)) + (a031 * b31));
HXDLIN(  84)				_this3->self->_13 = ((((a101 * b01) + (a111 * b11)) + (a121 * b21)) + (a131 * b31));
HXDLIN(  84)				_this3->self->_23 = ((((a201 * b01) + (a211 * b11)) + (a221 * b21)) + (a231 * b31));
HXDLIN(  84)				_this3->self->_33 = ((((a301 * b01) + (a311 * b11)) + (a321 * b21)) + (a331 * b31));
            			}
HXLINE(  85)			{
HXLINE(  85)				 ::iron::math::Mat4 _this4 = this->local;
HXDLIN(  85)				 ::iron::math::Mat4 m2 = ::iron::object::Transform_obj::temp;
HXDLIN(  85)				_this4->self->_00 = m2->self->_00;
HXDLIN(  85)				_this4->self->_01 = m2->self->_01;
HXDLIN(  85)				_this4->self->_02 = m2->self->_02;
HXDLIN(  85)				_this4->self->_03 = m2->self->_03;
HXDLIN(  85)				_this4->self->_10 = m2->self->_10;
HXDLIN(  85)				_this4->self->_11 = m2->self->_11;
HXDLIN(  85)				_this4->self->_12 = m2->self->_12;
HXDLIN(  85)				_this4->self->_13 = m2->self->_13;
HXDLIN(  85)				_this4->self->_20 = m2->self->_20;
HXDLIN(  85)				_this4->self->_21 = m2->self->_21;
HXDLIN(  85)				_this4->self->_22 = m2->self->_22;
HXDLIN(  85)				_this4->self->_23 = m2->self->_23;
HXDLIN(  85)				_this4->self->_30 = m2->self->_30;
HXDLIN(  85)				_this4->self->_31 = m2->self->_31;
HXDLIN(  85)				_this4->self->_32 = m2->self->_32;
HXDLIN(  85)				_this4->self->_33 = m2->self->_33;
            			}
            		}
HXLINE(  87)		if (hx::IsNotNull( this->appendMats )) {
HXLINE(  87)			int _g14 = 0;
HXDLIN(  87)			::Array< ::Dynamic> _g15 = this->appendMats;
HXDLIN(  87)			while((_g14 < _g15->length)){
HXLINE(  87)				 ::iron::math::Mat4 m3 = _g15->__get(_g14).StaticCast<  ::iron::math::Mat4 >();
HXDLIN(  87)				_g14 = (_g14 + 1);
HXDLIN(  87)				{
HXLINE(  87)					 ::iron::math::Mat4 _this5 = this->local;
HXDLIN(  87)					float a002 = _this5->self->_00;
HXDLIN(  87)					float a012 = _this5->self->_01;
HXDLIN(  87)					float a022 = _this5->self->_02;
HXDLIN(  87)					float a032 = _this5->self->_03;
HXDLIN(  87)					float a102 = _this5->self->_10;
HXDLIN(  87)					float a112 = _this5->self->_11;
HXDLIN(  87)					float a122 = _this5->self->_12;
HXDLIN(  87)					float a132 = _this5->self->_13;
HXDLIN(  87)					float a202 = _this5->self->_20;
HXDLIN(  87)					float a212 = _this5->self->_21;
HXDLIN(  87)					float a222 = _this5->self->_22;
HXDLIN(  87)					float a232 = _this5->self->_23;
HXDLIN(  87)					float a302 = _this5->self->_30;
HXDLIN(  87)					float a312 = _this5->self->_31;
HXDLIN(  87)					float a322 = _this5->self->_32;
HXDLIN(  87)					float a332 = _this5->self->_33;
HXDLIN(  87)					float b02 = m3->self->_00;
HXDLIN(  87)					float b12 = m3->self->_10;
HXDLIN(  87)					float b22 = m3->self->_20;
HXDLIN(  87)					float b32 = m3->self->_30;
HXDLIN(  87)					_this5->self->_00 = ((((a002 * b02) + (a012 * b12)) + (a022 * b22)) + (a032 * b32));
HXDLIN(  87)					_this5->self->_10 = ((((a102 * b02) + (a112 * b12)) + (a122 * b22)) + (a132 * b32));
HXDLIN(  87)					_this5->self->_20 = ((((a202 * b02) + (a212 * b12)) + (a222 * b22)) + (a232 * b32));
HXDLIN(  87)					_this5->self->_30 = ((((a302 * b02) + (a312 * b12)) + (a322 * b22)) + (a332 * b32));
HXDLIN(  87)					b02 = m3->self->_01;
HXDLIN(  87)					b12 = m3->self->_11;
HXDLIN(  87)					b22 = m3->self->_21;
HXDLIN(  87)					b32 = m3->self->_31;
HXDLIN(  87)					_this5->self->_01 = ((((a002 * b02) + (a012 * b12)) + (a022 * b22)) + (a032 * b32));
HXDLIN(  87)					_this5->self->_11 = ((((a102 * b02) + (a112 * b12)) + (a122 * b22)) + (a132 * b32));
HXDLIN(  87)					_this5->self->_21 = ((((a202 * b02) + (a212 * b12)) + (a222 * b22)) + (a232 * b32));
HXDLIN(  87)					_this5->self->_31 = ((((a302 * b02) + (a312 * b12)) + (a322 * b22)) + (a332 * b32));
HXDLIN(  87)					b02 = m3->self->_02;
HXDLIN(  87)					b12 = m3->self->_12;
HXDLIN(  87)					b22 = m3->self->_22;
HXDLIN(  87)					b32 = m3->self->_32;
HXDLIN(  87)					_this5->self->_02 = ((((a002 * b02) + (a012 * b12)) + (a022 * b22)) + (a032 * b32));
HXDLIN(  87)					_this5->self->_12 = ((((a102 * b02) + (a112 * b12)) + (a122 * b22)) + (a132 * b32));
HXDLIN(  87)					_this5->self->_22 = ((((a202 * b02) + (a212 * b12)) + (a222 * b22)) + (a232 * b32));
HXDLIN(  87)					_this5->self->_32 = ((((a302 * b02) + (a312 * b12)) + (a322 * b22)) + (a332 * b32));
HXDLIN(  87)					b02 = m3->self->_03;
HXDLIN(  87)					b12 = m3->self->_13;
HXDLIN(  87)					b22 = m3->self->_23;
HXDLIN(  87)					b32 = m3->self->_33;
HXDLIN(  87)					_this5->self->_03 = ((((a002 * b02) + (a012 * b12)) + (a022 * b22)) + (a032 * b32));
HXDLIN(  87)					_this5->self->_13 = ((((a102 * b02) + (a112 * b12)) + (a122 * b22)) + (a132 * b32));
HXDLIN(  87)					_this5->self->_23 = ((((a202 * b02) + (a212 * b12)) + (a222 * b22)) + (a232 * b32));
HXDLIN(  87)					_this5->self->_33 = ((((a302 * b02) + (a312 * b12)) + (a322 * b22)) + (a332 * b32));
            				}
            			}
            		}
HXLINE(  89)		if (hx::IsNotNull( this->boneParent )) {
HXLINE(  89)			 ::iron::math::Mat4 _this6 = this->local;
HXDLIN(  89)			 ::iron::math::Mat4 b = this->boneParent;
HXDLIN(  89)			 ::iron::math::Mat4 a = this->local;
HXDLIN(  89)			float a003 = a->self->_00;
HXDLIN(  89)			float a013 = a->self->_01;
HXDLIN(  89)			float a023 = a->self->_02;
HXDLIN(  89)			float a033 = a->self->_03;
HXDLIN(  89)			float a103 = a->self->_10;
HXDLIN(  89)			float a113 = a->self->_11;
HXDLIN(  89)			float a123 = a->self->_12;
HXDLIN(  89)			float a133 = a->self->_13;
HXDLIN(  89)			float a203 = a->self->_20;
HXDLIN(  89)			float a213 = a->self->_21;
HXDLIN(  89)			float a223 = a->self->_22;
HXDLIN(  89)			float a233 = a->self->_23;
HXDLIN(  89)			float a303 = a->self->_30;
HXDLIN(  89)			float a313 = a->self->_31;
HXDLIN(  89)			float a323 = a->self->_32;
HXDLIN(  89)			float a333 = a->self->_33;
HXDLIN(  89)			float b03 = b->self->_00;
HXDLIN(  89)			float b13 = b->self->_10;
HXDLIN(  89)			float b23 = b->self->_20;
HXDLIN(  89)			float b33 = b->self->_30;
HXDLIN(  89)			_this6->self->_00 = ((((a003 * b03) + (a013 * b13)) + (a023 * b23)) + (a033 * b33));
HXDLIN(  89)			_this6->self->_10 = ((((a103 * b03) + (a113 * b13)) + (a123 * b23)) + (a133 * b33));
HXDLIN(  89)			_this6->self->_20 = ((((a203 * b03) + (a213 * b13)) + (a223 * b23)) + (a233 * b33));
HXDLIN(  89)			_this6->self->_30 = ((((a303 * b03) + (a313 * b13)) + (a323 * b23)) + (a333 * b33));
HXDLIN(  89)			b03 = b->self->_01;
HXDLIN(  89)			b13 = b->self->_11;
HXDLIN(  89)			b23 = b->self->_21;
HXDLIN(  89)			b33 = b->self->_31;
HXDLIN(  89)			_this6->self->_01 = ((((a003 * b03) + (a013 * b13)) + (a023 * b23)) + (a033 * b33));
HXDLIN(  89)			_this6->self->_11 = ((((a103 * b03) + (a113 * b13)) + (a123 * b23)) + (a133 * b33));
HXDLIN(  89)			_this6->self->_21 = ((((a203 * b03) + (a213 * b13)) + (a223 * b23)) + (a233 * b33));
HXDLIN(  89)			_this6->self->_31 = ((((a303 * b03) + (a313 * b13)) + (a323 * b23)) + (a333 * b33));
HXDLIN(  89)			b03 = b->self->_02;
HXDLIN(  89)			b13 = b->self->_12;
HXDLIN(  89)			b23 = b->self->_22;
HXDLIN(  89)			b33 = b->self->_32;
HXDLIN(  89)			_this6->self->_02 = ((((a003 * b03) + (a013 * b13)) + (a023 * b23)) + (a033 * b33));
HXDLIN(  89)			_this6->self->_12 = ((((a103 * b03) + (a113 * b13)) + (a123 * b23)) + (a133 * b33));
HXDLIN(  89)			_this6->self->_22 = ((((a203 * b03) + (a213 * b13)) + (a223 * b23)) + (a233 * b33));
HXDLIN(  89)			_this6->self->_32 = ((((a303 * b03) + (a313 * b13)) + (a323 * b23)) + (a333 * b33));
HXDLIN(  89)			b03 = b->self->_03;
HXDLIN(  89)			b13 = b->self->_13;
HXDLIN(  89)			b23 = b->self->_23;
HXDLIN(  89)			b33 = b->self->_33;
HXDLIN(  89)			_this6->self->_03 = ((((a003 * b03) + (a013 * b13)) + (a023 * b23)) + (a033 * b33));
HXDLIN(  89)			_this6->self->_13 = ((((a103 * b03) + (a113 * b13)) + (a123 * b23)) + (a133 * b33));
HXDLIN(  89)			_this6->self->_23 = ((((a203 * b03) + (a213 * b13)) + (a223 * b23)) + (a233 * b33));
HXDLIN(  89)			_this6->self->_33 = ((((a303 * b03) + (a313 * b13)) + (a323 * b23)) + (a333 * b33));
            		}
HXLINE(  91)		bool _hx_tmp;
HXDLIN(  91)		if (hx::IsNotNull( this->object->parent )) {
HXLINE(  91)			_hx_tmp = !(this->localOnly);
            		}
            		else {
HXLINE(  91)			_hx_tmp = false;
            		}
HXDLIN(  91)		if (_hx_tmp) {
HXLINE(  92)			 ::iron::math::Mat4 _this7 = this->world;
HXDLIN(  92)			 ::iron::math::Mat4 a1 = this->local;
HXDLIN(  92)			 ::iron::math::Mat4 b4 = this->object->parent->transform->world;
HXDLIN(  92)			float a004 = a1->self->_00;
HXDLIN(  92)			float a014 = a1->self->_01;
HXDLIN(  92)			float a024 = a1->self->_02;
HXDLIN(  92)			float a034 = a1->self->_03;
HXDLIN(  92)			float a104 = a1->self->_10;
HXDLIN(  92)			float a114 = a1->self->_11;
HXDLIN(  92)			float a124 = a1->self->_12;
HXDLIN(  92)			float a134 = a1->self->_13;
HXDLIN(  92)			float a204 = a1->self->_20;
HXDLIN(  92)			float a214 = a1->self->_21;
HXDLIN(  92)			float a224 = a1->self->_22;
HXDLIN(  92)			float a234 = a1->self->_23;
HXDLIN(  92)			float a304 = a1->self->_30;
HXDLIN(  92)			float a314 = a1->self->_31;
HXDLIN(  92)			float a324 = a1->self->_32;
HXDLIN(  92)			float a334 = a1->self->_33;
HXDLIN(  92)			float b04 = b4->self->_00;
HXDLIN(  92)			float b14 = b4->self->_10;
HXDLIN(  92)			float b24 = b4->self->_20;
HXDLIN(  92)			float b34 = b4->self->_30;
HXDLIN(  92)			_this7->self->_00 = ((((a004 * b04) + (a014 * b14)) + (a024 * b24)) + (a034 * b34));
HXDLIN(  92)			_this7->self->_10 = ((((a104 * b04) + (a114 * b14)) + (a124 * b24)) + (a134 * b34));
HXDLIN(  92)			_this7->self->_20 = ((((a204 * b04) + (a214 * b14)) + (a224 * b24)) + (a234 * b34));
HXDLIN(  92)			_this7->self->_30 = ((((a304 * b04) + (a314 * b14)) + (a324 * b24)) + (a334 * b34));
HXDLIN(  92)			b04 = b4->self->_01;
HXDLIN(  92)			b14 = b4->self->_11;
HXDLIN(  92)			b24 = b4->self->_21;
HXDLIN(  92)			b34 = b4->self->_31;
HXDLIN(  92)			_this7->self->_01 = ((((a004 * b04) + (a014 * b14)) + (a024 * b24)) + (a034 * b34));
HXDLIN(  92)			_this7->self->_11 = ((((a104 * b04) + (a114 * b14)) + (a124 * b24)) + (a134 * b34));
HXDLIN(  92)			_this7->self->_21 = ((((a204 * b04) + (a214 * b14)) + (a224 * b24)) + (a234 * b34));
HXDLIN(  92)			_this7->self->_31 = ((((a304 * b04) + (a314 * b14)) + (a324 * b24)) + (a334 * b34));
HXDLIN(  92)			b04 = b4->self->_02;
HXDLIN(  92)			b14 = b4->self->_12;
HXDLIN(  92)			b24 = b4->self->_22;
HXDLIN(  92)			b34 = b4->self->_32;
HXDLIN(  92)			_this7->self->_02 = ((((a004 * b04) + (a014 * b14)) + (a024 * b24)) + (a034 * b34));
HXDLIN(  92)			_this7->self->_12 = ((((a104 * b04) + (a114 * b14)) + (a124 * b24)) + (a134 * b34));
HXDLIN(  92)			_this7->self->_22 = ((((a204 * b04) + (a214 * b14)) + (a224 * b24)) + (a234 * b34));
HXDLIN(  92)			_this7->self->_32 = ((((a304 * b04) + (a314 * b14)) + (a324 * b24)) + (a334 * b34));
HXDLIN(  92)			_this7->self->_03 = ( (float)(0) );
HXDLIN(  92)			_this7->self->_13 = ( (float)(0) );
HXDLIN(  92)			_this7->self->_23 = ( (float)(0) );
HXDLIN(  92)			_this7->self->_33 = ( (float)(1) );
            		}
            		else {
HXLINE(  95)			 ::iron::math::Mat4 _this8 = this->world;
HXDLIN(  95)			 ::iron::math::Mat4 m4 = this->local;
HXDLIN(  95)			_this8->self->_00 = m4->self->_00;
HXDLIN(  95)			_this8->self->_01 = m4->self->_01;
HXDLIN(  95)			_this8->self->_02 = m4->self->_02;
HXDLIN(  95)			_this8->self->_03 = m4->self->_03;
HXDLIN(  95)			_this8->self->_10 = m4->self->_10;
HXDLIN(  95)			_this8->self->_11 = m4->self->_11;
HXDLIN(  95)			_this8->self->_12 = m4->self->_12;
HXDLIN(  95)			_this8->self->_13 = m4->self->_13;
HXDLIN(  95)			_this8->self->_20 = m4->self->_20;
HXDLIN(  95)			_this8->self->_21 = m4->self->_21;
HXDLIN(  95)			_this8->self->_22 = m4->self->_22;
HXDLIN(  95)			_this8->self->_23 = m4->self->_23;
HXDLIN(  95)			_this8->self->_30 = m4->self->_30;
HXDLIN(  95)			_this8->self->_31 = m4->self->_31;
HXDLIN(  95)			_this8->self->_32 = m4->self->_32;
HXDLIN(  95)			_this8->self->_33 = m4->self->_33;
            		}
HXLINE(  99)		if (hx::IsNotNull( this->object->constraints )) {
HXLINE(  99)			int _g16 = 0;
HXDLIN(  99)			::Array< ::Dynamic> _g17 = this->object->constraints;
HXDLIN(  99)			while((_g16 < _g17->length)){
HXLINE(  99)				 ::iron::object::Constraint c = _g17->__get(_g16).StaticCast<  ::iron::object::Constraint >();
HXDLIN(  99)				_g16 = (_g16 + 1);
HXDLIN(  99)				c->apply(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
HXLINE( 101)		this->computeDim();
HXLINE( 104)		{
HXLINE( 104)			int _g18 = 0;
HXDLIN( 104)			::Array< ::Dynamic> _g19 = this->object->children;
HXDLIN( 104)			while((_g18 < _g19->length)){
HXLINE( 104)				 ::iron::object::Object n = _g19->__get(_g18).StaticCast<  ::iron::object::Object >();
HXDLIN( 104)				_g18 = (_g18 + 1);
HXLINE( 105)				n->transform->buildMatrix();
            			}
            		}
HXLINE( 108)		this->dirty = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,buildMatrix,(void))

void Transform_obj::translate(float x,float y,float z){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_118_translate)
HXLINE( 119)		 ::iron::math::Vec4 _hx_tmp = this->loc;
HXDLIN( 119)		_hx_tmp->x = (_hx_tmp->x + x);
HXLINE( 120)		 ::iron::math::Vec4 _hx_tmp1 = this->loc;
HXDLIN( 120)		_hx_tmp1->y = (_hx_tmp1->y + y);
HXLINE( 121)		 ::iron::math::Vec4 _hx_tmp2 = this->loc;
HXDLIN( 121)		_hx_tmp2->z = (_hx_tmp2->z + z);
HXLINE( 122)		this->buildMatrix();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Transform_obj,translate,(void))

void Transform_obj::setMatrix( ::iron::math::Mat4 mat){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_125_setMatrix)
HXLINE( 126)		{
HXLINE( 126)			 ::iron::math::Mat4 _this = this->local;
HXDLIN( 126)			_this->self->_00 = mat->self->_00;
HXDLIN( 126)			_this->self->_01 = mat->self->_01;
HXDLIN( 126)			_this->self->_02 = mat->self->_02;
HXDLIN( 126)			_this->self->_03 = mat->self->_03;
HXDLIN( 126)			_this->self->_10 = mat->self->_10;
HXDLIN( 126)			_this->self->_11 = mat->self->_11;
HXDLIN( 126)			_this->self->_12 = mat->self->_12;
HXDLIN( 126)			_this->self->_13 = mat->self->_13;
HXDLIN( 126)			_this->self->_20 = mat->self->_20;
HXDLIN( 126)			_this->self->_21 = mat->self->_21;
HXDLIN( 126)			_this->self->_22 = mat->self->_22;
HXDLIN( 126)			_this->self->_23 = mat->self->_23;
HXDLIN( 126)			_this->self->_30 = mat->self->_30;
HXDLIN( 126)			_this->self->_31 = mat->self->_31;
HXDLIN( 126)			_this->self->_32 = mat->self->_32;
HXDLIN( 126)			_this->self->_33 = mat->self->_33;
            		}
HXLINE( 127)		this->decompose();
HXLINE( 128)		this->buildMatrix();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,setMatrix,(void))

void Transform_obj::multMatrix( ::iron::math::Mat4 mat){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_131_multMatrix)
HXLINE( 132)		{
HXLINE( 132)			 ::iron::math::Mat4 _this = this->local;
HXDLIN( 132)			float a00 = _this->self->_00;
HXDLIN( 132)			float a01 = _this->self->_01;
HXDLIN( 132)			float a02 = _this->self->_02;
HXDLIN( 132)			float a03 = _this->self->_03;
HXDLIN( 132)			float a10 = _this->self->_10;
HXDLIN( 132)			float a11 = _this->self->_11;
HXDLIN( 132)			float a12 = _this->self->_12;
HXDLIN( 132)			float a13 = _this->self->_13;
HXDLIN( 132)			float a20 = _this->self->_20;
HXDLIN( 132)			float a21 = _this->self->_21;
HXDLIN( 132)			float a22 = _this->self->_22;
HXDLIN( 132)			float a23 = _this->self->_23;
HXDLIN( 132)			float a30 = _this->self->_30;
HXDLIN( 132)			float a31 = _this->self->_31;
HXDLIN( 132)			float a32 = _this->self->_32;
HXDLIN( 132)			float a33 = _this->self->_33;
HXDLIN( 132)			float b0 = mat->self->_00;
HXDLIN( 132)			float b1 = mat->self->_10;
HXDLIN( 132)			float b2 = mat->self->_20;
HXDLIN( 132)			float b3 = mat->self->_30;
HXDLIN( 132)			_this->self->_00 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 132)			_this->self->_10 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 132)			_this->self->_20 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 132)			_this->self->_30 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN( 132)			b0 = mat->self->_01;
HXDLIN( 132)			b1 = mat->self->_11;
HXDLIN( 132)			b2 = mat->self->_21;
HXDLIN( 132)			b3 = mat->self->_31;
HXDLIN( 132)			_this->self->_01 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 132)			_this->self->_11 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 132)			_this->self->_21 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 132)			_this->self->_31 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN( 132)			b0 = mat->self->_02;
HXDLIN( 132)			b1 = mat->self->_12;
HXDLIN( 132)			b2 = mat->self->_22;
HXDLIN( 132)			b3 = mat->self->_32;
HXDLIN( 132)			_this->self->_02 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 132)			_this->self->_12 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 132)			_this->self->_22 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 132)			_this->self->_32 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN( 132)			b0 = mat->self->_03;
HXDLIN( 132)			b1 = mat->self->_13;
HXDLIN( 132)			b2 = mat->self->_23;
HXDLIN( 132)			b3 = mat->self->_33;
HXDLIN( 132)			_this->self->_03 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 132)			_this->self->_13 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 132)			_this->self->_23 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 132)			_this->self->_33 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
            		}
HXLINE( 133)		this->decompose();
HXLINE( 134)		this->buildMatrix();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,multMatrix,(void))

void Transform_obj::decompose(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_138_decompose)
HXDLIN( 138)		 ::iron::math::Mat4 _this = this->local;
HXDLIN( 138)		 ::iron::math::Vec4 loc = this->loc;
HXDLIN( 138)		 ::iron::math::Quat quat = this->rot;
HXDLIN( 138)		 ::iron::math::Vec4 scale = this->scale;
HXDLIN( 138)		loc->x = _this->self->_30;
HXDLIN( 138)		loc->y = _this->self->_31;
HXDLIN( 138)		loc->z = _this->self->_32;
HXDLIN( 138)		 ::iron::math::Vec4 _this1 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 138)		_this1->x = _this->self->_00;
HXDLIN( 138)		_this1->y = _this->self->_01;
HXDLIN( 138)		_this1->z = _this->self->_02;
HXDLIN( 138)		_this1->w = ( (float)(((Float)1.0)) );
HXDLIN( 138)		 ::iron::math::Vec4 _this2 = _this1;
HXDLIN( 138)		float v = (_this2->x * _this2->x);
HXDLIN( 138)		float v1 = (v + (_this2->y * _this2->y));
HXDLIN( 138)		scale->x = ( (float)(::Math_obj::sqrt(( (Float)((v1 + (_this2->z * _this2->z))) ))) );
HXDLIN( 138)		 ::iron::math::Vec4 _this3 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 138)		_this3->x = _this->self->_10;
HXDLIN( 138)		_this3->y = _this->self->_11;
HXDLIN( 138)		_this3->z = _this->self->_12;
HXDLIN( 138)		_this3->w = ( (float)(((Float)1.0)) );
HXDLIN( 138)		 ::iron::math::Vec4 _this4 = _this3;
HXDLIN( 138)		float v2 = (_this4->x * _this4->x);
HXDLIN( 138)		float v3 = (v2 + (_this4->y * _this4->y));
HXDLIN( 138)		scale->y = ( (float)(::Math_obj::sqrt(( (Float)((v3 + (_this4->z * _this4->z))) ))) );
HXDLIN( 138)		 ::iron::math::Vec4 _this5 = ::iron::math::Mat4_obj::helpVec;
HXDLIN( 138)		_this5->x = _this->self->_20;
HXDLIN( 138)		_this5->y = _this->self->_21;
HXDLIN( 138)		_this5->z = _this->self->_22;
HXDLIN( 138)		_this5->w = ( (float)(((Float)1.0)) );
HXDLIN( 138)		 ::iron::math::Vec4 _this6 = _this5;
HXDLIN( 138)		float v4 = (_this6->x * _this6->x);
HXDLIN( 138)		float v5 = (v4 + (_this6->y * _this6->y));
HXDLIN( 138)		scale->z = ( (float)(::Math_obj::sqrt(( (Float)((v5 + (_this6->z * _this6->z))) ))) );
HXDLIN( 138)		 ::kha::math::FastMatrix4 _this7 = _this->self;
HXDLIN( 138)		float m3 = _this7->_12;
HXDLIN( 138)		float m4 = _this7->_22;
HXDLIN( 138)		float m5 = _this7->_32;
HXDLIN( 138)		float m6 = _this7->_13;
HXDLIN( 138)		float m7 = _this7->_23;
HXDLIN( 138)		float m8 = _this7->_33;
HXDLIN( 138)		float _this8 = _this7->_11;
HXDLIN( 138)		float c00 = (_this8 * ((m4 * m8) - (m5 * m7)));
HXDLIN( 138)		float _this9 = _this7->_21;
HXDLIN( 138)		float c001 = (c00 - (_this9 * ((m3 * m8) - (m5 * m6))));
HXDLIN( 138)		float _this10 = _this7->_31;
HXDLIN( 138)		float c002 = (c001 + (_this10 * ((m3 * m7) - (m4 * m6))));
HXDLIN( 138)		float m31 = _this7->_12;
HXDLIN( 138)		float m41 = _this7->_22;
HXDLIN( 138)		float m51 = _this7->_32;
HXDLIN( 138)		float m61 = _this7->_13;
HXDLIN( 138)		float m71 = _this7->_23;
HXDLIN( 138)		float m81 = _this7->_33;
HXDLIN( 138)		float _this11 = _this7->_10;
HXDLIN( 138)		float c01 = (_this11 * ((m41 * m81) - (m51 * m71)));
HXDLIN( 138)		float _this12 = _this7->_20;
HXDLIN( 138)		float c011 = (c01 - (_this12 * ((m31 * m81) - (m51 * m61))));
HXDLIN( 138)		float _this13 = _this7->_30;
HXDLIN( 138)		float c012 = (c011 + (_this13 * ((m31 * m71) - (m41 * m61))));
HXDLIN( 138)		float m32 = _this7->_11;
HXDLIN( 138)		float m42 = _this7->_21;
HXDLIN( 138)		float m52 = _this7->_31;
HXDLIN( 138)		float m62 = _this7->_13;
HXDLIN( 138)		float m72 = _this7->_23;
HXDLIN( 138)		float m82 = _this7->_33;
HXDLIN( 138)		float _this14 = _this7->_10;
HXDLIN( 138)		float c02 = (_this14 * ((m42 * m82) - (m52 * m72)));
HXDLIN( 138)		float _this15 = _this7->_20;
HXDLIN( 138)		float c021 = (c02 - (_this15 * ((m32 * m82) - (m52 * m62))));
HXDLIN( 138)		float _this16 = _this7->_30;
HXDLIN( 138)		float c022 = (c021 + (_this16 * ((m32 * m72) - (m42 * m62))));
HXDLIN( 138)		float m33 = _this7->_11;
HXDLIN( 138)		float m43 = _this7->_21;
HXDLIN( 138)		float m53 = _this7->_31;
HXDLIN( 138)		float m63 = _this7->_12;
HXDLIN( 138)		float m73 = _this7->_22;
HXDLIN( 138)		float m83 = _this7->_32;
HXDLIN( 138)		float _this17 = _this7->_10;
HXDLIN( 138)		float c03 = (_this17 * ((m43 * m83) - (m53 * m73)));
HXDLIN( 138)		float _this18 = _this7->_20;
HXDLIN( 138)		float c031 = (c03 - (_this18 * ((m33 * m83) - (m53 * m63))));
HXDLIN( 138)		float _this19 = _this7->_30;
HXDLIN( 138)		float c032 = (c031 + (_this19 * ((m33 * m73) - (m43 * m63))));
HXDLIN( 138)		float _hx_tmp = (_this7->_00 * c002);
HXDLIN( 138)		float _hx_tmp1 = (_hx_tmp - (_this7->_01 * c012));
HXDLIN( 138)		float _hx_tmp2 = (_hx_tmp1 + (_this7->_02 * c022));
HXDLIN( 138)		if (((_hx_tmp2 - (_this7->_03 * c032)) < ((Float)0.0))) {
HXDLIN( 138)			scale->x = -(scale->x);
            		}
HXDLIN( 138)		Float invs = (((Float)1.0) / ( (Float)(scale->x) ));
HXDLIN( 138)		::iron::math::Mat4_obj::helpMat->self->_00 = ( (float)((_this->self->_00 * invs)) );
HXDLIN( 138)		::iron::math::Mat4_obj::helpMat->self->_01 = ( (float)((_this->self->_01 * invs)) );
HXDLIN( 138)		::iron::math::Mat4_obj::helpMat->self->_02 = ( (float)((_this->self->_02 * invs)) );
HXDLIN( 138)		invs = (((Float)1.0) / ( (Float)(scale->y) ));
HXDLIN( 138)		::iron::math::Mat4_obj::helpMat->self->_10 = ( (float)((_this->self->_10 * invs)) );
HXDLIN( 138)		::iron::math::Mat4_obj::helpMat->self->_11 = ( (float)((_this->self->_11 * invs)) );
HXDLIN( 138)		::iron::math::Mat4_obj::helpMat->self->_12 = ( (float)((_this->self->_12 * invs)) );
HXDLIN( 138)		invs = (((Float)1.0) / ( (Float)(scale->z) ));
HXDLIN( 138)		::iron::math::Mat4_obj::helpMat->self->_20 = ( (float)((_this->self->_20 * invs)) );
HXDLIN( 138)		::iron::math::Mat4_obj::helpMat->self->_21 = ( (float)((_this->self->_21 * invs)) );
HXDLIN( 138)		::iron::math::Mat4_obj::helpMat->self->_22 = ( (float)((_this->self->_22 * invs)) );
HXDLIN( 138)		{
HXDLIN( 138)			 ::iron::math::Mat4 m = ::iron::math::Mat4_obj::helpMat;
HXDLIN( 138)			float m11 = m->self->_00;
HXDLIN( 138)			float m12 = m->self->_10;
HXDLIN( 138)			float m13 = m->self->_20;
HXDLIN( 138)			float m21 = m->self->_01;
HXDLIN( 138)			float m22 = m->self->_11;
HXDLIN( 138)			float m23 = m->self->_21;
HXDLIN( 138)			float m311 = m->self->_02;
HXDLIN( 138)			float m321 = m->self->_12;
HXDLIN( 138)			float m331 = m->self->_22;
HXDLIN( 138)			float tr = ((m11 + m22) + m331);
HXDLIN( 138)			Float s = ((Float)0.0);
HXDLIN( 138)			if ((tr > 0)) {
HXDLIN( 138)				s = (((Float)0.5) / ::Math_obj::sqrt((tr + ((Float)1.0))));
HXDLIN( 138)				quat->w = ( (float)((((Float)0.25) / s)) );
HXDLIN( 138)				quat->x = ( (float)(((m321 - m23) * s)) );
HXDLIN( 138)				quat->y = ( (float)(((m13 - m311) * s)) );
HXDLIN( 138)				quat->z = ( (float)(((m21 - m12) * s)) );
            			}
            			else {
HXDLIN( 138)				bool _hx_tmp3;
HXDLIN( 138)				if ((m11 > m22)) {
HXDLIN( 138)					_hx_tmp3 = (m11 > m331);
            				}
            				else {
HXDLIN( 138)					_hx_tmp3 = false;
            				}
HXDLIN( 138)				if (_hx_tmp3) {
HXDLIN( 138)					s = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m11) - m22) - m331)));
HXDLIN( 138)					quat->w = ( (float)((( (Float)((m321 - m23)) ) / s)) );
HXDLIN( 138)					quat->x = ( (float)((((Float)0.25) * s)) );
HXDLIN( 138)					quat->y = ( (float)((( (Float)((m12 + m21)) ) / s)) );
HXDLIN( 138)					quat->z = ( (float)((( (Float)((m13 + m311)) ) / s)) );
            				}
            				else {
HXDLIN( 138)					if ((m22 > m331)) {
HXDLIN( 138)						s = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m22) - m11) - m331)));
HXDLIN( 138)						quat->w = ( (float)((( (Float)((m13 - m311)) ) / s)) );
HXDLIN( 138)						quat->x = ( (float)((( (Float)((m12 + m21)) ) / s)) );
HXDLIN( 138)						quat->y = ( (float)((((Float)0.25) * s)) );
HXDLIN( 138)						quat->z = ( (float)((( (Float)((m23 + m321)) ) / s)) );
            					}
            					else {
HXDLIN( 138)						s = (((Float)2.0) * ::Math_obj::sqrt((((((Float)1.0) + m331) - m11) - m22)));
HXDLIN( 138)						quat->w = ( (float)((( (Float)((m21 - m12)) ) / s)) );
HXDLIN( 138)						quat->x = ( (float)((( (Float)((m13 + m311)) ) / s)) );
HXDLIN( 138)						quat->y = ( (float)((( (Float)((m23 + m321)) ) / s)) );
HXDLIN( 138)						quat->z = ( (float)((((Float)0.25) * s)) );
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,decompose,(void))

void Transform_obj::rotate( ::iron::math::Vec4 axis,float f){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_141_rotate)
HXLINE( 142)		{
HXLINE( 142)			 ::iron::math::Quat _this = ::iron::object::Transform_obj::q;
HXDLIN( 142)			float s = ( (float)(::Math_obj::sin((f * ((Float)0.5)))) );
HXDLIN( 142)			_this->x = (axis->x * s);
HXDLIN( 142)			_this->y = (axis->y * s);
HXDLIN( 142)			_this->z = (axis->z * s);
HXDLIN( 142)			_this->w = ( (float)(::Math_obj::cos((f * ((Float)0.5)))) );
HXDLIN( 142)			{
HXLINE( 142)				float v = (_this->x * _this->x);
HXDLIN( 142)				float v1 = (v + (_this->y * _this->y));
HXDLIN( 142)				float v2 = (v1 + (_this->z * _this->z));
HXDLIN( 142)				Float l = ::Math_obj::sqrt(( (Float)((v2 + (_this->w * _this->w))) ));
HXDLIN( 142)				if ((l == ((Float)0.0))) {
HXLINE( 142)					_this->x = ( (float)(0) );
HXDLIN( 142)					_this->y = ( (float)(0) );
HXDLIN( 142)					_this->z = ( (float)(0) );
HXDLIN( 142)					_this->w = ( (float)(0) );
            				}
            				else {
HXLINE( 142)					l = (((Float)1.0) / l);
HXDLIN( 142)					 ::iron::math::Quat _this1 = _this;
HXDLIN( 142)					_this1->x = (_this1->x * l);
HXDLIN( 142)					 ::iron::math::Quat _this2 = _this;
HXDLIN( 142)					_this2->y = (_this2->y * l);
HXDLIN( 142)					 ::iron::math::Quat _this3 = _this;
HXDLIN( 142)					_this3->z = (_this3->z * l);
HXDLIN( 142)					 ::iron::math::Quat _this4 = _this;
HXDLIN( 142)					_this4->w = (_this4->w * l);
            				}
            			}
            		}
HXLINE( 143)		{
HXLINE( 143)			 ::iron::math::Quat _this5 = this->rot;
HXDLIN( 143)			 ::iron::math::Quat q1 = ::iron::object::Transform_obj::q;
HXDLIN( 143)			 ::iron::math::Quat q2 = this->rot;
HXDLIN( 143)			float q1x = q1->x;
HXDLIN( 143)			float q1y = q1->y;
HXDLIN( 143)			float q1z = q1->z;
HXDLIN( 143)			float q1w = q1->w;
HXDLIN( 143)			float q2x = q2->x;
HXDLIN( 143)			float q2y = q2->y;
HXDLIN( 143)			float q2z = q2->z;
HXDLIN( 143)			float q2w = q2->w;
HXDLIN( 143)			_this5->x = ((((q1x * q2w) + (q1w * q2x)) + (q1y * q2z)) - (q1z * q2y));
HXDLIN( 143)			_this5->y = ((((q1w * q2y) - (q1x * q2z)) + (q1y * q2w)) + (q1z * q2x));
HXDLIN( 143)			_this5->z = ((((q1w * q2z) + (q1x * q2y)) - (q1y * q2x)) + (q1z * q2w));
HXDLIN( 143)			_this5->w = ((((q1w * q2w) - (q1x * q2x)) - (q1y * q2y)) - (q1z * q2z));
            		}
HXLINE( 144)		this->dirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Transform_obj,rotate,(void))

void Transform_obj::setRotation(float x,float y,float z){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_154_setRotation)
HXLINE( 155)		{
HXLINE( 155)			 ::iron::math::Quat _this = this->rot;
HXDLIN( 155)			Float f = (( (Float)(x) ) / ( (Float)(2) ));
HXDLIN( 155)			Float c1 = ::Math_obj::cos(f);
HXDLIN( 155)			Float s1 = ::Math_obj::sin(f);
HXDLIN( 155)			f = (( (Float)(y) ) / ( (Float)(2) ));
HXDLIN( 155)			Float c2 = ::Math_obj::cos(f);
HXDLIN( 155)			Float s2 = ::Math_obj::sin(f);
HXDLIN( 155)			f = (( (Float)(z) ) / ( (Float)(2) ));
HXDLIN( 155)			Float c3 = ::Math_obj::cos(f);
HXDLIN( 155)			Float s3 = ::Math_obj::sin(f);
HXDLIN( 155)			_this->x = ( (float)((((s1 * c2) * c3) + ((c1 * s2) * s3))) );
HXDLIN( 155)			_this->y = ( (float)((((c1 * s2) * c3) + ((s1 * c2) * s3))) );
HXDLIN( 155)			_this->z = ( (float)((((c1 * c2) * s3) - ((s1 * s2) * c3))) );
HXDLIN( 155)			_this->w = ( (float)((((c1 * c2) * c3) - ((s1 * s2) * s3))) );
            		}
HXLINE( 156)		this->_eulerX = x;
HXLINE( 157)		this->_eulerY = y;
HXLINE( 158)		this->_eulerZ = z;
HXLINE( 159)		this->dirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Transform_obj,setRotation,(void))

void Transform_obj::computeRadius(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_163_computeRadius)
HXDLIN( 163)		float _hx_tmp = (this->dim->x * this->dim->x);
HXDLIN( 163)		float _hx_tmp1 = (_hx_tmp + (this->dim->y * this->dim->y));
HXDLIN( 163)		this->radius = ( (float)(::Math_obj::sqrt(( (Float)((_hx_tmp1 + (this->dim->z * this->dim->z))) ))) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,computeRadius,(void))

void Transform_obj::computeDim(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_166_computeDim)
HXLINE( 167)		if (hx::IsNull( this->object->raw )) {
HXLINE( 167)			this->computeRadius();
HXDLIN( 167)			return;
            		}
HXLINE( 168)		 ::kha::arrays::Float32ArrayPrivate d = this->object->raw->dimensions;
HXLINE( 169)		if (hx::IsNull( d )) {
HXLINE( 169)			 ::iron::math::Vec4 _this = this->dim;
HXDLIN( 169)			_this->x = (2 * this->scale->x);
HXDLIN( 169)			_this->y = (2 * this->scale->y);
HXDLIN( 169)			_this->z = (2 * this->scale->z);
HXDLIN( 169)			_this->w = ( (float)(((Float)1.0)) );
            		}
            		else {
HXLINE( 170)			 ::iron::math::Vec4 _this1 = this->dim;
HXDLIN( 170)			float x = d->self.get(0);
HXDLIN( 170)			float x1 = (x * this->scale->x);
HXDLIN( 170)			float y = d->self.get(1);
HXDLIN( 170)			float y1 = (y * this->scale->y);
HXDLIN( 170)			float z = d->self.get(2);
HXDLIN( 170)			_this1->x = x1;
HXDLIN( 170)			_this1->y = y1;
HXDLIN( 170)			_this1->z = (z * this->scale->z);
HXDLIN( 170)			_this1->w = ( (float)(((Float)1.0)) );
            		}
HXLINE( 171)		this->computeRadius();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,computeDim,(void))

void Transform_obj::applyParentInverse(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_174_applyParentInverse)
HXLINE( 175)		 ::iron::object::Transform pt = this->object->parent->transform;
HXLINE( 176)		pt->buildMatrix();
HXLINE( 177)		{
HXLINE( 177)			 ::iron::math::Mat4 _this = ::iron::object::Transform_obj::temp;
HXDLIN( 177)			 ::iron::math::Mat4 m = pt->world;
HXDLIN( 177)			float a00 = m->self->_00;
HXDLIN( 177)			float a01 = m->self->_01;
HXDLIN( 177)			float a02 = m->self->_02;
HXDLIN( 177)			float a03 = m->self->_03;
HXDLIN( 177)			float a10 = m->self->_10;
HXDLIN( 177)			float a11 = m->self->_11;
HXDLIN( 177)			float a12 = m->self->_12;
HXDLIN( 177)			float a13 = m->self->_13;
HXDLIN( 177)			float a20 = m->self->_20;
HXDLIN( 177)			float a21 = m->self->_21;
HXDLIN( 177)			float a22 = m->self->_22;
HXDLIN( 177)			float a23 = m->self->_23;
HXDLIN( 177)			float a30 = m->self->_30;
HXDLIN( 177)			float a31 = m->self->_31;
HXDLIN( 177)			float a32 = m->self->_32;
HXDLIN( 177)			float a33 = m->self->_33;
HXDLIN( 177)			float b00 = ((a00 * a11) - (a01 * a10));
HXDLIN( 177)			float b01 = ((a00 * a12) - (a02 * a10));
HXDLIN( 177)			float b02 = ((a00 * a13) - (a03 * a10));
HXDLIN( 177)			float b03 = ((a01 * a12) - (a02 * a11));
HXDLIN( 177)			float b04 = ((a01 * a13) - (a03 * a11));
HXDLIN( 177)			float b05 = ((a02 * a13) - (a03 * a12));
HXDLIN( 177)			float b06 = ((a20 * a31) - (a21 * a30));
HXDLIN( 177)			float b07 = ((a20 * a32) - (a22 * a30));
HXDLIN( 177)			float b08 = ((a20 * a33) - (a23 * a30));
HXDLIN( 177)			float b09 = ((a21 * a32) - (a22 * a31));
HXDLIN( 177)			float b10 = ((a21 * a33) - (a23 * a31));
HXDLIN( 177)			float b11 = ((a22 * a33) - (a23 * a32));
HXDLIN( 177)			float det = ((((((b00 * b11) - (b01 * b10)) + (b02 * b09)) + (b03 * b08)) - (b04 * b07)) + (b05 * b06));
HXDLIN( 177)			if ((det == ((Float)0.0))) {
HXLINE( 177)				_this->self->_00 = ( (float)(((Float)1.0)) );
HXDLIN( 177)				_this->self->_01 = ( (float)(((Float)0.0)) );
HXDLIN( 177)				_this->self->_02 = ( (float)(((Float)0.0)) );
HXDLIN( 177)				_this->self->_03 = ( (float)(((Float)0.0)) );
HXDLIN( 177)				_this->self->_10 = ( (float)(((Float)0.0)) );
HXDLIN( 177)				_this->self->_11 = ( (float)(((Float)1.0)) );
HXDLIN( 177)				_this->self->_12 = ( (float)(((Float)0.0)) );
HXDLIN( 177)				_this->self->_13 = ( (float)(((Float)0.0)) );
HXDLIN( 177)				_this->self->_20 = ( (float)(((Float)0.0)) );
HXDLIN( 177)				_this->self->_21 = ( (float)(((Float)0.0)) );
HXDLIN( 177)				_this->self->_22 = ( (float)(((Float)1.0)) );
HXDLIN( 177)				_this->self->_23 = ( (float)(((Float)0.0)) );
HXDLIN( 177)				_this->self->_30 = ( (float)(((Float)0.0)) );
HXDLIN( 177)				_this->self->_31 = ( (float)(((Float)0.0)) );
HXDLIN( 177)				_this->self->_32 = ( (float)(((Float)0.0)) );
HXDLIN( 177)				_this->self->_33 = ( (float)(((Float)1.0)) );
            			}
            			else {
HXLINE( 177)				det = ( (float)((((Float)1.0) / ( (Float)(det) ))) );
HXDLIN( 177)				_this->self->_00 = ((((a11 * b11) - (a12 * b10)) + (a13 * b09)) * det);
HXDLIN( 177)				_this->self->_01 = ((((a02 * b10) - (a01 * b11)) - (a03 * b09)) * det);
HXDLIN( 177)				_this->self->_02 = ((((a31 * b05) - (a32 * b04)) + (a33 * b03)) * det);
HXDLIN( 177)				_this->self->_03 = ((((a22 * b04) - (a21 * b05)) - (a23 * b03)) * det);
HXDLIN( 177)				_this->self->_10 = ((((a12 * b08) - (a10 * b11)) - (a13 * b07)) * det);
HXDLIN( 177)				_this->self->_11 = ((((a00 * b11) - (a02 * b08)) + (a03 * b07)) * det);
HXDLIN( 177)				_this->self->_12 = ((((a32 * b02) - (a30 * b05)) - (a33 * b01)) * det);
HXDLIN( 177)				_this->self->_13 = ((((a20 * b05) - (a22 * b02)) + (a23 * b01)) * det);
HXDLIN( 177)				_this->self->_20 = ((((a10 * b10) - (a11 * b08)) + (a13 * b06)) * det);
HXDLIN( 177)				_this->self->_21 = ((((a01 * b08) - (a00 * b10)) - (a03 * b06)) * det);
HXDLIN( 177)				_this->self->_22 = ((((a30 * b04) - (a31 * b02)) + (a33 * b00)) * det);
HXDLIN( 177)				_this->self->_23 = ((((a21 * b02) - (a20 * b04)) - (a23 * b00)) * det);
HXDLIN( 177)				_this->self->_30 = ((((a11 * b07) - (a10 * b09)) - (a12 * b06)) * det);
HXDLIN( 177)				_this->self->_31 = ((((a00 * b09) - (a01 * b07)) + (a02 * b06)) * det);
HXDLIN( 177)				_this->self->_32 = ((((a31 * b01) - (a30 * b03)) - (a32 * b00)) * det);
HXDLIN( 177)				_this->self->_33 = ((((a20 * b03) - (a21 * b01)) + (a22 * b00)) * det);
            			}
            		}
HXLINE( 178)		{
HXLINE( 178)			 ::iron::math::Mat4 _this1 = this->local;
HXDLIN( 178)			 ::iron::math::Mat4 m1 = ::iron::object::Transform_obj::temp;
HXDLIN( 178)			float a001 = _this1->self->_00;
HXDLIN( 178)			float a011 = _this1->self->_01;
HXDLIN( 178)			float a021 = _this1->self->_02;
HXDLIN( 178)			float a031 = _this1->self->_03;
HXDLIN( 178)			float a101 = _this1->self->_10;
HXDLIN( 178)			float a111 = _this1->self->_11;
HXDLIN( 178)			float a121 = _this1->self->_12;
HXDLIN( 178)			float a131 = _this1->self->_13;
HXDLIN( 178)			float a201 = _this1->self->_20;
HXDLIN( 178)			float a211 = _this1->self->_21;
HXDLIN( 178)			float a221 = _this1->self->_22;
HXDLIN( 178)			float a231 = _this1->self->_23;
HXDLIN( 178)			float a301 = _this1->self->_30;
HXDLIN( 178)			float a311 = _this1->self->_31;
HXDLIN( 178)			float a321 = _this1->self->_32;
HXDLIN( 178)			float a331 = _this1->self->_33;
HXDLIN( 178)			float b0 = m1->self->_00;
HXDLIN( 178)			float b1 = m1->self->_10;
HXDLIN( 178)			float b2 = m1->self->_20;
HXDLIN( 178)			float b3 = m1->self->_30;
HXDLIN( 178)			_this1->self->_00 = ((((a001 * b0) + (a011 * b1)) + (a021 * b2)) + (a031 * b3));
HXDLIN( 178)			_this1->self->_10 = ((((a101 * b0) + (a111 * b1)) + (a121 * b2)) + (a131 * b3));
HXDLIN( 178)			_this1->self->_20 = ((((a201 * b0) + (a211 * b1)) + (a221 * b2)) + (a231 * b3));
HXDLIN( 178)			_this1->self->_30 = ((((a301 * b0) + (a311 * b1)) + (a321 * b2)) + (a331 * b3));
HXDLIN( 178)			b0 = m1->self->_01;
HXDLIN( 178)			b1 = m1->self->_11;
HXDLIN( 178)			b2 = m1->self->_21;
HXDLIN( 178)			b3 = m1->self->_31;
HXDLIN( 178)			_this1->self->_01 = ((((a001 * b0) + (a011 * b1)) + (a021 * b2)) + (a031 * b3));
HXDLIN( 178)			_this1->self->_11 = ((((a101 * b0) + (a111 * b1)) + (a121 * b2)) + (a131 * b3));
HXDLIN( 178)			_this1->self->_21 = ((((a201 * b0) + (a211 * b1)) + (a221 * b2)) + (a231 * b3));
HXDLIN( 178)			_this1->self->_31 = ((((a301 * b0) + (a311 * b1)) + (a321 * b2)) + (a331 * b3));
HXDLIN( 178)			b0 = m1->self->_02;
HXDLIN( 178)			b1 = m1->self->_12;
HXDLIN( 178)			b2 = m1->self->_22;
HXDLIN( 178)			b3 = m1->self->_32;
HXDLIN( 178)			_this1->self->_02 = ((((a001 * b0) + (a011 * b1)) + (a021 * b2)) + (a031 * b3));
HXDLIN( 178)			_this1->self->_12 = ((((a101 * b0) + (a111 * b1)) + (a121 * b2)) + (a131 * b3));
HXDLIN( 178)			_this1->self->_22 = ((((a201 * b0) + (a211 * b1)) + (a221 * b2)) + (a231 * b3));
HXDLIN( 178)			_this1->self->_32 = ((((a301 * b0) + (a311 * b1)) + (a321 * b2)) + (a331 * b3));
HXDLIN( 178)			b0 = m1->self->_03;
HXDLIN( 178)			b1 = m1->self->_13;
HXDLIN( 178)			b2 = m1->self->_23;
HXDLIN( 178)			b3 = m1->self->_33;
HXDLIN( 178)			_this1->self->_03 = ((((a001 * b0) + (a011 * b1)) + (a021 * b2)) + (a031 * b3));
HXDLIN( 178)			_this1->self->_13 = ((((a101 * b0) + (a111 * b1)) + (a121 * b2)) + (a131 * b3));
HXDLIN( 178)			_this1->self->_23 = ((((a201 * b0) + (a211 * b1)) + (a221 * b2)) + (a231 * b3));
HXDLIN( 178)			_this1->self->_33 = ((((a301 * b0) + (a311 * b1)) + (a321 * b2)) + (a331 * b3));
            		}
HXLINE( 179)		this->decompose();
HXLINE( 180)		this->buildMatrix();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,applyParentInverse,(void))

void Transform_obj::applyParent(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_183_applyParent)
HXLINE( 184)		 ::iron::object::Transform pt = this->object->parent->transform;
HXLINE( 185)		{
HXLINE( 185)			 ::iron::math::Mat4 _this = this->local;
HXDLIN( 185)			 ::iron::math::Mat4 m = pt->world;
HXDLIN( 185)			float a00 = _this->self->_00;
HXDLIN( 185)			float a01 = _this->self->_01;
HXDLIN( 185)			float a02 = _this->self->_02;
HXDLIN( 185)			float a03 = _this->self->_03;
HXDLIN( 185)			float a10 = _this->self->_10;
HXDLIN( 185)			float a11 = _this->self->_11;
HXDLIN( 185)			float a12 = _this->self->_12;
HXDLIN( 185)			float a13 = _this->self->_13;
HXDLIN( 185)			float a20 = _this->self->_20;
HXDLIN( 185)			float a21 = _this->self->_21;
HXDLIN( 185)			float a22 = _this->self->_22;
HXDLIN( 185)			float a23 = _this->self->_23;
HXDLIN( 185)			float a30 = _this->self->_30;
HXDLIN( 185)			float a31 = _this->self->_31;
HXDLIN( 185)			float a32 = _this->self->_32;
HXDLIN( 185)			float a33 = _this->self->_33;
HXDLIN( 185)			float b0 = m->self->_00;
HXDLIN( 185)			float b1 = m->self->_10;
HXDLIN( 185)			float b2 = m->self->_20;
HXDLIN( 185)			float b3 = m->self->_30;
HXDLIN( 185)			_this->self->_00 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 185)			_this->self->_10 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 185)			_this->self->_20 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 185)			_this->self->_30 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN( 185)			b0 = m->self->_01;
HXDLIN( 185)			b1 = m->self->_11;
HXDLIN( 185)			b2 = m->self->_21;
HXDLIN( 185)			b3 = m->self->_31;
HXDLIN( 185)			_this->self->_01 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 185)			_this->self->_11 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 185)			_this->self->_21 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 185)			_this->self->_31 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN( 185)			b0 = m->self->_02;
HXDLIN( 185)			b1 = m->self->_12;
HXDLIN( 185)			b2 = m->self->_22;
HXDLIN( 185)			b3 = m->self->_32;
HXDLIN( 185)			_this->self->_02 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 185)			_this->self->_12 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 185)			_this->self->_22 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 185)			_this->self->_32 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
HXDLIN( 185)			b0 = m->self->_03;
HXDLIN( 185)			b1 = m->self->_13;
HXDLIN( 185)			b2 = m->self->_23;
HXDLIN( 185)			b3 = m->self->_33;
HXDLIN( 185)			_this->self->_03 = ((((a00 * b0) + (a01 * b1)) + (a02 * b2)) + (a03 * b3));
HXDLIN( 185)			_this->self->_13 = ((((a10 * b0) + (a11 * b1)) + (a12 * b2)) + (a13 * b3));
HXDLIN( 185)			_this->self->_23 = ((((a20 * b0) + (a21 * b1)) + (a22 * b2)) + (a23 * b3));
HXDLIN( 185)			_this->self->_33 = ((((a30 * b0) + (a31 * b1)) + (a32 * b2)) + (a33 * b3));
            		}
HXLINE( 186)		this->decompose();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,applyParent,(void))

bool Transform_obj::diff(){
            	HX_GC_STACKFRAME(&_hx_pos_54bddaaeb07ce419_190_diff)
HXLINE( 191)		if (hx::IsNull( this->lastWorld )) {
HXLINE( 191)			 ::iron::math::Mat4 _this =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ));
HXDLIN( 191)			 ::iron::math::Mat4 m = this->world;
HXDLIN( 191)			_this->self->_00 = m->self->_00;
HXDLIN( 191)			_this->self->_01 = m->self->_01;
HXDLIN( 191)			_this->self->_02 = m->self->_02;
HXDLIN( 191)			_this->self->_03 = m->self->_03;
HXDLIN( 191)			_this->self->_10 = m->self->_10;
HXDLIN( 191)			_this->self->_11 = m->self->_11;
HXDLIN( 191)			_this->self->_12 = m->self->_12;
HXDLIN( 191)			_this->self->_13 = m->self->_13;
HXDLIN( 191)			_this->self->_20 = m->self->_20;
HXDLIN( 191)			_this->self->_21 = m->self->_21;
HXDLIN( 191)			_this->self->_22 = m->self->_22;
HXDLIN( 191)			_this->self->_23 = m->self->_23;
HXDLIN( 191)			_this->self->_30 = m->self->_30;
HXDLIN( 191)			_this->self->_31 = m->self->_31;
HXDLIN( 191)			_this->self->_32 = m->self->_32;
HXDLIN( 191)			_this->self->_33 = m->self->_33;
HXDLIN( 191)			this->lastWorld = _this;
HXDLIN( 191)			return false;
            		}
HXLINE( 192)		 ::iron::math::Mat4 a = this->world;
HXLINE( 193)		 ::iron::math::Mat4 b = this->lastWorld;
HXLINE( 194)		bool r;
HXDLIN( 194)		bool r1;
HXDLIN( 194)		bool r2;
HXDLIN( 194)		bool r3;
HXDLIN( 194)		bool r4;
HXDLIN( 194)		bool r5;
HXDLIN( 194)		bool r6;
HXDLIN( 194)		bool r7;
HXDLIN( 194)		bool r8;
HXDLIN( 194)		bool r9;
HXDLIN( 194)		bool r10;
HXDLIN( 194)		bool r11;
HXDLIN( 194)		bool r12;
HXDLIN( 194)		bool r13;
HXDLIN( 194)		bool r14;
HXDLIN( 194)		if ((a->self->_00 == b->self->_00)) {
HXLINE( 194)			r14 = (a->self->_01 != b->self->_01);
            		}
            		else {
HXLINE( 194)			r14 = true;
            		}
HXDLIN( 194)		if (!(r14)) {
HXLINE( 194)			r13 = (a->self->_02 != b->self->_02);
            		}
            		else {
HXLINE( 194)			r13 = true;
            		}
HXDLIN( 194)		if (!(r13)) {
HXLINE( 194)			r12 = (a->self->_03 != b->self->_03);
            		}
            		else {
HXLINE( 194)			r12 = true;
            		}
HXDLIN( 194)		if (!(r12)) {
HXLINE( 194)			r11 = (a->self->_10 != b->self->_10);
            		}
            		else {
HXLINE( 194)			r11 = true;
            		}
HXDLIN( 194)		if (!(r11)) {
HXLINE( 194)			r10 = (a->self->_11 != b->self->_11);
            		}
            		else {
HXLINE( 194)			r10 = true;
            		}
HXDLIN( 194)		if (!(r10)) {
HXLINE( 194)			r9 = (a->self->_12 != b->self->_12);
            		}
            		else {
HXLINE( 194)			r9 = true;
            		}
HXDLIN( 194)		if (!(r9)) {
HXLINE( 194)			r8 = (a->self->_13 != b->self->_13);
            		}
            		else {
HXLINE( 194)			r8 = true;
            		}
HXDLIN( 194)		if (!(r8)) {
HXLINE( 194)			r7 = (a->self->_20 != b->self->_20);
            		}
            		else {
HXLINE( 194)			r7 = true;
            		}
HXDLIN( 194)		if (!(r7)) {
HXLINE( 194)			r6 = (a->self->_21 != b->self->_21);
            		}
            		else {
HXLINE( 194)			r6 = true;
            		}
HXDLIN( 194)		if (!(r6)) {
HXLINE( 194)			r5 = (a->self->_22 != b->self->_22);
            		}
            		else {
HXLINE( 194)			r5 = true;
            		}
HXDLIN( 194)		if (!(r5)) {
HXLINE( 194)			r4 = (a->self->_23 != b->self->_23);
            		}
            		else {
HXLINE( 194)			r4 = true;
            		}
HXDLIN( 194)		if (!(r4)) {
HXLINE( 194)			r3 = (a->self->_30 != b->self->_30);
            		}
            		else {
HXLINE( 194)			r3 = true;
            		}
HXDLIN( 194)		if (!(r3)) {
HXLINE( 194)			r2 = (a->self->_31 != b->self->_31);
            		}
            		else {
HXLINE( 194)			r2 = true;
            		}
HXDLIN( 194)		if (!(r2)) {
HXLINE( 194)			r1 = (a->self->_32 != b->self->_32);
            		}
            		else {
HXLINE( 194)			r1 = true;
            		}
HXDLIN( 194)		if (!(r1)) {
HXLINE( 194)			r = (a->self->_33 != b->self->_33);
            		}
            		else {
HXLINE( 194)			r = true;
            		}
HXLINE( 198)		if (r) {
HXLINE( 198)			 ::iron::math::Mat4 _this1 = this->lastWorld;
HXDLIN( 198)			 ::iron::math::Mat4 m1 = this->world;
HXDLIN( 198)			_this1->self->_00 = m1->self->_00;
HXDLIN( 198)			_this1->self->_01 = m1->self->_01;
HXDLIN( 198)			_this1->self->_02 = m1->self->_02;
HXDLIN( 198)			_this1->self->_03 = m1->self->_03;
HXDLIN( 198)			_this1->self->_10 = m1->self->_10;
HXDLIN( 198)			_this1->self->_11 = m1->self->_11;
HXDLIN( 198)			_this1->self->_12 = m1->self->_12;
HXDLIN( 198)			_this1->self->_13 = m1->self->_13;
HXDLIN( 198)			_this1->self->_20 = m1->self->_20;
HXDLIN( 198)			_this1->self->_21 = m1->self->_21;
HXDLIN( 198)			_this1->self->_22 = m1->self->_22;
HXDLIN( 198)			_this1->self->_23 = m1->self->_23;
HXDLIN( 198)			_this1->self->_30 = m1->self->_30;
HXDLIN( 198)			_this1->self->_31 = m1->self->_31;
HXDLIN( 198)			_this1->self->_32 = m1->self->_32;
HXDLIN( 198)			_this1->self->_33 = m1->self->_33;
            		}
HXLINE( 199)		return r;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,diff,return )

bool Transform_obj::overlap( ::iron::object::Transform t2){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_202_overlap)
HXLINE( 203)		 ::iron::object::Transform t1 = hx::ObjectPtr<OBJ_>(this);
HXLINE( 204)		bool _hx_tmp;
HXDLIN( 204)		bool _hx_tmp1;
HXDLIN( 204)		bool _hx_tmp2;
HXDLIN( 204)		bool _hx_tmp3;
HXDLIN( 204)		float t11 = t1->world->self->_30;
HXDLIN( 204)		Float _hx_tmp4 = (t11 + (( (Float)(t1->dim->x) ) / ( (Float)(2) )));
HXDLIN( 204)		float t21 = t2->world->self->_30;
HXDLIN( 204)		if ((_hx_tmp4 > (t21 - (( (Float)(t2->dim->x) ) / ( (Float)(2) ))))) {
HXLINE( 204)			float t12 = t1->world->self->_30;
HXDLIN( 204)			Float _hx_tmp5 = (t12 - (( (Float)(t1->dim->x) ) / ( (Float)(2) )));
HXDLIN( 204)			float t22 = t2->world->self->_30;
HXDLIN( 204)			_hx_tmp3 = (_hx_tmp5 < (t22 + (( (Float)(t2->dim->x) ) / ( (Float)(2) ))));
            		}
            		else {
HXLINE( 204)			_hx_tmp3 = false;
            		}
HXDLIN( 204)		if (_hx_tmp3) {
HXLINE( 205)			float t13 = t1->world->self->_31;
HXDLIN( 205)			Float _hx_tmp6 = (t13 + (( (Float)(t1->dim->y) ) / ( (Float)(2) )));
HXDLIN( 205)			float t23 = t2->world->self->_31;
HXLINE( 204)			_hx_tmp2 = (_hx_tmp6 > (t23 - (( (Float)(t2->dim->y) ) / ( (Float)(2) ))));
            		}
            		else {
HXLINE( 204)			_hx_tmp2 = false;
            		}
HXDLIN( 204)		if (_hx_tmp2) {
HXLINE( 205)			float t14 = t1->world->self->_31;
HXDLIN( 205)			Float _hx_tmp7 = (t14 - (( (Float)(t1->dim->y) ) / ( (Float)(2) )));
HXDLIN( 205)			float t24 = t2->world->self->_31;
HXLINE( 204)			_hx_tmp1 = (_hx_tmp7 < (t24 + (( (Float)(t2->dim->y) ) / ( (Float)(2) ))));
            		}
            		else {
HXLINE( 204)			_hx_tmp1 = false;
            		}
HXDLIN( 204)		if (_hx_tmp1) {
HXLINE( 206)			float t15 = t1->world->self->_32;
HXDLIN( 206)			Float _hx_tmp8 = (t15 + (( (Float)(t1->dim->z) ) / ( (Float)(2) )));
HXDLIN( 206)			float t25 = t2->world->self->_32;
HXLINE( 204)			_hx_tmp = (_hx_tmp8 > (t25 - (( (Float)(t2->dim->z) ) / ( (Float)(2) ))));
            		}
            		else {
HXLINE( 204)			_hx_tmp = false;
            		}
HXDLIN( 204)		if (_hx_tmp) {
HXLINE( 206)			float t16 = t1->world->self->_32;
HXDLIN( 206)			Float _hx_tmp9 = (t16 - (( (Float)(t1->dim->z) ) / ( (Float)(2) )));
HXDLIN( 206)			float t26 = t2->world->self->_32;
HXDLIN( 206)			return (_hx_tmp9 < (t26 + (( (Float)(t2->dim->z) ) / ( (Float)(2) ))));
            		}
            		else {
HXLINE( 204)			return false;
            		}
HXDLIN( 204)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,overlap,return )

 ::iron::math::Vec4 Transform_obj::look(){
            	HX_GC_STACKFRAME(&_hx_pos_54bddaaeb07ce419_214_look)
HXDLIN( 214)		 ::iron::math::Mat4 _this = this->world;
HXDLIN( 214)		return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,_this->self->_10,_this->self->_11,_this->self->_12,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,look,return )

 ::iron::math::Vec4 Transform_obj::right(){
            	HX_GC_STACKFRAME(&_hx_pos_54bddaaeb07ce419_215_right)
HXDLIN( 215)		 ::iron::math::Mat4 _this = this->world;
HXDLIN( 215)		return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,_this->self->_00,_this->self->_01,_this->self->_02,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,right,return )

 ::iron::math::Vec4 Transform_obj::up(){
            	HX_GC_STACKFRAME(&_hx_pos_54bddaaeb07ce419_216_up)
HXDLIN( 216)		 ::iron::math::Mat4 _this = this->world;
HXDLIN( 216)		return  ::iron::math::Vec4_obj::__alloc( HX_CTX ,_this->self->_20,_this->self->_21,_this->self->_22,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,up,return )

float Transform_obj::worldx(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_218_worldx)
HXDLIN( 218)		return this->world->self->_30;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,worldx,return )

float Transform_obj::worldy(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_219_worldy)
HXDLIN( 219)		return this->world->self->_31;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,worldy,return )

float Transform_obj::worldz(){
            	HX_STACKFRAME(&_hx_pos_54bddaaeb07ce419_220_worldz)
HXDLIN( 220)		return this->world->self->_32;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,worldz,return )

 ::iron::math::Mat4 Transform_obj::temp;

 ::iron::math::Quat Transform_obj::q;


hx::ObjectPtr< Transform_obj > Transform_obj::__new( ::iron::object::Object object) {
	hx::ObjectPtr< Transform_obj > __this = new Transform_obj();
	__this->__construct(object);
	return __this;
}

hx::ObjectPtr< Transform_obj > Transform_obj::__alloc(hx::Ctx *_hx_ctx, ::iron::object::Object object) {
	Transform_obj *__this = (Transform_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Transform_obj), true, "iron.object.Transform"));
	*(void **)__this = Transform_obj::_hx_vtable;
	__this->__construct(object);
	return __this;
}

Transform_obj::Transform_obj()
{
}

void Transform_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Transform);
	HX_MARK_MEMBER_NAME(world,"world");
	HX_MARK_MEMBER_NAME(localOnly,"localOnly");
	HX_MARK_MEMBER_NAME(local,"local");
	HX_MARK_MEMBER_NAME(loc,"loc");
	HX_MARK_MEMBER_NAME(rot,"rot");
	HX_MARK_MEMBER_NAME(scale,"scale");
	HX_MARK_MEMBER_NAME(dirty,"dirty");
	HX_MARK_MEMBER_NAME(object,"object");
	HX_MARK_MEMBER_NAME(dim,"dim");
	HX_MARK_MEMBER_NAME(radius,"radius");
	HX_MARK_MEMBER_NAME(prependMats,"prependMats");
	HX_MARK_MEMBER_NAME(appendMats,"appendMats");
	HX_MARK_MEMBER_NAME(boneParent,"boneParent");
	HX_MARK_MEMBER_NAME(lastWorld,"lastWorld");
	HX_MARK_MEMBER_NAME(_eulerX,"_eulerX");
	HX_MARK_MEMBER_NAME(_eulerY,"_eulerY");
	HX_MARK_MEMBER_NAME(_eulerZ,"_eulerZ");
	HX_MARK_MEMBER_NAME(dloc,"dloc");
	HX_MARK_MEMBER_NAME(drot,"drot");
	HX_MARK_MEMBER_NAME(dscale,"dscale");
	HX_MARK_MEMBER_NAME(_deulerX,"_deulerX");
	HX_MARK_MEMBER_NAME(_deulerY,"_deulerY");
	HX_MARK_MEMBER_NAME(_deulerZ,"_deulerZ");
	HX_MARK_END_CLASS();
}

void Transform_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(world,"world");
	HX_VISIT_MEMBER_NAME(localOnly,"localOnly");
	HX_VISIT_MEMBER_NAME(local,"local");
	HX_VISIT_MEMBER_NAME(loc,"loc");
	HX_VISIT_MEMBER_NAME(rot,"rot");
	HX_VISIT_MEMBER_NAME(scale,"scale");
	HX_VISIT_MEMBER_NAME(dirty,"dirty");
	HX_VISIT_MEMBER_NAME(object,"object");
	HX_VISIT_MEMBER_NAME(dim,"dim");
	HX_VISIT_MEMBER_NAME(radius,"radius");
	HX_VISIT_MEMBER_NAME(prependMats,"prependMats");
	HX_VISIT_MEMBER_NAME(appendMats,"appendMats");
	HX_VISIT_MEMBER_NAME(boneParent,"boneParent");
	HX_VISIT_MEMBER_NAME(lastWorld,"lastWorld");
	HX_VISIT_MEMBER_NAME(_eulerX,"_eulerX");
	HX_VISIT_MEMBER_NAME(_eulerY,"_eulerY");
	HX_VISIT_MEMBER_NAME(_eulerZ,"_eulerZ");
	HX_VISIT_MEMBER_NAME(dloc,"dloc");
	HX_VISIT_MEMBER_NAME(drot,"drot");
	HX_VISIT_MEMBER_NAME(dscale,"dscale");
	HX_VISIT_MEMBER_NAME(_deulerX,"_deulerX");
	HX_VISIT_MEMBER_NAME(_deulerY,"_deulerY");
	HX_VISIT_MEMBER_NAME(_deulerZ,"_deulerZ");
}

hx::Val Transform_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"up") ) { return hx::Val( up_dyn() ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"loc") ) { return hx::Val( loc ); }
		if (HX_FIELD_EQ(inName,"rot") ) { return hx::Val( rot ); }
		if (HX_FIELD_EQ(inName,"dim") ) { return hx::Val( dim ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"diff") ) { return hx::Val( diff_dyn() ); }
		if (HX_FIELD_EQ(inName,"look") ) { return hx::Val( look_dyn() ); }
		if (HX_FIELD_EQ(inName,"dloc") ) { return hx::Val( dloc ); }
		if (HX_FIELD_EQ(inName,"drot") ) { return hx::Val( drot ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"world") ) { return hx::Val( world ); }
		if (HX_FIELD_EQ(inName,"local") ) { return hx::Val( local ); }
		if (HX_FIELD_EQ(inName,"scale") ) { return hx::Val( scale ); }
		if (HX_FIELD_EQ(inName,"dirty") ) { return hx::Val( dirty ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		if (HX_FIELD_EQ(inName,"right") ) { return hx::Val( right_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"object") ) { return hx::Val( object ); }
		if (HX_FIELD_EQ(inName,"radius") ) { return hx::Val( radius ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"rotate") ) { return hx::Val( rotate_dyn() ); }
		if (HX_FIELD_EQ(inName,"worldx") ) { return hx::Val( worldx_dyn() ); }
		if (HX_FIELD_EQ(inName,"worldy") ) { return hx::Val( worldy_dyn() ); }
		if (HX_FIELD_EQ(inName,"worldz") ) { return hx::Val( worldz_dyn() ); }
		if (HX_FIELD_EQ(inName,"dscale") ) { return hx::Val( dscale ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"overlap") ) { return hx::Val( overlap_dyn() ); }
		if (HX_FIELD_EQ(inName,"_eulerX") ) { return hx::Val( _eulerX ); }
		if (HX_FIELD_EQ(inName,"_eulerY") ) { return hx::Val( _eulerY ); }
		if (HX_FIELD_EQ(inName,"_eulerZ") ) { return hx::Val( _eulerZ ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_deulerX") ) { return hx::Val( _deulerX ); }
		if (HX_FIELD_EQ(inName,"_deulerY") ) { return hx::Val( _deulerY ); }
		if (HX_FIELD_EQ(inName,"_deulerZ") ) { return hx::Val( _deulerZ ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"localOnly") ) { return hx::Val( localOnly ); }
		if (HX_FIELD_EQ(inName,"translate") ) { return hx::Val( translate_dyn() ); }
		if (HX_FIELD_EQ(inName,"setMatrix") ) { return hx::Val( setMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"decompose") ) { return hx::Val( decompose_dyn() ); }
		if (HX_FIELD_EQ(inName,"lastWorld") ) { return hx::Val( lastWorld ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"appendMats") ) { return hx::Val( appendMats ); }
		if (HX_FIELD_EQ(inName,"boneParent") ) { return hx::Val( boneParent ); }
		if (HX_FIELD_EQ(inName,"multMatrix") ) { return hx::Val( multMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"computeDim") ) { return hx::Val( computeDim_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"prependMats") ) { return hx::Val( prependMats ); }
		if (HX_FIELD_EQ(inName,"buildMatrix") ) { return hx::Val( buildMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRotation") ) { return hx::Val( setRotation_dyn() ); }
		if (HX_FIELD_EQ(inName,"applyParent") ) { return hx::Val( applyParent_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"appendMatrix") ) { return hx::Val( appendMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"composeDelta") ) { return hx::Val( composeDelta_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"prependMatrix") ) { return hx::Val( prependMatrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"computeRadius") ) { return hx::Val( computeRadius_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"popAppendMatrix") ) { return hx::Val( popAppendMatrix_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"popPrependMatrix") ) { return hx::Val( popPrependMatrix_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"applyParentInverse") ) { return hx::Val( applyParentInverse_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Transform_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"q") ) { outValue = ( q ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"temp") ) { outValue = ( temp ); return true; }
	}
	return false;
}

hx::Val Transform_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"loc") ) { loc=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rot") ) { rot=inValue.Cast<  ::iron::math::Quat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dim") ) { dim=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"dloc") ) { dloc=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"drot") ) { drot=inValue.Cast<  ::iron::math::Quat >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"world") ) { world=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"local") ) { local=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scale") ) { scale=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dirty") ) { dirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"object") ) { object=inValue.Cast<  ::iron::object::Object >(); return inValue; }
		if (HX_FIELD_EQ(inName,"radius") ) { radius=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dscale") ) { dscale=inValue.Cast<  ::iron::math::Vec4 >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_eulerX") ) { _eulerX=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_eulerY") ) { _eulerY=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_eulerZ") ) { _eulerZ=inValue.Cast< float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_deulerX") ) { _deulerX=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_deulerY") ) { _deulerY=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_deulerZ") ) { _deulerZ=inValue.Cast< float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"localOnly") ) { localOnly=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastWorld") ) { lastWorld=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"appendMats") ) { appendMats=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boneParent") ) { boneParent=inValue.Cast<  ::iron::math::Mat4 >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"prependMats") ) { prependMats=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Transform_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"q") ) { q=ioValue.Cast<  ::iron::math::Quat >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"temp") ) { temp=ioValue.Cast<  ::iron::math::Mat4 >(); return true; }
	}
	return false;
}

void Transform_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("world",52,96,64,ce));
	outFields->push(HX_("localOnly",77,0c,f5,0b));
	outFields->push(HX_("local",6b,c9,f0,78));
	outFields->push(HX_("loc",80,54,52,00));
	outFields->push(HX_("rot",17,e2,56,00));
	outFields->push(HX_("scale",8a,ce,ce,78));
	outFields->push(HX_("dirty",12,50,d0,d9));
	outFields->push(HX_("object",bf,7e,3f,15));
	outFields->push(HX_("dim",48,3d,4c,00));
	outFields->push(HX_("radius",52,d0,f6,b0));
	outFields->push(HX_("prependMats",01,a4,43,6c));
	outFields->push(HX_("appendMats",cd,44,62,56));
	outFields->push(HX_("boneParent",8e,c7,e5,30));
	outFields->push(HX_("lastWorld",1c,c4,11,1b));
	outFields->push(HX_("_eulerX",6e,74,14,76));
	outFields->push(HX_("_eulerY",6f,74,14,76));
	outFields->push(HX_("_eulerZ",70,74,14,76));
	outFields->push(HX_("dloc",9c,aa,6b,42));
	outFields->push(HX_("drot",33,38,70,42));
	outFields->push(HX_("dscale",a6,e3,7e,74));
	outFields->push(HX_("_deulerX",b4,1f,b8,7f));
	outFields->push(HX_("_deulerY",b5,1f,b8,7f));
	outFields->push(HX_("_deulerZ",b6,1f,b8,7f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Transform_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(Transform_obj,world),HX_("world",52,96,64,ce)},
	{hx::fsBool,(int)offsetof(Transform_obj,localOnly),HX_("localOnly",77,0c,f5,0b)},
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(Transform_obj,local),HX_("local",6b,c9,f0,78)},
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(Transform_obj,loc),HX_("loc",80,54,52,00)},
	{hx::fsObject /*::iron::math::Quat*/ ,(int)offsetof(Transform_obj,rot),HX_("rot",17,e2,56,00)},
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(Transform_obj,scale),HX_("scale",8a,ce,ce,78)},
	{hx::fsBool,(int)offsetof(Transform_obj,dirty),HX_("dirty",12,50,d0,d9)},
	{hx::fsObject /*::iron::object::Object*/ ,(int)offsetof(Transform_obj,object),HX_("object",bf,7e,3f,15)},
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(Transform_obj,dim),HX_("dim",48,3d,4c,00)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Transform_obj,radius),HX_("radius",52,d0,f6,b0)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Transform_obj,prependMats),HX_("prependMats",01,a4,43,6c)},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Transform_obj,appendMats),HX_("appendMats",cd,44,62,56)},
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(Transform_obj,boneParent),HX_("boneParent",8e,c7,e5,30)},
	{hx::fsObject /*::iron::math::Mat4*/ ,(int)offsetof(Transform_obj,lastWorld),HX_("lastWorld",1c,c4,11,1b)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Transform_obj,_eulerX),HX_("_eulerX",6e,74,14,76)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Transform_obj,_eulerY),HX_("_eulerY",6f,74,14,76)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Transform_obj,_eulerZ),HX_("_eulerZ",70,74,14,76)},
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(Transform_obj,dloc),HX_("dloc",9c,aa,6b,42)},
	{hx::fsObject /*::iron::math::Quat*/ ,(int)offsetof(Transform_obj,drot),HX_("drot",33,38,70,42)},
	{hx::fsObject /*::iron::math::Vec4*/ ,(int)offsetof(Transform_obj,dscale),HX_("dscale",a6,e3,7e,74)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Transform_obj,_deulerX),HX_("_deulerX",b4,1f,b8,7f)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Transform_obj,_deulerY),HX_("_deulerY",b5,1f,b8,7f)},
	{hx::fsObject /*::cpp::Float32*/ ,(int)offsetof(Transform_obj,_deulerZ),HX_("_deulerZ",b6,1f,b8,7f)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Transform_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::iron::math::Mat4*/ ,(void *) &Transform_obj::temp,HX_("temp",14,c3,f9,4c)},
	{hx::fsObject /*::iron::math::Quat*/ ,(void *) &Transform_obj::q,HX_("q",71,00,00,00)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Transform_obj_sMemberFields[] = {
	HX_("world",52,96,64,ce),
	HX_("localOnly",77,0c,f5,0b),
	HX_("local",6b,c9,f0,78),
	HX_("loc",80,54,52,00),
	HX_("rot",17,e2,56,00),
	HX_("scale",8a,ce,ce,78),
	HX_("dirty",12,50,d0,d9),
	HX_("object",bf,7e,3f,15),
	HX_("dim",48,3d,4c,00),
	HX_("radius",52,d0,f6,b0),
	HX_("prependMats",01,a4,43,6c),
	HX_("appendMats",cd,44,62,56),
	HX_("boneParent",8e,c7,e5,30),
	HX_("reset",cf,49,c8,e6),
	HX_("update",09,86,05,87),
	HX_("prependMatrix",ef,ff,74,bf),
	HX_("popPrependMatrix",9e,0b,66,f1),
	HX_("appendMatrix",bb,6b,16,67),
	HX_("popAppendMatrix",ec,aa,9c,4a),
	HX_("composeDelta",86,7d,2e,be),
	HX_("buildMatrix",0f,1c,39,0c),
	HX_("translate",4e,d7,7f,49),
	HX_("setMatrix",83,ab,6f,1b),
	HX_("multMatrix",51,a6,68,31),
	HX_("decompose",b1,c3,a7,7a),
	HX_("rotate",5b,46,20,cb),
	HX_("setRotation",00,07,e7,38),
	HX_("computeRadius",29,ff,6c,1b),
	HX_("computeDim",11,72,8a,34),
	HX_("applyParentInverse",58,45,a5,d5),
	HX_("applyParent",38,c5,78,29),
	HX_("lastWorld",1c,c4,11,1b),
	HX_("diff",05,5c,69,42),
	HX_("overlap",87,43,10,a9),
	HX_("_eulerX",6e,74,14,76),
	HX_("_eulerY",6f,74,14,76),
	HX_("_eulerZ",70,74,14,76),
	HX_("look",5f,a6,b7,47),
	HX_("right",dc,0b,64,e9),
	HX_("up",5b,66,00,00),
	HX_("worldx",e6,f1,9e,c9),
	HX_("worldy",e7,f1,9e,c9),
	HX_("worldz",e8,f1,9e,c9),
	HX_("dloc",9c,aa,6b,42),
	HX_("drot",33,38,70,42),
	HX_("dscale",a6,e3,7e,74),
	HX_("_deulerX",b4,1f,b8,7f),
	HX_("_deulerY",b5,1f,b8,7f),
	HX_("_deulerZ",b6,1f,b8,7f),
	::String(null()) };

static void Transform_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Transform_obj::temp,"temp");
	HX_MARK_MEMBER_NAME(Transform_obj::q,"q");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Transform_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Transform_obj::temp,"temp");
	HX_VISIT_MEMBER_NAME(Transform_obj::q,"q");
};

#endif

hx::Class Transform_obj::__mClass;

static ::String Transform_obj_sStaticFields[] = {
	HX_("temp",14,c3,f9,4c),
	HX_("q",71,00,00,00),
	::String(null())
};

void Transform_obj::__register()
{
	Transform_obj _hx_dummy;
	Transform_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.object.Transform",c3,1c,0d,65);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Transform_obj::__GetStatic;
	__mClass->mSetStaticField = &Transform_obj::__SetStatic;
	__mClass->mMarkFunc = Transform_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Transform_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Transform_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Transform_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Transform_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Transform_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Transform_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Transform_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_54bddaaeb07ce419_19_boot)
HXDLIN(  19)		temp =  ::iron::math::Mat4_obj::__alloc( HX_CTX ,( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)0.0)) ),( (float)(((Float)1.0)) ));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_54bddaaeb07ce419_20_boot)
HXDLIN(  20)		q =  ::iron::math::Quat_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            	}
}

} // end namespace iron
} // end namespace object
