// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_7d028c26efabce49
#define INCLUDED_7d028c26efabce49
#include "cpp_uint32array.h"
#endif
#ifndef INCLUDED_Reflect
#include <hxinc/Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_Type
#include <hxinc/Type.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <hxinc/haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesInput
#include <hxinc/haxe/io/BytesInput.h>
#endif
#ifndef INCLUDED_haxe_io_Eof
#include <hxinc/haxe/io/Eof.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <hxinc/haxe/io/Input.h>
#endif
#ifndef INCLUDED_iron_data_TAnimation
#include <hxinc/iron/data/TAnimation.h>
#endif
#ifndef INCLUDED_iron_data_TBindConstant
#include <hxinc/iron/data/TBindConstant.h>
#endif
#ifndef INCLUDED_iron_data_TBindTexture
#include <hxinc/iron/data/TBindTexture.h>
#endif
#ifndef INCLUDED_iron_data_TCameraData
#include <hxinc/iron/data/TCameraData.h>
#endif
#ifndef INCLUDED_iron_data_TConstraint
#include <hxinc/iron/data/TConstraint.h>
#endif
#ifndef INCLUDED_iron_data_TGroup
#include <hxinc/iron/data/TGroup.h>
#endif
#ifndef INCLUDED_iron_data_TIndexArray
#include <hxinc/iron/data/TIndexArray.h>
#endif
#ifndef INCLUDED_iron_data_TLightData
#include <hxinc/iron/data/TLightData.h>
#endif
#ifndef INCLUDED_iron_data_TLod
#include <hxinc/iron/data/TLod.h>
#endif
#ifndef INCLUDED_iron_data_TMaterialContext
#include <hxinc/iron/data/TMaterialContext.h>
#endif
#ifndef INCLUDED_iron_data_TMaterialData
#include <hxinc/iron/data/TMaterialData.h>
#endif
#ifndef INCLUDED_iron_data_TMeshData
#include <hxinc/iron/data/TMeshData.h>
#endif
#ifndef INCLUDED_iron_data_TObj
#include <hxinc/iron/data/TObj.h>
#endif
#ifndef INCLUDED_iron_data_TParticleData
#include <hxinc/iron/data/TParticleData.h>
#endif
#ifndef INCLUDED_iron_data_TParticleReference
#include <hxinc/iron/data/TParticleReference.h>
#endif
#ifndef INCLUDED_iron_data_TProbe
#include <hxinc/iron/data/TProbe.h>
#endif
#ifndef INCLUDED_iron_data_TSceneFormat
#include <hxinc/iron/data/TSceneFormat.h>
#endif
#ifndef INCLUDED_iron_data_TShaderConstant
#include <hxinc/iron/data/TShaderConstant.h>
#endif
#ifndef INCLUDED_iron_data_TShaderContext
#include <hxinc/iron/data/TShaderContext.h>
#endif
#ifndef INCLUDED_iron_data_TShaderData
#include <hxinc/iron/data/TShaderData.h>
#endif
#ifndef INCLUDED_iron_data_TShaderOverride
#include <hxinc/iron/data/TShaderOverride.h>
#endif
#ifndef INCLUDED_iron_data_TSkin
#include <hxinc/iron/data/TSkin.h>
#endif
#ifndef INCLUDED_iron_data_TSpeakerData
#include <hxinc/iron/data/TSpeakerData.h>
#endif
#ifndef INCLUDED_iron_data_TTextureUnit
#include <hxinc/iron/data/TTextureUnit.h>
#endif
#ifndef INCLUDED_iron_data_TTilesheetAction
#include <hxinc/iron/data/TTilesheetAction.h>
#endif
#ifndef INCLUDED_iron_data_TTilesheetData
#include <hxinc/iron/data/TTilesheetData.h>
#endif
#ifndef INCLUDED_iron_data_TTrack
#include <hxinc/iron/data/TTrack.h>
#endif
#ifndef INCLUDED_iron_data_TTrait
#include <hxinc/iron/data/TTrait.h>
#endif
#ifndef INCLUDED_iron_data_TTransform
#include <hxinc/iron/data/TTransform.h>
#endif
#ifndef INCLUDED_iron_data_TVertexArray
#include <hxinc/iron/data/TVertexArray.h>
#endif
#ifndef INCLUDED_iron_data_TVertexData
#include <hxinc/iron/data/TVertexData.h>
#endif
#ifndef INCLUDED_iron_data_TWorldData
#include <hxinc/iron/data/TWorldData.h>
#endif
#ifndef INCLUDED_iron_system_ArmPack
#include <hxinc/iron/system/ArmPack.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_arrays_Uint32ArrayPrivate
#include <hxinc/kha/arrays/Uint32ArrayPrivate.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_8880df845f9d3ccd_30_decode,"iron.system.ArmPack","decode",0x59a8cc40,"iron.system.ArmPack.decode","iron/system/ArmPack.hx",30,0x88f0b342)
HX_LOCAL_STACK_FRAME(_hx_pos_8880df845f9d3ccd_36_read,"iron.system.ArmPack","read",0x875e71e8,"iron.system.ArmPack.read","iron/system/ArmPack.hx",36,0x88f0b342)
HX_LOCAL_STACK_FRAME(_hx_pos_8880df845f9d3ccd_95_readArray,"iron.system.ArmPack","readArray",0xd3308291,"iron.system.ArmPack.readArray","iron/system/ArmPack.hx",95,0x88f0b342)
HX_LOCAL_STACK_FRAME(_hx_pos_8880df845f9d3ccd_121_readMap,"iron.system.ArmPack","readMap",0x32127194,"iron.system.ArmPack.readMap","iron/system/ArmPack.hx",121,0x88f0b342)
HX_LOCAL_STACK_FRAME(_hx_pos_8880df845f9d3ccd_137_getClass,"iron.system.ArmPack","getClass",0xd5f25f54,"iron.system.ArmPack.getClass","iron/system/ArmPack.hx",137,0x88f0b342)
namespace iron{
namespace _hx_system{

void ArmPack_obj::__construct() { }

Dynamic ArmPack_obj::__CreateEmpty() { return new ArmPack_obj; }

void *ArmPack_obj::_hx_vtable = 0;

Dynamic ArmPack_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ArmPack_obj > _hx_result = new ArmPack_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ArmPack_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2eb177ba;
}

 ::Dynamic ArmPack_obj::decode( ::haxe::io::Bytes b){
            	HX_GC_STACKFRAME(&_hx_pos_8880df845f9d3ccd_30_decode)
HXLINE(  31)		 ::haxe::io::BytesInput i =  ::haxe::io::BytesInput_obj::__alloc( HX_CTX ,b,null(),null());
HXLINE(  32)		i->set_bigEndian(true);
HXLINE(  33)		return ::iron::_hx_system::ArmPack_obj::read(i,null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ArmPack_obj,decode,return )

 ::Dynamic ArmPack_obj::read( ::haxe::io::BytesInput i,::String __o_key,::String __o_parentKey){
::String key = __o_key.Default(HX_("",00,00,00,00));
::String parentKey = __o_parentKey.Default(HX_("",00,00,00,00));
            	HX_STACKFRAME(&_hx_pos_8880df845f9d3ccd_36_read)
HXLINE(  37)		try {
            			HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
HXLINE(  38)			int b = i->readByte();
HXLINE(  39)			switch((int)(b)){
            				case (int)192: {
HXLINE(  40)					return null();
            				}
            				break;
            				case (int)194: {
HXLINE(  41)					return false;
            				}
            				break;
            				case (int)195: {
HXLINE(  42)					return true;
            				}
            				break;
            				case (int)196: {
HXLINE(  45)					return i->read(i->readByte());
            				}
            				break;
            				case (int)197: {
HXLINE(  46)					return i->read(i->readUInt16());
            				}
            				break;
            				case (int)198: {
HXLINE(  47)					return i->read(i->readInt32());
            				}
            				break;
            				case (int)202: {
HXLINE(  50)					return i->readFloat();
            				}
            				break;
            				case (int)204: {
HXLINE(  54)					return i->readByte();
            				}
            				break;
            				case (int)205: {
HXLINE(  55)					return i->readUInt16();
            				}
            				break;
            				case (int)206: {
HXLINE(  56)					return i->readInt32();
            				}
            				break;
            				case (int)208: {
HXLINE(  60)					return i->readInt8();
            				}
            				break;
            				case (int)209: {
HXLINE(  61)					return i->readInt16();
            				}
            				break;
            				case (int)210: {
HXLINE(  62)					return i->readInt32();
            				}
            				break;
            				case (int)217: {
HXLINE(  70)					return i->readString(i->readByte());
            				}
            				break;
            				case (int)218: {
HXLINE(  71)					return i->readString(i->readUInt16());
            				}
            				break;
            				case (int)219: {
HXLINE(  72)					return i->readString(i->readInt32());
            				}
            				break;
            				case (int)220: {
HXLINE(  75)					return ::iron::_hx_system::ArmPack_obj::readArray(i,i->readUInt16(),key,parentKey);
            				}
            				break;
            				case (int)221: {
HXLINE(  76)					return ::iron::_hx_system::ArmPack_obj::readArray(i,i->readInt32(),key,parentKey);
            				}
            				break;
            				case (int)222: {
HXLINE(  79)					return ::iron::_hx_system::ArmPack_obj::readMap(i,i->readUInt16(),key,parentKey);
            				}
            				break;
            				case (int)223: {
HXLINE(  80)					return ::iron::_hx_system::ArmPack_obj::readMap(i,i->readInt32(),key,parentKey);
            				}
            				break;
            				default:{
HXLINE(  83)					if ((b < 128)) {
HXLINE(  83)						return b;
            					}
            					else {
HXLINE(  84)						if ((b < 144)) {
HXLINE(  84)							return ::iron::_hx_system::ArmPack_obj::readMap(i,(15 & b),key,parentKey);
            						}
            						else {
HXLINE(  85)							if ((b < 160)) {
HXLINE(  85)								return ::iron::_hx_system::ArmPack_obj::readArray(i,(15 & b),key,parentKey);
            							}
            							else {
HXLINE(  86)								if ((b < 192)) {
HXLINE(  86)									return i->readString((31 & b));
            								}
            								else {
HXLINE(  87)									if ((b > 223)) {
HXLINE(  87)										return (-256 | b);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::haxe::io::Eof e = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(  92)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ArmPack_obj,read,return )

 ::Dynamic ArmPack_obj::readArray( ::haxe::io::BytesInput i,int length,::String __o_key,::String __o_parentKey){
::String key = __o_key.Default(HX_("",00,00,00,00));
::String parentKey = __o_parentKey.Default(HX_("",00,00,00,00));
            	HX_GC_STACKFRAME(&_hx_pos_8880df845f9d3ccd_95_readArray)
HXLINE(  96)		int b = i->readByte();
HXLINE(  97)		{
HXLINE(  97)			 ::haxe::io::BytesInput _g = i;
HXDLIN(  97)			int _g1 = _g->pos;
HXDLIN(  97)			_g->set_position((_g1 - 1));
            		}
HXLINE( 100)		if ((b == 202)) {
HXLINE( 101)			{
HXLINE( 101)				 ::haxe::io::BytesInput _g2 = i;
HXDLIN( 101)				int _g11 = _g2->pos;
HXDLIN( 101)				_g2->set_position((_g11 + 1));
            			}
HXLINE( 102)			 ::kha::arrays::Float32ArrayPrivate this1 =  ::kha::arrays::Float32ArrayPrivate_obj::__alloc( HX_CTX ,length);
HXDLIN( 102)			 ::kha::arrays::Float32ArrayPrivate a = this1;
HXLINE( 103)			{
HXLINE( 103)				int _g12 = 0;
HXDLIN( 103)				int _g3 = length;
HXDLIN( 103)				while((_g12 < _g3)){
HXLINE( 103)					_g12 = (_g12 + 1);
HXDLIN( 103)					int x = (_g12 - 1);
HXDLIN( 103)					{
HXLINE( 103)						float value = ( (float)(i->readFloat()) );
HXDLIN( 103)						a->self.set(x,value);
            					}
            				}
            			}
HXLINE( 104)			return a;
            		}
            		else {
HXLINE( 107)			if ((b == 210)) {
HXLINE( 108)				{
HXLINE( 108)					 ::haxe::io::BytesInput _g4 = i;
HXDLIN( 108)					int _g13 = _g4->pos;
HXDLIN( 108)					_g4->set_position((_g13 + 1));
            				}
HXLINE( 109)				 ::kha::arrays::Uint32ArrayPrivate this2 =  ::kha::arrays::Uint32ArrayPrivate_obj::__alloc( HX_CTX ,length);
HXDLIN( 109)				 ::kha::arrays::Uint32ArrayPrivate a1 = this2;
HXLINE( 110)				{
HXLINE( 110)					int _g14 = 0;
HXDLIN( 110)					int _g5 = length;
HXDLIN( 110)					while((_g14 < _g5)){
HXLINE( 110)						_g14 = (_g14 + 1);
HXDLIN( 110)						int x1 = (_g14 - 1);
HXDLIN( 110)						{
HXLINE( 110)							int value1 = i->readInt32();
HXDLIN( 110)							a1->self.set(x1,value1);
            						}
            					}
            				}
HXLINE( 111)				return a1;
            			}
            			else {
HXLINE( 115)				::cpp::VirtualArray a2 = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 116)				{
HXLINE( 116)					int _g15 = 0;
HXDLIN( 116)					int _g6 = length;
HXDLIN( 116)					while((_g15 < _g6)){
HXLINE( 116)						_g15 = (_g15 + 1);
HXDLIN( 116)						int x2 = (_g15 - 1);
HXDLIN( 116)						a2->push(::iron::_hx_system::ArmPack_obj::read(i,key,parentKey));
            					}
            				}
HXLINE( 117)				return a2;
            			}
            		}
HXLINE( 100)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ArmPack_obj,readArray,return )

 ::Dynamic ArmPack_obj::readMap( ::haxe::io::BytesInput i,int length,::String __o_key,::String __o_parentKey){
::String key = __o_key.Default(HX_("",00,00,00,00));
::String parentKey = __o_parentKey.Default(HX_("",00,00,00,00));
            	HX_STACKFRAME(&_hx_pos_8880df845f9d3ccd_121_readMap)
HXLINE( 125)		 ::Dynamic out = ::Type_obj::createEmptyInstance(::iron::_hx_system::ArmPack_obj::getClass(key,parentKey));
HXLINE( 127)		{
HXLINE( 127)			int _g1 = 0;
HXDLIN( 127)			int _g = length;
HXDLIN( 127)			while((_g1 < _g)){
HXLINE( 127)				_g1 = (_g1 + 1);
HXDLIN( 127)				int n = (_g1 - 1);
HXLINE( 128)				::String k = ::Std_obj::string(::iron::_hx_system::ArmPack_obj::read(i,null(),null()));
HXLINE( 129)				 ::Dynamic v = ::iron::_hx_system::ArmPack_obj::read(i,k,key);
HXLINE( 130)				::Reflect_obj::setField(out,k,v);
            			}
            		}
HXLINE( 132)		return out;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ArmPack_obj,readMap,return )

hx::Class ArmPack_obj::getClass(::String key,::String parentKey){
            	HX_STACKFRAME(&_hx_pos_8880df845f9d3ccd_137_getClass)
HXDLIN( 137)		::String _hx_switch_0 = key;
            		if (  (_hx_switch_0==HX_("",00,00,00,00)) ){
HXLINE( 138)			return hx::ClassOf< ::iron::data::TSceneFormat >();
HXDLIN( 138)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("actions",fd,03,2e,67)) ){
HXLINE( 169)			return hx::ClassOf< ::iron::data::TTilesheetAction >();
HXDLIN( 169)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("anim",11,86,71,40)) ){
HXLINE( 172)			return hx::ClassOf< ::iron::data::TAnimation >();
HXDLIN( 172)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("bind_constants",4d,56,7e,59)) ){
HXLINE( 163)			return hx::ClassOf< ::iron::data::TBindConstant >();
HXDLIN( 163)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("bind_textures",3a,d9,41,d5)) ){
HXLINE( 164)			return hx::ClassOf< ::iron::data::TBindTexture >();
HXDLIN( 164)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("camera_datas",af,a6,c9,64)) ){
HXLINE( 141)			return hx::ClassOf< ::iron::data::TCameraData >();
HXDLIN( 141)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("children",3f,19,6a,70)) ){
HXLINE( 153)			return hx::ClassOf< ::iron::data::TObj >();
HXDLIN( 153)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("constants",8f,76,6b,44)) ){
HXLINE( 166)			return hx::ClassOf< ::iron::data::TShaderConstant >();
HXDLIN( 166)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("constraints",76,51,b4,17)) ){
HXLINE( 160)			return hx::ClassOf< ::iron::data::TConstraint >();
HXDLIN( 160)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("contexts",a4,9b,2b,2f)) ){
HXLINE( 161)			if ((parentKey == HX_("material_datas",31,2a,02,22))) {
HXLINE( 161)				return hx::ClassOf< ::iron::data::TMaterialContext >();
            			}
            			else {
HXLINE( 161)				return hx::ClassOf< ::iron::data::TShaderContext >();
            			}
HXDLIN( 161)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("groups",54,24,28,1c)) ){
HXLINE( 154)			return hx::ClassOf< ::iron::data::TGroup >();
HXDLIN( 154)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("index_arrays",87,55,78,a3)) ){
HXLINE( 157)			return hx::ClassOf< ::iron::data::TIndexArray >();
HXDLIN( 157)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("light_datas",a0,2b,29,00)) ){
HXLINE( 140)			return hx::ClassOf< ::iron::data::TLightData >();
HXDLIN( 140)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("lods",d2,9c,b7,47)) ){
HXLINE( 171)			return hx::ClassOf< ::iron::data::TLod >();
HXDLIN( 171)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("material_datas",31,2a,02,22)) ){
HXLINE( 142)			return hx::ClassOf< ::iron::data::TMaterialData >();
HXDLIN( 142)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("mesh_datas",f7,4f,c4,7f)) ){
HXLINE( 139)			return hx::ClassOf< ::iron::data::TMeshData >();
HXDLIN( 139)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("objects",d4,68,4f,82)) ){
HXLINE( 152)			return hx::ClassOf< ::iron::data::TObj >();
HXDLIN( 152)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("override_context",bc,3d,f5,b3)) ){
HXLINE( 162)			return hx::ClassOf< ::iron::data::TShaderOverride >();
HXDLIN( 162)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("particle_datas",10,8d,61,11)) ){
HXLINE( 143)			return hx::ClassOf< ::iron::data::TParticleData >();
HXDLIN( 143)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("particle_refs",99,af,e1,81)) ){
HXLINE( 170)			return hx::ClassOf< ::iron::data::TParticleReference >();
HXDLIN( 170)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("probes",43,ef,4f,b5)) ){
HXLINE( 168)			return hx::ClassOf< ::iron::data::TProbe >();
HXDLIN( 168)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("shader_datas",2f,7f,c3,0b)) ){
HXLINE( 144)			return hx::ClassOf< ::iron::data::TShaderData >();
HXDLIN( 144)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("skin",7d,16,55,4c)) ){
HXLINE( 158)			return hx::ClassOf< ::iron::data::TSkin >();
HXDLIN( 158)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("speaker_datas",89,34,fc,dd)) ){
HXLINE( 145)			return hx::ClassOf< ::iron::data::TSpeakerData >();
HXDLIN( 145)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("texture_units",cb,0f,52,01)) ){
HXLINE( 167)			return hx::ClassOf< ::iron::data::TTextureUnit >();
HXDLIN( 167)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("tilesheet_datas",bb,41,50,2d)) ){
HXLINE( 151)			return hx::ClassOf< ::iron::data::TTilesheetData >();
HXDLIN( 151)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("tracks",88,2b,7d,45)) ){
HXLINE( 173)			return hx::ClassOf< ::iron::data::TTrack >();
HXDLIN( 173)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("traits",e5,c0,81,45)) ){
HXLINE( 155)			return hx::ClassOf< ::iron::data::TTrait >();
HXDLIN( 155)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("transform",6c,2d,93,45)) ){
HXLINE( 159)			return hx::ClassOf< ::iron::data::TTransform >();
HXDLIN( 159)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("vertex_arrays",75,a3,55,cb)) ){
HXLINE( 156)			return hx::ClassOf< ::iron::data::TVertexArray >();
HXDLIN( 156)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("vertex_structure",58,50,9b,df)) ){
HXLINE( 165)			return hx::ClassOf< ::iron::data::TVertexData >();
HXDLIN( 165)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("world_datas",1c,76,48,67)) ){
HXLINE( 146)			return hx::ClassOf< ::iron::data::TWorldData >();
HXDLIN( 146)			goto _hx_goto_8;
            		}
            		/* default */{
HXLINE( 174)			return hx::ClassOf< ::iron::data::TSceneFormat >();
            		}
            		_hx_goto_8:;
HXLINE( 137)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ArmPack_obj,getClass,return )


ArmPack_obj::ArmPack_obj()
{
}

bool ArmPack_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"read") ) { outValue = read_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"decode") ) { outValue = decode_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"readMap") ) { outValue = readMap_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getClass") ) { outValue = getClass_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"readArray") ) { outValue = readArray_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *ArmPack_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ArmPack_obj_sStaticStorageInfo = 0;
#endif

hx::Class ArmPack_obj::__mClass;

static ::String ArmPack_obj_sStaticFields[] = {
	HX_("decode",2e,5d,ed,64),
	HX_("read",56,4b,a7,4b),
	HX_("readArray",63,ba,76,f6),
	HX_("readMap",e6,b0,cc,02),
	HX_("getClass",c2,87,2f,a8),
	::String(null())
};

void ArmPack_obj::__register()
{
	ArmPack_obj _hx_dummy;
	ArmPack_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.system.ArmPack",1c,c3,d2,d0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ArmPack_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ArmPack_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ArmPack_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ArmPack_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ArmPack_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace system
