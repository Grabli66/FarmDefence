// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_system_GamepadStick
#include <hxinc/iron/system/GamepadStick.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_165e9357efd40209_432_new,"iron.system.GamepadStick","new",0x0967d0ba,"iron.system.GamepadStick.new","iron/system/Input.hx",432,0x32439d6d)
namespace iron{
namespace _hx_system{

void GamepadStick_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_165e9357efd40209_432_new)
HXLINE( 439)		this->movementY = ((Float)0.0);
HXLINE( 438)		this->movementX = ((Float)0.0);
HXLINE( 437)		this->moved = false;
HXLINE( 436)		this->lastY = ((Float)0.0);
HXLINE( 435)		this->lastX = ((Float)0.0);
HXLINE( 434)		this->y = ((Float)0.0);
HXLINE( 433)		this->x = ((Float)0.0);
            	}

Dynamic GamepadStick_obj::__CreateEmpty() { return new GamepadStick_obj; }

void *GamepadStick_obj::_hx_vtable = 0;

Dynamic GamepadStick_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GamepadStick_obj > _hx_result = new GamepadStick_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GamepadStick_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x36148d06;
}


GamepadStick_obj::GamepadStick_obj()
{
}

hx::Val GamepadStick_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"lastX") ) { return hx::Val( lastX ); }
		if (HX_FIELD_EQ(inName,"lastY") ) { return hx::Val( lastY ); }
		if (HX_FIELD_EQ(inName,"moved") ) { return hx::Val( moved ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"movementX") ) { return hx::Val( movementX ); }
		if (HX_FIELD_EQ(inName,"movementY") ) { return hx::Val( movementY ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val GamepadStick_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"lastX") ) { lastX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastY") ) { lastY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"moved") ) { moved=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"movementX") ) { movementX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"movementY") ) { movementY=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GamepadStick_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("lastX",42,01,bc,6f));
	outFields->push(HX_("lastY",43,01,bc,6f));
	outFields->push(HX_("moved",33,cc,65,0c));
	outFields->push(HX_("movementX",49,04,5d,30));
	outFields->push(HX_("movementY",4a,04,5d,30));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo GamepadStick_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(GamepadStick_obj,x),HX_("x",78,00,00,00)},
	{hx::fsFloat,(int)offsetof(GamepadStick_obj,y),HX_("y",79,00,00,00)},
	{hx::fsFloat,(int)offsetof(GamepadStick_obj,lastX),HX_("lastX",42,01,bc,6f)},
	{hx::fsFloat,(int)offsetof(GamepadStick_obj,lastY),HX_("lastY",43,01,bc,6f)},
	{hx::fsBool,(int)offsetof(GamepadStick_obj,moved),HX_("moved",33,cc,65,0c)},
	{hx::fsFloat,(int)offsetof(GamepadStick_obj,movementX),HX_("movementX",49,04,5d,30)},
	{hx::fsFloat,(int)offsetof(GamepadStick_obj,movementY),HX_("movementY",4a,04,5d,30)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *GamepadStick_obj_sStaticStorageInfo = 0;
#endif

static ::String GamepadStick_obj_sMemberFields[] = {
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("lastX",42,01,bc,6f),
	HX_("lastY",43,01,bc,6f),
	HX_("moved",33,cc,65,0c),
	HX_("movementX",49,04,5d,30),
	HX_("movementY",4a,04,5d,30),
	::String(null()) };

hx::Class GamepadStick_obj::__mClass;

void GamepadStick_obj::__register()
{
	GamepadStick_obj _hx_dummy;
	GamepadStick_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.system.GamepadStick",c8,ab,56,5a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GamepadStick_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GamepadStick_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GamepadStick_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GamepadStick_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace system
