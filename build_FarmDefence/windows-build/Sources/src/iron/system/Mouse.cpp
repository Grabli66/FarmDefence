// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_system_Mouse
#include <hxinc/iron/system/Mouse.h>
#endif
#ifndef INCLUDED_iron_system_VirtualInput
#include <hxinc/iron/system/VirtualInput.h>
#endif
#ifndef INCLUDED_kha_input_Mouse
#include <hxinc/kha/input/Mouse.h>
#endif
#ifndef INCLUDED_kha_network_Controller
#include <hxinc/kha/network/Controller.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e775d37de702a089_126_new,"iron.system.Mouse","new",0x6ad6511e,"iron.system.Mouse.new","iron/system/Input.hx",126,0x32439d6d)
static const bool _hx_array_data_e41c2a2c_1[] = {
	0,0,0,
};
static const bool _hx_array_data_e41c2a2c_2[] = {
	0,0,0,
};
static const bool _hx_array_data_e41c2a2c_3[] = {
	0,0,0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_148_endFrame,"iron.system.Mouse","endFrame",0xe8bd18d4,"iron.system.Mouse.endFrame","iron/system/Input.hx",148,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_157_reset,"iron.system.Mouse","reset",0xd77af60d,"iron.system.Mouse.reset","iron/system/Input.hx",157,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_163_buttonIndex,"iron.system.Mouse","buttonIndex",0x0bedca7e,"iron.system.Mouse.buttonIndex","iron/system/Input.hx",163,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_167_down,"iron.system.Mouse","down",0x0a1c1de4,"iron.system.Mouse.down","iron/system/Input.hx",167,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_171_started,"iron.system.Mouse","started",0xb8ffe0ff,"iron.system.Mouse.started","iron/system/Input.hx",171,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_175_released,"iron.system.Mouse","released",0x5b23973f,"iron.system.Mouse.released","iron/system/Input.hx",175,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_179_lock,"iron.system.Mouse","lock",0x0f65c16d,"iron.system.Mouse.lock","iron/system/Input.hx",179,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_186_unlock,"iron.system.Mouse","unlock",0x1130acc6,"iron.system.Mouse.unlock","iron/system/Input.hx",186,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_193_hide,"iron.system.Mouse","hide",0x0cbc5a44,"iron.system.Mouse.hide","iron/system/Input.hx",193,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_198_show,"iron.system.Mouse","show",0x1400fa7f,"iron.system.Mouse.show","iron/system/Input.hx",198,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_203_downListener,"iron.system.Mouse","downListener",0xcfe65e78,"iron.system.Mouse.downListener","iron/system/Input.hx",203,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_215_upListener,"iron.system.Mouse","upListener",0xb3c8a8f1,"iron.system.Mouse.upListener","iron/system/Input.hx",215,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_224_moveListener,"iron.system.Mouse","moveListener",0xf4da1027,"iron.system.Mouse.moveListener","iron/system/Input.hx",224,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_242_wheelListener,"iron.system.Mouse","wheelListener",0x22d29e6d,"iron.system.Mouse.wheelListener","iron/system/Input.hx",242,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_e775d37de702a089_128_boot,"iron.system.Mouse","boot",0x08c9a9b4,"iron.system.Mouse.boot","iron/system/Input.hx",128,0x32439d6d)
static const ::String _hx_array_data_e41c2a2c_19[] = {
	HX_("left",07,08,b0,47),HX_("right",dc,0b,64,e9),HX_("middle",55,d3,5e,4c),
};
namespace iron{
namespace _hx_system{

void Mouse_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_126_new)
HXLINE( 142)		this->lastY = ((Float)-1.0);
HXLINE( 141)		this->lastX = ((Float)-1.0);
HXLINE( 140)		this->hidden = false;
HXLINE( 139)		this->locked = false;
HXLINE( 138)		this->wheelDelta = 0;
HXLINE( 137)		this->movementY = ((Float)0.0);
HXLINE( 136)		this->movementX = ((Float)0.0);
HXLINE( 135)		this->moved = false;
HXLINE( 134)		this->y = ((Float)0.0);
HXLINE( 133)		this->x = ((Float)0.0);
HXLINE( 131)		this->buttonsReleased = ::Array_obj< bool >::fromData( _hx_array_data_e41c2a2c_1,3);
HXLINE( 130)		this->buttonsStarted = ::Array_obj< bool >::fromData( _hx_array_data_e41c2a2c_2,3);
HXLINE( 129)		this->buttonsDown = ::Array_obj< bool >::fromData( _hx_array_data_e41c2a2c_3,3);
HXLINE( 144)		super::__construct();
HXLINE( 145)		::kha::input::Mouse_obj::get(null())->notify(this->downListener_dyn(),this->upListener_dyn(),this->moveListener_dyn(),this->wheelListener_dyn(),null());
            	}

Dynamic Mouse_obj::__CreateEmpty() { return new Mouse_obj; }

void *Mouse_obj::_hx_vtable = 0;

Dynamic Mouse_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Mouse_obj > _hx_result = new Mouse_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Mouse_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x15b014de) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x15b014de;
	} else {
		return inClassId==(int)0x7fa066ce;
	}
}

void Mouse_obj::endFrame(){
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_148_endFrame)
HXLINE( 149)		::Array< bool > _hx_tmp = this->buttonsStarted;
HXDLIN( 149)		_hx_tmp[0] = (this->buttonsStarted[1] = (this->buttonsStarted[2] = false));
HXLINE( 150)		::Array< bool > _hx_tmp1 = this->buttonsReleased;
HXDLIN( 150)		_hx_tmp1[0] = (this->buttonsReleased[1] = (this->buttonsReleased[2] = false));
HXLINE( 151)		this->moved = false;
HXLINE( 152)		this->movementX = ( (Float)(0) );
HXLINE( 153)		this->movementY = ( (Float)(0) );
HXLINE( 154)		this->wheelDelta = 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,endFrame,(void))

void Mouse_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_157_reset)
HXLINE( 158)		::Array< bool > _hx_tmp = this->buttonsDown;
HXDLIN( 158)		_hx_tmp[0] = (this->buttonsDown[1] = (this->buttonsDown[2] = false));
HXLINE( 159)		this->endFrame();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,reset,(void))

int Mouse_obj::buttonIndex(::String button){
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_163_buttonIndex)
HXDLIN( 163)		if ((button == HX_("left",07,08,b0,47))) {
HXDLIN( 163)			return 0;
            		}
            		else {
HXDLIN( 163)			if ((button == HX_("right",dc,0b,64,e9))) {
HXDLIN( 163)				return 1;
            			}
            			else {
HXDLIN( 163)				return 2;
            			}
            		}
HXDLIN( 163)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,buttonIndex,return )

bool Mouse_obj::down(::String __o_button){
::String button = __o_button.Default(HX_("left",07,08,b0,47));
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_167_down)
HXDLIN( 167)		::Array< bool > _hx_tmp = this->buttonsDown;
HXDLIN( 167)		return _hx_tmp->__get(this->buttonIndex(button));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,down,return )

bool Mouse_obj::started(::String __o_button){
::String button = __o_button.Default(HX_("left",07,08,b0,47));
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_171_started)
HXDLIN( 171)		::Array< bool > _hx_tmp = this->buttonsStarted;
HXDLIN( 171)		return _hx_tmp->__get(this->buttonIndex(button));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,started,return )

bool Mouse_obj::released(::String __o_button){
::String button = __o_button.Default(HX_("left",07,08,b0,47));
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_175_released)
HXDLIN( 175)		::Array< bool > _hx_tmp = this->buttonsReleased;
HXDLIN( 175)		return _hx_tmp->__get(this->buttonIndex(button));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,released,return )

void Mouse_obj::lock(){
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_179_lock)
HXDLIN( 179)		if (::kha::input::Mouse_obj::get(null())->canLock()) {
HXLINE( 180)			::kha::input::Mouse_obj::get(null())->lock();
HXLINE( 181)			this->locked = true;
HXLINE( 182)			this->hidden = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,lock,(void))

void Mouse_obj::unlock(){
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_186_unlock)
HXDLIN( 186)		if (::kha::input::Mouse_obj::get(null())->canLock()) {
HXLINE( 187)			::kha::input::Mouse_obj::get(null())->unlock();
HXLINE( 188)			this->locked = false;
HXLINE( 189)			this->hidden = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,unlock,(void))

void Mouse_obj::hide(){
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_193_hide)
HXLINE( 194)		::kha::input::Mouse_obj::get(null())->hideSystemCursor();
HXLINE( 195)		this->hidden = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,hide,(void))

void Mouse_obj::show(){
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_198_show)
HXLINE( 199)		::kha::input::Mouse_obj::get(null())->showSystemCursor();
HXLINE( 200)		this->hidden = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mouse_obj,show,(void))

void Mouse_obj::downListener(int index,int x,int y){
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_203_downListener)
HXLINE( 204)		this->buttonsDown[index] = true;
HXLINE( 205)		this->buttonsStarted[index] = true;
HXLINE( 206)		this->x = ( (Float)(x) );
HXLINE( 207)		this->y = ( (Float)(y) );
HXLINE( 212)		this->downVirtual(::iron::_hx_system::Mouse_obj::buttons->__get(index));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Mouse_obj,downListener,(void))

void Mouse_obj::upListener(int index,int x,int y){
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_215_upListener)
HXLINE( 216)		this->buttonsDown[index] = false;
HXLINE( 217)		this->buttonsReleased[index] = true;
HXLINE( 218)		this->x = ( (Float)(x) );
HXLINE( 219)		this->y = ( (Float)(y) );
HXLINE( 221)		this->upVirtual(::iron::_hx_system::Mouse_obj::buttons->__get(index));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Mouse_obj,upListener,(void))

void Mouse_obj::moveListener(int x,int y,int movementX,int movementY){
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_224_moveListener)
HXLINE( 225)		bool _hx_tmp;
HXDLIN( 225)		if ((this->lastX == ((Float)-1.0))) {
HXLINE( 225)			_hx_tmp = (this->lastY == ((Float)-1.0));
            		}
            		else {
HXLINE( 225)			_hx_tmp = false;
            		}
HXDLIN( 225)		if (_hx_tmp) {
HXLINE( 225)			this->lastX = ( (Float)(x) );
HXDLIN( 225)			this->lastY = ( (Float)(y) );
            		}
HXLINE( 226)		if (this->locked) {
HXLINE( 227)			this->movementX = ( (Float)(movementX) );
HXLINE( 228)			this->movementY = ( (Float)(movementY) );
            		}
            		else {
HXLINE( 231)			this->movementX = (x - this->lastX);
HXLINE( 232)			this->movementY = (y - this->lastY);
            		}
HXLINE( 234)		this->lastX = ( (Float)(x) );
HXLINE( 235)		this->lastY = ( (Float)(y) );
HXLINE( 236)		this->x = ( (Float)(x) );
HXLINE( 237)		this->y = ( (Float)(y) );
HXLINE( 238)		this->moved = true;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Mouse_obj,moveListener,(void))

void Mouse_obj::wheelListener(int delta){
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_242_wheelListener)
HXDLIN( 242)		this->wheelDelta = delta;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Mouse_obj,wheelListener,(void))

::Array< ::String > Mouse_obj::buttons;


hx::ObjectPtr< Mouse_obj > Mouse_obj::__new() {
	hx::ObjectPtr< Mouse_obj > __this = new Mouse_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Mouse_obj > Mouse_obj::__alloc(hx::Ctx *_hx_ctx) {
	Mouse_obj *__this = (Mouse_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Mouse_obj), true, "iron.system.Mouse"));
	*(void **)__this = Mouse_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Mouse_obj::Mouse_obj()
{
}

void Mouse_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Mouse);
	HX_MARK_MEMBER_NAME(buttonsDown,"buttonsDown");
	HX_MARK_MEMBER_NAME(buttonsStarted,"buttonsStarted");
	HX_MARK_MEMBER_NAME(buttonsReleased,"buttonsReleased");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(moved,"moved");
	HX_MARK_MEMBER_NAME(movementX,"movementX");
	HX_MARK_MEMBER_NAME(movementY,"movementY");
	HX_MARK_MEMBER_NAME(wheelDelta,"wheelDelta");
	HX_MARK_MEMBER_NAME(locked,"locked");
	HX_MARK_MEMBER_NAME(hidden,"hidden");
	HX_MARK_MEMBER_NAME(lastX,"lastX");
	HX_MARK_MEMBER_NAME(lastY,"lastY");
	 ::iron::_hx_system::VirtualInput_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Mouse_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buttonsDown,"buttonsDown");
	HX_VISIT_MEMBER_NAME(buttonsStarted,"buttonsStarted");
	HX_VISIT_MEMBER_NAME(buttonsReleased,"buttonsReleased");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(moved,"moved");
	HX_VISIT_MEMBER_NAME(movementX,"movementX");
	HX_VISIT_MEMBER_NAME(movementY,"movementY");
	HX_VISIT_MEMBER_NAME(wheelDelta,"wheelDelta");
	HX_VISIT_MEMBER_NAME(locked,"locked");
	HX_VISIT_MEMBER_NAME(hidden,"hidden");
	HX_VISIT_MEMBER_NAME(lastX,"lastX");
	HX_VISIT_MEMBER_NAME(lastY,"lastY");
	 ::iron::_hx_system::VirtualInput_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Mouse_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"down") ) { return hx::Val( down_dyn() ); }
		if (HX_FIELD_EQ(inName,"lock") ) { return hx::Val( lock_dyn() ); }
		if (HX_FIELD_EQ(inName,"hide") ) { return hx::Val( hide_dyn() ); }
		if (HX_FIELD_EQ(inName,"show") ) { return hx::Val( show_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"moved") ) { return hx::Val( moved ); }
		if (HX_FIELD_EQ(inName,"lastX") ) { return hx::Val( lastX ); }
		if (HX_FIELD_EQ(inName,"lastY") ) { return hx::Val( lastY ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"locked") ) { return hx::Val( locked ); }
		if (HX_FIELD_EQ(inName,"hidden") ) { return hx::Val( hidden ); }
		if (HX_FIELD_EQ(inName,"unlock") ) { return hx::Val( unlock_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"started") ) { return hx::Val( started_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"endFrame") ) { return hx::Val( endFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"released") ) { return hx::Val( released_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"movementX") ) { return hx::Val( movementX ); }
		if (HX_FIELD_EQ(inName,"movementY") ) { return hx::Val( movementY ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"wheelDelta") ) { return hx::Val( wheelDelta ); }
		if (HX_FIELD_EQ(inName,"upListener") ) { return hx::Val( upListener_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"buttonsDown") ) { return hx::Val( buttonsDown ); }
		if (HX_FIELD_EQ(inName,"buttonIndex") ) { return hx::Val( buttonIndex_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"downListener") ) { return hx::Val( downListener_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveListener") ) { return hx::Val( moveListener_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"wheelListener") ) { return hx::Val( wheelListener_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"buttonsStarted") ) { return hx::Val( buttonsStarted ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"buttonsReleased") ) { return hx::Val( buttonsReleased ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Mouse_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"buttons") ) { outValue = ( buttons ); return true; }
	}
	return false;
}

hx::Val Mouse_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"moved") ) { moved=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastX") ) { lastX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastY") ) { lastY=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"locked") ) { locked=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hidden") ) { hidden=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"movementX") ) { movementX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"movementY") ) { movementY=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"wheelDelta") ) { wheelDelta=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"buttonsDown") ) { buttonsDown=inValue.Cast< ::Array< bool > >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"buttonsStarted") ) { buttonsStarted=inValue.Cast< ::Array< bool > >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"buttonsReleased") ) { buttonsReleased=inValue.Cast< ::Array< bool > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Mouse_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"buttons") ) { buttons=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

void Mouse_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("buttonsDown",43,2b,d9,1e));
	outFields->push(HX_("buttonsStarted",00,39,f4,4e));
	outFields->push(HX_("buttonsReleased",1e,40,fc,fa));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("moved",33,cc,65,0c));
	outFields->push(HX_("movementX",49,04,5d,30));
	outFields->push(HX_("movementY",4a,04,5d,30));
	outFields->push(HX_("wheelDelta",5d,91,6e,a6));
	outFields->push(HX_("locked",0a,05,c7,59));
	outFields->push(HX_("hidden",6a,ff,95,4c));
	outFields->push(HX_("lastX",42,01,bc,6f));
	outFields->push(HX_("lastY",43,01,bc,6f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Mouse_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(Mouse_obj,buttonsDown),HX_("buttonsDown",43,2b,d9,1e)},
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(Mouse_obj,buttonsStarted),HX_("buttonsStarted",00,39,f4,4e)},
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(Mouse_obj,buttonsReleased),HX_("buttonsReleased",1e,40,fc,fa)},
	{hx::fsFloat,(int)offsetof(Mouse_obj,x),HX_("x",78,00,00,00)},
	{hx::fsFloat,(int)offsetof(Mouse_obj,y),HX_("y",79,00,00,00)},
	{hx::fsBool,(int)offsetof(Mouse_obj,moved),HX_("moved",33,cc,65,0c)},
	{hx::fsFloat,(int)offsetof(Mouse_obj,movementX),HX_("movementX",49,04,5d,30)},
	{hx::fsFloat,(int)offsetof(Mouse_obj,movementY),HX_("movementY",4a,04,5d,30)},
	{hx::fsInt,(int)offsetof(Mouse_obj,wheelDelta),HX_("wheelDelta",5d,91,6e,a6)},
	{hx::fsBool,(int)offsetof(Mouse_obj,locked),HX_("locked",0a,05,c7,59)},
	{hx::fsBool,(int)offsetof(Mouse_obj,hidden),HX_("hidden",6a,ff,95,4c)},
	{hx::fsFloat,(int)offsetof(Mouse_obj,lastX),HX_("lastX",42,01,bc,6f)},
	{hx::fsFloat,(int)offsetof(Mouse_obj,lastY),HX_("lastY",43,01,bc,6f)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Mouse_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Mouse_obj::buttons,HX_("buttons",41,52,75,ca)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Mouse_obj_sMemberFields[] = {
	HX_("buttonsDown",43,2b,d9,1e),
	HX_("buttonsStarted",00,39,f4,4e),
	HX_("buttonsReleased",1e,40,fc,fa),
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("moved",33,cc,65,0c),
	HX_("movementX",49,04,5d,30),
	HX_("movementY",4a,04,5d,30),
	HX_("wheelDelta",5d,91,6e,a6),
	HX_("locked",0a,05,c7,59),
	HX_("hidden",6a,ff,95,4c),
	HX_("lastX",42,01,bc,6f),
	HX_("lastY",43,01,bc,6f),
	HX_("endFrame",52,0a,81,04),
	HX_("reset",cf,49,c8,e6),
	HX_("buttonIndex",c0,5b,bf,0b),
	HX_("down",62,f8,6d,42),
	HX_("started",41,29,1b,35),
	HX_("released",bd,88,e7,76),
	HX_("lock",eb,9b,b7,47),
	HX_("unlock",c4,a2,8c,65),
	HX_("hide",c2,34,0e,45),
	HX_("show",fd,d4,52,4c),
	HX_("downListener",f6,e6,73,a7),
	HX_("upListener",ef,75,8a,3d),
	HX_("moveListener",a5,98,67,cc),
	HX_("wheelListener",2f,84,1c,e7),
	::String(null()) };

static void Mouse_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Mouse_obj::buttons,"buttons");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Mouse_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Mouse_obj::buttons,"buttons");
};

#endif

hx::Class Mouse_obj::__mClass;

static ::String Mouse_obj_sStaticFields[] = {
	HX_("buttons",41,52,75,ca),
	::String(null())
};

void Mouse_obj::__register()
{
	Mouse_obj _hx_dummy;
	Mouse_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.system.Mouse",2c,2a,1c,e4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Mouse_obj::__GetStatic;
	__mClass->mSetStaticField = &Mouse_obj::__SetStatic;
	__mClass->mMarkFunc = Mouse_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Mouse_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Mouse_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Mouse_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Mouse_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Mouse_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Mouse_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Mouse_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e775d37de702a089_128_boot)
HXDLIN( 128)		buttons = ::Array_obj< ::String >::fromData( _hx_array_data_e41c2a2c_19,3);
            	}
}

} // end namespace iron
} // end namespace system
