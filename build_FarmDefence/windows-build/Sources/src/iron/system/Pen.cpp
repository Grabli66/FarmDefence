// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_system_Pen
#include <hxinc/iron/system/Pen.h>
#endif
#ifndef INCLUDED_iron_system_VirtualInput
#include <hxinc/iron/system/VirtualInput.h>
#endif
#ifndef INCLUDED_kha_input_Pen
#include <hxinc/kha/input/Pen.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7f4be6a9d441abb5_246_new,"iron.system.Pen","new",0x8ae83a12,"iron.system.Pen.new","iron/system/Input.hx",246,0x32439d6d)
static const bool _hx_array_data_55618920_1[] = {
	0,
};
static const bool _hx_array_data_55618920_2[] = {
	0,
};
static const bool _hx_array_data_55618920_3[] = {
	0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_7f4be6a9d441abb5_267_endFrame,"iron.system.Pen","endFrame",0x45d63b60,"iron.system.Pen.endFrame","iron/system/Input.hx",267,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_7f4be6a9d441abb5_275_reset,"iron.system.Pen","reset",0x8e900401,"iron.system.Pen.reset","iron/system/Input.hx",275,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_7f4be6a9d441abb5_281_buttonIndex,"iron.system.Pen","buttonIndex",0xfa3fc772,"iron.system.Pen.buttonIndex","iron/system/Input.hx",281,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_7f4be6a9d441abb5_286_down,"iron.system.Pen","down",0xf9b60a70,"iron.system.Pen.down","iron/system/Input.hx",286,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_7f4be6a9d441abb5_290_started,"iron.system.Pen","started",0x29eb53f3,"iron.system.Pen.started","iron/system/Input.hx",290,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_7f4be6a9d441abb5_294_released,"iron.system.Pen","released",0xb83cb9cb,"iron.system.Pen.released","iron/system/Input.hx",294,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_7f4be6a9d441abb5_297_downListener,"iron.system.Pen","downListener",0x6951b704,"iron.system.Pen.downListener","iron/system/Input.hx",297,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_7f4be6a9d441abb5_299_upListener,"iron.system.Pen","upListener",0x6358867d,"iron.system.Pen.upListener","iron/system/Input.hx",299,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_7f4be6a9d441abb5_301_moveListener,"iron.system.Pen","moveListener",0x8e4568b3,"iron.system.Pen.moveListener","iron/system/Input.hx",301,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_7f4be6a9d441abb5_248_boot,"iron.system.Pen","boot",0xf8639640,"iron.system.Pen.boot","iron/system/Input.hx",248,0x32439d6d)
static const ::String _hx_array_data_55618920_14[] = {
	HX_("tip",5b,61,58,00),
};
namespace iron{
namespace _hx_system{

void Pen_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_7f4be6a9d441abb5_246_new)
HXLINE( 261)		this->lastPressure = ((Float)0.0);
HXLINE( 260)		this->lastY = ((Float)-1.0);
HXLINE( 259)		this->lastX = ((Float)-1.0);
HXLINE( 258)		this->pressure = ((Float)0.0);
HXLINE( 257)		this->movementY = ((Float)0.0);
HXLINE( 256)		this->movementX = ((Float)0.0);
HXLINE( 255)		this->moved = false;
HXLINE( 254)		this->y = ((Float)0.0);
HXLINE( 253)		this->x = ((Float)0.0);
HXLINE( 251)		this->buttonsReleased = ::Array_obj< bool >::fromData( _hx_array_data_55618920_1,1);
HXLINE( 250)		this->buttonsStarted = ::Array_obj< bool >::fromData( _hx_array_data_55618920_2,1);
HXLINE( 249)		this->buttonsDown = ::Array_obj< bool >::fromData( _hx_array_data_55618920_3,1);
HXLINE( 263)		super::__construct();
HXLINE( 264)		::kha::input::Pen_obj::get(null())->notify(this->downListener_dyn(),this->upListener_dyn(),this->moveListener_dyn());
            	}

Dynamic Pen_obj::__CreateEmpty() { return new Pen_obj; }

void *Pen_obj::_hx_vtable = 0;

Dynamic Pen_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Pen_obj > _hx_result = new Pen_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Pen_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x15b014de) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x15b014de;
	} else {
		return inClassId==(int)0x591cc7a2;
	}
}

void Pen_obj::endFrame(){
            	HX_STACKFRAME(&_hx_pos_7f4be6a9d441abb5_267_endFrame)
HXLINE( 268)		this->buttonsStarted[0] = false;
HXLINE( 269)		this->buttonsReleased[0] = false;
HXLINE( 270)		this->moved = false;
HXLINE( 271)		this->movementX = ( (Float)(0) );
HXLINE( 272)		this->movementY = ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Pen_obj,endFrame,(void))

void Pen_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_7f4be6a9d441abb5_275_reset)
HXLINE( 276)		this->buttonsDown[0] = false;
HXLINE( 277)		this->endFrame();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Pen_obj,reset,(void))

int Pen_obj::buttonIndex(::String button){
            	HX_STACKFRAME(&_hx_pos_7f4be6a9d441abb5_281_buttonIndex)
HXDLIN( 281)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Pen_obj,buttonIndex,return )

bool Pen_obj::down(::String __o_button){
::String button = __o_button.Default(HX_("tip",5b,61,58,00));
            	HX_STACKFRAME(&_hx_pos_7f4be6a9d441abb5_286_down)
HXDLIN( 286)		::Array< bool > _hx_tmp = this->buttonsDown;
HXDLIN( 286)		return _hx_tmp->__get(this->buttonIndex(button));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Pen_obj,down,return )

bool Pen_obj::started(::String __o_button){
::String button = __o_button.Default(HX_("tip",5b,61,58,00));
            	HX_STACKFRAME(&_hx_pos_7f4be6a9d441abb5_290_started)
HXDLIN( 290)		::Array< bool > _hx_tmp = this->buttonsStarted;
HXDLIN( 290)		return _hx_tmp->__get(this->buttonIndex(button));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Pen_obj,started,return )

bool Pen_obj::released(::String __o_button){
::String button = __o_button.Default(HX_("tip",5b,61,58,00));
            	HX_STACKFRAME(&_hx_pos_7f4be6a9d441abb5_294_released)
HXDLIN( 294)		::Array< bool > _hx_tmp = this->buttonsReleased;
HXDLIN( 294)		return _hx_tmp->__get(this->buttonIndex(button));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Pen_obj,released,return )

void Pen_obj::downListener(Float x,Float y,Float pressure){
            	HX_STACKFRAME(&_hx_pos_7f4be6a9d441abb5_297_downListener)
            	}


HX_DEFINE_DYNAMIC_FUNC3(Pen_obj,downListener,(void))

void Pen_obj::upListener(Float x,Float y,Float pressure){
            	HX_STACKFRAME(&_hx_pos_7f4be6a9d441abb5_299_upListener)
            	}


HX_DEFINE_DYNAMIC_FUNC3(Pen_obj,upListener,(void))

void Pen_obj::moveListener(int x,int y,Float pressure){
            	HX_STACKFRAME(&_hx_pos_7f4be6a9d441abb5_301_moveListener)
HXLINE( 302)		bool _hx_tmp;
HXDLIN( 302)		if ((this->lastX == ((Float)-1.0))) {
HXLINE( 302)			_hx_tmp = (this->lastY == ((Float)-1.0));
            		}
            		else {
HXLINE( 302)			_hx_tmp = false;
            		}
HXDLIN( 302)		if (_hx_tmp) {
HXLINE( 302)			this->lastX = ( (Float)(x) );
HXDLIN( 302)			this->lastY = ( (Float)(y) );
HXDLIN( 302)			this->lastPressure = pressure;
            		}
HXLINE( 303)		this->movementX = (x - this->lastX);
HXLINE( 304)		this->movementY = (y - this->lastY);
HXLINE( 305)		this->lastX = ( (Float)(x) );
HXLINE( 306)		this->lastY = ( (Float)(y) );
HXLINE( 307)		this->x = ( (Float)(x) );
HXLINE( 308)		this->y = ( (Float)(y) );
HXLINE( 309)		this->moved = true;
HXLINE( 310)		this->pressure = pressure;
HXLINE( 311)		bool _hx_tmp1;
HXDLIN( 311)		if ((pressure > 0)) {
HXLINE( 311)			_hx_tmp1 = (this->lastPressure == ((Float)0.0));
            		}
            		else {
HXLINE( 311)			_hx_tmp1 = false;
            		}
HXDLIN( 311)		if (_hx_tmp1) {
HXLINE( 311)			this->buttonsDown[0] = true;
HXDLIN( 311)			this->buttonsStarted[0] = true;
            		}
HXLINE( 312)		bool _hx_tmp2;
HXDLIN( 312)		if ((pressure == 0)) {
HXLINE( 312)			_hx_tmp2 = (this->lastPressure > 0);
            		}
            		else {
HXLINE( 312)			_hx_tmp2 = false;
            		}
HXDLIN( 312)		if (_hx_tmp2) {
HXLINE( 312)			this->buttonsDown[0] = false;
HXDLIN( 312)			this->buttonsReleased[0] = true;
            		}
HXLINE( 313)		this->lastPressure = pressure;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Pen_obj,moveListener,(void))

::Array< ::String > Pen_obj::buttons;


hx::ObjectPtr< Pen_obj > Pen_obj::__new() {
	hx::ObjectPtr< Pen_obj > __this = new Pen_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Pen_obj > Pen_obj::__alloc(hx::Ctx *_hx_ctx) {
	Pen_obj *__this = (Pen_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Pen_obj), true, "iron.system.Pen"));
	*(void **)__this = Pen_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Pen_obj::Pen_obj()
{
}

void Pen_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Pen);
	HX_MARK_MEMBER_NAME(buttonsDown,"buttonsDown");
	HX_MARK_MEMBER_NAME(buttonsStarted,"buttonsStarted");
	HX_MARK_MEMBER_NAME(buttonsReleased,"buttonsReleased");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(moved,"moved");
	HX_MARK_MEMBER_NAME(movementX,"movementX");
	HX_MARK_MEMBER_NAME(movementY,"movementY");
	HX_MARK_MEMBER_NAME(pressure,"pressure");
	HX_MARK_MEMBER_NAME(lastX,"lastX");
	HX_MARK_MEMBER_NAME(lastY,"lastY");
	HX_MARK_MEMBER_NAME(lastPressure,"lastPressure");
	 ::iron::_hx_system::VirtualInput_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Pen_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buttonsDown,"buttonsDown");
	HX_VISIT_MEMBER_NAME(buttonsStarted,"buttonsStarted");
	HX_VISIT_MEMBER_NAME(buttonsReleased,"buttonsReleased");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(moved,"moved");
	HX_VISIT_MEMBER_NAME(movementX,"movementX");
	HX_VISIT_MEMBER_NAME(movementY,"movementY");
	HX_VISIT_MEMBER_NAME(pressure,"pressure");
	HX_VISIT_MEMBER_NAME(lastX,"lastX");
	HX_VISIT_MEMBER_NAME(lastY,"lastY");
	HX_VISIT_MEMBER_NAME(lastPressure,"lastPressure");
	 ::iron::_hx_system::VirtualInput_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Pen_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"down") ) { return hx::Val( down_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"moved") ) { return hx::Val( moved ); }
		if (HX_FIELD_EQ(inName,"lastX") ) { return hx::Val( lastX ); }
		if (HX_FIELD_EQ(inName,"lastY") ) { return hx::Val( lastY ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"started") ) { return hx::Val( started_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pressure") ) { return hx::Val( pressure ); }
		if (HX_FIELD_EQ(inName,"endFrame") ) { return hx::Val( endFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"released") ) { return hx::Val( released_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"movementX") ) { return hx::Val( movementX ); }
		if (HX_FIELD_EQ(inName,"movementY") ) { return hx::Val( movementY ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"upListener") ) { return hx::Val( upListener_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"buttonsDown") ) { return hx::Val( buttonsDown ); }
		if (HX_FIELD_EQ(inName,"buttonIndex") ) { return hx::Val( buttonIndex_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lastPressure") ) { return hx::Val( lastPressure ); }
		if (HX_FIELD_EQ(inName,"downListener") ) { return hx::Val( downListener_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveListener") ) { return hx::Val( moveListener_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"buttonsStarted") ) { return hx::Val( buttonsStarted ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"buttonsReleased") ) { return hx::Val( buttonsReleased ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Pen_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"buttons") ) { outValue = ( buttons ); return true; }
	}
	return false;
}

hx::Val Pen_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"moved") ) { moved=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastX") ) { lastX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastY") ) { lastY=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pressure") ) { pressure=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"movementX") ) { movementX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"movementY") ) { movementY=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"buttonsDown") ) { buttonsDown=inValue.Cast< ::Array< bool > >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lastPressure") ) { lastPressure=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"buttonsStarted") ) { buttonsStarted=inValue.Cast< ::Array< bool > >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"buttonsReleased") ) { buttonsReleased=inValue.Cast< ::Array< bool > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Pen_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"buttons") ) { buttons=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

void Pen_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("buttonsDown",43,2b,d9,1e));
	outFields->push(HX_("buttonsStarted",00,39,f4,4e));
	outFields->push(HX_("buttonsReleased",1e,40,fc,fa));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("moved",33,cc,65,0c));
	outFields->push(HX_("movementX",49,04,5d,30));
	outFields->push(HX_("movementY",4a,04,5d,30));
	outFields->push(HX_("pressure",c5,ab,1d,70));
	outFields->push(HX_("lastX",42,01,bc,6f));
	outFields->push(HX_("lastY",43,01,bc,6f));
	outFields->push(HX_("lastPressure",3b,b8,af,d1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Pen_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(Pen_obj,buttonsDown),HX_("buttonsDown",43,2b,d9,1e)},
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(Pen_obj,buttonsStarted),HX_("buttonsStarted",00,39,f4,4e)},
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(Pen_obj,buttonsReleased),HX_("buttonsReleased",1e,40,fc,fa)},
	{hx::fsFloat,(int)offsetof(Pen_obj,x),HX_("x",78,00,00,00)},
	{hx::fsFloat,(int)offsetof(Pen_obj,y),HX_("y",79,00,00,00)},
	{hx::fsBool,(int)offsetof(Pen_obj,moved),HX_("moved",33,cc,65,0c)},
	{hx::fsFloat,(int)offsetof(Pen_obj,movementX),HX_("movementX",49,04,5d,30)},
	{hx::fsFloat,(int)offsetof(Pen_obj,movementY),HX_("movementY",4a,04,5d,30)},
	{hx::fsFloat,(int)offsetof(Pen_obj,pressure),HX_("pressure",c5,ab,1d,70)},
	{hx::fsFloat,(int)offsetof(Pen_obj,lastX),HX_("lastX",42,01,bc,6f)},
	{hx::fsFloat,(int)offsetof(Pen_obj,lastY),HX_("lastY",43,01,bc,6f)},
	{hx::fsFloat,(int)offsetof(Pen_obj,lastPressure),HX_("lastPressure",3b,b8,af,d1)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Pen_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::String >*/ ,(void *) &Pen_obj::buttons,HX_("buttons",41,52,75,ca)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Pen_obj_sMemberFields[] = {
	HX_("buttonsDown",43,2b,d9,1e),
	HX_("buttonsStarted",00,39,f4,4e),
	HX_("buttonsReleased",1e,40,fc,fa),
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("moved",33,cc,65,0c),
	HX_("movementX",49,04,5d,30),
	HX_("movementY",4a,04,5d,30),
	HX_("pressure",c5,ab,1d,70),
	HX_("lastX",42,01,bc,6f),
	HX_("lastY",43,01,bc,6f),
	HX_("lastPressure",3b,b8,af,d1),
	HX_("endFrame",52,0a,81,04),
	HX_("reset",cf,49,c8,e6),
	HX_("buttonIndex",c0,5b,bf,0b),
	HX_("down",62,f8,6d,42),
	HX_("started",41,29,1b,35),
	HX_("released",bd,88,e7,76),
	HX_("downListener",f6,e6,73,a7),
	HX_("upListener",ef,75,8a,3d),
	HX_("moveListener",a5,98,67,cc),
	::String(null()) };

static void Pen_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Pen_obj::buttons,"buttons");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Pen_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Pen_obj::buttons,"buttons");
};

#endif

hx::Class Pen_obj::__mClass;

static ::String Pen_obj_sStaticFields[] = {
	HX_("buttons",41,52,75,ca),
	::String(null())
};

void Pen_obj::__register()
{
	Pen_obj _hx_dummy;
	Pen_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.system.Pen",20,89,61,55);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Pen_obj::__GetStatic;
	__mClass->mSetStaticField = &Pen_obj::__SetStatic;
	__mClass->mMarkFunc = Pen_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Pen_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Pen_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Pen_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Pen_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Pen_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Pen_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Pen_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_7f4be6a9d441abb5_248_boot)
HXDLIN( 248)		buttons = ::Array_obj< ::String >::fromData( _hx_array_data_55618920_14,1);
            	}
}

} // end namespace iron
} // end namespace system
