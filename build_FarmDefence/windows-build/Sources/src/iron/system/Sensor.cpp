// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_iron_system_Sensor
#include <hxinc/iron/system/Sensor.h>
#endif
#ifndef INCLUDED_kha_input_Sensor
#include <hxinc/kha/input/Sensor.h>
#endif
#ifndef INCLUDED_kha_input_SensorType
#include <hxinc/kha/input/SensorType.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_14d26aa4b803fae1_558_new,"iron.system.Sensor","new",0xc12a6ac5,"iron.system.Sensor.new","iron/system/Input.hx",558,0x32439d6d)
HX_LOCAL_STACK_FRAME(_hx_pos_14d26aa4b803fae1_568_listener,"iron.system.Sensor","listener",0x073897ef,"iron.system.Sensor.listener","iron/system/Input.hx",568,0x32439d6d)
namespace iron{
namespace _hx_system{

void Sensor_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_14d26aa4b803fae1_558_new)
HXLINE( 562)		this->z = ((Float)0.0);
HXLINE( 561)		this->y = ((Float)0.0);
HXLINE( 560)		this->x = ((Float)0.0);
HXLINE( 565)		::kha::input::Sensor_obj::get(::kha::input::SensorType_obj::Accelerometer_dyn())->notify(this->listener_dyn());
            	}

Dynamic Sensor_obj::__CreateEmpty() { return new Sensor_obj; }

void *Sensor_obj::_hx_vtable = 0;

Dynamic Sensor_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Sensor_obj > _hx_result = new Sensor_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Sensor_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6857e311;
}

void Sensor_obj::listener(Float x,Float y,Float z){
            	HX_STACKFRAME(&_hx_pos_14d26aa4b803fae1_568_listener)
HXLINE( 569)		this->x = x;
HXLINE( 570)		this->y = y;
HXLINE( 571)		this->z = z;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Sensor_obj,listener,(void))


hx::ObjectPtr< Sensor_obj > Sensor_obj::__new() {
	hx::ObjectPtr< Sensor_obj > __this = new Sensor_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Sensor_obj > Sensor_obj::__alloc(hx::Ctx *_hx_ctx) {
	Sensor_obj *__this = (Sensor_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Sensor_obj), false, "iron.system.Sensor"));
	*(void **)__this = Sensor_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Sensor_obj::Sensor_obj()
{
}

hx::Val Sensor_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		if (HX_FIELD_EQ(inName,"z") ) { return hx::Val( z ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"listener") ) { return hx::Val( listener_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Sensor_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"z") ) { z=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Sensor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("z",7a,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Sensor_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Sensor_obj,x),HX_("x",78,00,00,00)},
	{hx::fsFloat,(int)offsetof(Sensor_obj,y),HX_("y",79,00,00,00)},
	{hx::fsFloat,(int)offsetof(Sensor_obj,z),HX_("z",7a,00,00,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Sensor_obj_sStaticStorageInfo = 0;
#endif

static ::String Sensor_obj_sMemberFields[] = {
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("z",7a,00,00,00),
	HX_("listener",74,00,32,38),
	::String(null()) };

hx::Class Sensor_obj::__mClass;

void Sensor_obj::__register()
{
	Sensor_obj _hx_dummy;
	Sensor_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("iron.system.Sensor",53,a4,0a,54);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Sensor_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Sensor_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Sensor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Sensor_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iron
} // end namespace system
