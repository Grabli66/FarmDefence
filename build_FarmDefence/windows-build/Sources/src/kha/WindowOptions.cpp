// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_kha_Display
#include <hxinc/kha/Display.h>
#endif
#ifndef INCLUDED_kha_WindowOptions
#include <hxinc/kha/WindowOptions.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_953552e0cd74b8c7_4_new,"kha.WindowOptions","new",0xee7f9656,"kha.WindowOptions.new","kha/WindowOptions.hx",4,0x953dd7db)
HX_LOCAL_STACK_FRAME(_hx_pos_953552e0cd74b8c7_5_boot,"kha.WindowOptions","boot",0xb93cf57c,"kha.WindowOptions.boot","kha/WindowOptions.hx",5,0x953dd7db)
HX_LOCAL_STACK_FRAME(_hx_pos_953552e0cd74b8c7_6_boot,"kha.WindowOptions","boot",0xb93cf57c,"kha.WindowOptions.boot","kha/WindowOptions.hx",6,0x953dd7db)
HX_LOCAL_STACK_FRAME(_hx_pos_953552e0cd74b8c7_7_boot,"kha.WindowOptions","boot",0xb93cf57c,"kha.WindowOptions.boot","kha/WindowOptions.hx",7,0x953dd7db)
HX_LOCAL_STACK_FRAME(_hx_pos_953552e0cd74b8c7_8_boot,"kha.WindowOptions","boot",0xb93cf57c,"kha.WindowOptions.boot","kha/WindowOptions.hx",8,0x953dd7db)
HX_LOCAL_STACK_FRAME(_hx_pos_953552e0cd74b8c7_9_boot,"kha.WindowOptions","boot",0xb93cf57c,"kha.WindowOptions.boot","kha/WindowOptions.hx",9,0x953dd7db)
namespace kha{

void WindowOptions_obj::__construct(::String title, ::Dynamic __o_x, ::Dynamic __o_y, ::Dynamic __o_width, ::Dynamic __o_height, ::kha::Display display, ::Dynamic __o_visible, ::Dynamic __o_windowFeatures, ::Dynamic __o_mode){
 ::Dynamic x = __o_x.Default(-1);
 ::Dynamic y = __o_y.Default(-1);
 ::Dynamic width = __o_width.Default(800);
 ::Dynamic height = __o_height.Default(600);
 ::Dynamic visible = __o_visible.Default(true);
 ::Dynamic windowFeatures = __o_windowFeatures.Default(7);
 ::Dynamic mode = __o_mode.Default(0);
            	HX_STACKFRAME(&_hx_pos_953552e0cd74b8c7_4_new)
HXLINE(  19)		this->mode = 0;
HXLINE(  18)		this->windowFeatures = 7;
HXLINE(  17)		this->visible = true;
HXLINE(  16)		this->display = null();
HXLINE(  15)		this->height = 600;
HXLINE(  14)		this->width = 800;
HXLINE(  13)		this->y = -1;
HXLINE(  12)		this->x = -1;
HXLINE(  11)		this->title = null();
HXLINE(  23)		this->title = title;
HXLINE(  24)		this->x = ( (int)(x) );
HXLINE(  25)		this->y = ( (int)(y) );
HXLINE(  26)		this->width = ( (int)(width) );
HXLINE(  27)		this->height = ( (int)(height) );
HXLINE(  28)		 ::kha::Display _hx_tmp;
HXDLIN(  28)		if (hx::IsNull( display )) {
HXLINE(  28)			_hx_tmp = ::kha::Display_obj::get_primary();
            		}
            		else {
HXLINE(  28)			_hx_tmp = display;
            		}
HXDLIN(  28)		this->display = _hx_tmp;
HXLINE(  29)		this->visible = ( (bool)(visible) );
HXLINE(  30)		this->windowFeatures = ( (int)(windowFeatures) );
HXLINE(  31)		this->mode = ( (int)(mode) );
            	}

Dynamic WindowOptions_obj::__CreateEmpty() { return new WindowOptions_obj; }

void *WindowOptions_obj::_hx_vtable = 0;

Dynamic WindowOptions_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< WindowOptions_obj > _hx_result = new WindowOptions_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8]);
	return _hx_result;
}

bool WindowOptions_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1b5f46ca;
}

int WindowOptions_obj::FeatureResizable;

int WindowOptions_obj::FeatureMinimizable;

int WindowOptions_obj::FeatureMaximizable;

int WindowOptions_obj::FeatureBorderless;

int WindowOptions_obj::FeatureOnTop;


hx::ObjectPtr< WindowOptions_obj > WindowOptions_obj::__new(::String title, ::Dynamic __o_x, ::Dynamic __o_y, ::Dynamic __o_width, ::Dynamic __o_height, ::kha::Display display, ::Dynamic __o_visible, ::Dynamic __o_windowFeatures, ::Dynamic __o_mode) {
	hx::ObjectPtr< WindowOptions_obj > __this = new WindowOptions_obj();
	__this->__construct(title,__o_x,__o_y,__o_width,__o_height,display,__o_visible,__o_windowFeatures,__o_mode);
	return __this;
}

hx::ObjectPtr< WindowOptions_obj > WindowOptions_obj::__alloc(hx::Ctx *_hx_ctx,::String title, ::Dynamic __o_x, ::Dynamic __o_y, ::Dynamic __o_width, ::Dynamic __o_height, ::kha::Display display, ::Dynamic __o_visible, ::Dynamic __o_windowFeatures, ::Dynamic __o_mode) {
	WindowOptions_obj *__this = (WindowOptions_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(WindowOptions_obj), true, "kha.WindowOptions"));
	*(void **)__this = WindowOptions_obj::_hx_vtable;
	__this->__construct(title,__o_x,__o_y,__o_width,__o_height,display,__o_visible,__o_windowFeatures,__o_mode);
	return __this;
}

WindowOptions_obj::WindowOptions_obj()
{
}

void WindowOptions_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(WindowOptions);
	HX_MARK_MEMBER_NAME(title,"title");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(display,"display");
	HX_MARK_MEMBER_NAME(visible,"visible");
	HX_MARK_MEMBER_NAME(windowFeatures,"windowFeatures");
	HX_MARK_MEMBER_NAME(mode,"mode");
	HX_MARK_END_CLASS();
}

void WindowOptions_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(title,"title");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(display,"display");
	HX_VISIT_MEMBER_NAME(visible,"visible");
	HX_VISIT_MEMBER_NAME(windowFeatures,"windowFeatures");
	HX_VISIT_MEMBER_NAME(mode,"mode");
}

hx::Val WindowOptions_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mode") ) { return hx::Val( mode ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"title") ) { return hx::Val( title ); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"display") ) { return hx::Val( display ); }
		if (HX_FIELD_EQ(inName,"visible") ) { return hx::Val( visible ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"windowFeatures") ) { return hx::Val( windowFeatures ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val WindowOptions_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mode") ) { mode=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"title") ) { title=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"display") ) { display=inValue.Cast<  ::kha::Display >(); return inValue; }
		if (HX_FIELD_EQ(inName,"visible") ) { visible=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"windowFeatures") ) { windowFeatures=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void WindowOptions_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("title",98,15,3b,10));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("display",42,2a,4a,bb));
	outFields->push(HX_("visible",72,78,24,a3));
	outFields->push(HX_("windowFeatures",0d,2d,b3,0c));
	outFields->push(HX_("mode",63,d3,60,48));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo WindowOptions_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(WindowOptions_obj,title),HX_("title",98,15,3b,10)},
	{hx::fsInt,(int)offsetof(WindowOptions_obj,x),HX_("x",78,00,00,00)},
	{hx::fsInt,(int)offsetof(WindowOptions_obj,y),HX_("y",79,00,00,00)},
	{hx::fsInt,(int)offsetof(WindowOptions_obj,width),HX_("width",06,b6,62,ca)},
	{hx::fsInt,(int)offsetof(WindowOptions_obj,height),HX_("height",e7,07,4c,02)},
	{hx::fsObject /*::kha::Display*/ ,(int)offsetof(WindowOptions_obj,display),HX_("display",42,2a,4a,bb)},
	{hx::fsBool,(int)offsetof(WindowOptions_obj,visible),HX_("visible",72,78,24,a3)},
	{hx::fsInt,(int)offsetof(WindowOptions_obj,windowFeatures),HX_("windowFeatures",0d,2d,b3,0c)},
	{hx::fsInt,(int)offsetof(WindowOptions_obj,mode),HX_("mode",63,d3,60,48)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo WindowOptions_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &WindowOptions_obj::FeatureResizable,HX_("FeatureResizable",f5,f9,63,35)},
	{hx::fsInt,(void *) &WindowOptions_obj::FeatureMinimizable,HX_("FeatureMinimizable",8b,61,83,90)},
	{hx::fsInt,(void *) &WindowOptions_obj::FeatureMaximizable,HX_("FeatureMaximizable",9d,bc,9d,cb)},
	{hx::fsInt,(void *) &WindowOptions_obj::FeatureBorderless,HX_("FeatureBorderless",7b,bc,a7,1c)},
	{hx::fsInt,(void *) &WindowOptions_obj::FeatureOnTop,HX_("FeatureOnTop",40,30,f9,13)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String WindowOptions_obj_sMemberFields[] = {
	HX_("title",98,15,3b,10),
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("display",42,2a,4a,bb),
	HX_("visible",72,78,24,a3),
	HX_("windowFeatures",0d,2d,b3,0c),
	HX_("mode",63,d3,60,48),
	::String(null()) };

static void WindowOptions_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(WindowOptions_obj::FeatureResizable,"FeatureResizable");
	HX_MARK_MEMBER_NAME(WindowOptions_obj::FeatureMinimizable,"FeatureMinimizable");
	HX_MARK_MEMBER_NAME(WindowOptions_obj::FeatureMaximizable,"FeatureMaximizable");
	HX_MARK_MEMBER_NAME(WindowOptions_obj::FeatureBorderless,"FeatureBorderless");
	HX_MARK_MEMBER_NAME(WindowOptions_obj::FeatureOnTop,"FeatureOnTop");
};

#ifdef HXCPP_VISIT_ALLOCS
static void WindowOptions_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(WindowOptions_obj::FeatureResizable,"FeatureResizable");
	HX_VISIT_MEMBER_NAME(WindowOptions_obj::FeatureMinimizable,"FeatureMinimizable");
	HX_VISIT_MEMBER_NAME(WindowOptions_obj::FeatureMaximizable,"FeatureMaximizable");
	HX_VISIT_MEMBER_NAME(WindowOptions_obj::FeatureBorderless,"FeatureBorderless");
	HX_VISIT_MEMBER_NAME(WindowOptions_obj::FeatureOnTop,"FeatureOnTop");
};

#endif

hx::Class WindowOptions_obj::__mClass;

static ::String WindowOptions_obj_sStaticFields[] = {
	HX_("FeatureResizable",f5,f9,63,35),
	HX_("FeatureMinimizable",8b,61,83,90),
	HX_("FeatureMaximizable",9d,bc,9d,cb),
	HX_("FeatureBorderless",7b,bc,a7,1c),
	HX_("FeatureOnTop",40,30,f9,13),
	::String(null())
};

void WindowOptions_obj::__register()
{
	WindowOptions_obj _hx_dummy;
	WindowOptions_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("kha.WindowOptions",64,73,fc,f8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = WindowOptions_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(WindowOptions_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(WindowOptions_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< WindowOptions_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = WindowOptions_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = WindowOptions_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = WindowOptions_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void WindowOptions_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_953552e0cd74b8c7_5_boot)
HXDLIN(   5)		FeatureResizable = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_953552e0cd74b8c7_6_boot)
HXDLIN(   6)		FeatureMinimizable = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_953552e0cd74b8c7_7_boot)
HXDLIN(   7)		FeatureMaximizable = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_953552e0cd74b8c7_8_boot)
HXDLIN(   8)		FeatureBorderless = 8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_953552e0cd74b8c7_9_boot)
HXDLIN(   9)		FeatureOnTop = 16;
            	}
}

} // end namespace kha
