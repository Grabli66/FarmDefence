// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_6136fc9686b3876e
#define INCLUDED_6136fc9686b3876e
#include "Kore/Simd/float32x4.h"
#endif
#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Framebuffer
#include <hxinc/kha/Framebuffer.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Kravur
#include <hxinc/kha/Kravur.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Shaders
#include <hxinc/kha/Shaders.h>
#endif
#ifndef INCLUDED_kha_Video
#include <hxinc/kha/Video.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics2_ImageScaleQuality
#include <hxinc/kha/graphics2/ImageScaleQuality.h>
#endif
#ifndef INCLUDED_kha_graphics4_BlendingFactor
#include <hxinc/kha/graphics4/BlendingFactor.h>
#endif
#ifndef INCLUDED_kha_graphics4_ColoredShaderPainter
#include <hxinc/kha/graphics4/ColoredShaderPainter.h>
#endif
#ifndef INCLUDED_kha_graphics4_FragmentShader
#include <hxinc/kha/graphics4/FragmentShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <hxinc/kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics2
#include <hxinc/kha/graphics4/Graphics2.h>
#endif
#ifndef INCLUDED_kha_graphics4_ImageShaderPainter
#include <hxinc/kha/graphics4/ImageShaderPainter.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <hxinc/kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <hxinc/kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextShaderPainter
#include <hxinc/kha/graphics4/TextShaderPainter.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexShader
#include <hxinc/kha/graphics4/VertexShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexStructure
#include <hxinc/kha/graphics4/VertexStructure.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix3
#include <hxinc/kha/math/FastMatrix3.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif
#ifndef INCLUDED_kha_math_FastVector2
#include <hxinc/kha/math/FastVector2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_97689b4ae489993c_793_new,"kha.graphics4.Graphics2","new",0x1f2768ea,"kha.graphics4.Graphics2.new","kha/graphics4/Graphics2.hx",793,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_835_setProjection,"kha.graphics4.Graphics2","setProjection",0xf22b2fdb,"kha.graphics4.Graphics2.setProjection","kha/graphics4/Graphics2.hx",835,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_859_drawImage,"kha.graphics4.Graphics2","drawImage",0x2d9bf0c1,"kha.graphics4.Graphics2.drawImage","kha/graphics4/Graphics2.hx",859,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_900_drawScaledSubImage,"kha.graphics4.Graphics2","drawScaledSubImage",0x67aa184f,"kha.graphics4.Graphics2.drawScaledSubImage","kha/graphics4/Graphics2.hx",900,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_911_get_color,"kha.graphics4.Graphics2","get_color",0x362d69c4,"kha.graphics4.Graphics2.get_color","kha/graphics4/Graphics2.hx",911,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_915_set_color,"kha.graphics4.Graphics2","set_color",0x197e55d0,"kha.graphics4.Graphics2.set_color","kha/graphics4/Graphics2.hx",915,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_918_drawRect,"kha.graphics4.Graphics2","drawRect",0x10762a7e,"kha.graphics4.Graphics2.drawRect","kha/graphics4/Graphics2.hx",918,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_947_fillRect,"kha.graphics4.Graphics2","fillRect",0x1d1e787d,"kha.graphics4.Graphics2.fillRect","kha/graphics4/Graphics2.hx",947,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_958_drawString,"kha.graphics4.Graphics2","drawString",0xcd7490ab,"kha.graphics4.Graphics2.drawString","kha/graphics4/Graphics2.hx",958,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_965_drawCharacters,"kha.graphics4.Graphics2","drawCharacters",0x4f2cb584,"kha.graphics4.Graphics2.drawCharacters","kha/graphics4/Graphics2.hx",965,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_973_get_font,"kha.graphics4.Graphics2","get_font",0x73e04c8e,"kha.graphics4.Graphics2.get_font","kha/graphics4/Graphics2.hx",973,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_976_set_font,"kha.graphics4.Graphics2","set_font",0x223da602,"kha.graphics4.Graphics2.set_font","kha/graphics4/Graphics2.hx",976,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_982_set_fontSize,"kha.graphics4.Graphics2","set_fontSize",0x67029be3,"kha.graphics4.Graphics2.set_fontSize","kha/graphics4/Graphics2.hx",982,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_985_drawLine,"kha.graphics4.Graphics2","drawLine",0x0c81f54e,"kha.graphics4.Graphics2.drawLine","kha/graphics4/Graphics2.hx",985,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1007_fillTriangle,"kha.graphics4.Graphics2","fillTriangle",0x60580aa1,"kha.graphics4.Graphics2.fillTriangle","kha/graphics4/Graphics2.hx",1007,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1020_get_imageScaleQuality,"kha.graphics4.Graphics2","get_imageScaleQuality",0xc084b131,"kha.graphics4.Graphics2.get_imageScaleQuality","kha/graphics4/Graphics2.hx",1020,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1023_set_imageScaleQuality,"kha.graphics4.Graphics2","set_imageScaleQuality",0x148d7f3d,"kha.graphics4.Graphics2.set_imageScaleQuality","kha/graphics4/Graphics2.hx",1023,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1032_get_mipmapScaleQuality,"kha.graphics4.Graphics2","get_mipmapScaleQuality",0xa8eee7fc,"kha.graphics4.Graphics2.get_mipmapScaleQuality","kha/graphics4/Graphics2.hx",1032,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1035_set_mipmapScaleQuality,"kha.graphics4.Graphics2","set_mipmapScaleQuality",0xdc9a6470,"kha.graphics4.Graphics2.set_mipmapScaleQuality","kha/graphics4/Graphics2.hx",1035,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1041_setPipeline,"kha.graphics4.Graphics2","setPipeline",0x3232b76e,"kha.graphics4.Graphics2.setPipeline","kha/graphics4/Graphics2.hx",1041,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1049_scissor,"kha.graphics4.Graphics2","scissor",0xe6b2cda6,"kha.graphics4.Graphics2.scissor","kha/graphics4/Graphics2.hx",1049,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1054_disableScissor,"kha.graphics4.Graphics2","disableScissor",0x18baf2ca,"kha.graphics4.Graphics2.disableScissor","kha/graphics4/Graphics2.hx",1054,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1059_begin,"kha.graphics4.Graphics2","begin",0xdda83933,"kha.graphics4.Graphics2.begin","kha/graphics4/Graphics2.hx",1059,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1065_clear,"kha.graphics4.Graphics2","clear",0x75adc097,"kha.graphics4.Graphics2.clear","kha/graphics4/Graphics2.hx",1065,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1070_flush,"kha.graphics4.Graphics2","flush",0x2fedb1ce,"kha.graphics4.Graphics2.flush","kha/graphics4/Graphics2.hx",1070,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1076_end,"kha.graphics4.Graphics2","end",0x1f209c65,"kha.graphics4.Graphics2.end","kha/graphics4/Graphics2.hx",1076,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1081_drawVideoInternal,"kha.graphics4.Graphics2","drawVideoInternal",0xe071523e,"kha.graphics4.Graphics2.drawVideoInternal","kha/graphics4/Graphics2.hx",1081,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1085_drawVideo,"kha.graphics4.Graphics2","drawVideo",0xa72ee5e1,"kha.graphics4.Graphics2.drawVideo","kha/graphics4/Graphics2.hx",1085,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_824_upperPowerOfTwo,"kha.graphics4.Graphics2","upperPowerOfTwo",0x6f9869fc,"kha.graphics4.Graphics2.upperPowerOfTwo","kha/graphics4/Graphics2.hx",824,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1091_createImageVertexStructure,"kha.graphics4.Graphics2","createImageVertexStructure",0x36f524e6,"kha.graphics4.Graphics2.createImageVertexStructure","kha/graphics4/Graphics2.hx",1091,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1099_createImagePipeline,"kha.graphics4.Graphics2","createImagePipeline",0x9c6ff18b,"kha.graphics4.Graphics2.createImagePipeline","kha/graphics4/Graphics2.hx",1099,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1111_createColoredVertexStructure,"kha.graphics4.Graphics2","createColoredVertexStructure",0x7d5e181f,"kha.graphics4.Graphics2.createColoredVertexStructure","kha/graphics4/Graphics2.hx",1111,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1118_createColoredPipeline,"kha.graphics4.Graphics2","createColoredPipeline",0x9f695132,"kha.graphics4.Graphics2.createColoredPipeline","kha/graphics4/Graphics2.hx",1118,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1130_createTextVertexStructure,"kha.graphics4.Graphics2","createTextVertexStructure",0x0c9f0070,"kha.graphics4.Graphics2.createTextVertexStructure","kha/graphics4/Graphics2.hx",1130,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1138_createTextPipeline,"kha.graphics4.Graphics2","createTextPipeline",0xf90b08c1,"kha.graphics4.Graphics2.createTextPipeline","kha/graphics4/Graphics2.hx",1138,0x0c1de808)
namespace kha{
namespace graphics4{

void Graphics2_obj::__construct(::Dynamic canvas){
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_793_new)
HXLINE(1029)		this->myMipmapScaleQuality = ::kha::graphics2::ImageScaleQuality_obj::High_dyn();
HXLINE(1017)		this->myImageScaleQuality = ::kha::graphics2::ImageScaleQuality_obj::High_dyn();
HXLINE( 805)		super::__construct();
HXLINE( 806)		this->set_color(-1);
HXLINE( 807)		this->canvas = canvas;
HXLINE( 808)		this->g = ::kha::Canvas_obj::get_g4(canvas);
HXLINE( 809)		this->imagePainter =  ::kha::graphics4::ImageShaderPainter_obj::__alloc( HX_CTX ,this->g);
HXLINE( 810)		this->coloredPainter =  ::kha::graphics4::ColoredShaderPainter_obj::__alloc( HX_CTX ,this->g);
HXLINE( 811)		this->textPainter =  ::kha::graphics4::TextShaderPainter_obj::__alloc( HX_CTX ,this->g);
HXLINE( 812)		this->textPainter->fontSize = this->get_fontSize();
HXLINE( 813)		this->projectionMatrix =  ::kha::math::FastMatrix4_obj::__alloc( HX_CTX ,( (float)(1) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(1) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(1) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(1) ));
HXLINE( 814)		this->setProjection();
HXLINE( 816)		if (hx::IsNull( ::kha::graphics4::Graphics2_obj::videoPipeline )) {
HXLINE( 817)			::kha::graphics4::Graphics2_obj::videoPipeline = ::kha::graphics4::Graphics2_obj::createImagePipeline(::kha::graphics4::Graphics2_obj::createImageVertexStructure());
HXLINE( 818)			::kha::graphics4::Graphics2_obj::videoPipeline->fragmentShader = ::kha::Shaders_obj::painter_video_frag;
HXLINE( 819)			::kha::graphics4::Graphics2_obj::videoPipeline->vertexShader = ::kha::Shaders_obj::painter_video_vert;
HXLINE( 820)			::kha::graphics4::Graphics2_obj::videoPipeline->compile();
            		}
            	}

Dynamic Graphics2_obj::__CreateEmpty() { return new Graphics2_obj; }

void *Graphics2_obj::_hx_vtable = 0;

Dynamic Graphics2_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Graphics2_obj > _hx_result = new Graphics2_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Graphics2_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2f3aa9a2) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2f3aa9a2;
	} else {
		return inClassId==(int)0x3f458a72;
	}
}

void Graphics2_obj::setProjection(){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_835_setProjection)
HXLINE( 836)		int width = ::kha::Canvas_obj::get_width(this->canvas);
HXLINE( 837)		int height = ::kha::Canvas_obj::get_height(this->canvas);
HXLINE( 838)		if (::Std_obj::is(this->canvas,hx::ClassOf< ::kha::Framebuffer >())) {
HXLINE( 839)			 ::kha::math::FastMatrix4 _this = this->projectionMatrix;
HXDLIN( 839)			float tx = ( (float)((( (Float)(-(width)) ) / ( (Float)(width) ))) );
HXDLIN( 839)			float ty = ( (float)((( (Float)(-(height)) ) / ( (Float)((0 - height)) ))) );
HXDLIN( 839)			float tz = ( (float)(((Float)-1.0002000200020003)) );
HXDLIN( 839)			float m__00 = ( (float)((( (Float)(2) ) / ( (Float)(width) ))) );
HXDLIN( 839)			float m__10 = ( (float)(0) );
HXDLIN( 839)			float m__20 = ( (float)(0) );
HXDLIN( 839)			float m__30 = tx;
HXDLIN( 839)			float m__01 = ( (float)(0) );
HXDLIN( 839)			float m__11 = ( (float)((( (Float)(2) ) / ( (Float)((0 - height)) ))) );
HXDLIN( 839)			float m__21 = ( (float)(0) );
HXDLIN( 839)			float m__31 = ty;
HXDLIN( 839)			float m__02 = ( (float)(0) );
HXDLIN( 839)			float m__12 = ( (float)(0) );
HXDLIN( 839)			float m__22 = ( (float)(((Float)-0.002000200020002)) );
HXDLIN( 839)			float m__32 = tz;
HXDLIN( 839)			float m__03 = ( (float)(0) );
HXDLIN( 839)			float m__13 = ( (float)(0) );
HXDLIN( 839)			float m__23 = ( (float)(0) );
HXDLIN( 839)			float m__33 = ( (float)(1) );
HXDLIN( 839)			_this->_00 = m__00;
HXDLIN( 839)			_this->_10 = m__10;
HXDLIN( 839)			_this->_20 = m__20;
HXDLIN( 839)			_this->_30 = m__30;
HXDLIN( 839)			_this->_01 = m__01;
HXDLIN( 839)			_this->_11 = m__11;
HXDLIN( 839)			_this->_21 = m__21;
HXDLIN( 839)			_this->_31 = m__31;
HXDLIN( 839)			_this->_02 = m__02;
HXDLIN( 839)			_this->_12 = m__12;
HXDLIN( 839)			_this->_22 = m__22;
HXDLIN( 839)			_this->_32 = m__32;
HXDLIN( 839)			_this->_03 = m__03;
HXDLIN( 839)			_this->_13 = m__13;
HXDLIN( 839)			_this->_23 = m__23;
HXDLIN( 839)			_this->_33 = m__33;
            		}
            		else {
HXLINE( 842)			if (!(::kha::Image_obj::get_nonPow2Supported())) {
HXLINE( 843)				width = ::kha::graphics4::Graphics2_obj::upperPowerOfTwo(width);
HXLINE( 844)				height = ::kha::graphics4::Graphics2_obj::upperPowerOfTwo(height);
            			}
HXLINE( 846)			if (::kha::graphics4::Graphics_obj::renderTargetsInvertedY(this->g)) {
HXLINE( 847)				 ::kha::math::FastMatrix4 _this1 = this->projectionMatrix;
HXDLIN( 847)				float tx1 = ( (float)((( (Float)(-(width)) ) / ( (Float)(width) ))) );
HXDLIN( 847)				float ty1 = ( (float)((( (Float)(-(height)) ) / ( (Float)(height) ))) );
HXDLIN( 847)				float tz1 = ( (float)(((Float)-1.0002000200020003)) );
HXDLIN( 847)				float m__001 = ( (float)((( (Float)(2) ) / ( (Float)(width) ))) );
HXDLIN( 847)				float m__101 = ( (float)(0) );
HXDLIN( 847)				float m__201 = ( (float)(0) );
HXDLIN( 847)				float m__301 = tx1;
HXDLIN( 847)				float m__011 = ( (float)(0) );
HXDLIN( 847)				float m__111 = ( (float)((( (Float)(2) ) / ( (Float)(height) ))) );
HXDLIN( 847)				float m__211 = ( (float)(0) );
HXDLIN( 847)				float m__311 = ty1;
HXDLIN( 847)				float m__021 = ( (float)(0) );
HXDLIN( 847)				float m__121 = ( (float)(0) );
HXDLIN( 847)				float m__221 = ( (float)(((Float)-0.002000200020002)) );
HXDLIN( 847)				float m__321 = tz1;
HXDLIN( 847)				float m__031 = ( (float)(0) );
HXDLIN( 847)				float m__131 = ( (float)(0) );
HXDLIN( 847)				float m__231 = ( (float)(0) );
HXDLIN( 847)				float m__331 = ( (float)(1) );
HXDLIN( 847)				_this1->_00 = m__001;
HXDLIN( 847)				_this1->_10 = m__101;
HXDLIN( 847)				_this1->_20 = m__201;
HXDLIN( 847)				_this1->_30 = m__301;
HXDLIN( 847)				_this1->_01 = m__011;
HXDLIN( 847)				_this1->_11 = m__111;
HXDLIN( 847)				_this1->_21 = m__211;
HXDLIN( 847)				_this1->_31 = m__311;
HXDLIN( 847)				_this1->_02 = m__021;
HXDLIN( 847)				_this1->_12 = m__121;
HXDLIN( 847)				_this1->_22 = m__221;
HXDLIN( 847)				_this1->_32 = m__321;
HXDLIN( 847)				_this1->_03 = m__031;
HXDLIN( 847)				_this1->_13 = m__131;
HXDLIN( 847)				_this1->_23 = m__231;
HXDLIN( 847)				_this1->_33 = m__331;
            			}
            			else {
HXLINE( 850)				 ::kha::math::FastMatrix4 _this2 = this->projectionMatrix;
HXDLIN( 850)				float tx2 = ( (float)((( (Float)(-(width)) ) / ( (Float)(width) ))) );
HXDLIN( 850)				float ty2 = ( (float)((( (Float)(-(height)) ) / ( (Float)((0 - height)) ))) );
HXDLIN( 850)				float tz2 = ( (float)(((Float)-1.0002000200020003)) );
HXDLIN( 850)				float m__002 = ( (float)((( (Float)(2) ) / ( (Float)(width) ))) );
HXDLIN( 850)				float m__102 = ( (float)(0) );
HXDLIN( 850)				float m__202 = ( (float)(0) );
HXDLIN( 850)				float m__302 = tx2;
HXDLIN( 850)				float m__012 = ( (float)(0) );
HXDLIN( 850)				float m__112 = ( (float)((( (Float)(2) ) / ( (Float)((0 - height)) ))) );
HXDLIN( 850)				float m__212 = ( (float)(0) );
HXDLIN( 850)				float m__312 = ty2;
HXDLIN( 850)				float m__022 = ( (float)(0) );
HXDLIN( 850)				float m__122 = ( (float)(0) );
HXDLIN( 850)				float m__222 = ( (float)(((Float)-0.002000200020002)) );
HXDLIN( 850)				float m__322 = tz2;
HXDLIN( 850)				float m__032 = ( (float)(0) );
HXDLIN( 850)				float m__132 = ( (float)(0) );
HXDLIN( 850)				float m__232 = ( (float)(0) );
HXDLIN( 850)				float m__332 = ( (float)(1) );
HXDLIN( 850)				_this2->_00 = m__002;
HXDLIN( 850)				_this2->_10 = m__102;
HXDLIN( 850)				_this2->_20 = m__202;
HXDLIN( 850)				_this2->_30 = m__302;
HXDLIN( 850)				_this2->_01 = m__012;
HXDLIN( 850)				_this2->_11 = m__112;
HXDLIN( 850)				_this2->_21 = m__212;
HXDLIN( 850)				_this2->_31 = m__312;
HXDLIN( 850)				_this2->_02 = m__022;
HXDLIN( 850)				_this2->_12 = m__122;
HXDLIN( 850)				_this2->_22 = m__222;
HXDLIN( 850)				_this2->_32 = m__322;
HXDLIN( 850)				_this2->_03 = m__032;
HXDLIN( 850)				_this2->_13 = m__132;
HXDLIN( 850)				_this2->_23 = m__232;
HXDLIN( 850)				_this2->_33 = m__332;
            			}
            		}
HXLINE( 853)		this->imagePainter->setProjection(this->projectionMatrix);
HXLINE( 854)		this->coloredPainter->setProjection(this->projectionMatrix);
HXLINE( 855)		this->textPainter->setProjection(this->projectionMatrix);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics2_obj,setProjection,(void))

void Graphics2_obj::drawImage( ::kha::Image img,float x,float y){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_859_drawImage)
HXLINE( 860)		{
HXLINE( 860)			 ::kha::graphics4::ColoredShaderPainter _this = this->coloredPainter;
HXDLIN( 860)			if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > 0)) {
HXLINE( 860)				_this->drawTriBuffer(false);
            			}
HXDLIN( 860)			if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > 0)) {
HXLINE( 860)				_this->drawBuffer(false);
            			}
            		}
HXLINE( 861)		this->textPainter->end();
HXLINE( 862)		float xw = (x + img->get_width());
HXLINE( 863)		float yh = (y + img->get_height());
HXLINE( 865)		 Kore::float32x4 xx = Kore::load(x,x,xw,xw);
HXLINE( 866)		 Kore::float32x4 yy = Kore::load(yh,y,y,yh);
HXLINE( 868)		::Array< ::Dynamic> _00 = this->transformations;
HXDLIN( 868)		 Kore::float32x4 _001 = Kore::loadAll(_00->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >()->_00);
HXLINE( 869)		::Array< ::Dynamic> _01 = this->transformations;
HXDLIN( 869)		 Kore::float32x4 _011 = Kore::loadAll(_01->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >()->_01);
HXLINE( 870)		::Array< ::Dynamic> _02 = this->transformations;
HXDLIN( 870)		 Kore::float32x4 _021 = Kore::loadAll(_02->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >()->_02);
HXLINE( 871)		::Array< ::Dynamic> _10 = this->transformations;
HXDLIN( 871)		 Kore::float32x4 _101 = Kore::loadAll(_10->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >()->_10);
HXLINE( 872)		::Array< ::Dynamic> _11 = this->transformations;
HXDLIN( 872)		 Kore::float32x4 _111 = Kore::loadAll(_11->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >()->_11);
HXLINE( 873)		::Array< ::Dynamic> _12 = this->transformations;
HXDLIN( 873)		 Kore::float32x4 _121 = Kore::loadAll(_12->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >()->_12);
HXLINE( 874)		::Array< ::Dynamic> _20 = this->transformations;
HXDLIN( 874)		 Kore::float32x4 _201 = Kore::loadAll(_20->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >()->_20);
HXLINE( 875)		::Array< ::Dynamic> _21 = this->transformations;
HXDLIN( 875)		 Kore::float32x4 _211 = Kore::loadAll(_21->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >()->_21);
HXLINE( 876)		::Array< ::Dynamic> _22 = this->transformations;
HXDLIN( 876)		 Kore::float32x4 _221 = Kore::loadAll(_22->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >()->_22);
HXLINE( 879)		 Kore::float32x4 w = Kore::mul(_021,xx);
HXDLIN( 879)		 Kore::float32x4 w1 = Kore::add(Kore::add(w,Kore::mul(_121,yy)),_221);
HXLINE( 880)		 Kore::float32x4 px = Kore::mul(_001,xx);
HXDLIN( 880)		 Kore::float32x4 px1 = Kore::div(Kore::add(Kore::add(px,Kore::mul(_101,yy)),_201),w1);
HXLINE( 881)		 Kore::float32x4 py = Kore::mul(_011,xx);
HXDLIN( 881)		 Kore::float32x4 py1 = Kore::div(Kore::add(Kore::add(py,Kore::mul(_111,yy)),_211),w1);
HXLINE( 883)		{
HXLINE( 883)			 ::kha::graphics4::ImageShaderPainter _this1 = this->imagePainter;
HXDLIN( 883)			float bottomleftx = ( (float)(Kore::get(px1,0)) );
HXDLIN( 883)			float bottomlefty = ( (float)(Kore::get(py1,0)) );
HXDLIN( 883)			float topleftx = ( (float)(Kore::get(px1,1)) );
HXDLIN( 883)			float toplefty = ( (float)(Kore::get(py1,1)) );
HXDLIN( 883)			float toprightx = ( (float)(Kore::get(px1,2)) );
HXDLIN( 883)			float toprighty = ( (float)(Kore::get(py1,2)) );
HXDLIN( 883)			float bottomrightx = ( (float)(Kore::get(px1,3)) );
HXDLIN( 883)			float bottomrighty = ( (float)(Kore::get(py1,3)) );
HXDLIN( 883)			float opacity = ( (float)(this->get_opacity()) );
HXDLIN( 883)			int color = this->get_color();
HXDLIN( 883)			 ::kha::Image tex = img;
HXDLIN( 883)			bool _hx_tmp;
HXDLIN( 883)			if (((::kha::graphics4::ImageShaderPainter_obj::bufferIndex + 1) < 1500)) {
HXLINE( 883)				if (hx::IsNotNull( ::kha::graphics4::ImageShaderPainter_obj::lastTexture )) {
HXLINE( 883)					_hx_tmp = hx::IsNotEq( tex,::kha::graphics4::ImageShaderPainter_obj::lastTexture );
            				}
            				else {
HXLINE( 883)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 883)				_hx_tmp = true;
            			}
HXDLIN( 883)			if (_hx_tmp) {
HXLINE( 883)				_this1->drawBuffer();
            			}
HXDLIN( 883)			{
HXLINE( 883)				float r = (hx::UShr((color & 16711680),16) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 883)				float g = (hx::UShr((color & 65280),8) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 883)				float b = ((color & 255) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 883)				float a = ((hx::UShr(color,24) * ( (float)(((Float)0.00392156862745098)) )) * opacity);
HXDLIN( 883)				int baseIndex = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * 9) * 4);
HXDLIN( 883)				{
HXLINE( 883)					 float32array this1 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this1.set((baseIndex + 5),r);
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this2 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this2.set((baseIndex + 6),g);
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this3 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this3.set((baseIndex + 7),b);
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this4 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this4.set((baseIndex + 8),a);
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this5 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this5.set((baseIndex + 14),r);
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this6 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this6.set((baseIndex + 15),g);
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this7 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this7.set((baseIndex + 16),b);
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this8 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this8.set((baseIndex + 17),a);
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this9 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this9.set((baseIndex + 23),r);
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this10 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this10.set((baseIndex + 24),g);
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this11 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this11.set((baseIndex + 25),b);
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this12 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this12.set((baseIndex + 26),a);
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this13 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this13.set((baseIndex + 32),r);
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this14 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this14.set((baseIndex + 33),g);
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this15 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this15.set((baseIndex + 34),b);
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this16 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this16.set((baseIndex + 35),a);
            				}
            			}
HXDLIN( 883)			{
HXLINE( 883)				int right = tex->get_width();
HXDLIN( 883)				float right1 = ( (float)((( (Float)(right) ) / ( (Float)(tex->get_realWidth()) ))) );
HXDLIN( 883)				int bottom = tex->get_height();
HXDLIN( 883)				float bottom1 = ( (float)((( (Float)(bottom) ) / ( (Float)(tex->get_realHeight()) ))) );
HXDLIN( 883)				int baseIndex1 = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * 9) * 4);
HXDLIN( 883)				{
HXLINE( 883)					 float32array this17 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this17.set((baseIndex1 + 3),( (float)(0) ));
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this18 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this18.set((baseIndex1 + 4),bottom1);
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this19 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this19.set((baseIndex1 + 12),( (float)(0) ));
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this20 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this20.set((baseIndex1 + 13),( (float)(0) ));
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this21 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this21.set((baseIndex1 + 21),right1);
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this22 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this22.set((baseIndex1 + 22),( (float)(0) ));
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this23 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this23.set((baseIndex1 + 30),right1);
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this24 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this24.set((baseIndex1 + 31),bottom1);
            				}
            			}
HXDLIN( 883)			{
HXLINE( 883)				int baseIndex2 = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * 9) * 4);
HXDLIN( 883)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set(baseIndex2,bottomleftx);
HXDLIN( 883)				{
HXLINE( 883)					 float32array this25 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this25.set((baseIndex2 + 1),bottomlefty);
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this26 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this26.set((baseIndex2 + 2),( (float)(((Float)-5.0)) ));
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this27 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this27.set((baseIndex2 + 9),topleftx);
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this28 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this28.set((baseIndex2 + 10),toplefty);
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this29 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this29.set((baseIndex2 + 11),( (float)(((Float)-5.0)) ));
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this30 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this30.set((baseIndex2 + 18),toprightx);
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this31 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this31.set((baseIndex2 + 19),toprighty);
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this32 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this32.set((baseIndex2 + 20),( (float)(((Float)-5.0)) ));
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this33 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this33.set((baseIndex2 + 27),bottomrightx);
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this34 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this34.set((baseIndex2 + 28),bottomrighty);
            				}
HXDLIN( 883)				{
HXLINE( 883)					 float32array this35 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 883)					this35.set((baseIndex2 + 29),( (float)(((Float)-5.0)) ));
            				}
            			}
HXDLIN( 883)			++::kha::graphics4::ImageShaderPainter_obj::bufferIndex;
HXDLIN( 883)			::kha::graphics4::ImageShaderPainter_obj::lastTexture = tex;
            		}
            	}


void Graphics2_obj::drawScaledSubImage( ::kha::Image img,float sx,float sy,float sw,float sh,float dx,float dy,float dw,float dh){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_900_drawScaledSubImage)
HXLINE( 901)		{
HXLINE( 901)			 ::kha::graphics4::ColoredShaderPainter _this = this->coloredPainter;
HXDLIN( 901)			if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > 0)) {
HXLINE( 901)				_this->drawTriBuffer(false);
            			}
HXDLIN( 901)			if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > 0)) {
HXLINE( 901)				_this->drawBuffer(false);
            			}
            		}
HXLINE( 902)		this->textPainter->end();
HXLINE( 903)		::Array< ::Dynamic> _this1 = this->transformations;
HXDLIN( 903)		 ::kha::math::FastMatrix3 _this2 = _this1->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 903)		float value_x = dx;
HXDLIN( 903)		float value_y = (dy + dh);
HXDLIN( 903)		float w = (_this2->_02 * value_x);
HXDLIN( 903)		float w1 = ((w + (_this2->_12 * value_y)) + _this2->_22);
HXDLIN( 903)		float x = (_this2->_00 * value_x);
HXDLIN( 903)		Float x1 = (( (Float)(((x + (_this2->_10 * value_y)) + _this2->_20)) ) / ( (Float)(w1) ));
HXDLIN( 903)		float y = (_this2->_01 * value_x);
HXDLIN( 903)		Float y1 = (( (Float)(((y + (_this2->_11 * value_y)) + _this2->_21)) ) / ( (Float)(w1) ));
HXDLIN( 903)		float p1_x = ( (float)(x1) );
HXDLIN( 903)		float p1_y = ( (float)(y1) );
HXLINE( 904)		::Array< ::Dynamic> _this3 = this->transformations;
HXDLIN( 904)		 ::kha::math::FastMatrix3 _this4 = _this3->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 904)		float value_x1 = dx;
HXDLIN( 904)		float value_y1 = dy;
HXDLIN( 904)		float w2 = (_this4->_02 * value_x1);
HXDLIN( 904)		float w3 = ((w2 + (_this4->_12 * value_y1)) + _this4->_22);
HXDLIN( 904)		float x2 = (_this4->_00 * value_x1);
HXDLIN( 904)		Float x3 = (( (Float)(((x2 + (_this4->_10 * value_y1)) + _this4->_20)) ) / ( (Float)(w3) ));
HXDLIN( 904)		float y2 = (_this4->_01 * value_x1);
HXDLIN( 904)		Float y3 = (( (Float)(((y2 + (_this4->_11 * value_y1)) + _this4->_21)) ) / ( (Float)(w3) ));
HXDLIN( 904)		float p2_x = ( (float)(x3) );
HXDLIN( 904)		float p2_y = ( (float)(y3) );
HXLINE( 905)		::Array< ::Dynamic> _this5 = this->transformations;
HXDLIN( 905)		 ::kha::math::FastMatrix3 _this6 = _this5->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 905)		float value_x2 = (dx + dw);
HXDLIN( 905)		float value_y2 = dy;
HXDLIN( 905)		float w4 = (_this6->_02 * value_x2);
HXDLIN( 905)		float w5 = ((w4 + (_this6->_12 * value_y2)) + _this6->_22);
HXDLIN( 905)		float x4 = (_this6->_00 * value_x2);
HXDLIN( 905)		Float x5 = (( (Float)(((x4 + (_this6->_10 * value_y2)) + _this6->_20)) ) / ( (Float)(w5) ));
HXDLIN( 905)		float y4 = (_this6->_01 * value_x2);
HXDLIN( 905)		Float y5 = (( (Float)(((y4 + (_this6->_11 * value_y2)) + _this6->_21)) ) / ( (Float)(w5) ));
HXDLIN( 905)		float p3_x = ( (float)(x5) );
HXDLIN( 905)		float p3_y = ( (float)(y5) );
HXLINE( 906)		::Array< ::Dynamic> _this7 = this->transformations;
HXDLIN( 906)		 ::kha::math::FastMatrix3 _this8 = _this7->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 906)		float value_x3 = (dx + dw);
HXDLIN( 906)		float value_y3 = (dy + dh);
HXDLIN( 906)		float w6 = (_this8->_02 * value_x3);
HXDLIN( 906)		float w7 = ((w6 + (_this8->_12 * value_y3)) + _this8->_22);
HXDLIN( 906)		float x6 = (_this8->_00 * value_x3);
HXDLIN( 906)		Float x7 = (( (Float)(((x6 + (_this8->_10 * value_y3)) + _this8->_20)) ) / ( (Float)(w7) ));
HXDLIN( 906)		float y6 = (_this8->_01 * value_x3);
HXDLIN( 906)		Float y7 = (( (Float)(((y6 + (_this8->_11 * value_y3)) + _this8->_21)) ) / ( (Float)(w7) ));
HXDLIN( 906)		float p4_x = ( (float)(x7) );
HXDLIN( 906)		float p4_y = ( (float)(y7) );
HXLINE( 907)		{
HXLINE( 907)			 ::kha::graphics4::ImageShaderPainter _this9 = this->imagePainter;
HXDLIN( 907)			float opacity = ( (float)(this->get_opacity()) );
HXDLIN( 907)			int color = this->get_color();
HXDLIN( 907)			 ::kha::Image tex = img;
HXDLIN( 907)			bool _hx_tmp;
HXDLIN( 907)			if (((::kha::graphics4::ImageShaderPainter_obj::bufferIndex + 1) < 1500)) {
HXLINE( 907)				if (hx::IsNotNull( ::kha::graphics4::ImageShaderPainter_obj::lastTexture )) {
HXLINE( 907)					_hx_tmp = hx::IsNotEq( tex,::kha::graphics4::ImageShaderPainter_obj::lastTexture );
            				}
            				else {
HXLINE( 907)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 907)				_hx_tmp = true;
            			}
HXDLIN( 907)			if (_hx_tmp) {
HXLINE( 907)				_this9->drawBuffer();
            			}
HXDLIN( 907)			{
HXLINE( 907)				float left = ( (float)((( (Float)(sx) ) / ( (Float)(tex->get_realWidth()) ))) );
HXDLIN( 907)				float top = ( (float)((( (Float)(sy) ) / ( (Float)(tex->get_realHeight()) ))) );
HXDLIN( 907)				float right = ( (float)((( (Float)((sx + sw)) ) / ( (Float)(tex->get_realWidth()) ))) );
HXDLIN( 907)				float bottom = ( (float)((( (Float)((sy + sh)) ) / ( (Float)(tex->get_realHeight()) ))) );
HXDLIN( 907)				int baseIndex = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * 9) * 4);
HXDLIN( 907)				{
HXLINE( 907)					 float32array this1 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this1.set((baseIndex + 3),left);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this2 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this2.set((baseIndex + 4),bottom);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this3 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this3.set((baseIndex + 12),left);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this4 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this4.set((baseIndex + 13),top);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this5 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this5.set((baseIndex + 21),right);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this6 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this6.set((baseIndex + 22),top);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this7 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this7.set((baseIndex + 30),right);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this8 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this8.set((baseIndex + 31),bottom);
            				}
            			}
HXDLIN( 907)			{
HXLINE( 907)				float r = (hx::UShr((color & 16711680),16) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 907)				float g = (hx::UShr((color & 65280),8) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 907)				float b = ((color & 255) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 907)				float a = ((hx::UShr(color,24) * ( (float)(((Float)0.00392156862745098)) )) * opacity);
HXDLIN( 907)				int baseIndex1 = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * 9) * 4);
HXDLIN( 907)				{
HXLINE( 907)					 float32array this9 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this9.set((baseIndex1 + 5),r);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this10 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this10.set((baseIndex1 + 6),g);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this11 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this11.set((baseIndex1 + 7),b);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this12 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this12.set((baseIndex1 + 8),a);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this13 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this13.set((baseIndex1 + 14),r);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this14 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this14.set((baseIndex1 + 15),g);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this15 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this15.set((baseIndex1 + 16),b);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this16 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this16.set((baseIndex1 + 17),a);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this17 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this17.set((baseIndex1 + 23),r);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this18 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this18.set((baseIndex1 + 24),g);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this19 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this19.set((baseIndex1 + 25),b);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this20 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this20.set((baseIndex1 + 26),a);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this21 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this21.set((baseIndex1 + 32),r);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this22 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this22.set((baseIndex1 + 33),g);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this23 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this23.set((baseIndex1 + 34),b);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this24 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this24.set((baseIndex1 + 35),a);
            				}
            			}
HXDLIN( 907)			{
HXLINE( 907)				int baseIndex2 = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * 9) * 4);
HXDLIN( 907)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set(baseIndex2,p1_x);
HXDLIN( 907)				{
HXLINE( 907)					 float32array this25 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this25.set((baseIndex2 + 1),p1_y);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this26 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this26.set((baseIndex2 + 2),( (float)(((Float)-5.0)) ));
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this27 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this27.set((baseIndex2 + 9),p2_x);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this28 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this28.set((baseIndex2 + 10),p2_y);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this29 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this29.set((baseIndex2 + 11),( (float)(((Float)-5.0)) ));
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this30 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this30.set((baseIndex2 + 18),p3_x);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this31 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this31.set((baseIndex2 + 19),p3_y);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this32 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this32.set((baseIndex2 + 20),( (float)(((Float)-5.0)) ));
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this33 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this33.set((baseIndex2 + 27),p4_x);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this34 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this34.set((baseIndex2 + 28),p4_y);
            				}
HXDLIN( 907)				{
HXLINE( 907)					 float32array this35 = ::kha::graphics4::ImageShaderPainter_obj::rectVertices->self;
HXDLIN( 907)					this35.set((baseIndex2 + 29),( (float)(((Float)-5.0)) ));
            				}
            			}
HXDLIN( 907)			++::kha::graphics4::ImageShaderPainter_obj::bufferIndex;
HXDLIN( 907)			::kha::graphics4::ImageShaderPainter_obj::lastTexture = tex;
            		}
            	}


int Graphics2_obj::get_color(){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_911_get_color)
HXDLIN( 911)		return this->myColor;
            	}


int Graphics2_obj::set_color(int color){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_915_set_color)
HXDLIN( 915)		return (this->myColor = color);
            	}


void Graphics2_obj::drawRect(Float x,Float y,Float width,Float height,hx::Null< Float >  __o_strength){
Float strength = __o_strength.Default(((Float)1.0));
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_918_drawRect)
HXLINE( 919)		this->imagePainter->end();
HXLINE( 920)		this->textPainter->end();
HXLINE( 922)		::Array< ::Dynamic> _this = this->transformations;
HXDLIN( 922)		 ::kha::math::FastMatrix3 _this1 = _this->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 922)		float value_x = ( (float)((x - (strength / ( (Float)(2) )))) );
HXDLIN( 922)		float value_y = ( (float)((y + (strength / ( (Float)(2) )))) );
HXDLIN( 922)		float w = (_this1->_02 * value_x);
HXDLIN( 922)		float w1 = ((w + (_this1->_12 * value_y)) + _this1->_22);
HXDLIN( 922)		float x1 = (_this1->_00 * value_x);
HXDLIN( 922)		Float x2 = (( (Float)(((x1 + (_this1->_10 * value_y)) + _this1->_20)) ) / ( (Float)(w1) ));
HXDLIN( 922)		float y1 = (_this1->_01 * value_x);
HXDLIN( 922)		Float y2 = (( (Float)(((y1 + (_this1->_11 * value_y)) + _this1->_21)) ) / ( (Float)(w1) ));
HXDLIN( 922)		 ::kha::math::FastVector2 p1 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x2,y2);
HXLINE( 923)		::Array< ::Dynamic> _this2 = this->transformations;
HXDLIN( 923)		 ::kha::math::FastMatrix3 _this3 = _this2->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 923)		float value_x1 = ( (float)((x - (strength / ( (Float)(2) )))) );
HXDLIN( 923)		float value_y1 = ( (float)((y - (strength / ( (Float)(2) )))) );
HXDLIN( 923)		float w2 = (_this3->_02 * value_x1);
HXDLIN( 923)		float w3 = ((w2 + (_this3->_12 * value_y1)) + _this3->_22);
HXDLIN( 923)		float x3 = (_this3->_00 * value_x1);
HXDLIN( 923)		Float x4 = (( (Float)(((x3 + (_this3->_10 * value_y1)) + _this3->_20)) ) / ( (Float)(w3) ));
HXDLIN( 923)		float y3 = (_this3->_01 * value_x1);
HXDLIN( 923)		Float y4 = (( (Float)(((y3 + (_this3->_11 * value_y1)) + _this3->_21)) ) / ( (Float)(w3) ));
HXDLIN( 923)		 ::kha::math::FastVector2 p2 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x4,y4);
HXLINE( 924)		::Array< ::Dynamic> _this4 = this->transformations;
HXDLIN( 924)		 ::kha::math::FastMatrix3 _this5 = _this4->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 924)		float value_x2 = ( (float)(((x + width) + (strength / ( (Float)(2) )))) );
HXDLIN( 924)		float value_y2 = ( (float)((y - (strength / ( (Float)(2) )))) );
HXDLIN( 924)		float w4 = (_this5->_02 * value_x2);
HXDLIN( 924)		float w5 = ((w4 + (_this5->_12 * value_y2)) + _this5->_22);
HXDLIN( 924)		float x5 = (_this5->_00 * value_x2);
HXDLIN( 924)		Float x6 = (( (Float)(((x5 + (_this5->_10 * value_y2)) + _this5->_20)) ) / ( (Float)(w5) ));
HXDLIN( 924)		float y5 = (_this5->_01 * value_x2);
HXDLIN( 924)		Float y6 = (( (Float)(((y5 + (_this5->_11 * value_y2)) + _this5->_21)) ) / ( (Float)(w5) ));
HXDLIN( 924)		 ::kha::math::FastVector2 p3 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x6,y6);
HXLINE( 925)		::Array< ::Dynamic> _this6 = this->transformations;
HXDLIN( 925)		 ::kha::math::FastMatrix3 _this7 = _this6->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 925)		float value_x3 = ( (float)(((x + width) + (strength / ( (Float)(2) )))) );
HXDLIN( 925)		float value_y3 = ( (float)((y + (strength / ( (Float)(2) )))) );
HXDLIN( 925)		float w6 = (_this7->_02 * value_x3);
HXDLIN( 925)		float w7 = ((w6 + (_this7->_12 * value_y3)) + _this7->_22);
HXDLIN( 925)		float x7 = (_this7->_00 * value_x3);
HXDLIN( 925)		Float x8 = (( (Float)(((x7 + (_this7->_10 * value_y3)) + _this7->_20)) ) / ( (Float)(w7) ));
HXDLIN( 925)		float y7 = (_this7->_01 * value_x3);
HXDLIN( 925)		Float y8 = (( (Float)(((y7 + (_this7->_11 * value_y3)) + _this7->_21)) ) / ( (Float)(w7) ));
HXDLIN( 925)		 ::kha::math::FastVector2 p4 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x8,y8);
HXLINE( 926)		 ::kha::graphics4::ColoredShaderPainter _hx_tmp = this->coloredPainter;
HXDLIN( 926)		Float _hx_tmp1 = this->get_opacity();
HXDLIN( 926)		int _hx_tmp2 = this->get_color();
HXDLIN( 926)		_hx_tmp->fillRect(( (float)(_hx_tmp1) ),_hx_tmp2,( (Float)(p1->x) ),( (Float)(p1->y) ),( (Float)(p2->x) ),( (Float)(p2->y) ),( (Float)(p3->x) ),( (Float)(p3->y) ),( (Float)(p4->x) ),( (Float)(p4->y) ));
HXLINE( 928)		::Array< ::Dynamic> _this8 = this->transformations;
HXDLIN( 928)		 ::kha::math::FastMatrix3 _this9 = _this8->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 928)		float value_x4 = ( (float)((x - (strength / ( (Float)(2) )))) );
HXDLIN( 928)		float value_y4 = ( (float)(((y + height) - (strength / ( (Float)(2) )))) );
HXDLIN( 928)		float w8 = (_this9->_02 * value_x4);
HXDLIN( 928)		float w9 = ((w8 + (_this9->_12 * value_y4)) + _this9->_22);
HXDLIN( 928)		float x9 = (_this9->_00 * value_x4);
HXDLIN( 928)		Float x10 = (( (Float)(((x9 + (_this9->_10 * value_y4)) + _this9->_20)) ) / ( (Float)(w9) ));
HXDLIN( 928)		float y9 = (_this9->_01 * value_x4);
HXDLIN( 928)		Float y10 = (( (Float)(((y9 + (_this9->_11 * value_y4)) + _this9->_21)) ) / ( (Float)(w9) ));
HXDLIN( 928)		p1 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x10,y10);
HXLINE( 929)		::Array< ::Dynamic> _this10 = this->transformations;
HXDLIN( 929)		 ::kha::math::FastMatrix3 _this11 = _this10->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 929)		float value_x5 = ( (float)((x - (strength / ( (Float)(2) )))) );
HXDLIN( 929)		float value_y5 = ( (float)((y + (strength / ( (Float)(2) )))) );
HXDLIN( 929)		float w10 = (_this11->_02 * value_x5);
HXDLIN( 929)		float w11 = ((w10 + (_this11->_12 * value_y5)) + _this11->_22);
HXDLIN( 929)		float x11 = (_this11->_00 * value_x5);
HXDLIN( 929)		Float x12 = (( (Float)(((x11 + (_this11->_10 * value_y5)) + _this11->_20)) ) / ( (Float)(w11) ));
HXDLIN( 929)		float y11 = (_this11->_01 * value_x5);
HXDLIN( 929)		Float y12 = (( (Float)(((y11 + (_this11->_11 * value_y5)) + _this11->_21)) ) / ( (Float)(w11) ));
HXDLIN( 929)		p2 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x12,y12);
HXLINE( 930)		::Array< ::Dynamic> _this12 = this->transformations;
HXDLIN( 930)		 ::kha::math::FastMatrix3 _this13 = _this12->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 930)		float value_x6 = ( (float)((x + (strength / ( (Float)(2) )))) );
HXDLIN( 930)		float value_y6 = ( (float)((y + (strength / ( (Float)(2) )))) );
HXDLIN( 930)		float w12 = (_this13->_02 * value_x6);
HXDLIN( 930)		float w13 = ((w12 + (_this13->_12 * value_y6)) + _this13->_22);
HXDLIN( 930)		float x13 = (_this13->_00 * value_x6);
HXDLIN( 930)		Float x14 = (( (Float)(((x13 + (_this13->_10 * value_y6)) + _this13->_20)) ) / ( (Float)(w13) ));
HXDLIN( 930)		float y13 = (_this13->_01 * value_x6);
HXDLIN( 930)		Float y14 = (( (Float)(((y13 + (_this13->_11 * value_y6)) + _this13->_21)) ) / ( (Float)(w13) ));
HXDLIN( 930)		p3 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x14,y14);
HXLINE( 931)		::Array< ::Dynamic> _this14 = this->transformations;
HXDLIN( 931)		 ::kha::math::FastMatrix3 _this15 = _this14->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 931)		float value_x7 = ( (float)((x + (strength / ( (Float)(2) )))) );
HXDLIN( 931)		float value_y7 = ( (float)(((y + height) - (strength / ( (Float)(2) )))) );
HXDLIN( 931)		float w14 = (_this15->_02 * value_x7);
HXDLIN( 931)		float w15 = ((w14 + (_this15->_12 * value_y7)) + _this15->_22);
HXDLIN( 931)		float x15 = (_this15->_00 * value_x7);
HXDLIN( 931)		Float x16 = (( (Float)(((x15 + (_this15->_10 * value_y7)) + _this15->_20)) ) / ( (Float)(w15) ));
HXDLIN( 931)		float y15 = (_this15->_01 * value_x7);
HXDLIN( 931)		Float y16 = (( (Float)(((y15 + (_this15->_11 * value_y7)) + _this15->_21)) ) / ( (Float)(w15) ));
HXDLIN( 931)		p4 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x16,y16);
HXLINE( 932)		 ::kha::graphics4::ColoredShaderPainter _hx_tmp3 = this->coloredPainter;
HXDLIN( 932)		Float _hx_tmp4 = this->get_opacity();
HXDLIN( 932)		int _hx_tmp5 = this->get_color();
HXDLIN( 932)		_hx_tmp3->fillRect(( (float)(_hx_tmp4) ),_hx_tmp5,( (Float)(p1->x) ),( (Float)(p1->y) ),( (Float)(p2->x) ),( (Float)(p2->y) ),( (Float)(p3->x) ),( (Float)(p3->y) ),( (Float)(p4->x) ),( (Float)(p4->y) ));
HXLINE( 934)		::Array< ::Dynamic> _this16 = this->transformations;
HXDLIN( 934)		 ::kha::math::FastMatrix3 _this17 = _this16->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 934)		float value_x8 = ( (float)((x - (strength / ( (Float)(2) )))) );
HXDLIN( 934)		float value_y8 = ( (float)(((y + height) + (strength / ( (Float)(2) )))) );
HXDLIN( 934)		float w16 = (_this17->_02 * value_x8);
HXDLIN( 934)		float w17 = ((w16 + (_this17->_12 * value_y8)) + _this17->_22);
HXDLIN( 934)		float x17 = (_this17->_00 * value_x8);
HXDLIN( 934)		Float x18 = (( (Float)(((x17 + (_this17->_10 * value_y8)) + _this17->_20)) ) / ( (Float)(w17) ));
HXDLIN( 934)		float y17 = (_this17->_01 * value_x8);
HXDLIN( 934)		Float y18 = (( (Float)(((y17 + (_this17->_11 * value_y8)) + _this17->_21)) ) / ( (Float)(w17) ));
HXDLIN( 934)		p1 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x18,y18);
HXLINE( 935)		::Array< ::Dynamic> _this18 = this->transformations;
HXDLIN( 935)		 ::kha::math::FastMatrix3 _this19 = _this18->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 935)		float value_x9 = ( (float)((x - (strength / ( (Float)(2) )))) );
HXDLIN( 935)		float value_y9 = ( (float)(((y + height) - (strength / ( (Float)(2) )))) );
HXDLIN( 935)		float w18 = (_this19->_02 * value_x9);
HXDLIN( 935)		float w19 = ((w18 + (_this19->_12 * value_y9)) + _this19->_22);
HXDLIN( 935)		float x19 = (_this19->_00 * value_x9);
HXDLIN( 935)		Float x20 = (( (Float)(((x19 + (_this19->_10 * value_y9)) + _this19->_20)) ) / ( (Float)(w19) ));
HXDLIN( 935)		float y19 = (_this19->_01 * value_x9);
HXDLIN( 935)		Float y20 = (( (Float)(((y19 + (_this19->_11 * value_y9)) + _this19->_21)) ) / ( (Float)(w19) ));
HXDLIN( 935)		p2 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x20,y20);
HXLINE( 936)		::Array< ::Dynamic> _this20 = this->transformations;
HXDLIN( 936)		 ::kha::math::FastMatrix3 _this21 = _this20->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 936)		float value_x10 = ( (float)(((x + width) + (strength / ( (Float)(2) )))) );
HXDLIN( 936)		float value_y10 = ( (float)(((y + height) - (strength / ( (Float)(2) )))) );
HXDLIN( 936)		float w20 = (_this21->_02 * value_x10);
HXDLIN( 936)		float w21 = ((w20 + (_this21->_12 * value_y10)) + _this21->_22);
HXDLIN( 936)		float x21 = (_this21->_00 * value_x10);
HXDLIN( 936)		Float x22 = (( (Float)(((x21 + (_this21->_10 * value_y10)) + _this21->_20)) ) / ( (Float)(w21) ));
HXDLIN( 936)		float y21 = (_this21->_01 * value_x10);
HXDLIN( 936)		Float y22 = (( (Float)(((y21 + (_this21->_11 * value_y10)) + _this21->_21)) ) / ( (Float)(w21) ));
HXDLIN( 936)		p3 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x22,y22);
HXLINE( 937)		::Array< ::Dynamic> _this22 = this->transformations;
HXDLIN( 937)		 ::kha::math::FastMatrix3 _this23 = _this22->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 937)		float value_x11 = ( (float)(((x + width) + (strength / ( (Float)(2) )))) );
HXDLIN( 937)		float value_y11 = ( (float)(((y + height) + (strength / ( (Float)(2) )))) );
HXDLIN( 937)		float w22 = (_this23->_02 * value_x11);
HXDLIN( 937)		float w23 = ((w22 + (_this23->_12 * value_y11)) + _this23->_22);
HXDLIN( 937)		float x23 = (_this23->_00 * value_x11);
HXDLIN( 937)		Float x24 = (( (Float)(((x23 + (_this23->_10 * value_y11)) + _this23->_20)) ) / ( (Float)(w23) ));
HXDLIN( 937)		float y23 = (_this23->_01 * value_x11);
HXDLIN( 937)		Float y24 = (( (Float)(((y23 + (_this23->_11 * value_y11)) + _this23->_21)) ) / ( (Float)(w23) ));
HXDLIN( 937)		p4 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x24,y24);
HXLINE( 938)		 ::kha::graphics4::ColoredShaderPainter _hx_tmp6 = this->coloredPainter;
HXDLIN( 938)		Float _hx_tmp7 = this->get_opacity();
HXDLIN( 938)		int _hx_tmp8 = this->get_color();
HXDLIN( 938)		_hx_tmp6->fillRect(( (float)(_hx_tmp7) ),_hx_tmp8,( (Float)(p1->x) ),( (Float)(p1->y) ),( (Float)(p2->x) ),( (Float)(p2->y) ),( (Float)(p3->x) ),( (Float)(p3->y) ),( (Float)(p4->x) ),( (Float)(p4->y) ));
HXLINE( 940)		::Array< ::Dynamic> _this24 = this->transformations;
HXDLIN( 940)		 ::kha::math::FastMatrix3 _this25 = _this24->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 940)		float value_x12 = ( (float)(((x + width) - (strength / ( (Float)(2) )))) );
HXDLIN( 940)		float value_y12 = ( (float)(((y + height) - (strength / ( (Float)(2) )))) );
HXDLIN( 940)		float w24 = (_this25->_02 * value_x12);
HXDLIN( 940)		float w25 = ((w24 + (_this25->_12 * value_y12)) + _this25->_22);
HXDLIN( 940)		float x25 = (_this25->_00 * value_x12);
HXDLIN( 940)		Float x26 = (( (Float)(((x25 + (_this25->_10 * value_y12)) + _this25->_20)) ) / ( (Float)(w25) ));
HXDLIN( 940)		float y25 = (_this25->_01 * value_x12);
HXDLIN( 940)		Float y26 = (( (Float)(((y25 + (_this25->_11 * value_y12)) + _this25->_21)) ) / ( (Float)(w25) ));
HXDLIN( 940)		p1 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x26,y26);
HXLINE( 941)		::Array< ::Dynamic> _this26 = this->transformations;
HXDLIN( 941)		 ::kha::math::FastMatrix3 _this27 = _this26->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 941)		float value_x13 = ( (float)(((x + width) - (strength / ( (Float)(2) )))) );
HXDLIN( 941)		float value_y13 = ( (float)((y + (strength / ( (Float)(2) )))) );
HXDLIN( 941)		float w26 = (_this27->_02 * value_x13);
HXDLIN( 941)		float w27 = ((w26 + (_this27->_12 * value_y13)) + _this27->_22);
HXDLIN( 941)		float x27 = (_this27->_00 * value_x13);
HXDLIN( 941)		Float x28 = (( (Float)(((x27 + (_this27->_10 * value_y13)) + _this27->_20)) ) / ( (Float)(w27) ));
HXDLIN( 941)		float y27 = (_this27->_01 * value_x13);
HXDLIN( 941)		Float y28 = (( (Float)(((y27 + (_this27->_11 * value_y13)) + _this27->_21)) ) / ( (Float)(w27) ));
HXDLIN( 941)		p2 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x28,y28);
HXLINE( 942)		::Array< ::Dynamic> _this28 = this->transformations;
HXDLIN( 942)		 ::kha::math::FastMatrix3 _this29 = _this28->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 942)		float value_x14 = ( (float)(((x + width) + (strength / ( (Float)(2) )))) );
HXDLIN( 942)		float value_y14 = ( (float)((y + (strength / ( (Float)(2) )))) );
HXDLIN( 942)		float w28 = (_this29->_02 * value_x14);
HXDLIN( 942)		float w29 = ((w28 + (_this29->_12 * value_y14)) + _this29->_22);
HXDLIN( 942)		float x29 = (_this29->_00 * value_x14);
HXDLIN( 942)		Float x30 = (( (Float)(((x29 + (_this29->_10 * value_y14)) + _this29->_20)) ) / ( (Float)(w29) ));
HXDLIN( 942)		float y29 = (_this29->_01 * value_x14);
HXDLIN( 942)		Float y30 = (( (Float)(((y29 + (_this29->_11 * value_y14)) + _this29->_21)) ) / ( (Float)(w29) ));
HXDLIN( 942)		p3 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x30,y30);
HXLINE( 943)		::Array< ::Dynamic> _this30 = this->transformations;
HXDLIN( 943)		 ::kha::math::FastMatrix3 _this31 = _this30->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 943)		float value_x15 = ( (float)(((x + width) + (strength / ( (Float)(2) )))) );
HXDLIN( 943)		float value_y15 = ( (float)(((y + height) - (strength / ( (Float)(2) )))) );
HXDLIN( 943)		float w30 = (_this31->_02 * value_x15);
HXDLIN( 943)		float w31 = ((w30 + (_this31->_12 * value_y15)) + _this31->_22);
HXDLIN( 943)		float x31 = (_this31->_00 * value_x15);
HXDLIN( 943)		Float x32 = (( (Float)(((x31 + (_this31->_10 * value_y15)) + _this31->_20)) ) / ( (Float)(w31) ));
HXDLIN( 943)		float y31 = (_this31->_01 * value_x15);
HXDLIN( 943)		Float y32 = (( (Float)(((y31 + (_this31->_11 * value_y15)) + _this31->_21)) ) / ( (Float)(w31) ));
HXDLIN( 943)		p4 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x32,y32);
HXLINE( 944)		 ::kha::graphics4::ColoredShaderPainter _hx_tmp9 = this->coloredPainter;
HXDLIN( 944)		Float _hx_tmp10 = this->get_opacity();
HXDLIN( 944)		int _hx_tmp11 = this->get_color();
HXDLIN( 944)		_hx_tmp9->fillRect(( (float)(_hx_tmp10) ),_hx_tmp11,( (Float)(p1->x) ),( (Float)(p1->y) ),( (Float)(p2->x) ),( (Float)(p2->y) ),( (Float)(p3->x) ),( (Float)(p3->y) ),( (Float)(p4->x) ),( (Float)(p4->y) ));
            	}


void Graphics2_obj::fillRect(Float x,Float y,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_947_fillRect)
HXLINE( 948)		this->imagePainter->end();
HXLINE( 949)		this->textPainter->end();
HXLINE( 951)		::Array< ::Dynamic> _this = this->transformations;
HXDLIN( 951)		 ::kha::math::FastMatrix3 _this1 = _this->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 951)		float value_x = ( (float)(x) );
HXDLIN( 951)		float value_y = ( (float)((y + height)) );
HXDLIN( 951)		float w = (_this1->_02 * value_x);
HXDLIN( 951)		float w1 = ((w + (_this1->_12 * value_y)) + _this1->_22);
HXDLIN( 951)		float x1 = (_this1->_00 * value_x);
HXDLIN( 951)		Float x2 = (( (Float)(((x1 + (_this1->_10 * value_y)) + _this1->_20)) ) / ( (Float)(w1) ));
HXDLIN( 951)		float y1 = (_this1->_01 * value_x);
HXDLIN( 951)		Float y2 = (( (Float)(((y1 + (_this1->_11 * value_y)) + _this1->_21)) ) / ( (Float)(w1) ));
HXDLIN( 951)		float p1_x = ( (float)(x2) );
HXDLIN( 951)		float p1_y = ( (float)(y2) );
HXLINE( 952)		::Array< ::Dynamic> _this2 = this->transformations;
HXDLIN( 952)		 ::kha::math::FastMatrix3 _this3 = _this2->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 952)		float value_x1 = ( (float)(x) );
HXDLIN( 952)		float value_y1 = ( (float)(y) );
HXDLIN( 952)		float w2 = (_this3->_02 * value_x1);
HXDLIN( 952)		float w3 = ((w2 + (_this3->_12 * value_y1)) + _this3->_22);
HXDLIN( 952)		float x3 = (_this3->_00 * value_x1);
HXDLIN( 952)		Float x4 = (( (Float)(((x3 + (_this3->_10 * value_y1)) + _this3->_20)) ) / ( (Float)(w3) ));
HXDLIN( 952)		float y3 = (_this3->_01 * value_x1);
HXDLIN( 952)		Float y4 = (( (Float)(((y3 + (_this3->_11 * value_y1)) + _this3->_21)) ) / ( (Float)(w3) ));
HXDLIN( 952)		float p2_x = ( (float)(x4) );
HXDLIN( 952)		float p2_y = ( (float)(y4) );
HXLINE( 953)		::Array< ::Dynamic> _this4 = this->transformations;
HXDLIN( 953)		 ::kha::math::FastMatrix3 _this5 = _this4->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 953)		float value_x2 = ( (float)((x + width)) );
HXDLIN( 953)		float value_y2 = ( (float)(y) );
HXDLIN( 953)		float w4 = (_this5->_02 * value_x2);
HXDLIN( 953)		float w5 = ((w4 + (_this5->_12 * value_y2)) + _this5->_22);
HXDLIN( 953)		float x5 = (_this5->_00 * value_x2);
HXDLIN( 953)		Float x6 = (( (Float)(((x5 + (_this5->_10 * value_y2)) + _this5->_20)) ) / ( (Float)(w5) ));
HXDLIN( 953)		float y5 = (_this5->_01 * value_x2);
HXDLIN( 953)		Float y6 = (( (Float)(((y5 + (_this5->_11 * value_y2)) + _this5->_21)) ) / ( (Float)(w5) ));
HXDLIN( 953)		float p3_x = ( (float)(x6) );
HXDLIN( 953)		float p3_y = ( (float)(y6) );
HXLINE( 954)		::Array< ::Dynamic> _this6 = this->transformations;
HXDLIN( 954)		 ::kha::math::FastMatrix3 _this7 = _this6->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 954)		float value_x3 = ( (float)((x + width)) );
HXDLIN( 954)		float value_y3 = ( (float)((y + height)) );
HXDLIN( 954)		float w6 = (_this7->_02 * value_x3);
HXDLIN( 954)		float w7 = ((w6 + (_this7->_12 * value_y3)) + _this7->_22);
HXDLIN( 954)		float x7 = (_this7->_00 * value_x3);
HXDLIN( 954)		Float x8 = (( (Float)(((x7 + (_this7->_10 * value_y3)) + _this7->_20)) ) / ( (Float)(w7) ));
HXDLIN( 954)		float y7 = (_this7->_01 * value_x3);
HXDLIN( 954)		Float y8 = (( (Float)(((y7 + (_this7->_11 * value_y3)) + _this7->_21)) ) / ( (Float)(w7) ));
HXDLIN( 954)		float p4_x = ( (float)(x8) );
HXDLIN( 954)		float p4_y = ( (float)(y8) );
HXLINE( 955)		 ::kha::graphics4::ColoredShaderPainter _hx_tmp = this->coloredPainter;
HXDLIN( 955)		Float _hx_tmp1 = this->get_opacity();
HXDLIN( 955)		_hx_tmp->fillRect(( (float)(_hx_tmp1) ),this->get_color(),( (Float)(p1_x) ),( (Float)(p1_y) ),( (Float)(p2_x) ),( (Float)(p2_y) ),( (Float)(p3_x) ),( (Float)(p3_y) ),( (Float)(p4_x) ),( (Float)(p4_y) ));
            	}


void Graphics2_obj::drawString(::String text,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_958_drawString)
HXLINE( 959)		this->imagePainter->end();
HXLINE( 960)		{
HXLINE( 960)			 ::kha::graphics4::ColoredShaderPainter _this = this->coloredPainter;
HXDLIN( 960)			if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > 0)) {
HXLINE( 960)				_this->drawTriBuffer(false);
            			}
HXDLIN( 960)			if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > 0)) {
HXLINE( 960)				_this->drawBuffer(false);
            			}
            		}
HXLINE( 962)		 ::kha::graphics4::TextShaderPainter _hx_tmp = this->textPainter;
HXDLIN( 962)		Float _hx_tmp1 = this->get_opacity();
HXDLIN( 962)		int _hx_tmp2 = this->get_color();
HXDLIN( 962)		::Array< ::Dynamic> _hx_tmp3 = this->transformations;
HXDLIN( 962)		_hx_tmp->drawString(text,( (float)(_hx_tmp1) ),_hx_tmp2,x,y,_hx_tmp3->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >(),::kha::graphics2::Graphics_obj::fontGlyphs);
            	}


void Graphics2_obj::drawCharacters(::Array< int > text,int start,int length,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_965_drawCharacters)
HXLINE( 966)		this->imagePainter->end();
HXLINE( 967)		{
HXLINE( 967)			 ::kha::graphics4::ColoredShaderPainter _this = this->coloredPainter;
HXDLIN( 967)			if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > 0)) {
HXLINE( 967)				_this->drawTriBuffer(false);
            			}
HXDLIN( 967)			if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > 0)) {
HXLINE( 967)				_this->drawBuffer(false);
            			}
            		}
HXLINE( 969)		 ::kha::graphics4::TextShaderPainter _hx_tmp = this->textPainter;
HXDLIN( 969)		Float _hx_tmp1 = this->get_opacity();
HXDLIN( 969)		int _hx_tmp2 = this->get_color();
HXDLIN( 969)		::Array< ::Dynamic> _hx_tmp3 = this->transformations;
HXDLIN( 969)		_hx_tmp->drawCharacters(text,start,length,( (float)(_hx_tmp1) ),_hx_tmp2,x,y,_hx_tmp3->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >(),::kha::graphics2::Graphics_obj::fontGlyphs);
            	}


 ::kha::Kravur Graphics2_obj::get_font(){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_973_get_font)
HXDLIN( 973)		return this->myFont;
            	}


 ::kha::Kravur Graphics2_obj::set_font( ::kha::Kravur font){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_976_set_font)
HXLINE( 977)		this->textPainter->setFont(font);
HXLINE( 978)		return (this->myFont = font);
            	}


int Graphics2_obj::set_fontSize(int value){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_982_set_fontSize)
HXDLIN( 982)		return this->super::set_fontSize((this->textPainter->fontSize = value));
            	}


void Graphics2_obj::drawLine(Float x1,Float y1,Float x2,Float y2,hx::Null< Float >  __o_strength){
Float strength = __o_strength.Default(((Float)1.0));
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_985_drawLine)
HXLINE( 986)		this->imagePainter->end();
HXLINE( 987)		this->textPainter->end();
HXLINE( 989)		 ::kha::math::FastVector2 vec;
HXLINE( 990)		if ((y2 == y1)) {
HXLINE( 990)			vec =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,0,-1);
            		}
            		else {
HXLINE( 991)			vec =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,1,(-((x2 - x1)) / (y2 - y1)));
            		}
HXLINE( 992)		vec->set_length(( (float)(strength) ));
HXLINE( 993)		Float p1 = (x1 + (((Float)0.5) * vec->x));
HXDLIN( 993)		 ::kha::math::FastVector2 p11 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,p1,(y1 + (((Float)0.5) * vec->y)));
HXLINE( 994)		Float p2 = (x2 + (((Float)0.5) * vec->x));
HXDLIN( 994)		 ::kha::math::FastVector2 p21 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,p2,(y2 + (((Float)0.5) * vec->y)));
HXLINE( 995)		float p3 = (p11->x - vec->x);
HXDLIN( 995)		 ::kha::math::FastVector2 p31 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,p3,(p11->y - vec->y));
HXLINE( 996)		float p4 = (p21->x - vec->x);
HXDLIN( 996)		 ::kha::math::FastVector2 p41 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,p4,(p21->y - vec->y));
HXLINE( 998)		::Array< ::Dynamic> _this = this->transformations;
HXDLIN( 998)		 ::kha::math::FastMatrix3 _this1 = _this->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 998)		float w = (_this1->_02 * p11->x);
HXDLIN( 998)		float w1 = ((w + (_this1->_12 * p11->y)) + _this1->_22);
HXDLIN( 998)		float x = (_this1->_00 * p11->x);
HXDLIN( 998)		Float x3 = (( (Float)(((x + (_this1->_10 * p11->y)) + _this1->_20)) ) / ( (Float)(w1) ));
HXDLIN( 998)		float y = (_this1->_01 * p11->x);
HXDLIN( 998)		Float y3 = (( (Float)(((y + (_this1->_11 * p11->y)) + _this1->_21)) ) / ( (Float)(w1) ));
HXDLIN( 998)		p11 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x3,y3);
HXLINE( 999)		::Array< ::Dynamic> _this2 = this->transformations;
HXDLIN( 999)		 ::kha::math::FastMatrix3 _this3 = _this2->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 999)		float w2 = (_this3->_02 * p21->x);
HXDLIN( 999)		float w3 = ((w2 + (_this3->_12 * p21->y)) + _this3->_22);
HXDLIN( 999)		float x4 = (_this3->_00 * p21->x);
HXDLIN( 999)		Float x5 = (( (Float)(((x4 + (_this3->_10 * p21->y)) + _this3->_20)) ) / ( (Float)(w3) ));
HXDLIN( 999)		float y4 = (_this3->_01 * p21->x);
HXDLIN( 999)		Float y5 = (( (Float)(((y4 + (_this3->_11 * p21->y)) + _this3->_21)) ) / ( (Float)(w3) ));
HXDLIN( 999)		p21 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x5,y5);
HXLINE(1000)		::Array< ::Dynamic> _this4 = this->transformations;
HXDLIN(1000)		 ::kha::math::FastMatrix3 _this5 = _this4->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN(1000)		float w4 = (_this5->_02 * p31->x);
HXDLIN(1000)		float w5 = ((w4 + (_this5->_12 * p31->y)) + _this5->_22);
HXDLIN(1000)		float x6 = (_this5->_00 * p31->x);
HXDLIN(1000)		Float x7 = (( (Float)(((x6 + (_this5->_10 * p31->y)) + _this5->_20)) ) / ( (Float)(w5) ));
HXDLIN(1000)		float y6 = (_this5->_01 * p31->x);
HXDLIN(1000)		Float y7 = (( (Float)(((y6 + (_this5->_11 * p31->y)) + _this5->_21)) ) / ( (Float)(w5) ));
HXDLIN(1000)		p31 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x7,y7);
HXLINE(1001)		::Array< ::Dynamic> _this6 = this->transformations;
HXDLIN(1001)		 ::kha::math::FastMatrix3 _this7 = _this6->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN(1001)		float w6 = (_this7->_02 * p41->x);
HXDLIN(1001)		float w7 = ((w6 + (_this7->_12 * p41->y)) + _this7->_22);
HXDLIN(1001)		float x8 = (_this7->_00 * p41->x);
HXDLIN(1001)		Float x9 = (( (Float)(((x8 + (_this7->_10 * p41->y)) + _this7->_20)) ) / ( (Float)(w7) ));
HXDLIN(1001)		float y8 = (_this7->_01 * p41->x);
HXDLIN(1001)		Float y9 = (( (Float)(((y8 + (_this7->_11 * p41->y)) + _this7->_21)) ) / ( (Float)(w7) ));
HXDLIN(1001)		p41 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x9,y9);
HXLINE(1003)		 ::kha::graphics4::ColoredShaderPainter _hx_tmp = this->coloredPainter;
HXDLIN(1003)		Float _hx_tmp1 = this->get_opacity();
HXDLIN(1003)		int _hx_tmp2 = this->get_color();
HXDLIN(1003)		_hx_tmp->fillTriangle(( (float)(_hx_tmp1) ),_hx_tmp2,( (Float)(p11->x) ),( (Float)(p11->y) ),( (Float)(p21->x) ),( (Float)(p21->y) ),( (Float)(p31->x) ),( (Float)(p31->y) ));
HXLINE(1004)		 ::kha::graphics4::ColoredShaderPainter _hx_tmp3 = this->coloredPainter;
HXDLIN(1004)		Float _hx_tmp4 = this->get_opacity();
HXDLIN(1004)		int _hx_tmp5 = this->get_color();
HXDLIN(1004)		_hx_tmp3->fillTriangle(( (float)(_hx_tmp4) ),_hx_tmp5,( (Float)(p31->x) ),( (Float)(p31->y) ),( (Float)(p21->x) ),( (Float)(p21->y) ),( (Float)(p41->x) ),( (Float)(p41->y) ));
            	}


void Graphics2_obj::fillTriangle(Float x1,Float y1,Float x2,Float y2,Float x3,Float y3){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1007_fillTriangle)
HXLINE(1008)		this->imagePainter->end();
HXLINE(1009)		this->textPainter->end();
HXLINE(1011)		::Array< ::Dynamic> _this = this->transformations;
HXDLIN(1011)		 ::kha::math::FastMatrix3 _this1 = _this->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN(1011)		float value_x = ( (float)(x1) );
HXDLIN(1011)		float value_y = ( (float)(y1) );
HXDLIN(1011)		float w = (_this1->_02 * value_x);
HXDLIN(1011)		float w1 = ((w + (_this1->_12 * value_y)) + _this1->_22);
HXDLIN(1011)		float x = (_this1->_00 * value_x);
HXDLIN(1011)		Float x4 = (( (Float)(((x + (_this1->_10 * value_y)) + _this1->_20)) ) / ( (Float)(w1) ));
HXDLIN(1011)		float y = (_this1->_01 * value_x);
HXDLIN(1011)		Float y4 = (( (Float)(((y + (_this1->_11 * value_y)) + _this1->_21)) ) / ( (Float)(w1) ));
HXDLIN(1011)		float p1_x = ( (float)(x4) );
HXDLIN(1011)		float p1_y = ( (float)(y4) );
HXLINE(1012)		::Array< ::Dynamic> _this2 = this->transformations;
HXDLIN(1012)		 ::kha::math::FastMatrix3 _this3 = _this2->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN(1012)		float value_x1 = ( (float)(x2) );
HXDLIN(1012)		float value_y1 = ( (float)(y2) );
HXDLIN(1012)		float w2 = (_this3->_02 * value_x1);
HXDLIN(1012)		float w3 = ((w2 + (_this3->_12 * value_y1)) + _this3->_22);
HXDLIN(1012)		float x5 = (_this3->_00 * value_x1);
HXDLIN(1012)		Float x6 = (( (Float)(((x5 + (_this3->_10 * value_y1)) + _this3->_20)) ) / ( (Float)(w3) ));
HXDLIN(1012)		float y5 = (_this3->_01 * value_x1);
HXDLIN(1012)		Float y6 = (( (Float)(((y5 + (_this3->_11 * value_y1)) + _this3->_21)) ) / ( (Float)(w3) ));
HXDLIN(1012)		float p2_x = ( (float)(x6) );
HXDLIN(1012)		float p2_y = ( (float)(y6) );
HXLINE(1013)		::Array< ::Dynamic> _this4 = this->transformations;
HXDLIN(1013)		 ::kha::math::FastMatrix3 _this5 = _this4->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN(1013)		float value_x2 = ( (float)(x3) );
HXDLIN(1013)		float value_y2 = ( (float)(y3) );
HXDLIN(1013)		float w4 = (_this5->_02 * value_x2);
HXDLIN(1013)		float w5 = ((w4 + (_this5->_12 * value_y2)) + _this5->_22);
HXDLIN(1013)		float x7 = (_this5->_00 * value_x2);
HXDLIN(1013)		Float x8 = (( (Float)(((x7 + (_this5->_10 * value_y2)) + _this5->_20)) ) / ( (Float)(w5) ));
HXDLIN(1013)		float y7 = (_this5->_01 * value_x2);
HXDLIN(1013)		Float y8 = (( (Float)(((y7 + (_this5->_11 * value_y2)) + _this5->_21)) ) / ( (Float)(w5) ));
HXDLIN(1013)		float p3_x = ( (float)(x8) );
HXDLIN(1013)		float p3_y = ( (float)(y8) );
HXLINE(1014)		 ::kha::graphics4::ColoredShaderPainter _hx_tmp = this->coloredPainter;
HXDLIN(1014)		Float _hx_tmp1 = this->get_opacity();
HXDLIN(1014)		_hx_tmp->fillTriangle(( (float)(_hx_tmp1) ),this->get_color(),( (Float)(p1_x) ),( (Float)(p1_y) ),( (Float)(p2_x) ),( (Float)(p2_y) ),( (Float)(p3_x) ),( (Float)(p3_y) ));
            	}


 ::kha::graphics2::ImageScaleQuality Graphics2_obj::get_imageScaleQuality(){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1020_get_imageScaleQuality)
HXDLIN(1020)		return this->myImageScaleQuality;
            	}


 ::kha::graphics2::ImageScaleQuality Graphics2_obj::set_imageScaleQuality( ::kha::graphics2::ImageScaleQuality value){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1023_set_imageScaleQuality)
HXLINE(1024)		 ::kha::graphics4::ImageShaderPainter _hx_tmp = this->imagePainter;
HXDLIN(1024)		_hx_tmp->setBilinearFilter(hx::IsEq( value,::kha::graphics2::ImageScaleQuality_obj::High_dyn() ));
HXLINE(1025)		 ::kha::graphics4::TextShaderPainter _hx_tmp1 = this->textPainter;
HXDLIN(1025)		_hx_tmp1->setBilinearFilter(hx::IsEq( value,::kha::graphics2::ImageScaleQuality_obj::High_dyn() ));
HXLINE(1026)		return (this->myImageScaleQuality = value);
            	}


 ::kha::graphics2::ImageScaleQuality Graphics2_obj::get_mipmapScaleQuality(){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1032_get_mipmapScaleQuality)
HXDLIN(1032)		return this->myMipmapScaleQuality;
            	}


 ::kha::graphics2::ImageScaleQuality Graphics2_obj::set_mipmapScaleQuality( ::kha::graphics2::ImageScaleQuality value){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1035_set_mipmapScaleQuality)
HXLINE(1036)		 ::kha::graphics4::ImageShaderPainter _hx_tmp = this->imagePainter;
HXDLIN(1036)		_hx_tmp->setBilinearMipmapFilter(hx::IsEq( value,::kha::graphics2::ImageScaleQuality_obj::High_dyn() ));
HXLINE(1038)		return (this->myMipmapScaleQuality = value);
            	}


void Graphics2_obj::setPipeline( ::kha::graphics4::PipelineState pipeline){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1041_setPipeline)
HXLINE(1042)		this->flush();
HXLINE(1043)		this->imagePainter->set_pipeline(pipeline);
HXLINE(1044)		this->coloredPainter->set_pipeline(pipeline);
HXLINE(1045)		this->textPainter->set_pipeline(pipeline);
HXLINE(1046)		if (hx::IsNotNull( pipeline )) {
HXLINE(1046)			::kha::graphics4::Graphics_obj::setPipeline(this->g,pipeline);
            		}
            	}


void Graphics2_obj::scissor(int x,int y,int width,int height){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1049_scissor)
HXLINE(1050)		this->flush();
HXLINE(1051)		::kha::graphics4::Graphics_obj::scissor(this->g,x,y,width,height);
            	}


void Graphics2_obj::disableScissor(){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1054_disableScissor)
HXLINE(1055)		this->flush();
HXLINE(1056)		::kha::graphics4::Graphics_obj::disableScissor(this->g);
            	}


void Graphics2_obj::begin(hx::Null< bool >  __o_clear, ::Dynamic clearColor){
bool clear = __o_clear.Default(true);
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1059_begin)
HXLINE(1060)		::kha::graphics4::Graphics_obj::begin(this->g,null());
HXLINE(1061)		if (clear) {
HXLINE(1061)			this->clear(clearColor);
            		}
HXLINE(1062)		this->setProjection();
            	}


void Graphics2_obj::clear( ::Dynamic color){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1065_clear)
HXLINE(1066)		this->flush();
HXLINE(1067)		 ::Dynamic _hx_tmp;
HXDLIN(1067)		if (hx::IsNull( color )) {
HXLINE(1067)			_hx_tmp = -16777216;
            		}
            		else {
HXLINE(1067)			_hx_tmp = color;
            		}
HXDLIN(1067)		::kha::graphics4::Graphics_obj::clear(this->g,_hx_tmp,null(),null());
            	}


void Graphics2_obj::flush(){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1070_flush)
HXLINE(1071)		this->imagePainter->end();
HXLINE(1072)		this->textPainter->end();
HXLINE(1073)		{
HXLINE(1073)			 ::kha::graphics4::ColoredShaderPainter _this = this->coloredPainter;
HXDLIN(1073)			if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > 0)) {
HXLINE(1073)				_this->drawTriBuffer(false);
            			}
HXDLIN(1073)			if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > 0)) {
HXLINE(1073)				_this->drawBuffer(false);
            			}
            		}
            	}


void Graphics2_obj::end(){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1076_end)
HXLINE(1077)		this->flush();
HXLINE(1078)		::kha::graphics4::Graphics_obj::end(this->g);
            	}


void Graphics2_obj::drawVideoInternal( ::kha::Video video,Float x,Float y,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1081_drawVideoInternal)
            	}


HX_DEFINE_DYNAMIC_FUNC5(Graphics2_obj,drawVideoInternal,(void))

void Graphics2_obj::drawVideo( ::kha::Video video,Float x,Float y,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1085_drawVideo)
HXLINE(1086)		this->setPipeline(::kha::graphics4::Graphics2_obj::videoPipeline);
HXLINE(1087)		this->drawVideoInternal(video,x,y,width,height);
HXLINE(1088)		this->setPipeline(null());
            	}


 ::kha::graphics4::PipelineState Graphics2_obj::videoPipeline;

int Graphics2_obj::upperPowerOfTwo(int v){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_824_upperPowerOfTwo)
HXLINE( 825)		v = (v - 1);
HXLINE( 826)		v = (v | hx::UShr(v,1));
HXLINE( 827)		v = (v | hx::UShr(v,2));
HXLINE( 828)		v = (v | hx::UShr(v,4));
HXLINE( 829)		v = (v | hx::UShr(v,8));
HXLINE( 830)		v = (v | hx::UShr(v,16));
HXLINE( 831)		v = (v + 1);
HXLINE( 832)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Graphics2_obj,upperPowerOfTwo,return )

 ::kha::graphics4::VertexStructure Graphics2_obj::createImageVertexStructure(){
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_1091_createImageVertexStructure)
HXLINE(1092)		 ::kha::graphics4::VertexStructure structure =  ::kha::graphics4::VertexStructure_obj::__alloc( HX_CTX );
HXLINE(1093)		structure->add(HX_("vertexPosition",2d,3c,14,50),2);
HXLINE(1094)		structure->add(HX_("texPosition",b0,79,ff,c7),1);
HXLINE(1095)		structure->add(HX_("vertexColor",5f,3b,98,5e),3);
HXLINE(1096)		return structure;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Graphics2_obj,createImageVertexStructure,return )

 ::kha::graphics4::PipelineState Graphics2_obj::createImagePipeline( ::kha::graphics4::VertexStructure structure){
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_1099_createImagePipeline)
HXLINE(1100)		 ::kha::graphics4::PipelineState shaderPipeline =  ::kha::graphics4::PipelineState_obj::__alloc( HX_CTX );
HXLINE(1101)		shaderPipeline->fragmentShader = ::kha::Shaders_obj::painter_image_frag;
HXLINE(1102)		shaderPipeline->vertexShader = ::kha::Shaders_obj::painter_image_vert;
HXLINE(1103)		shaderPipeline->inputLayout = ::Array_obj< ::Dynamic>::__new(1)->init(0,structure);
HXLINE(1104)		shaderPipeline->blendSource = ::kha::graphics4::BlendingFactor_obj::BlendOne_dyn();
HXLINE(1105)		shaderPipeline->blendDestination = ::kha::graphics4::BlendingFactor_obj::InverseSourceAlpha_dyn();
HXLINE(1106)		shaderPipeline->alphaBlendSource = ::kha::graphics4::BlendingFactor_obj::BlendOne_dyn();
HXLINE(1107)		shaderPipeline->alphaBlendDestination = ::kha::graphics4::BlendingFactor_obj::InverseSourceAlpha_dyn();
HXLINE(1108)		return shaderPipeline;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Graphics2_obj,createImagePipeline,return )

 ::kha::graphics4::VertexStructure Graphics2_obj::createColoredVertexStructure(){
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_1111_createColoredVertexStructure)
HXLINE(1112)		 ::kha::graphics4::VertexStructure structure =  ::kha::graphics4::VertexStructure_obj::__alloc( HX_CTX );
HXLINE(1113)		structure->add(HX_("vertexPosition",2d,3c,14,50),2);
HXLINE(1114)		structure->add(HX_("vertexColor",5f,3b,98,5e),3);
HXLINE(1115)		return structure;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Graphics2_obj,createColoredVertexStructure,return )

 ::kha::graphics4::PipelineState Graphics2_obj::createColoredPipeline( ::kha::graphics4::VertexStructure structure){
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_1118_createColoredPipeline)
HXLINE(1119)		 ::kha::graphics4::PipelineState shaderPipeline =  ::kha::graphics4::PipelineState_obj::__alloc( HX_CTX );
HXLINE(1120)		shaderPipeline->fragmentShader = ::kha::Shaders_obj::painter_colored_frag;
HXLINE(1121)		shaderPipeline->vertexShader = ::kha::Shaders_obj::painter_colored_vert;
HXLINE(1122)		shaderPipeline->inputLayout = ::Array_obj< ::Dynamic>::__new(1)->init(0,structure);
HXLINE(1123)		shaderPipeline->blendSource = ::kha::graphics4::BlendingFactor_obj::SourceAlpha_dyn();
HXLINE(1124)		shaderPipeline->blendDestination = ::kha::graphics4::BlendingFactor_obj::InverseSourceAlpha_dyn();
HXLINE(1125)		shaderPipeline->alphaBlendSource = ::kha::graphics4::BlendingFactor_obj::SourceAlpha_dyn();
HXLINE(1126)		shaderPipeline->alphaBlendDestination = ::kha::graphics4::BlendingFactor_obj::InverseSourceAlpha_dyn();
HXLINE(1127)		return shaderPipeline;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Graphics2_obj,createColoredPipeline,return )

 ::kha::graphics4::VertexStructure Graphics2_obj::createTextVertexStructure(){
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_1130_createTextVertexStructure)
HXLINE(1131)		 ::kha::graphics4::VertexStructure structure =  ::kha::graphics4::VertexStructure_obj::__alloc( HX_CTX );
HXLINE(1132)		structure->add(HX_("vertexPosition",2d,3c,14,50),2);
HXLINE(1133)		structure->add(HX_("texPosition",b0,79,ff,c7),1);
HXLINE(1134)		structure->add(HX_("vertexColor",5f,3b,98,5e),3);
HXLINE(1135)		return structure;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Graphics2_obj,createTextVertexStructure,return )

 ::kha::graphics4::PipelineState Graphics2_obj::createTextPipeline( ::kha::graphics4::VertexStructure structure){
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_1138_createTextPipeline)
HXLINE(1139)		 ::kha::graphics4::PipelineState shaderPipeline =  ::kha::graphics4::PipelineState_obj::__alloc( HX_CTX );
HXLINE(1140)		shaderPipeline->fragmentShader = ::kha::Shaders_obj::painter_text_frag;
HXLINE(1141)		shaderPipeline->vertexShader = ::kha::Shaders_obj::painter_text_vert;
HXLINE(1142)		shaderPipeline->inputLayout = ::Array_obj< ::Dynamic>::__new(1)->init(0,structure);
HXLINE(1143)		shaderPipeline->blendSource = ::kha::graphics4::BlendingFactor_obj::SourceAlpha_dyn();
HXLINE(1144)		shaderPipeline->blendDestination = ::kha::graphics4::BlendingFactor_obj::InverseSourceAlpha_dyn();
HXLINE(1145)		shaderPipeline->alphaBlendSource = ::kha::graphics4::BlendingFactor_obj::SourceAlpha_dyn();
HXLINE(1146)		shaderPipeline->alphaBlendDestination = ::kha::graphics4::BlendingFactor_obj::InverseSourceAlpha_dyn();
HXLINE(1147)		return shaderPipeline;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Graphics2_obj,createTextPipeline,return )


hx::ObjectPtr< Graphics2_obj > Graphics2_obj::__new(::Dynamic canvas) {
	hx::ObjectPtr< Graphics2_obj > __this = new Graphics2_obj();
	__this->__construct(canvas);
	return __this;
}

hx::ObjectPtr< Graphics2_obj > Graphics2_obj::__alloc(hx::Ctx *_hx_ctx,::Dynamic canvas) {
	Graphics2_obj *__this = (Graphics2_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Graphics2_obj), true, "kha.graphics4.Graphics2"));
	*(void **)__this = Graphics2_obj::_hx_vtable;
	__this->__construct(canvas);
	return __this;
}

Graphics2_obj::Graphics2_obj()
{
}

void Graphics2_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Graphics2);
	HX_MARK_MEMBER_NAME(myColor,"myColor");
	HX_MARK_MEMBER_NAME(myFont,"myFont");
	HX_MARK_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_MARK_MEMBER_NAME(imagePainter,"imagePainter");
	HX_MARK_MEMBER_NAME(coloredPainter,"coloredPainter");
	HX_MARK_MEMBER_NAME(textPainter,"textPainter");
	HX_MARK_MEMBER_NAME(canvas,"canvas");
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(myImageScaleQuality,"myImageScaleQuality");
	HX_MARK_MEMBER_NAME(myMipmapScaleQuality,"myMipmapScaleQuality");
	 ::kha::graphics2::Graphics_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Graphics2_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(myColor,"myColor");
	HX_VISIT_MEMBER_NAME(myFont,"myFont");
	HX_VISIT_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_VISIT_MEMBER_NAME(imagePainter,"imagePainter");
	HX_VISIT_MEMBER_NAME(coloredPainter,"coloredPainter");
	HX_VISIT_MEMBER_NAME(textPainter,"textPainter");
	HX_VISIT_MEMBER_NAME(canvas,"canvas");
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(myImageScaleQuality,"myImageScaleQuality");
	HX_VISIT_MEMBER_NAME(myMipmapScaleQuality,"myMipmapScaleQuality");
	 ::kha::graphics2::Graphics_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Graphics2_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"flush") ) { return hx::Val( flush_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"myFont") ) { return hx::Val( myFont ); }
		if (HX_FIELD_EQ(inName,"canvas") ) { return hx::Val( canvas ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"myColor") ) { return hx::Val( myColor ); }
		if (HX_FIELD_EQ(inName,"scissor") ) { return hx::Val( scissor_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"drawRect") ) { return hx::Val( drawRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"fillRect") ) { return hx::Val( fillRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_font") ) { return hx::Val( get_font_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_font") ) { return hx::Val( set_font_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawLine") ) { return hx::Val( drawLine_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"drawImage") ) { return hx::Val( drawImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_color") ) { return hx::Val( get_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawVideo") ) { return hx::Val( drawVideo_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"drawString") ) { return hx::Val( drawString_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"textPainter") ) { return hx::Val( textPainter ); }
		if (HX_FIELD_EQ(inName,"setPipeline") ) { return hx::Val( setPipeline_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"imagePainter") ) { return hx::Val( imagePainter ); }
		if (HX_FIELD_EQ(inName,"set_fontSize") ) { return hx::Val( set_fontSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"fillTriangle") ) { return hx::Val( fillTriangle_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setProjection") ) { return hx::Val( setProjection_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"coloredPainter") ) { return hx::Val( coloredPainter ); }
		if (HX_FIELD_EQ(inName,"drawCharacters") ) { return hx::Val( drawCharacters_dyn() ); }
		if (HX_FIELD_EQ(inName,"disableScissor") ) { return hx::Val( disableScissor_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { return hx::Val( projectionMatrix ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"drawVideoInternal") ) { return hx::Val( drawVideoInternal_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"drawScaledSubImage") ) { return hx::Val( drawScaledSubImage_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"myImageScaleQuality") ) { return hx::Val( myImageScaleQuality ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"myMipmapScaleQuality") ) { return hx::Val( myMipmapScaleQuality ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_imageScaleQuality") ) { return hx::Val( get_imageScaleQuality_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_imageScaleQuality") ) { return hx::Val( set_imageScaleQuality_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_mipmapScaleQuality") ) { return hx::Val( get_mipmapScaleQuality_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_mipmapScaleQuality") ) { return hx::Val( set_mipmapScaleQuality_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Graphics2_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"videoPipeline") ) { outValue = ( videoPipeline ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"upperPowerOfTwo") ) { outValue = upperPowerOfTwo_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"createTextPipeline") ) { outValue = createTextPipeline_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"createImagePipeline") ) { outValue = createImagePipeline_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"createColoredPipeline") ) { outValue = createColoredPipeline_dyn(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"createTextVertexStructure") ) { outValue = createTextVertexStructure_dyn(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"createImageVertexStructure") ) { outValue = createImageVertexStructure_dyn(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"createColoredVertexStructure") ) { outValue = createColoredVertexStructure_dyn(); return true; }
	}
	return false;
}

hx::Val Graphics2_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"myFont") ) { myFont=inValue.Cast<  ::kha::Kravur >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canvas") ) { canvas=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"myColor") ) { myColor=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"textPainter") ) { textPainter=inValue.Cast<  ::kha::graphics4::TextShaderPainter >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"imagePainter") ) { imagePainter=inValue.Cast<  ::kha::graphics4::ImageShaderPainter >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"coloredPainter") ) { coloredPainter=inValue.Cast<  ::kha::graphics4::ColoredShaderPainter >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { projectionMatrix=inValue.Cast<  ::kha::math::FastMatrix4 >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"myImageScaleQuality") ) { myImageScaleQuality=inValue.Cast<  ::kha::graphics2::ImageScaleQuality >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"myMipmapScaleQuality") ) { myMipmapScaleQuality=inValue.Cast<  ::kha::graphics2::ImageScaleQuality >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Graphics2_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"videoPipeline") ) { videoPipeline=ioValue.Cast<  ::kha::graphics4::PipelineState >(); return true; }
	}
	return false;
}

void Graphics2_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("myColor",57,1a,5c,f3));
	outFields->push(HX_("myFont",5b,0f,fc,6e));
	outFields->push(HX_("projectionMatrix",30,88,bb,d0));
	outFields->push(HX_("imagePainter",70,2d,eb,a7));
	outFields->push(HX_("coloredPainter",29,a7,40,dc));
	outFields->push(HX_("textPainter",5e,ae,a2,93));
	outFields->push(HX_("canvas",d8,54,42,b8));
	outFields->push(HX_("g",67,00,00,00));
	outFields->push(HX_("myImageScaleQuality",44,72,83,ee));
	outFields->push(HX_("myMipmapScaleQuality",89,17,d9,b9));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Graphics2_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Graphics2_obj,myColor),HX_("myColor",57,1a,5c,f3)},
	{hx::fsObject /*::kha::Kravur*/ ,(int)offsetof(Graphics2_obj,myFont),HX_("myFont",5b,0f,fc,6e)},
	{hx::fsObject /*::kha::math::FastMatrix4*/ ,(int)offsetof(Graphics2_obj,projectionMatrix),HX_("projectionMatrix",30,88,bb,d0)},
	{hx::fsObject /*::kha::graphics4::ImageShaderPainter*/ ,(int)offsetof(Graphics2_obj,imagePainter),HX_("imagePainter",70,2d,eb,a7)},
	{hx::fsObject /*::kha::graphics4::ColoredShaderPainter*/ ,(int)offsetof(Graphics2_obj,coloredPainter),HX_("coloredPainter",29,a7,40,dc)},
	{hx::fsObject /*::kha::graphics4::TextShaderPainter*/ ,(int)offsetof(Graphics2_obj,textPainter),HX_("textPainter",5e,ae,a2,93)},
	{hx::fsObject /*::kha::Canvas*/ ,(int)offsetof(Graphics2_obj,canvas),HX_("canvas",d8,54,42,b8)},
	{hx::fsObject /*::kha::graphics4::Graphics*/ ,(int)offsetof(Graphics2_obj,g),HX_("g",67,00,00,00)},
	{hx::fsObject /*::kha::graphics2::ImageScaleQuality*/ ,(int)offsetof(Graphics2_obj,myImageScaleQuality),HX_("myImageScaleQuality",44,72,83,ee)},
	{hx::fsObject /*::kha::graphics2::ImageScaleQuality*/ ,(int)offsetof(Graphics2_obj,myMipmapScaleQuality),HX_("myMipmapScaleQuality",89,17,d9,b9)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Graphics2_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::kha::graphics4::PipelineState*/ ,(void *) &Graphics2_obj::videoPipeline,HX_("videoPipeline",bd,fe,62,ee)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Graphics2_obj_sMemberFields[] = {
	HX_("myColor",57,1a,5c,f3),
	HX_("myFont",5b,0f,fc,6e),
	HX_("projectionMatrix",30,88,bb,d0),
	HX_("imagePainter",70,2d,eb,a7),
	HX_("coloredPainter",29,a7,40,dc),
	HX_("textPainter",5e,ae,a2,93),
	HX_("canvas",d8,54,42,b8),
	HX_("g",67,00,00,00),
	HX_("setProjection",d1,c6,03,66),
	HX_("drawImage",b7,54,74,85),
	HX_("drawScaledSubImage",99,85,bc,e8),
	HX_("get_color",ba,cd,05,8e),
	HX_("set_color",c6,b9,56,71),
	HX_("drawRect",48,f7,10,60),
	HX_("fillRect",47,45,b9,6c),
	HX_("drawString",f5,a3,f3,52),
	HX_("drawCharacters",ce,35,d8,38),
	HX_("get_font",58,19,7b,c3),
	HX_("set_font",cc,72,d8,71),
	HX_("set_fontSize",ad,95,e4,98),
	HX_("drawLine",18,c2,1c,5c),
	HX_("fillTriangle",6b,04,3a,92),
	HX_("myImageScaleQuality",44,72,83,ee),
	HX_("get_imageScaleQuality",27,2e,de,f3),
	HX_("set_imageScaleQuality",33,fc,e6,47),
	HX_("myMipmapScaleQuality",89,17,d9,b9),
	HX_("get_mipmapScaleQuality",46,c2,e2,63),
	HX_("set_mipmapScaleQuality",ba,3e,8e,97),
	HX_("setPipeline",e4,84,e4,7b),
	HX_("scissor",1c,28,e7,04),
	HX_("disableScissor",14,73,66,02),
	HX_("begin",29,ea,55,b0),
	HX_("clear",8d,71,5b,48),
	HX_("flush",c4,62,9b,02),
	HX_("end",db,03,4d,00),
	HX_("drawVideoInternal",34,9c,df,df),
	HX_("drawVideo",d7,49,07,ff),
	::String(null()) };

static void Graphics2_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Graphics2_obj::videoPipeline,"videoPipeline");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Graphics2_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Graphics2_obj::videoPipeline,"videoPipeline");
};

#endif

hx::Class Graphics2_obj::__mClass;

static ::String Graphics2_obj_sStaticFields[] = {
	HX_("videoPipeline",bd,fe,62,ee),
	HX_("upperPowerOfTwo",72,2a,fd,fb),
	HX_("createImageVertexStructure",30,ec,84,dd),
	HX_("createImagePipeline",01,25,7d,0b),
	HX_("createColoredVertexStructure",e9,c5,e5,bc),
	HX_("createColoredPipeline",28,ce,c2,d2),
	HX_("createTextVertexStructure",66,30,f9,b4),
	HX_("createTextPipeline",0b,76,1d,7a),
	::String(null())
};

void Graphics2_obj::__register()
{
	Graphics2_obj _hx_dummy;
	Graphics2_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("kha.graphics4.Graphics2",f8,6b,fa,cf);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Graphics2_obj::__GetStatic;
	__mClass->mSetStaticField = &Graphics2_obj::__SetStatic;
	__mClass->mMarkFunc = Graphics2_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Graphics2_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Graphics2_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Graphics2_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Graphics2_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Graphics2_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Graphics2_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace graphics4
