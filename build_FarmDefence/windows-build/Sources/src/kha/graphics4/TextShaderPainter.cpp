// Generated by Haxe 4.0.0-preview.4+6e012c1
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_7d028c26efabce49
#define INCLUDED_7d028c26efabce49
#include "cpp_uint32array.h"
#endif
#ifndef INCLUDED_kha_AlignedQuad
#include <hxinc/kha/AlignedQuad.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Kravur
#include <hxinc/kha/Kravur.h>
#endif
#ifndef INCLUDED_kha_KravurImage
#include <hxinc/kha/KravurImage.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_arrays_Uint32ArrayPrivate
#include <hxinc/kha/arrays/Uint32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_BlendingFactor
#include <hxinc/kha/graphics4/BlendingFactor.h>
#endif
#ifndef INCLUDED_kha_graphics4_ConstantLocation
#include <hxinc/kha/graphics4/ConstantLocation.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <hxinc/kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics2
#include <hxinc/kha/graphics4/Graphics2.h>
#endif
#ifndef INCLUDED_kha_graphics4_IndexBuffer
#include <hxinc/kha/graphics4/IndexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_MipMapFilter
#include <hxinc/kha/graphics4/MipMapFilter.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <hxinc/kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <hxinc/kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextShaderPainter
#include <hxinc/kha/graphics4/TextShaderPainter.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureAddressing
#include <hxinc/kha/graphics4/TextureAddressing.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureFilter
#include <hxinc/kha/graphics4/TextureFilter.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureUnit
#include <hxinc/kha/graphics4/TextureUnit.h>
#endif
#ifndef INCLUDED_kha_graphics4_Usage
#include <hxinc/kha/graphics4/Usage.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexBuffer
#include <hxinc/kha/graphics4/VertexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexStructure
#include <hxinc/kha/graphics4/VertexStructure.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix3
#include <hxinc/kha/math/FastMatrix3.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_514_new,"kha.graphics4.TextShaderPainter","new",0x421e3fdc,"kha.graphics4.TextShaderPainter.new","kha/graphics4/Graphics2.hx",514,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_546_get_pipeline,"kha.graphics4.TextShaderPainter","get_pipeline",0xa39f302f,"kha.graphics4.TextShaderPainter.get_pipeline","kha/graphics4/Graphics2.hx",546,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_549_set_pipeline,"kha.graphics4.TextShaderPainter","set_pipeline",0xb89853a3,"kha.graphics4.TextShaderPainter.set_pipeline","kha/graphics4/Graphics2.hx",549,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_562_setProjection,"kha.graphics4.TextShaderPainter","setProjection",0x648ae94d,"kha.graphics4.TextShaderPainter.setProjection","kha/graphics4/Graphics2.hx",562,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_576_initBuffers,"kha.graphics4.TextShaderPainter","initBuffers",0x5f3b5dbf,"kha.graphics4.TextShaderPainter.initBuffers","kha/graphics4/Graphics2.hx",576,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_598_setRectVertices,"kha.graphics4.TextShaderPainter","setRectVertices",0x7c1e197b,"kha.graphics4.TextShaderPainter.setRectVertices","kha/graphics4/Graphics2.hx",598,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_617_setRectTexCoords,"kha.graphics4.TextShaderPainter","setRectTexCoords",0x56b955a3,"kha.graphics4.TextShaderPainter.setRectTexCoords","kha/graphics4/Graphics2.hx",617,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_632_setRectColors,"kha.graphics4.TextShaderPainter","setRectColors",0x6bbe5ab2,"kha.graphics4.TextShaderPainter.setRectColors","kha/graphics4/Graphics2.hx",632,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_656_drawBuffer,"kha.graphics4.TextShaderPainter","drawBuffer",0x91b8f028,"kha.graphics4.TextShaderPainter.drawBuffer","kha/graphics4/Graphics2.hx",656,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_678_setBilinearFilter,"kha.graphics4.TextShaderPainter","setBilinearFilter",0x674edb82,"kha.graphics4.TextShaderPainter.setBilinearFilter","kha/graphics4/Graphics2.hx",678,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_684_setFont,"kha.graphics4.TextShaderPainter","setFont",0xd8227c0d,"kha.graphics4.TextShaderPainter.setFont","kha/graphics4/Graphics2.hx",684,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_695_startString,"kha.graphics4.TextShaderPainter","startString",0x7e56d24f,"kha.graphics4.TextShaderPainter.startString","kha/graphics4/Graphics2.hx",695,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_704_charCodeAt,"kha.graphics4.TextShaderPainter","charCodeAt",0xb4b59efa,"kha.graphics4.TextShaderPainter.charCodeAt","kha/graphics4/Graphics2.hx",704,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_713_stringLength,"kha.graphics4.TextShaderPainter","stringLength",0xd961e59b,"kha.graphics4.TextShaderPainter.stringLength","kha/graphics4/Graphics2.hx",713,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_722_endString,"kha.graphics4.TextShaderPainter","endString",0xf93fab88,"kha.graphics4.TextShaderPainter.endString","kha/graphics4/Graphics2.hx",722,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_735_drawString,"kha.graphics4.TextShaderPainter","drawString",0xd2545bf9,"kha.graphics4.TextShaderPainter.drawString","kha/graphics4/Graphics2.hx",735,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_762_drawCharacters,"kha.graphics4.TextShaderPainter","drawCharacters",0xf08f3fd2,"kha.graphics4.TextShaderPainter.drawCharacters","kha/graphics4/Graphics2.hx",762,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_787_end,"kha.graphics4.TextShaderPainter","end",0x42177357,"kha.graphics4.TextShaderPainter.end","kha/graphics4/Graphics2.hx",787,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_565_initShaders,"kha.graphics4.TextShaderPainter","initShaders",0x0d313bfa,"kha.graphics4.TextShaderPainter.initShaders","kha/graphics4/Graphics2.hx",565,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_726_findIndex,"kha.graphics4.TextShaderPainter","findIndex",0x55390095,"kha.graphics4.TextShaderPainter.findIndex","kha/graphics4/Graphics2.hx",726,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_516_boot,"kha.graphics4.TextShaderPainter","boot",0x9072a136,"kha.graphics4.TextShaderPainter.boot","kha/graphics4/Graphics2.hx",516,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_517_boot,"kha.graphics4.TextShaderPainter","boot",0x9072a136,"kha.graphics4.TextShaderPainter.boot","kha/graphics4/Graphics2.hx",517,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_2f0b51a29d129e3b_518_boot,"kha.graphics4.TextShaderPainter","boot",0x9072a136,"kha.graphics4.TextShaderPainter.boot","kha/graphics4/Graphics2.hx",518,0x0c1de808)
namespace kha{
namespace graphics4{

void TextShaderPainter_obj::__construct(::Dynamic g4){
            	HX_GC_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_514_new)
HXLINE( 733)		this->bakedQuadCache =  ::kha::AlignedQuad_obj::__alloc( HX_CTX );
HXLINE( 534)		this->destinationBlend = ::kha::graphics4::BlendingFactor_obj::Undefined_dyn();
HXLINE( 533)		this->sourceBlend = ::kha::graphics4::BlendingFactor_obj::Undefined_dyn();
HXLINE( 531)		this->bilinear = false;
HXLINE( 526)		this->myPipeline = null();
HXLINE( 537)		this->g = g4;
HXLINE( 538)		::kha::graphics4::TextShaderPainter_obj::bufferIndex = 0;
HXLINE( 539)		::kha::graphics4::TextShaderPainter_obj::initShaders();
HXLINE( 540)		this->initBuffers();
HXLINE( 541)		this->projectionLocation = ::kha::graphics4::TextShaderPainter_obj::shaderPipeline->getConstantLocation(HX_("projectionMatrix",30,88,bb,d0));
HXLINE( 542)		this->textureLocation = ::kha::graphics4::TextShaderPainter_obj::shaderPipeline->getTextureUnit(HX_("tex",e7,5d,58,00));
            	}

Dynamic TextShaderPainter_obj::__CreateEmpty() { return new TextShaderPainter_obj; }

void *TextShaderPainter_obj::_hx_vtable = 0;

Dynamic TextShaderPainter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextShaderPainter_obj > _hx_result = new TextShaderPainter_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TextShaderPainter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x13f87604;
}

 ::kha::graphics4::PipelineState TextShaderPainter_obj::get_pipeline(){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_546_get_pipeline)
HXDLIN( 546)		return this->myPipeline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextShaderPainter_obj,get_pipeline,return )

 ::kha::graphics4::PipelineState TextShaderPainter_obj::set_pipeline( ::kha::graphics4::PipelineState pipe){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_549_set_pipeline)
HXLINE( 550)		if (hx::IsNull( pipe )) {
HXLINE( 551)			this->projectionLocation = ::kha::graphics4::TextShaderPainter_obj::shaderPipeline->getConstantLocation(HX_("projectionMatrix",30,88,bb,d0));
HXLINE( 552)			this->textureLocation = ::kha::graphics4::TextShaderPainter_obj::shaderPipeline->getTextureUnit(HX_("tex",e7,5d,58,00));
            		}
            		else {
HXLINE( 555)			this->projectionLocation = pipe->getConstantLocation(HX_("projectionMatrix",30,88,bb,d0));
HXLINE( 556)			this->textureLocation = pipe->getTextureUnit(HX_("tex",e7,5d,58,00));
            		}
HXLINE( 558)		return (this->myPipeline = pipe);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextShaderPainter_obj,set_pipeline,return )

void TextShaderPainter_obj::setProjection( ::kha::math::FastMatrix4 projectionMatrix){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_562_setProjection)
HXDLIN( 562)		this->projectionMatrix = projectionMatrix;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextShaderPainter_obj,setProjection,(void))

void TextShaderPainter_obj::initBuffers(){
            	HX_GC_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_576_initBuffers)
HXDLIN( 576)		if (hx::IsNull( ::kha::graphics4::TextShaderPainter_obj::rectVertexBuffer )) {
HXLINE( 577)			::kha::graphics4::TextShaderPainter_obj::rectVertexBuffer =  ::kha::graphics4::VertexBuffer_obj::__alloc( HX_CTX ,400,::kha::graphics4::TextShaderPainter_obj::structure,::kha::graphics4::Usage_obj::DynamicUsage_dyn(),null(),null());
HXLINE( 578)			::kha::graphics4::TextShaderPainter_obj::rectVertices = ::kha::graphics4::TextShaderPainter_obj::rectVertexBuffer->lock(null(),null());
HXLINE( 580)			::kha::graphics4::TextShaderPainter_obj::indexBuffer =  ::kha::graphics4::IndexBuffer_obj::__alloc( HX_CTX ,600,::kha::graphics4::Usage_obj::StaticUsage_dyn(),null());
HXLINE( 581)			 ::kha::arrays::Uint32ArrayPrivate indices = ::kha::graphics4::TextShaderPainter_obj::indexBuffer->lock(null(),null());
HXLINE( 582)			{
HXLINE( 582)				int _g = 0;
HXDLIN( 582)				while((_g < 100)){
HXLINE( 582)					_g = (_g + 1);
HXDLIN( 582)					int i = (_g - 1);
HXLINE( 583)					 uint32array indices1 = indices->self;
HXDLIN( 583)					indices1.set(((i * 3) * 2),(i * 4));
HXLINE( 584)					 uint32array indices2 = indices->self;
HXDLIN( 584)					indices2.set((((i * 3) * 2) + 1),((i * 4) + 1));
HXLINE( 585)					 uint32array indices3 = indices->self;
HXDLIN( 585)					indices3.set((((i * 3) * 2) + 2),((i * 4) + 2));
HXLINE( 586)					 uint32array indices4 = indices->self;
HXDLIN( 586)					indices4.set((((i * 3) * 2) + 3),(i * 4));
HXLINE( 587)					 uint32array indices5 = indices->self;
HXDLIN( 587)					indices5.set((((i * 3) * 2) + 4),((i * 4) + 2));
HXLINE( 588)					 uint32array indices6 = indices->self;
HXDLIN( 588)					indices6.set((((i * 3) * 2) + 5),((i * 4) + 3));
            				}
            			}
HXLINE( 590)			::kha::graphics4::TextShaderPainter_obj::indexBuffer->unlock();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextShaderPainter_obj,initBuffers,(void))

void TextShaderPainter_obj::setRectVertices(Float bottomleftx,Float bottomlefty,Float topleftx,Float toplefty,Float toprightx,Float toprighty,Float bottomrightx,Float bottomrighty){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_598_setRectVertices)
HXLINE( 599)		int baseIndex = ((::kha::graphics4::TextShaderPainter_obj::bufferIndex * 9) * 4);
HXLINE( 600)		::kha::graphics4::TextShaderPainter_obj::rectVertices->self.set(baseIndex,( (float)(bottomleftx) ));
HXLINE( 601)		{
HXLINE( 601)			 float32array this1 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 601)			this1.set((baseIndex + 1),( (float)(bottomlefty) ));
            		}
HXLINE( 602)		{
HXLINE( 602)			 float32array this2 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 602)			this2.set((baseIndex + 2),( (float)(((Float)-5.0)) ));
            		}
HXLINE( 604)		{
HXLINE( 604)			 float32array this3 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 604)			this3.set((baseIndex + 9),( (float)(topleftx) ));
            		}
HXLINE( 605)		{
HXLINE( 605)			 float32array this4 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 605)			this4.set((baseIndex + 10),( (float)(toplefty) ));
            		}
HXLINE( 606)		{
HXLINE( 606)			 float32array this5 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 606)			this5.set((baseIndex + 11),( (float)(((Float)-5.0)) ));
            		}
HXLINE( 608)		{
HXLINE( 608)			 float32array this6 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 608)			this6.set((baseIndex + 18),( (float)(toprightx) ));
            		}
HXLINE( 609)		{
HXLINE( 609)			 float32array this7 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 609)			this7.set((baseIndex + 19),( (float)(toprighty) ));
            		}
HXLINE( 610)		{
HXLINE( 610)			 float32array this8 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 610)			this8.set((baseIndex + 20),( (float)(((Float)-5.0)) ));
            		}
HXLINE( 612)		{
HXLINE( 612)			 float32array this9 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 612)			this9.set((baseIndex + 27),( (float)(bottomrightx) ));
            		}
HXLINE( 613)		{
HXLINE( 613)			 float32array this10 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 613)			this10.set((baseIndex + 28),( (float)(bottomrighty) ));
            		}
HXLINE( 614)		{
HXLINE( 614)			 float32array this11 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 614)			this11.set((baseIndex + 29),( (float)(((Float)-5.0)) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC8(TextShaderPainter_obj,setRectVertices,(void))

void TextShaderPainter_obj::setRectTexCoords(Float left,Float top,Float right,Float bottom){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_617_setRectTexCoords)
HXLINE( 618)		int baseIndex = ((::kha::graphics4::TextShaderPainter_obj::bufferIndex * 9) * 4);
HXLINE( 619)		{
HXLINE( 619)			 float32array this1 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 619)			this1.set((baseIndex + 3),( (float)(left) ));
            		}
HXLINE( 620)		{
HXLINE( 620)			 float32array this2 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 620)			this2.set((baseIndex + 4),( (float)(bottom) ));
            		}
HXLINE( 622)		{
HXLINE( 622)			 float32array this3 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 622)			this3.set((baseIndex + 12),( (float)(left) ));
            		}
HXLINE( 623)		{
HXLINE( 623)			 float32array this4 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 623)			this4.set((baseIndex + 13),( (float)(top) ));
            		}
HXLINE( 625)		{
HXLINE( 625)			 float32array this5 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 625)			this5.set((baseIndex + 21),( (float)(right) ));
            		}
HXLINE( 626)		{
HXLINE( 626)			 float32array this6 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 626)			this6.set((baseIndex + 22),( (float)(top) ));
            		}
HXLINE( 628)		{
HXLINE( 628)			 float32array this7 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 628)			this7.set((baseIndex + 30),( (float)(right) ));
            		}
HXLINE( 629)		{
HXLINE( 629)			 float32array this8 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 629)			this8.set((baseIndex + 31),( (float)(bottom) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(TextShaderPainter_obj,setRectTexCoords,(void))

void TextShaderPainter_obj::setRectColors(float opacity,int color){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_632_setRectColors)
HXLINE( 633)		int baseIndex = ((::kha::graphics4::TextShaderPainter_obj::bufferIndex * 9) * 4);
HXLINE( 634)		float a = (opacity * (hx::UShr(color,24) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 635)		{
HXLINE( 635)			 float32array this1 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 635)			this1.set((baseIndex + 5),(hx::UShr((color & 16711680),16) * ( (float)(((Float)0.00392156862745098)) )));
            		}
HXLINE( 636)		{
HXLINE( 636)			 float32array this2 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 636)			this2.set((baseIndex + 6),(hx::UShr((color & 65280),8) * ( (float)(((Float)0.00392156862745098)) )));
            		}
HXLINE( 637)		{
HXLINE( 637)			 float32array this3 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 637)			this3.set((baseIndex + 7),((color & 255) * ( (float)(((Float)0.00392156862745098)) )));
            		}
HXLINE( 638)		{
HXLINE( 638)			 float32array this4 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 638)			this4.set((baseIndex + 8),a);
            		}
HXLINE( 640)		{
HXLINE( 640)			 float32array this5 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 640)			this5.set((baseIndex + 14),(hx::UShr((color & 16711680),16) * ( (float)(((Float)0.00392156862745098)) )));
            		}
HXLINE( 641)		{
HXLINE( 641)			 float32array this6 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 641)			this6.set((baseIndex + 15),(hx::UShr((color & 65280),8) * ( (float)(((Float)0.00392156862745098)) )));
            		}
HXLINE( 642)		{
HXLINE( 642)			 float32array this7 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 642)			this7.set((baseIndex + 16),((color & 255) * ( (float)(((Float)0.00392156862745098)) )));
            		}
HXLINE( 643)		{
HXLINE( 643)			 float32array this8 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 643)			this8.set((baseIndex + 17),a);
            		}
HXLINE( 645)		{
HXLINE( 645)			 float32array this9 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 645)			this9.set((baseIndex + 23),(hx::UShr((color & 16711680),16) * ( (float)(((Float)0.00392156862745098)) )));
            		}
HXLINE( 646)		{
HXLINE( 646)			 float32array this10 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 646)			this10.set((baseIndex + 24),(hx::UShr((color & 65280),8) * ( (float)(((Float)0.00392156862745098)) )));
            		}
HXLINE( 647)		{
HXLINE( 647)			 float32array this11 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 647)			this11.set((baseIndex + 25),((color & 255) * ( (float)(((Float)0.00392156862745098)) )));
            		}
HXLINE( 648)		{
HXLINE( 648)			 float32array this12 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 648)			this12.set((baseIndex + 26),a);
            		}
HXLINE( 650)		{
HXLINE( 650)			 float32array this13 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 650)			this13.set((baseIndex + 32),(hx::UShr((color & 16711680),16) * ( (float)(((Float)0.00392156862745098)) )));
            		}
HXLINE( 651)		{
HXLINE( 651)			 float32array this14 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 651)			this14.set((baseIndex + 33),(hx::UShr((color & 65280),8) * ( (float)(((Float)0.00392156862745098)) )));
            		}
HXLINE( 652)		{
HXLINE( 652)			 float32array this15 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 652)			this15.set((baseIndex + 34),((color & 255) * ( (float)(((Float)0.00392156862745098)) )));
            		}
HXLINE( 653)		{
HXLINE( 653)			 float32array this16 = ::kha::graphics4::TextShaderPainter_obj::rectVertices->self;
HXDLIN( 653)			this16.set((baseIndex + 35),a);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextShaderPainter_obj,setRectColors,(void))

void TextShaderPainter_obj::drawBuffer(){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_656_drawBuffer)
HXLINE( 657)		::kha::graphics4::TextShaderPainter_obj::rectVertexBuffer->unlock();
HXLINE( 658)		::kha::graphics4::Graphics_obj::setVertexBuffer(this->g,::kha::graphics4::TextShaderPainter_obj::rectVertexBuffer);
HXLINE( 659)		::kha::graphics4::Graphics_obj::setIndexBuffer(this->g,::kha::graphics4::TextShaderPainter_obj::indexBuffer);
HXLINE( 660)		::Dynamic _hx_tmp = this->g;
HXDLIN( 660)		 ::kha::graphics4::PipelineState _hx_tmp1;
HXDLIN( 660)		if (hx::IsNull( this->get_pipeline() )) {
HXLINE( 660)			_hx_tmp1 = ::kha::graphics4::TextShaderPainter_obj::shaderPipeline;
            		}
            		else {
HXLINE( 660)			_hx_tmp1 = this->get_pipeline();
            		}
HXDLIN( 660)		::kha::graphics4::Graphics_obj::setPipeline(_hx_tmp,_hx_tmp1);
HXLINE( 661)		::kha::graphics4::Graphics_obj::setTexture(this->g,this->textureLocation,::kha::graphics4::TextShaderPainter_obj::lastTexture);
HXLINE( 662)		::kha::graphics4::Graphics_obj::setMatrix(this->g,this->projectionLocation,this->projectionMatrix);
HXLINE( 663)		 ::kha::graphics4::TextureFilter _hx_tmp2;
HXDLIN( 663)		if (this->bilinear) {
HXLINE( 663)			_hx_tmp2 = ::kha::graphics4::TextureFilter_obj::LinearFilter_dyn();
            		}
            		else {
HXLINE( 663)			_hx_tmp2 = ::kha::graphics4::TextureFilter_obj::PointFilter_dyn();
            		}
HXDLIN( 663)		 ::kha::graphics4::TextureFilter _hx_tmp3;
HXDLIN( 663)		if (this->bilinear) {
HXLINE( 663)			_hx_tmp3 = ::kha::graphics4::TextureFilter_obj::LinearFilter_dyn();
            		}
            		else {
HXLINE( 663)			_hx_tmp3 = ::kha::graphics4::TextureFilter_obj::PointFilter_dyn();
            		}
HXDLIN( 663)		::kha::graphics4::Graphics_obj::setTextureParameters(this->g,this->textureLocation,::kha::graphics4::TextureAddressing_obj::Clamp_dyn(),::kha::graphics4::TextureAddressing_obj::Clamp_dyn(),_hx_tmp2,_hx_tmp3,::kha::graphics4::MipMapFilter_obj::NoMipFilter_dyn());
HXLINE( 671)		::Dynamic _hx_tmp4 = this->g;
HXDLIN( 671)		::kha::graphics4::Graphics_obj::drawIndexedVertices(_hx_tmp4,0,((::kha::graphics4::TextShaderPainter_obj::bufferIndex * 2) * 3));
HXLINE( 673)		::kha::graphics4::Graphics_obj::setTexture(this->g,this->textureLocation,null());
HXLINE( 674)		::kha::graphics4::TextShaderPainter_obj::bufferIndex = 0;
HXLINE( 675)		::kha::graphics4::TextShaderPainter_obj::rectVertices = ::kha::graphics4::TextShaderPainter_obj::rectVertexBuffer->lock(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextShaderPainter_obj,drawBuffer,(void))

void TextShaderPainter_obj::setBilinearFilter(bool bilinear){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_678_setBilinearFilter)
HXLINE( 679)		this->end();
HXLINE( 680)		this->bilinear = bilinear;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextShaderPainter_obj,setBilinearFilter,(void))

void TextShaderPainter_obj::setFont( ::kha::Kravur font){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_684_setFont)
HXDLIN( 684)		this->font = font;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextShaderPainter_obj,setFont,(void))

void TextShaderPainter_obj::startString(::String text){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_695_startString)
            	
		wtext = text.__WCStr();
	

HXDLIN( 695)		this->text = text;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextShaderPainter_obj,startString,(void))

int TextShaderPainter_obj::charCodeAt(int position){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_704_charCodeAt)
            	
		return wtext[position];
	

HXDLIN( 704)		return ( (int)(this->text.charCodeAt(position)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextShaderPainter_obj,charCodeAt,return )

int TextShaderPainter_obj::stringLength(){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_713_stringLength)
            	
		return wcslen(wtext);
	

HXDLIN( 713)		return this->text.length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextShaderPainter_obj,stringLength,return )

void TextShaderPainter_obj::endString(){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_722_endString)
            	
		wtext = 0;
	

HXDLIN( 722)		this->text = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextShaderPainter_obj,endString,(void))

void TextShaderPainter_obj::drawString(::String text,float opacity,int color,Float x,Float y, ::kha::math::FastMatrix3 transformation,::Array< int > fontGlyphs){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_735_drawString)
HXLINE( 736)		 ::kha::KravurImage font = this->font->_get(this->fontSize,fontGlyphs);
HXLINE( 737)		 ::kha::Image tex = font->getTexture();
HXLINE( 738)		bool _hx_tmp;
HXDLIN( 738)		if (hx::IsNotNull( ::kha::graphics4::TextShaderPainter_obj::lastTexture )) {
HXLINE( 738)			_hx_tmp = hx::IsNotEq( tex,::kha::graphics4::TextShaderPainter_obj::lastTexture );
            		}
            		else {
HXLINE( 738)			_hx_tmp = false;
            		}
HXDLIN( 738)		if (_hx_tmp) {
HXLINE( 738)			this->drawBuffer();
            		}
HXLINE( 739)		::kha::graphics4::TextShaderPainter_obj::lastTexture = tex;
HXLINE( 741)		Float xpos = x;
HXLINE( 742)		Float ypos = y;
HXLINE( 743)		this->startString(text);
HXLINE( 744)		{
HXLINE( 744)			int _g1 = 0;
HXDLIN( 744)			int _g = this->stringLength();
HXDLIN( 744)			while((_g1 < _g)){
HXLINE( 744)				_g1 = (_g1 + 1);
HXDLIN( 744)				int i = (_g1 - 1);
HXLINE( 745)				 ::kha::AlignedQuad q = this->bakedQuadCache;
HXDLIN( 745)				 ::kha::AlignedQuad q1 = font->getBakedQuad(q,::kha::graphics4::TextShaderPainter_obj::findIndex(this->charCodeAt(i),fontGlyphs),xpos,ypos);
HXLINE( 746)				if (hx::IsNotNull( q1 )) {
HXLINE( 747)					if (((::kha::graphics4::TextShaderPainter_obj::bufferIndex + 1) >= 100)) {
HXLINE( 747)						this->drawBuffer();
            					}
HXLINE( 748)					this->setRectColors(opacity,color);
HXLINE( 749)					Float q2 = q1->s0;
HXDLIN( 749)					Float _hx_tmp1 = (q2 * tex->get_width());
HXDLIN( 749)					Float _hx_tmp2 = (_hx_tmp1 / ( (Float)(tex->get_realWidth()) ));
HXDLIN( 749)					Float q3 = q1->t0;
HXDLIN( 749)					Float _hx_tmp3 = (q3 * tex->get_height());
HXDLIN( 749)					Float _hx_tmp4 = (_hx_tmp3 / ( (Float)(tex->get_realHeight()) ));
HXDLIN( 749)					Float q4 = q1->s1;
HXDLIN( 749)					Float _hx_tmp5 = (q4 * tex->get_width());
HXDLIN( 749)					Float _hx_tmp6 = (_hx_tmp5 / ( (Float)(tex->get_realWidth()) ));
HXDLIN( 749)					Float q5 = q1->t1;
HXDLIN( 749)					Float _hx_tmp7 = (q5 * tex->get_height());
HXDLIN( 749)					this->setRectTexCoords(_hx_tmp2,_hx_tmp4,_hx_tmp6,(_hx_tmp7 / ( (Float)(tex->get_realHeight()) )));
HXLINE( 750)					float value_x = ( (float)(q1->x0) );
HXDLIN( 750)					float value_y = ( (float)(q1->y1) );
HXDLIN( 750)					float w = (transformation->_02 * value_x);
HXDLIN( 750)					float w1 = ((w + (transformation->_12 * value_y)) + transformation->_22);
HXDLIN( 750)					float x1 = (transformation->_00 * value_x);
HXDLIN( 750)					Float x2 = (( (Float)(((x1 + (transformation->_10 * value_y)) + transformation->_20)) ) / ( (Float)(w1) ));
HXDLIN( 750)					float y1 = (transformation->_01 * value_x);
HXDLIN( 750)					Float y2 = (( (Float)(((y1 + (transformation->_11 * value_y)) + transformation->_21)) ) / ( (Float)(w1) ));
HXDLIN( 750)					float p0_x = ( (float)(x2) );
HXDLIN( 750)					float p0_y = ( (float)(y2) );
HXLINE( 751)					float value_x1 = ( (float)(q1->x0) );
HXDLIN( 751)					float value_y1 = ( (float)(q1->y0) );
HXDLIN( 751)					float w2 = (transformation->_02 * value_x1);
HXDLIN( 751)					float w3 = ((w2 + (transformation->_12 * value_y1)) + transformation->_22);
HXDLIN( 751)					float x3 = (transformation->_00 * value_x1);
HXDLIN( 751)					Float x4 = (( (Float)(((x3 + (transformation->_10 * value_y1)) + transformation->_20)) ) / ( (Float)(w3) ));
HXDLIN( 751)					float y3 = (transformation->_01 * value_x1);
HXDLIN( 751)					Float y4 = (( (Float)(((y3 + (transformation->_11 * value_y1)) + transformation->_21)) ) / ( (Float)(w3) ));
HXDLIN( 751)					float p1_x = ( (float)(x4) );
HXDLIN( 751)					float p1_y = ( (float)(y4) );
HXLINE( 752)					float value_x2 = ( (float)(q1->x1) );
HXDLIN( 752)					float value_y2 = ( (float)(q1->y0) );
HXDLIN( 752)					float w4 = (transformation->_02 * value_x2);
HXDLIN( 752)					float w5 = ((w4 + (transformation->_12 * value_y2)) + transformation->_22);
HXDLIN( 752)					float x5 = (transformation->_00 * value_x2);
HXDLIN( 752)					Float x6 = (( (Float)(((x5 + (transformation->_10 * value_y2)) + transformation->_20)) ) / ( (Float)(w5) ));
HXDLIN( 752)					float y5 = (transformation->_01 * value_x2);
HXDLIN( 752)					Float y6 = (( (Float)(((y5 + (transformation->_11 * value_y2)) + transformation->_21)) ) / ( (Float)(w5) ));
HXDLIN( 752)					float p2_x = ( (float)(x6) );
HXDLIN( 752)					float p2_y = ( (float)(y6) );
HXLINE( 753)					float value_x3 = ( (float)(q1->x1) );
HXDLIN( 753)					float value_y3 = ( (float)(q1->y1) );
HXDLIN( 753)					float w6 = (transformation->_02 * value_x3);
HXDLIN( 753)					float w7 = ((w6 + (transformation->_12 * value_y3)) + transformation->_22);
HXDLIN( 753)					float x7 = (transformation->_00 * value_x3);
HXDLIN( 753)					Float x8 = (( (Float)(((x7 + (transformation->_10 * value_y3)) + transformation->_20)) ) / ( (Float)(w7) ));
HXDLIN( 753)					float y7 = (transformation->_01 * value_x3);
HXDLIN( 753)					Float y8 = (( (Float)(((y7 + (transformation->_11 * value_y3)) + transformation->_21)) ) / ( (Float)(w7) ));
HXDLIN( 753)					float p3_x = ( (float)(x8) );
HXDLIN( 753)					float p3_y = ( (float)(y8) );
HXLINE( 754)					this->setRectVertices(( (Float)(p0_x) ),( (Float)(p0_y) ),( (Float)(p1_x) ),( (Float)(p1_y) ),( (Float)(p2_x) ),( (Float)(p2_y) ),( (Float)(p3_x) ),( (Float)(p3_y) ));
HXLINE( 755)					xpos = (xpos + q1->xadvance);
HXLINE( 756)					++::kha::graphics4::TextShaderPainter_obj::bufferIndex;
            				}
            			}
            		}
HXLINE( 759)		this->endString();
            	}


HX_DEFINE_DYNAMIC_FUNC7(TextShaderPainter_obj,drawString,(void))

void TextShaderPainter_obj::drawCharacters(::Array< int > text,int start,int length,float opacity,int color,Float x,Float y, ::kha::math::FastMatrix3 transformation,::Array< int > fontGlyphs){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_762_drawCharacters)
HXLINE( 763)		 ::kha::KravurImage font = this->font->_get(this->fontSize,fontGlyphs);
HXLINE( 764)		 ::kha::Image tex = font->getTexture();
HXLINE( 765)		bool _hx_tmp;
HXDLIN( 765)		if (hx::IsNotNull( ::kha::graphics4::TextShaderPainter_obj::lastTexture )) {
HXLINE( 765)			_hx_tmp = hx::IsNotEq( tex,::kha::graphics4::TextShaderPainter_obj::lastTexture );
            		}
            		else {
HXLINE( 765)			_hx_tmp = false;
            		}
HXDLIN( 765)		if (_hx_tmp) {
HXLINE( 765)			this->drawBuffer();
            		}
HXLINE( 766)		::kha::graphics4::TextShaderPainter_obj::lastTexture = tex;
HXLINE( 768)		Float xpos = x;
HXLINE( 769)		Float ypos = y;
HXLINE( 770)		{
HXLINE( 770)			int _g1 = start;
HXDLIN( 770)			int _g = (start + length);
HXDLIN( 770)			while((_g1 < _g)){
HXLINE( 770)				_g1 = (_g1 + 1);
HXDLIN( 770)				int i = (_g1 - 1);
HXLINE( 771)				 ::kha::AlignedQuad q = this->bakedQuadCache;
HXDLIN( 771)				 ::kha::AlignedQuad q1 = font->getBakedQuad(q,::kha::graphics4::TextShaderPainter_obj::findIndex(text->__get(i),fontGlyphs),xpos,ypos);
HXLINE( 772)				if (hx::IsNotNull( q1 )) {
HXLINE( 773)					if (((::kha::graphics4::TextShaderPainter_obj::bufferIndex + 1) >= 100)) {
HXLINE( 773)						this->drawBuffer();
            					}
HXLINE( 774)					this->setRectColors(opacity,color);
HXLINE( 775)					Float q2 = q1->s0;
HXDLIN( 775)					Float _hx_tmp1 = (q2 * tex->get_width());
HXDLIN( 775)					Float _hx_tmp2 = (_hx_tmp1 / ( (Float)(tex->get_realWidth()) ));
HXDLIN( 775)					Float q3 = q1->t0;
HXDLIN( 775)					Float _hx_tmp3 = (q3 * tex->get_height());
HXDLIN( 775)					Float _hx_tmp4 = (_hx_tmp3 / ( (Float)(tex->get_realHeight()) ));
HXDLIN( 775)					Float q4 = q1->s1;
HXDLIN( 775)					Float _hx_tmp5 = (q4 * tex->get_width());
HXDLIN( 775)					Float _hx_tmp6 = (_hx_tmp5 / ( (Float)(tex->get_realWidth()) ));
HXDLIN( 775)					Float q5 = q1->t1;
HXDLIN( 775)					Float _hx_tmp7 = (q5 * tex->get_height());
HXDLIN( 775)					this->setRectTexCoords(_hx_tmp2,_hx_tmp4,_hx_tmp6,(_hx_tmp7 / ( (Float)(tex->get_realHeight()) )));
HXLINE( 776)					float value_x = ( (float)(q1->x0) );
HXDLIN( 776)					float value_y = ( (float)(q1->y1) );
HXDLIN( 776)					float w = (transformation->_02 * value_x);
HXDLIN( 776)					float w1 = ((w + (transformation->_12 * value_y)) + transformation->_22);
HXDLIN( 776)					float x1 = (transformation->_00 * value_x);
HXDLIN( 776)					Float x2 = (( (Float)(((x1 + (transformation->_10 * value_y)) + transformation->_20)) ) / ( (Float)(w1) ));
HXDLIN( 776)					float y1 = (transformation->_01 * value_x);
HXDLIN( 776)					Float y2 = (( (Float)(((y1 + (transformation->_11 * value_y)) + transformation->_21)) ) / ( (Float)(w1) ));
HXDLIN( 776)					float p0_x = ( (float)(x2) );
HXDLIN( 776)					float p0_y = ( (float)(y2) );
HXLINE( 777)					float value_x1 = ( (float)(q1->x0) );
HXDLIN( 777)					float value_y1 = ( (float)(q1->y0) );
HXDLIN( 777)					float w2 = (transformation->_02 * value_x1);
HXDLIN( 777)					float w3 = ((w2 + (transformation->_12 * value_y1)) + transformation->_22);
HXDLIN( 777)					float x3 = (transformation->_00 * value_x1);
HXDLIN( 777)					Float x4 = (( (Float)(((x3 + (transformation->_10 * value_y1)) + transformation->_20)) ) / ( (Float)(w3) ));
HXDLIN( 777)					float y3 = (transformation->_01 * value_x1);
HXDLIN( 777)					Float y4 = (( (Float)(((y3 + (transformation->_11 * value_y1)) + transformation->_21)) ) / ( (Float)(w3) ));
HXDLIN( 777)					float p1_x = ( (float)(x4) );
HXDLIN( 777)					float p1_y = ( (float)(y4) );
HXLINE( 778)					float value_x2 = ( (float)(q1->x1) );
HXDLIN( 778)					float value_y2 = ( (float)(q1->y0) );
HXDLIN( 778)					float w4 = (transformation->_02 * value_x2);
HXDLIN( 778)					float w5 = ((w4 + (transformation->_12 * value_y2)) + transformation->_22);
HXDLIN( 778)					float x5 = (transformation->_00 * value_x2);
HXDLIN( 778)					Float x6 = (( (Float)(((x5 + (transformation->_10 * value_y2)) + transformation->_20)) ) / ( (Float)(w5) ));
HXDLIN( 778)					float y5 = (transformation->_01 * value_x2);
HXDLIN( 778)					Float y6 = (( (Float)(((y5 + (transformation->_11 * value_y2)) + transformation->_21)) ) / ( (Float)(w5) ));
HXDLIN( 778)					float p2_x = ( (float)(x6) );
HXDLIN( 778)					float p2_y = ( (float)(y6) );
HXLINE( 779)					float value_x3 = ( (float)(q1->x1) );
HXDLIN( 779)					float value_y3 = ( (float)(q1->y1) );
HXDLIN( 779)					float w6 = (transformation->_02 * value_x3);
HXDLIN( 779)					float w7 = ((w6 + (transformation->_12 * value_y3)) + transformation->_22);
HXDLIN( 779)					float x7 = (transformation->_00 * value_x3);
HXDLIN( 779)					Float x8 = (( (Float)(((x7 + (transformation->_10 * value_y3)) + transformation->_20)) ) / ( (Float)(w7) ));
HXDLIN( 779)					float y7 = (transformation->_01 * value_x3);
HXDLIN( 779)					Float y8 = (( (Float)(((y7 + (transformation->_11 * value_y3)) + transformation->_21)) ) / ( (Float)(w7) ));
HXDLIN( 779)					float p3_x = ( (float)(x8) );
HXDLIN( 779)					float p3_y = ( (float)(y8) );
HXLINE( 780)					this->setRectVertices(( (Float)(p0_x) ),( (Float)(p0_y) ),( (Float)(p1_x) ),( (Float)(p1_y) ),( (Float)(p2_x) ),( (Float)(p2_y) ),( (Float)(p3_x) ),( (Float)(p3_y) ));
HXLINE( 781)					xpos = (xpos + q1->xadvance);
HXLINE( 782)					++::kha::graphics4::TextShaderPainter_obj::bufferIndex;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC9(TextShaderPainter_obj,drawCharacters,(void))

void TextShaderPainter_obj::end(){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_787_end)
HXLINE( 788)		if ((::kha::graphics4::TextShaderPainter_obj::bufferIndex > 0)) {
HXLINE( 788)			this->drawBuffer();
            		}
HXLINE( 789)		::kha::graphics4::TextShaderPainter_obj::lastTexture = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextShaderPainter_obj,end,(void))

 ::kha::graphics4::PipelineState TextShaderPainter_obj::shaderPipeline;

 ::kha::graphics4::VertexStructure TextShaderPainter_obj::structure;

int TextShaderPainter_obj::bufferSize;

int TextShaderPainter_obj::bufferIndex;

 ::kha::graphics4::VertexBuffer TextShaderPainter_obj::rectVertexBuffer;

 ::kha::arrays::Float32ArrayPrivate TextShaderPainter_obj::rectVertices;

 ::kha::graphics4::IndexBuffer TextShaderPainter_obj::indexBuffer;

 ::kha::Image TextShaderPainter_obj::lastTexture;

void TextShaderPainter_obj::initShaders(){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_565_initShaders)
HXLINE( 566)		if (hx::IsNull( ::kha::graphics4::TextShaderPainter_obj::structure )) {
HXLINE( 567)			::kha::graphics4::TextShaderPainter_obj::structure = ::kha::graphics4::Graphics2_obj::createTextVertexStructure();
            		}
HXLINE( 569)		if (hx::IsNull( ::kha::graphics4::TextShaderPainter_obj::shaderPipeline )) {
HXLINE( 570)			::kha::graphics4::TextShaderPainter_obj::shaderPipeline = ::kha::graphics4::Graphics2_obj::createTextPipeline(::kha::graphics4::TextShaderPainter_obj::structure);
HXLINE( 571)			::kha::graphics4::TextShaderPainter_obj::shaderPipeline->compile();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(TextShaderPainter_obj,initShaders,(void))

int TextShaderPainter_obj::findIndex(int charcode,::Array< int > fontGlyphs){
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_726_findIndex)
HXLINE( 727)		{
HXLINE( 727)			int _g1 = 0;
HXDLIN( 727)			int _g = fontGlyphs->length;
HXDLIN( 727)			while((_g1 < _g)){
HXLINE( 727)				_g1 = (_g1 + 1);
HXDLIN( 727)				int i = (_g1 - 1);
HXLINE( 728)				if ((fontGlyphs->__get(i) == charcode)) {
HXLINE( 728)					return i;
            				}
            			}
            		}
HXLINE( 730)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(TextShaderPainter_obj,findIndex,return )


hx::ObjectPtr< TextShaderPainter_obj > TextShaderPainter_obj::__new(::Dynamic g4) {
	hx::ObjectPtr< TextShaderPainter_obj > __this = new TextShaderPainter_obj();
	__this->__construct(g4);
	return __this;
}

hx::ObjectPtr< TextShaderPainter_obj > TextShaderPainter_obj::__alloc(hx::Ctx *_hx_ctx,::Dynamic g4) {
	TextShaderPainter_obj *__this = (TextShaderPainter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextShaderPainter_obj), true, "kha.graphics4.TextShaderPainter"));
	*(void **)__this = TextShaderPainter_obj::_hx_vtable;
	__this->__construct(g4);
	return __this;
}

TextShaderPainter_obj::TextShaderPainter_obj()
{
}

void TextShaderPainter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextShaderPainter);
	HX_MARK_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_MARK_MEMBER_NAME(font,"font");
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(myPipeline,"myPipeline");
	HX_MARK_MEMBER_NAME(projectionLocation,"projectionLocation");
	HX_MARK_MEMBER_NAME(textureLocation,"textureLocation");
	HX_MARK_MEMBER_NAME(fontSize,"fontSize");
	HX_MARK_MEMBER_NAME(bilinear,"bilinear");
	HX_MARK_MEMBER_NAME(sourceBlend,"sourceBlend");
	HX_MARK_MEMBER_NAME(destinationBlend,"destinationBlend");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(bakedQuadCache,"bakedQuadCache");
	HX_MARK_END_CLASS();
}

void TextShaderPainter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_VISIT_MEMBER_NAME(font,"font");
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(myPipeline,"myPipeline");
	HX_VISIT_MEMBER_NAME(projectionLocation,"projectionLocation");
	HX_VISIT_MEMBER_NAME(textureLocation,"textureLocation");
	HX_VISIT_MEMBER_NAME(fontSize,"fontSize");
	HX_VISIT_MEMBER_NAME(bilinear,"bilinear");
	HX_VISIT_MEMBER_NAME(sourceBlend,"sourceBlend");
	HX_VISIT_MEMBER_NAME(destinationBlend,"destinationBlend");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(bakedQuadCache,"bakedQuadCache");
}

hx::Val TextShaderPainter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { return hx::Val( font ); }
		if (HX_FIELD_EQ(inName,"text") ) { return hx::Val( text ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"setFont") ) { return hx::Val( setFont_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pipeline") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_pipeline() ); }
		if (HX_FIELD_EQ(inName,"fontSize") ) { return hx::Val( fontSize ); }
		if (HX_FIELD_EQ(inName,"bilinear") ) { return hx::Val( bilinear ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"endString") ) { return hx::Val( endString_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPipeline") ) { return hx::Val( myPipeline ); }
		if (HX_FIELD_EQ(inName,"drawBuffer") ) { return hx::Val( drawBuffer_dyn() ); }
		if (HX_FIELD_EQ(inName,"charCodeAt") ) { return hx::Val( charCodeAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawString") ) { return hx::Val( drawString_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sourceBlend") ) { return hx::Val( sourceBlend ); }
		if (HX_FIELD_EQ(inName,"initBuffers") ) { return hx::Val( initBuffers_dyn() ); }
		if (HX_FIELD_EQ(inName,"startString") ) { return hx::Val( startString_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_pipeline") ) { return hx::Val( get_pipeline_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pipeline") ) { return hx::Val( set_pipeline_dyn() ); }
		if (HX_FIELD_EQ(inName,"stringLength") ) { return hx::Val( stringLength_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setProjection") ) { return hx::Val( setProjection_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRectColors") ) { return hx::Val( setRectColors_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"bakedQuadCache") ) { return hx::Val( bakedQuadCache ); }
		if (HX_FIELD_EQ(inName,"drawCharacters") ) { return hx::Val( drawCharacters_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"textureLocation") ) { return hx::Val( textureLocation ); }
		if (HX_FIELD_EQ(inName,"setRectVertices") ) { return hx::Val( setRectVertices_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { return hx::Val( projectionMatrix ); }
		if (HX_FIELD_EQ(inName,"destinationBlend") ) { return hx::Val( destinationBlend ); }
		if (HX_FIELD_EQ(inName,"setRectTexCoords") ) { return hx::Val( setRectTexCoords_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"setBilinearFilter") ) { return hx::Val( setBilinearFilter_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"projectionLocation") ) { return hx::Val( projectionLocation ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextShaderPainter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"structure") ) { outValue = ( structure ); return true; }
		if (HX_FIELD_EQ(inName,"findIndex") ) { outValue = findIndex_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bufferIndex") ) { outValue = ( bufferIndex ); return true; }
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { outValue = ( indexBuffer ); return true; }
		if (HX_FIELD_EQ(inName,"lastTexture") ) { outValue = ( lastTexture ); return true; }
		if (HX_FIELD_EQ(inName,"initShaders") ) { outValue = initShaders_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rectVertices") ) { outValue = ( rectVertices ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"shaderPipeline") ) { outValue = ( shaderPipeline ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"rectVertexBuffer") ) { outValue = ( rectVertexBuffer ); return true; }
	}
	return false;
}

hx::Val TextShaderPainter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { font=inValue.Cast<  ::kha::Kravur >(); return inValue; }
		if (HX_FIELD_EQ(inName,"text") ) { text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pipeline") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_pipeline(inValue.Cast<  ::kha::graphics4::PipelineState >()) ); }
		if (HX_FIELD_EQ(inName,"fontSize") ) { fontSize=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bilinear") ) { bilinear=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPipeline") ) { myPipeline=inValue.Cast<  ::kha::graphics4::PipelineState >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sourceBlend") ) { sourceBlend=inValue.Cast<  ::kha::graphics4::BlendingFactor >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"bakedQuadCache") ) { bakedQuadCache=inValue.Cast<  ::kha::AlignedQuad >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"textureLocation") ) { textureLocation=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { projectionMatrix=inValue.Cast<  ::kha::math::FastMatrix4 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"destinationBlend") ) { destinationBlend=inValue.Cast<  ::kha::graphics4::BlendingFactor >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"projectionLocation") ) { projectionLocation=inValue.Cast< ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextShaderPainter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"structure") ) { structure=ioValue.Cast<  ::kha::graphics4::VertexStructure >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bufferIndex") ) { bufferIndex=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { indexBuffer=ioValue.Cast<  ::kha::graphics4::IndexBuffer >(); return true; }
		if (HX_FIELD_EQ(inName,"lastTexture") ) { lastTexture=ioValue.Cast<  ::kha::Image >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rectVertices") ) { rectVertices=ioValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"shaderPipeline") ) { shaderPipeline=ioValue.Cast<  ::kha::graphics4::PipelineState >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"rectVertexBuffer") ) { rectVertexBuffer=ioValue.Cast<  ::kha::graphics4::VertexBuffer >(); return true; }
	}
	return false;
}

void TextShaderPainter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("projectionMatrix",30,88,bb,d0));
	outFields->push(HX_("font",cf,5d,c0,43));
	outFields->push(HX_("g",67,00,00,00));
	outFields->push(HX_("myPipeline",ae,22,05,b9));
	outFields->push(HX_("projectionLocation",e4,59,25,9b));
	outFields->push(HX_("textureLocation",30,c6,65,4c));
	outFields->push(HX_("pipeline",22,bb,83,4b));
	outFields->push(HX_("fontSize",30,be,d1,ce));
	outFields->push(HX_("bilinear",ec,b6,3d,e0));
	outFields->push(HX_("sourceBlend",76,ad,fa,e3));
	outFields->push(HX_("destinationBlend",e3,ca,bf,2e));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("bakedQuadCache",50,ed,27,d8));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo TextShaderPainter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::kha::math::FastMatrix4*/ ,(int)offsetof(TextShaderPainter_obj,projectionMatrix),HX_("projectionMatrix",30,88,bb,d0)},
	{hx::fsObject /*::kha::Kravur*/ ,(int)offsetof(TextShaderPainter_obj,font),HX_("font",cf,5d,c0,43)},
	{hx::fsObject /*::kha::graphics4::Graphics*/ ,(int)offsetof(TextShaderPainter_obj,g),HX_("g",67,00,00,00)},
	{hx::fsObject /*::kha::graphics4::PipelineState*/ ,(int)offsetof(TextShaderPainter_obj,myPipeline),HX_("myPipeline",ae,22,05,b9)},
	{hx::fsObject /*::kha::graphics4::ConstantLocation*/ ,(int)offsetof(TextShaderPainter_obj,projectionLocation),HX_("projectionLocation",e4,59,25,9b)},
	{hx::fsObject /*::kha::graphics4::TextureUnit*/ ,(int)offsetof(TextShaderPainter_obj,textureLocation),HX_("textureLocation",30,c6,65,4c)},
	{hx::fsInt,(int)offsetof(TextShaderPainter_obj,fontSize),HX_("fontSize",30,be,d1,ce)},
	{hx::fsBool,(int)offsetof(TextShaderPainter_obj,bilinear),HX_("bilinear",ec,b6,3d,e0)},
	{hx::fsObject /*::kha::graphics4::BlendingFactor*/ ,(int)offsetof(TextShaderPainter_obj,sourceBlend),HX_("sourceBlend",76,ad,fa,e3)},
	{hx::fsObject /*::kha::graphics4::BlendingFactor*/ ,(int)offsetof(TextShaderPainter_obj,destinationBlend),HX_("destinationBlend",e3,ca,bf,2e)},
	{hx::fsString,(int)offsetof(TextShaderPainter_obj,text),HX_("text",ad,cc,f9,4c)},
	{hx::fsObject /*::kha::AlignedQuad*/ ,(int)offsetof(TextShaderPainter_obj,bakedQuadCache),HX_("bakedQuadCache",50,ed,27,d8)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TextShaderPainter_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::kha::graphics4::PipelineState*/ ,(void *) &TextShaderPainter_obj::shaderPipeline,HX_("shaderPipeline",67,63,91,fc)},
	{hx::fsObject /*::kha::graphics4::VertexStructure*/ ,(void *) &TextShaderPainter_obj::structure,HX_("structure",33,54,4f,47)},
	{hx::fsInt,(void *) &TextShaderPainter_obj::bufferSize,HX_("bufferSize",e1,09,64,9d)},
	{hx::fsInt,(void *) &TextShaderPainter_obj::bufferIndex,HX_("bufferIndex",f2,2d,60,5b)},
	{hx::fsObject /*::kha::graphics4::VertexBuffer*/ ,(void *) &TextShaderPainter_obj::rectVertexBuffer,HX_("rectVertexBuffer",c8,6e,b4,97)},
	{hx::fsObject /*::kha::arrays::Float32ArrayPrivate*/ ,(void *) &TextShaderPainter_obj::rectVertices,HX_("rectVertices",3d,8d,f6,54)},
	{hx::fsObject /*::kha::graphics4::IndexBuffer*/ ,(void *) &TextShaderPainter_obj::indexBuffer,HX_("indexBuffer",b2,65,a6,f5)},
	{hx::fsObject /*::kha::Image*/ ,(void *) &TextShaderPainter_obj::lastTexture,HX_("lastTexture",25,7d,8c,53)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TextShaderPainter_obj_sMemberFields[] = {
	HX_("projectionMatrix",30,88,bb,d0),
	HX_("font",cf,5d,c0,43),
	HX_("g",67,00,00,00),
	HX_("myPipeline",ae,22,05,b9),
	HX_("projectionLocation",e4,59,25,9b),
	HX_("textureLocation",30,c6,65,4c),
	HX_("fontSize",30,be,d1,ce),
	HX_("bilinear",ec,b6,3d,e0),
	HX_("sourceBlend",76,ad,fa,e3),
	HX_("destinationBlend",e3,ca,bf,2e),
	HX_("get_pipeline",2b,6f,9d,00),
	HX_("set_pipeline",9f,92,96,15),
	HX_("setProjection",d1,c6,03,66),
	HX_("initBuffers",43,12,fb,69),
	HX_("setRectVertices",ff,5f,ac,73),
	HX_("setRectTexCoords",9f,c2,a8,fb),
	HX_("setRectColors",36,38,37,6d),
	HX_("drawBuffer",24,38,58,12),
	HX_("setBilinearFilter",06,cb,de,13),
	HX_("setFont",91,9e,44,09),
	HX_("text",ad,cc,f9,4c),
	HX_("startString",d3,86,16,89),
	HX_("charCodeAt",f6,e6,54,35),
	HX_("stringLength",97,24,60,36),
	HX_("endString",0c,77,12,51),
	HX_("bakedQuadCache",50,ed,27,d8),
	HX_("drawString",f5,a3,f3,52),
	HX_("drawCharacters",ce,35,d8,38),
	HX_("end",db,03,4d,00),
	::String(null()) };

static void TextShaderPainter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextShaderPainter_obj::shaderPipeline,"shaderPipeline");
	HX_MARK_MEMBER_NAME(TextShaderPainter_obj::structure,"structure");
	HX_MARK_MEMBER_NAME(TextShaderPainter_obj::bufferSize,"bufferSize");
	HX_MARK_MEMBER_NAME(TextShaderPainter_obj::bufferIndex,"bufferIndex");
	HX_MARK_MEMBER_NAME(TextShaderPainter_obj::rectVertexBuffer,"rectVertexBuffer");
	HX_MARK_MEMBER_NAME(TextShaderPainter_obj::rectVertices,"rectVertices");
	HX_MARK_MEMBER_NAME(TextShaderPainter_obj::indexBuffer,"indexBuffer");
	HX_MARK_MEMBER_NAME(TextShaderPainter_obj::lastTexture,"lastTexture");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextShaderPainter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextShaderPainter_obj::shaderPipeline,"shaderPipeline");
	HX_VISIT_MEMBER_NAME(TextShaderPainter_obj::structure,"structure");
	HX_VISIT_MEMBER_NAME(TextShaderPainter_obj::bufferSize,"bufferSize");
	HX_VISIT_MEMBER_NAME(TextShaderPainter_obj::bufferIndex,"bufferIndex");
	HX_VISIT_MEMBER_NAME(TextShaderPainter_obj::rectVertexBuffer,"rectVertexBuffer");
	HX_VISIT_MEMBER_NAME(TextShaderPainter_obj::rectVertices,"rectVertices");
	HX_VISIT_MEMBER_NAME(TextShaderPainter_obj::indexBuffer,"indexBuffer");
	HX_VISIT_MEMBER_NAME(TextShaderPainter_obj::lastTexture,"lastTexture");
};

#endif

hx::Class TextShaderPainter_obj::__mClass;

static ::String TextShaderPainter_obj_sStaticFields[] = {
	HX_("shaderPipeline",67,63,91,fc),
	HX_("structure",33,54,4f,47),
	HX_("bufferSize",e1,09,64,9d),
	HX_("bufferIndex",f2,2d,60,5b),
	HX_("rectVertexBuffer",c8,6e,b4,97),
	HX_("rectVertices",3d,8d,f6,54),
	HX_("indexBuffer",b2,65,a6,f5),
	HX_("lastTexture",25,7d,8c,53),
	HX_("initShaders",7e,f0,f0,17),
	HX_("findIndex",19,cc,0b,ad),
	::String(null())
};

void TextShaderPainter_obj::__register()
{
	TextShaderPainter_obj _hx_dummy;
	TextShaderPainter_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("kha.graphics4.TextShaderPainter",ea,61,5a,54);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextShaderPainter_obj::__GetStatic;
	__mClass->mSetStaticField = &TextShaderPainter_obj::__SetStatic;
	__mClass->mMarkFunc = TextShaderPainter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextShaderPainter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextShaderPainter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextShaderPainter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextShaderPainter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextShaderPainter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextShaderPainter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextShaderPainter_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_516_boot)
HXDLIN( 516)		shaderPipeline = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_517_boot)
HXDLIN( 517)		structure = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_2f0b51a29d129e3b_518_boot)
HXDLIN( 518)		bufferSize = 100;
            	}
}

} // end namespace kha
} // end namespace graphics4
