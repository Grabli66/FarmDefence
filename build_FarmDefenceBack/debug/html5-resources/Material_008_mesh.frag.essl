#version 100
precision mediump float;
precision highp int;

uniform highp vec4 shirr[7];
uniform highp sampler2D ImageTexture;
uniform highp vec3 lightPos;
uniform int lightType;
uniform highp vec3 lightDir;
uniform bool receiveShadow;
uniform int lightShadow;
uniform highp sampler2D shadowMap;
uniform highp float shadowsBias;
uniform highp samplerCube shadowMapCube;
uniform highp vec2 lightProj;
uniform highp vec2 spotlightData;
uniform highp vec3 backgroundCol;
uniform highp float envmapStrength;
uniform highp vec3 lightColor;

varying highp vec3 wnormal;
varying highp vec2 texCoord;
varying highp vec3 eyeDir;
varying highp vec3 wposition;
varying highp vec4 lightPosition;

highp float attenuate(highp float dist)
{
    return 1.0 / (dist * dist);
}

highp float shadowCompare(highp sampler2D shadowMap_1, highp vec2 uv, highp float compare)
{
    highp float depth = texture2D(shadowMap_1, uv).x;
    return step(compare, depth);
}

highp float shadowLerp(highp sampler2D shadowMap_1, highp vec2 uv, highp float compare, highp vec2 smSize)
{
    highp vec2 texelSize = vec2(1.0) / smSize;
    highp vec2 f = fract((uv * smSize) + vec2(0.5));
    highp vec2 centroidUV = floor((uv * smSize) + vec2(0.5)) / smSize;
    highp float lb = shadowCompare(shadowMap_1, centroidUV, compare);
    highp float lt = shadowCompare(shadowMap_1, centroidUV + (texelSize * vec2(0.0, 1.0)), compare);
    highp float rb = shadowCompare(shadowMap_1, centroidUV + (texelSize * vec2(1.0, 0.0)), compare);
    highp float rt = shadowCompare(shadowMap_1, centroidUV + texelSize, compare);
    highp float a = mix(lb, lt, f.y);
    highp float b = mix(rb, rt, f.y);
    highp float c = mix(a, b, f.x);
    return c;
}

highp float PCF(highp sampler2D shadowMap_1, highp vec2 uv, highp float compare, highp vec2 smSize)
{
    highp float result = shadowLerp(shadowMap_1, uv + (vec2(-1.0) / smSize), compare, smSize);
    result += shadowLerp(shadowMap_1, uv + (vec2(-1.0, 0.0) / smSize), compare, smSize);
    result += shadowLerp(shadowMap_1, uv + (vec2(-1.0, 1.0) / smSize), compare, smSize);
    result += shadowLerp(shadowMap_1, uv + (vec2(0.0, -1.0) / smSize), compare, smSize);
    result += shadowLerp(shadowMap_1, uv, compare, smSize);
    result += shadowLerp(shadowMap_1, uv + (vec2(0.0, 1.0) / smSize), compare, smSize);
    result += shadowLerp(shadowMap_1, uv + (vec2(1.0, -1.0) / smSize), compare, smSize);
    result += shadowLerp(shadowMap_1, uv + (vec2(1.0, 0.0) / smSize), compare, smSize);
    result += shadowLerp(shadowMap_1, uv + (vec2(1.0) / smSize), compare, smSize);
    return result / 9.0;
}

highp float lpToDepth(inout highp vec3 lp, highp vec2 lightProj_1)
{
    lp = abs(lp);
    highp float zcomp = max(lp.x, max(lp.y, lp.z));
    zcomp = lightProj_1.x - (lightProj_1.y / zcomp);
    return (zcomp * 0.5) + 0.5;
}

highp float PCFCube(highp samplerCube shadowMapCube_1, highp vec3 lp, inout highp vec3 ml, highp float bias, highp vec2 lightProj_1, highp vec3 n)
{
    highp vec3 param = lp - (n * 0.0030000000260770320892333984375);
    highp float _482 = lpToDepth(param, lightProj_1);
    highp float compare = _482 - (bias * 0.4000000059604644775390625);
    ml += (n * 0.0030000000260770320892333984375);
    highp float result = step(compare, textureCube(shadowMapCube_1, ml).x);
    result += step(compare, textureCube(shadowMapCube_1, ml + vec3(0.001000000047497451305389404296875)).x);
    result += step(compare, textureCube(shadowMapCube_1, ml + vec3(-0.001000000047497451305389404296875, 0.001000000047497451305389404296875, 0.001000000047497451305389404296875)).x);
    result += step(compare, textureCube(shadowMapCube_1, ml + vec3(0.001000000047497451305389404296875, -0.001000000047497451305389404296875, 0.001000000047497451305389404296875)).x);
    result += step(compare, textureCube(shadowMapCube_1, ml + vec3(0.001000000047497451305389404296875, 0.001000000047497451305389404296875, -0.001000000047497451305389404296875)).x);
    result += step(compare, textureCube(shadowMapCube_1, ml + vec3(-0.001000000047497451305389404296875, -0.001000000047497451305389404296875, 0.001000000047497451305389404296875)).x);
    result += step(compare, textureCube(shadowMapCube_1, ml + vec3(0.001000000047497451305389404296875, -0.001000000047497451305389404296875, -0.001000000047497451305389404296875)).x);
    result += step(compare, textureCube(shadowMapCube_1, ml + vec3(-0.001000000047497451305389404296875, 0.001000000047497451305389404296875, -0.001000000047497451305389404296875)).x);
    result += step(compare, textureCube(shadowMapCube_1, ml + vec3(-0.001000000047497451305389404296875)).x);
    result /= 9.0;
    return result;
}

highp vec3 surfaceAlbedo(highp vec3 baseColor, highp float metalness)
{
    return mix(baseColor, vec3(0.0), vec3(metalness));
}

highp vec3 surfaceF0(highp vec3 baseColor, highp float metalness)
{
    return mix(vec3(0.039999999105930328369140625), baseColor, vec3(metalness));
}

highp vec3 lambertDiffuseBRDF(highp vec3 albedo, highp float nl)
{
    return albedo * max(0.0, nl);
}

highp float d_ggx(highp float nh, highp float a)
{
    highp float a2 = a * a;
    highp float denom = pow(((nh * nh) * (a2 - 1.0)) + 1.0, 2.0);
    return (a2 * 0.3183098733425140380859375) / denom;
}

highp float v_smithschlick(highp float nl, highp float nv, highp float a)
{
    return 1.0 / (((nl * (1.0 - a)) + a) * ((nv * (1.0 - a)) + a));
}

highp vec3 f_schlick(highp vec3 f0, highp float vh)
{
    return f0 + ((vec3(1.0) - f0) * exp2((((-5.554729938507080078125) * vh) - 6.9831600189208984375) * vh));
}

highp vec3 specularBRDF(highp vec3 f0, highp float roughness, highp float nl, highp float nh, highp float nv, highp float vh)
{
    highp float a = roughness * roughness;
    return (f_schlick(f0, vh) * (d_ggx(nh, a) * clamp(v_smithschlick(nl, nv, a), 0.0, 1.0))) / vec3(4.0);
}

highp vec3 shIrradiance(highp vec3 nor)
{
    highp vec3 cl00 = vec3(shirr[0].x, shirr[0].y, shirr[0].z);
    highp vec3 cl1m1 = vec3(shirr[0].w, shirr[1].x, shirr[1].y);
    highp vec3 cl10 = vec3(shirr[1].z, shirr[1].w, shirr[2].x);
    highp vec3 cl11 = vec3(shirr[2].y, shirr[2].z, shirr[2].w);
    highp vec3 cl2m2 = vec3(shirr[3].x, shirr[3].y, shirr[3].z);
    highp vec3 cl2m1 = vec3(shirr[3].w, shirr[4].x, shirr[4].y);
    highp vec3 cl20 = vec3(shirr[4].z, shirr[4].w, shirr[5].x);
    highp vec3 cl21 = vec3(shirr[5].y, shirr[5].z, shirr[5].w);
    highp vec3 cl22 = vec3(shirr[6].x, shirr[6].y, shirr[6].z);
    return ((((((((((cl22 * 0.429042994976043701171875) * ((nor.y * nor.y) - ((-nor.z) * (-nor.z)))) + (((cl20 * 0.743125021457672119140625) * nor.x) * nor.x)) + (cl00 * 0.88622701168060302734375)) - (cl20 * 0.2477079927921295166015625)) + (((cl2m2 * 0.85808598995208740234375) * nor.y) * (-nor.z))) + (((cl21 * 0.85808598995208740234375) * nor.y) * nor.x)) + (((cl2m1 * 0.85808598995208740234375) * (-nor.z)) * nor.x)) + ((cl11 * 1.02332794666290283203125) * nor.y)) + ((cl1m1 * 1.02332794666290283203125) * (-nor.z))) + ((cl10 * 1.02332794666290283203125) * nor.x);
}

highp vec3 tonemapFilmic(highp vec3 color)
{
    highp vec3 x = max(vec3(0.0), color - vec3(0.0040000001899898052215576171875));
    return (x * ((x * 6.19999980926513671875) + vec3(0.5))) / ((x * ((x * 6.19999980926513671875) + vec3(1.7000000476837158203125))) + vec3(0.0599999986588954925537109375));
}

void main()
{
    highp vec3 n = normalize(wnormal);
    highp vec4 ImageTexture_store = texture2D(ImageTexture, texCoord);
    highp vec3 _625 = pow(ImageTexture_store.xyz, vec3(2.2000000476837158203125));
    ImageTexture_store = vec4(_625.x, _625.y, _625.z, ImageTexture_store.w);
    highp vec3 vVec = normalize(eyeDir);
    highp float dotNV = max(dot(n, vVec), 0.0);
    highp vec3 ImageTexture_Color_res = ImageTexture_store.xyz;
    highp vec3 basecol = ImageTexture_Color_res;
    highp float roughness = 0.0;
    highp float metallic = 0.0;
    highp float occlusion = 1.0;
    highp float specular = 0.0;
    highp float visibility = 1.0;
    highp vec3 lp = lightPos - wposition;
    highp vec3 l;
    if (lightType == 0)
    {
        l = lightDir;
    }
    else
    {
        l = normalize(lp);
        visibility *= attenuate(distance(wposition, lightPos));
    }
    highp vec3 h = normalize(vVec + l);
    highp float dotNL = dot(n, l);
    highp float dotNH = dot(n, h);
    highp float dotVH = dot(vVec, h);
    if (receiveShadow)
    {
        if (lightShadow == 1)
        {
            highp vec3 lPos = lightPosition.xyz / vec3(lightPosition.w);
            visibility *= PCF(shadowMap, lPos.xy, lPos.z - shadowsBias, vec2(1024.0));
        }
        else
        {
            if (lightShadow == 2)
            {
                highp vec3 param = -l;
                highp float _738 = PCFCube(shadowMapCube, lp, param, shadowsBias, lightProj, n);
                visibility *= _738;
            }
        }
    }
    if (lightType == 2)
    {
        highp float spotEffect = dot(lightDir, l);
        if (spotEffect < spotlightData.x)
        {
            visibility *= smoothstep(spotlightData.y, spotlightData.x, spotEffect);
        }
    }
    highp vec3 albedo = surfaceAlbedo(basecol, metallic);
    highp vec3 f0 = surfaceF0(basecol, metallic);
    highp vec3 direct = lambertDiffuseBRDF(albedo, dotNL);
    direct += (specularBRDF(f0, roughness, dotNL, dotNH, dotNV, dotVH) * specular);
    highp vec3 indirect = shIrradiance(n);
    indirect *= albedo;
    indirect += (backgroundCol * f0);
    indirect *= envmapStrength;
    gl_FragData[0] = vec4(((direct * lightColor) * visibility) + (indirect * occlusion), 1.0);
    highp vec3 _821 = tonemapFilmic(gl_FragData[0].xyz);
    gl_FragData[0] = vec4(_821.x, _821.y, _821.z, gl_FragData[0].w);
}

